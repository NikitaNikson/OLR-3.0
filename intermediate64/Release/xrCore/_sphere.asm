; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@AEBU2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@AEBU2@@Z ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> const & __ptr64>
PUBLIC	?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode
PUBLIC	?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Insert
PUBLIC	?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::push_back
PUBLIC	?end@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::end
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
PUBLIC	?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::erase
PUBLIC	?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::erase
PUBLIC	?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same
PUBLIC	??$?8U?$_vector3@M@@U0@@@YA_NAEBV?$xalloc@U?$_vector3@M@@@@0@Z ; operator==<_vector3<float>,_vector3<float> >
PUBLIC	?_Make_iter@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Make_iter
PUBLIC	??F?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator--
PUBLIC	?max_size@?$xalloc@U?$_vector3@M@@@@QEBA_KXZ	; xalloc<_vector3<float> >::max_size
PUBLIC	?max_size@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA_KXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::max_size
PUBLIC	?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Incsize
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_Mynode
PUBLIC	??$addressof@U?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@AEAU1@@Z ; std::addressof<_vector3<float> >
PUBLIC	??$forward@AEBU?$_vector3@M@@@std@@YAAEBU?$_vector3@M@@AEBU1@@Z ; std::forward<_vector3<float> const & __ptr64>
PUBLIC	??$_Construct@U?$_vector3@M@@AEBU1@@std@@YAXPEAU?$_vector3@M@@AEBU1@@Z ; std::_Construct<_vector3<float>,_vector3<float> const & __ptr64>
PUBLIC	?construct@?$xalloc@U?$_vector3@M@@@@QEAAXPEAU?$_vector3@M@@AEBU2@@Z ; xalloc<_vector3<float> >::construct
PUBLIC	??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z ; std::forward<_vector3<float> >
PUBLIC	??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> >
PUBLIC	??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >
PUBLIC	??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Insert_rv<_vector3<float> >
PUBLIC	??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::emplace<_vector3<float> >
PUBLIC	??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::insert<_vector3<float> >
PUBLIC	?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice
PUBLIC	?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::splice
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
PUBLIC	?begin@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::begin
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator!=
PUBLIC	?_Myval@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAU?$_vector3@M@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Myval
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEBU?$_vector3@M@@XZ ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator*
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEAU?$_vector3@M@@XZ ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
PUBLIC	?size@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA_KXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::size
PUBLIC	?size@?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEBAIXZ ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::size
PUBLIC	?end@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA?AV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::end
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
PUBLIC	?begin@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA?AV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::begin
PUBLIC	?set@?$_vector3@M@@QEAAAEAU1@MMM@Z		; _vector3<float>::set
PUBLIC	??A?$_vector3@M@@QEAAAEAMH@Z			; _vector3<float>::operator[]
PUBLIC	?sub@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z		; _vector3<float>::sub
PUBLIC	?mad@?$_vector3@M@@QEAAAEAU1@AEBU1@0M@Z		; _vector3<float>::mad
PUBLIC	?square_magnitude@?$_vector3@M@@QEBAMXZ		; _vector3<float>::square_magnitude
PUBLIC	?dotproduct@?$_vector3@M@@QEBAMAEBU1@@Z		; _vector3<float>::dotproduct
PUBLIC	?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z	; _vector3<float>::distance_to_sqr
PUBLIC	?set@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z		; _vector3<float>::set
PUBLIC	??0?$xalloc@U?$_vector3@M@@@@QEAA@XZ		; xalloc<_vector3<float> >::xalloc<_vector3<float> >
PUBLIC	??0?$xalloc@U?$_vector3@M@@@@QEAA@AEBV0@@Z	; xalloc<_vector3<float> >::xalloc<_vector3<float> >
PUBLIC	??$?0U?$_vector3@M@@@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAA@AEBV?$xalloc@U?$_vector3@M@@@@@Z ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node><_vector3<float> >
PUBLIC	??0?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z ; std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_List_nod<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??$xr_alloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@I@Z ; xr_alloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
PUBLIC	?allocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_KPEBX@Z ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::allocate
PUBLIC	??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_List_val<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::list<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::xr_list<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
PUBLIC	??0Miniball@@QEAA@XZ				; Miniball::Miniball
PUBLIC	??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::~_List_val<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
PUBLIC	?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::deallocate
PUBLIC	?_Nextnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Prevnode
PUBLIC	??$_Destroy@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z ; std::_Destroy<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
PUBLIC	?destroy@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::destroy
PUBLIC	??$_Dest_val@V?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXAEAV?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z ; std::_Dest_val<xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>,std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
PUBLIC	?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear
PUBLIC	?_Tidy@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Tidy
PUBLIC	??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::~list<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::~xr_list<_vector3<float>,xalloc<_vector3<float> > >
PUBLIC	??1Miniball@@QEAA@XZ				; Miniball::~Miniball
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z
_TEXT	SEGMENT
??$_Destroy@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z PROC ; std::_Destroy<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	ret	0
??$_Destroy@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AEBU?$_vector3@M@@@std@@YAAEBU?$_vector3@M@@AEBU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBU?$_vector3@M@@@std@@YAAEBU?$_vector3@M@@AEBU1@@Z PROC ; std::forward<_vector3<float> const & __ptr64>, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@AEBU?$_vector3@M@@@std@@YAAEBU?$_vector3@M@@AEBU1@@Z ENDP ; std::forward<_vector3<float> const & __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z PROC ; std::forward<_vector3<float> >, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z ENDP ; std::forward<_vector3<float> >
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?destroy@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
_TEXT	SEGMENT
?destroy@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z PROC ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::destroy, COMDAT

; 85   : 							void					destroy			(pointer p)								{	std::_Destroy(p);			}

	ret	0
?destroy@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ENDP ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$_vector3@M@@@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAA@AEBV?$xalloc@U?$_vector3@M@@@@@Z
_TEXT	SEGMENT
this$ = 8
??$?0U?$_vector3@M@@@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAA@AEBV?$xalloc@U?$_vector3@M@@@@@Z PROC ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node><_vector3<float> >, COMDAT

; 78   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	mov	rax, rcx
	ret	0
??$?0U?$_vector3@M@@@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEAA@AEBV?$xalloc@U?$_vector3@M@@@@@Z ENDP ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node><_vector3<float> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@U?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@AEAU1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@U?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@AEAU1@@Z PROC ; std::addressof<_vector3<float> >, COMDAT

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	rax, rcx

; 112  : 	}

	ret	0
??$addressof@U?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@AEAU1@@Z ENDP ; std::addressof<_vector3<float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Dest_val@V?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXAEAV?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z
_TEXT	SEGMENT
??$_Dest_val@V?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXAEAV?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z PROC ; std::_Dest_val<xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>,std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

	ret	0
??$_Dest_val@V?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@YAXAEAV?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@0@@Z ENDP ; std::_Dest_val<xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>,std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$?8U?$_vector3@M@@U0@@@YA_NAEBV?$xalloc@U?$_vector3@M@@@@0@Z
_TEXT	SEGMENT
??$?8U?$_vector3@M@@U0@@@YA_NAEBV?$xalloc@U?$_vector3@M@@@@0@Z PROC ; operator==<_vector3<float>,_vector3<float> >, COMDAT

; 100  : template<class _Ty,	class _Other>	inline	bool operator==(const xalloc<_Ty>&, const xalloc<_Other>&)		{	return (true);							}

	mov	al, 1
	ret	0
??$?8U?$_vector3@M@@U0@@@YA_NAEBV?$xalloc@U?$_vector3@M@@@@0@Z ENDP ; operator==<_vector3<float>,_vector3<float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?max_size@?$xalloc@U?$_vector3@M@@@@QEBA_KXZ
_TEXT	SEGMENT
?max_size@?$xalloc@U?$_vector3@M@@@@QEBA_KXZ PROC	; xalloc<_vector3<float> >::max_size, COMDAT

; 86   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	rax, 1537228672809129301		; 1555555555555555H
	ret	0
?max_size@?$xalloc@U?$_vector3@M@@@@QEBA_KXZ ENDP	; xalloc<_vector3<float> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
_TEXT	ENDS
;	COMDAT ?max_size@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA_KXZ
_TEXT	SEGMENT
?max_size@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA_KXZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::max_size, COMDAT

; 882  : 		return (this->_Alval.max_size());

	mov	rax, 1537228672809129301		; 1555555555555555H

; 883  : 		}

	ret	0
?max_size@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA_KXZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_Mynode, COMDAT

; 93   : 		return (_Ptr);

	mov	rax, QWORD PTR [rcx]

; 94   : 		}

	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>, COMDAT

; 36   : 		{	// construct with null node pointer

	mov	QWORD PTR [rcx], 0

; 37   : 		}

	mov	rax, rcx
	ret	0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Myval@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAU?$_vector3@M@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Myval@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAU?$_vector3@M@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@@Z PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Myval, COMDAT

; 571  : 		return ((reference)(*_Pnode)._Myval);

	lea	rax, QWORD PTR [rcx+16]

; 572  : 		}

	ret	0
?_Myval@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAU?$_vector3@M@@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@@Z ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Myval
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Prevnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Prevnode, COMDAT

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

	lea	rax, QWORD PTR [rcx+8]

; 567  : 		}

	ret	0
?_Prevnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Prevnode
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD imagerel $LN9
	DD	imagerel $LN9+54
	DD	imagerel $unwind$?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Incsize, COMDAT

; 1519 : 		{	// alter element count, with checking

$LN9:
	sub	rsp, 40					; 00000028H

; 1520 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	rdx, QWORD PTR [rcx+8]
	mov	rax, 1537228672809129300		; 1555555555555554H
	sub	rax, rdx
	cmp	rax, 1
	jae	SHORT $LN1@Incsize

; 1521 : 			_Xlength_error("list<T> too long");

	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN1@Incsize:

; 1522 : 		this->_Mysize += _Count;

	lea	rax, QWORD PTR [rdx+1]
	mov	QWORD PTR [rcx+8], rax

; 1523 : 		}

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Incsize:
?_Incsize@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Incsize
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$_vector3@M@@@@QEAA@AEBV0@@Z
_TEXT	SEGMENT
this$ = 8
??0?$xalloc@U?$_vector3@M@@@@QEAA@AEBV0@@Z PROC		; xalloc<_vector3<float> >::xalloc<_vector3<float> >, COMDAT

; 77   : 													xalloc			(const xalloc<T>&)						{	}

	mov	rax, rcx
	ret	0
??0?$xalloc@U?$_vector3@M@@@@QEAA@AEBV0@@Z ENDP		; xalloc<_vector3<float> >::xalloc<_vector3<float> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEBU?$_vector3@M@@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEBU?$_vector3@M@@XZ PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator*, COMDAT

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

	mov	rax, QWORD PTR [rcx]
	add	rax, 16

; 218  : 		}

	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEBU?$_vector3@M@@XZ ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >, COMDAT

; 179  : 		{	// construct with null node pointer

	mov	QWORD PTR [rcx], 0

; 180  : 		}

	mov	rax, rcx
	ret	0
??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z
_TEXT	SEGMENT
_Pnode$ = 8
?_Nextnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Nextnode, COMDAT

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

	mov	rax, rcx

; 562  : 		}

	ret	0
?_Nextnode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@SAAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@@Z ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$_vector3@M@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$xalloc@U?$_vector3@M@@@@QEAA@XZ PROC		; xalloc<_vector3<float> >::xalloc<_vector3<float> >, COMDAT

; 76   : 													xalloc			()										{	}

	mov	rax, rcx
	ret	0
??0?$xalloc@U?$_vector3@M@@@@QEAA@XZ ENDP		; xalloc<_vector3<float> >::xalloc<_vector3<float> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator==, COMDAT

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rdx
	sete	al

; 296  : 		}

	ret	0
??8?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEAU?$_vector3@M@@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEAU?$_vector3@M@@XZ PROC ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator*, COMDAT

; 360  : 		return ((reference)**(_Mybase *)this);

	mov	rax, QWORD PTR [rcx]
	add	rax, 16

; 361  : 		}

	ret	0
??D?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAAEAU?$_vector3@M@@XZ ENDP ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ PROC ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >, COMDAT

; 336  : 	_List_iterator()

	mov	QWORD PTR [rcx], 0

; 337  : 		{	// construct with null node
; 338  : 		}

	mov	rax, rcx
	ret	0
??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ENDP ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z PROC	; _vector3<float>::distance_to_sqr, COMDAT

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	movss	xmm2, DWORD PTR [rcx+4]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, DWORD PTR [rdx]
	subss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm0, xmm0
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm0, xmm2
	addss	xmm0, xmm1
	ret	0
?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z ENDP	; _vector3<float>::distance_to_sqr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?dotproduct@?$_vector3@M@@QEBAMAEBU1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
?dotproduct@?$_vector3@M@@QEBAMAEBU1@@Z PROC		; _vector3<float>::dotproduct, COMDAT

; 268  : 	{	return x*v.x + y*v.y + z*v.z; }

	movss	xmm0, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR [rdx+8]
	mulss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm1, DWORD PTR [rcx]
	mulss	xmm2, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	ret	0
?dotproduct@?$_vector3@M@@QEBAMAEBU1@@Z ENDP		; _vector3<float>::dotproduct
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?square_magnitude@?$_vector3@M@@QEBAMXZ
_TEXT	SEGMENT
this$ = 8
?square_magnitude@?$_vector3@M@@QEBAMXZ PROC		; _vector3<float>::square_magnitude, COMDAT

; 167  : 		return x*x + y*y + z*z;

	movss	xmm1, DWORD PTR [rcx+4]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm2, DWORD PTR [rcx+8]
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	mulss	xmm2, xmm2
	addss	xmm0, xmm1
	addss	xmm0, xmm2

; 168  : 	}

	ret	0
?square_magnitude@?$_vector3@M@@QEBAMXZ ENDP		; _vector3<float>::square_magnitude
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?mad@?$_vector3@M@@QEAAAEAU1@AEBU1@0M@Z
_TEXT	SEGMENT
this$ = 8
p$ = 16
d$ = 24
m$ = 32
?mad@?$_vector3@M@@QEAAAEAU1@AEBU1@0M@Z PROC		; _vector3<float>::mad, COMDAT

; 144  : 		x = p.x + d.x*m;

	movaps	xmm0, xmm3

; 145  : 		y = p.y + d.y*m;

	movaps	xmm1, xmm3

; 146  : 		z = p.z + d.z*m;
; 147  : 		return *this;	

	mov	rax, rcx
	mulss	xmm0, DWORD PTR [r8]
	addss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx], xmm0
	mulss	xmm1, DWORD PTR [r8+4]
	addss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+4], xmm1
	mulss	xmm3, DWORD PTR [r8+8]
	addss	xmm3, DWORD PTR [rdx+8]
	movss	DWORD PTR [rcx+8], xmm3

; 148  : 	}

	ret	0
?mad@?$_vector3@M@@QEAAAEAU1@AEBU1@0M@Z ENDP		; _vector3<float>::mad
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sub@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
v$ = 24
?sub@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z PROC		; _vector3<float>::sub, COMDAT

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	subss	xmm0, DWORD PTR [r8]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
?sub@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z ENDP		; _vector3<float>::sub
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?set@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
?set@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z PROC		; _vector3<float>::set, COMDAT

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, rcx
	ret	0
?set@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z ENDP		; _vector3<float>::set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?set@?$_vector3@M@@QEAAAEAU1@MMM@Z
_TEXT	SEGMENT
this$ = 8
_z$ = 16
?set@?$_vector3@M@@QEAAAEAU1@MMM@Z PROC			; _vector3<float>::set, COMDAT

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	xor	eax, eax
	movss	DWORD PTR [rcx+8], xmm1
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
?set@?$_vector3@M@@QEAAAEAU1@MMM@Z ENDP			; _vector3<float>::set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$_vector3@M@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$_vector3@M@@QEAAAEAMH@Z PROC			; _vector3<float>::operator[], COMDAT

; 20   : 	ICF	T&			operator[] (int i)					{ return *((T*)this + i); }

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]
	ret	0
??A?$_vector3@M@@QEAAAEAMH@Z ENDP			; _vector3<float>::operator[]
_TEXT	ENDS
PUBLIC	__real@3f000000
PUBLIC	__real@24e69595
PUBLIC	__mask@@NegFloat@
PUBLIC	__real@40000000
PUBLIC	?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z		; Basis::push
pdata	SEGMENT
$pdata$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z DD imagerel $LN34
	DD	imagerel $LN34+86
	DD	imagerel $unwind$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z
$pdata$0$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z DD imagerel $LN34+86
	DD	imagerel $LN34+317
	DD	imagerel $chain$0$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z
$pdata$1$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z DD imagerel $LN34+317
	DD	imagerel $LN34+876
	DD	imagerel $chain$1$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z DD 010201H
	DD	07002H
$chain$0$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z DD 020521H
	DD	023405H
	DD	imagerel $LN34
	DD	imagerel $LN34+86
	DD	imagerel $unwind$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z
$chain$1$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z DD 021H
	DD	imagerel $LN34
	DD	imagerel $LN34+86
	DD	imagerel $unwind$?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@24e69595
CONST	SEGMENT
__real@24e69595 DD 024e69595r			; 1e-016
CONST	ENDS
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_sphere.cpp
CONST	ENDS
_TEXT	SEGMENT
this$ = 16
p$ = 24
?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z PROC		; Basis::push

; 273  : {

$LN34:
	push	rdi

; 274  : 	if (m==0)

	movsxd	rax, DWORD PTR [rcx+4]
	mov	rdi, rdx
	mov	r9, rcx
	test	eax, eax
	jne	SHORT $LN9@push

; 275  : 	{
; 276  : 		q0 = p;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+12], rax
	mov	eax, DWORD PTR [rdx+8]

; 277  : 		c[0] = q0;
; 278  : 		sqr_r[0] = 0;

	mov	DWORD PTR [rcx+200], 0
	mov	DWORD PTR [rcx+20], eax
	mov	rax, QWORD PTR [rcx+12]
	mov	QWORD PTR [rcx+152], rax
	mov	eax, DWORD PTR [rcx+20]
	mov	DWORD PTR [rcx+160], eax

; 279  : 	}
; 280  : 	else

	jmp	$LN8@push
$LN9@push:

; 281  : 	{
; 282  : 		int i;
; 283  : 		const float eps = 1e-16f;
; 284  : 
; 285  : 		// set v_m to Q_m
; 286  : 		v[m].sub(p,q0);

	movss	xmm0, DWORD PTR [rdx]

; 287  : 
; 288  : 		// compute the a_{m,i}, i< m
; 289  : 		for (i=1; i<m; ++i)

	movss	xmm3, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	r10d, 1
	mov	QWORD PTR [rsp+16], rbx
	mov	ebx, r10d
	mov	r8d, r10d
	subss	xmm0, DWORD PTR [r9+12]
	movss	DWORD PTR [r9+rcx*4+56], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [r9+16]
	movss	DWORD PTR [r9+rcx*4+60], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [r9+20]
	movss	DWORD PTR [r9+rcx*4+64], xmm0
	cmp	DWORD PTR [r9+4], ebx
	jle	$LN5@push

; 281  : 	{
; 282  : 		int i;
; 283  : 		const float eps = 1e-16f;
; 284  : 
; 285  : 		// set v_m to Q_m
; 286  : 		v[m].sub(p,q0);

	lea	r11, QWORD PTR [r9+28]
	lea	rdx, QWORD PTR [r9+76]
	npad	12
$LL7@push:

; 290  : 		{
; 291  : 			a[m][i] =  v[i].dotproduct(v[m]);

	movsxd	rcx, DWORD PTR [r9+4]
	movss	xmm0, DWORD PTR [rdx-8]
	movss	xmm2, DWORD PTR [rdx-4]
	inc	ebx
	add	r11, 4
	add	rdx, 12
	lea	rax, QWORD PTR [rcx+rcx*2]
	mulss	xmm0, DWORD PTR [r9+rax*4+56]
	mulss	xmm2, DWORD PTR [r9+rax*4+60]
	movss	xmm1, DWORD PTR [r9+rax*4+64]
	lea	rax, QWORD PTR [r8+rcx*2]
	add	rcx, rax
	addss	xmm2, xmm0

; 292  : 			a[m][i] *= (2.f/z[i]);

	movaps	xmm0, xmm3
	mulss	xmm1, DWORD PTR [rdx-12]
	addss	xmm2, xmm1
	movss	DWORD PTR [r9+rcx*4+104], xmm2
	divss	xmm0, DWORD PTR [r11-4]
	movsxd	rcx, DWORD PTR [r9+4]
	lea	rax, QWORD PTR [r8+rcx*2]
	inc	r8
	add	rcx, rax
	mulss	xmm0, DWORD PTR [r9+rcx*4+104]
	movss	DWORD PTR [r9+rcx*4+104], xmm0
	cmp	ebx, DWORD PTR [r9+4]
	jl	SHORT $LL7@push
$LN5@push:

; 293  : 		}
; 294  : 
; 295  : 		// update v_m to Q_m-\bar{Q}_m
; 296  : 		for (i=1; i<m; ++i)

	movss	xmm4, DWORD PTR __mask@@NegFloat@
	mov	rbx, QWORD PTR [rsp+16]
	mov	r11, r10
	cmp	DWORD PTR [r9+4], r10d
	jle	SHORT $LN2@push
	lea	r8, QWORD PTR [r9+76]
$LL4@push:

; 297  : 		{
; 298  : 			v[m].mad(v[m],v[i],-a[m][i]);

	movsxd	rdx, DWORD PTR [r9+4]
	inc	r10d
	add	r8, 12
	lea	rax, QWORD PTR [r11+rdx*2]
	inc	r11
	lea	rcx, QWORD PTR [rdx+rax]
	lea	rax, QWORD PTR [rdx+rdx*2]
	movss	xmm2, DWORD PTR [r9+rcx*4+104]
	xorps	xmm2, xmm4
	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [r8-20]
	addss	xmm0, DWORD PTR [r9+rax*4+56]
	movss	DWORD PTR [r9+rax*4+56], xmm0
	mulss	xmm1, DWORD PTR [r8-16]
	addss	xmm1, DWORD PTR [r9+rax*4+60]
	movss	DWORD PTR [r9+rax*4+60], xmm1
	mulss	xmm2, DWORD PTR [r8-12]
	addss	xmm2, DWORD PTR [r9+rax*4+64]
	movss	DWORD PTR [r9+rax*4+64], xmm2
	cmp	r10d, DWORD PTR [r9+4]
	jl	SHORT $LL4@push
$LN2@push:

; 299  : 		}
; 300  : 
; 301  : 		// compute z_m
; 302  : 		z[m]=0;

	movsxd	rax, DWORD PTR [r9+4]
	mov	DWORD PTR [r9+rax*4+24], 0

; 303  : 		z[m] += v[m].square_magnitude();

	movsxd	rcx, DWORD PTR [r9+4]
	lea	rax, QWORD PTR [rcx+rcx*2]
	movss	xmm0, DWORD PTR [r9+rax*4+60]
	movss	xmm2, DWORD PTR [r9+rax*4+56]
	movss	xmm1, DWORD PTR [r9+rax*4+64]
	mulss	xmm0, xmm0
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm0
	addss	xmm2, xmm1
	addss	xmm2, DWORD PTR [r9+rcx*4+24]
	movss	DWORD PTR [r9+rcx*4+24], xmm2

; 304  : 		z[m]*=2;

	movsxd	rax, DWORD PTR [r9+4]
	movss	xmm0, DWORD PTR [r9+rax*4+24]
	mulss	xmm0, xmm3
	movss	DWORD PTR [r9+rax*4+24], xmm0

; 305  : 
; 306  : 		// reject push if z_m too small
; 307  : 		if (z[m]<eps*current_sqr_r)

	movsxd	rax, DWORD PTR [r9+4]
	movss	xmm0, DWORD PTR [r9+224]
	mov	rdx, rax
	movss	xmm2, DWORD PTR [r9+rax*4+24]
	mulss	xmm0, DWORD PTR __real@24e69595
	comiss	xmm2, xmm0
	jae	SHORT $LN1@push

; 308  : 		{
; 309  : 			return false;

	xor	al, al

; 327  : }

	pop	rdi
	ret	0
$LN1@push:

; 310  : 		}
; 311  : 
; 312  : 		// update c, sqr_r
; 313  : 		float e = -sqr_r[m-1];
; 314  : 		e += p.distance_to_sqr(c[m-1]);

	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm3, DWORD PTR [rdi]
	movss	xmm0, DWORD PTR [rdi+8]
	dec	eax
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rcx+rcx*2]
	subss	xmm3, DWORD PTR [r9+rax*4+152]
	subss	xmm0, DWORD PTR [r9+rax*4+160]
	subss	xmm1, DWORD PTR [r9+rax*4+156]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm1, xmm1
	addss	xmm3, xmm1
	addss	xmm3, xmm0
	movss	xmm0, DWORD PTR [r9+rdx*4+196]
	xorps	xmm0, xmm4
	addss	xmm3, xmm0

; 315  : 
; 316  : 		f[m]=e/z[m];

	movaps	xmm0, xmm3
	divss	xmm0, xmm2
	movss	DWORD PTR [r9+rdx*4+40], xmm0

; 317  : 
; 318  : 		c[m].mad(c[m-1],v[m],f[m]);

	movsxd	rcx, DWORD PTR [r9+4]
	movss	xmm2, DWORD PTR [r9+rcx*4+40]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	lea	eax, DWORD PTR [rcx-1]
	movsxd	rcx, eax
	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [r9+rdx*4+56]
	lea	rax, QWORD PTR [rcx+rcx*2]
	addss	xmm0, DWORD PTR [r9+rax*4+152]
	movss	DWORD PTR [r9+rdx*4+152], xmm0
	mulss	xmm1, DWORD PTR [r9+rdx*4+60]
	addss	xmm1, DWORD PTR [r9+rax*4+156]
	movss	DWORD PTR [r9+rdx*4+156], xmm1
	mulss	xmm2, DWORD PTR [r9+rdx*4+64]
	addss	xmm2, DWORD PTR [r9+rax*4+160]
	movss	DWORD PTR [r9+rdx*4+160], xmm2

; 319  : 
; 320  : 		sqr_r[m] = sqr_r[m-1] + e*f[m]/2;

	movsxd	rax, DWORD PTR [r9+4]
	mulss	xmm3, DWORD PTR [r9+rax*4+40]
	mulss	xmm3, DWORD PTR __real@3f000000
	addss	xmm3, DWORD PTR [r9+rax*4+196]
	movss	DWORD PTR [r9+rax*4+200], xmm3
$LN8@push:

; 321  : 	}
; 322  : 
; 323  : 	current_c = c+m;

	movsxd	r8, DWORD PTR [r9+4]
	lea	rax, QWORD PTR [r8+r8*2]
	lea	rcx, QWORD PTR [r9+rax*4+152]
	mov	QWORD PTR [r9+216], rcx

; 324  : 	current_sqr_r = sqr_r[m];

	mov	eax, DWORD PTR [r9+r8*4+200]
	mov	DWORD PTR [r9+224], eax

; 325  : 	s = ++m;

	lea	eax, DWORD PTR [r8+1]
	mov	DWORD PTR [r9+4], eax
	mov	DWORD PTR [r9+8], eax

; 326  : 	return true;

	mov	al, 1

; 327  : }

	pop	rdi
	ret	0
?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z ENDP		; Basis::push
_TEXT	ENDS
PUBLIC	?pop@Basis@@QEAAXXZ				; Basis::pop
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?pop@Basis@@QEAAXXZ PROC				; Basis::pop

; 269  : 	--m;

	dec	DWORD PTR [rcx+4]

; 270  : }

	ret	0
?pop@Basis@@QEAAXXZ ENDP				; Basis::pop
_TEXT	ENDS
PUBLIC	?reset@Basis@@QEAAXXZ				; Basis::reset
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?reset@Basis@@QEAAXXZ PROC				; Basis::reset

; 253  : 	m = s = 0;
; 254  : 	// we misuse c[0] for the center of the empty sphere
; 255  : 	c[0].set(0,0,0);

	lea	rax, QWORD PTR [rcx+152]
	xor	edx, edx
	mov	QWORD PTR [rcx+4], rdx
	mov	QWORD PTR [rax], rdx
	mov	DWORD PTR [rax+8], edx

; 256  : 	current_c = c;

	mov	QWORD PTR [rcx+216], rax

; 257  : 	current_sqr_r = -1;

	mov	DWORD PTR [rcx+224], -1082130432	; bf800000H

; 258  : }

	ret	0
?reset@Basis@@QEAAXXZ ENDP				; Basis::reset
_TEXT	ENDS
PUBLIC	?excess@Basis@@QEBAMAEBU?$_vector3@M@@@Z	; Basis::excess
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
p$ = 16
?excess@Basis@@QEBAMAEBU?$_vector3@M@@@Z PROC		; Basis::excess

; 246  : 	float e = -current_sqr_r;
; 247  : 	e += p.distance_to_sqr(*current_c);

	mov	rax, QWORD PTR [rcx+216]
	movss	xmm2, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm0, xmm0
	mulss	xmm2, xmm2
	subss	xmm1, DWORD PTR [rax+8]
	addss	xmm0, xmm2
	mulss	xmm1, xmm1
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [rcx+224]
	xorps	xmm1, DWORD PTR __mask@@NegFloat@
	addss	xmm0, xmm1

; 248  : 	return e;
; 249  : }

	ret	0
?excess@Basis@@QEBAMAEBU?$_vector3@M@@@Z ENDP		; Basis::excess
_TEXT	ENDS
PUBLIC	?size@Basis@@QEBAHXZ				; Basis::size
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?size@Basis@@QEBAHXZ PROC				; Basis::size

; 236  : 	return m;

	mov	eax, DWORD PTR [rcx+4]

; 237  : }

	ret	0
?size@Basis@@QEBAHXZ ENDP				; Basis::size
_TEXT	ENDS
PUBLIC	?squared_radius@Basis@@QEBAMXZ			; Basis::squared_radius
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?squared_radius@Basis@@QEBAMXZ PROC			; Basis::squared_radius

; 231  : 	return current_sqr_r;

	movss	xmm0, DWORD PTR [rcx+224]

; 232  : }

	ret	0
?squared_radius@Basis@@QEBAMXZ ENDP			; Basis::squared_radius
_TEXT	ENDS
PUBLIC	?center@Basis@@QEBAPEBU?$_vector3@M@@XZ		; Basis::center
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?center@Basis@@QEBAPEBU?$_vector3@M@@XZ PROC		; Basis::center

; 226  : 	return current_c;

	mov	rax, QWORD PTR [rcx+216]

; 227  : }

	ret	0
?center@Basis@@QEBAPEBU?$_vector3@M@@XZ ENDP		; Basis::center
_TEXT	ENDS
PUBLIC	?squared_radius@Miniball@@QEBAMXZ		; Miniball::squared_radius
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?squared_radius@Miniball@@QEBAMXZ PROC			; Miniball::squared_radius

; 187  : 	return B.squared_radius();

	movss	xmm0, DWORD PTR [rcx+248]

; 188  : }

	ret	0
?squared_radius@Miniball@@QEBAMXZ ENDP			; Miniball::squared_radius
_TEXT	ENDS
PUBLIC	?center@Miniball@@QEBA?AU?$_vector3@M@@XZ	; Miniball::center
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?center@Miniball@@QEBA?AU?$_vector3@M@@XZ PROC		; Miniball::center

; 182  : 	return *((Fvector *)B.center());

	mov	r8, QWORD PTR [rcx+240]
	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx], rax
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [rdx+8], eax
	mov	rax, rdx

; 183  : }

	ret	0
?center@Miniball@@QEBA?AU?$_vector3@M@@XZ ENDP		; Miniball::center
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator--, COMDAT

; 250  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 251  : 		if (this->_Getcont() == 0
; 252  : 			|| this->_Ptr == 0
; 253  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 254  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("list iterator not decrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 263  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 264  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 265  : 
; 266  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 267  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);

	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rax+8]

; 268  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 269  : 
; 270  : 		return (*this);

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx

; 271  : 		}

	ret	0
??F?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@U?$_vector3@M@@AEBU1@@std@@YAXPEAU?$_vector3@M@@AEBU1@@Z
_TEXT	SEGMENT
_Ptr$ = 8
_Val$ = 16
??$_Construct@U?$_vector3@M@@AEBU1@@std@@YAXPEAU?$_vector3@M@@AEBU1@@Z PROC ; std::_Construct<_vector3<float>,_vector3<float> const & __ptr64>, COMDAT

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	test	rcx, rcx
	je	SHORT $LN3@Construct@2
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax
$LN3@Construct@2:

; 49   : 	}

	fatret	0
??$_Construct@U?$_vector3@M@@AEBU1@@std@@YAXPEAU?$_vector3@M@@AEBU1@@Z ENDP ; std::_Construct<_vector3<float>,_vector3<float> const & __ptr64>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?construct@?$xalloc@U?$_vector3@M@@@@QEAAXPEAU?$_vector3@M@@AEBU2@@Z
_TEXT	SEGMENT
p$ = 8
_Val$ = 16
?construct@?$xalloc@U?$_vector3@M@@@@QEAAXPEAU?$_vector3@M@@AEBU2@@Z PROC ; xalloc<_vector3<float> >::construct, COMDAT

; 84   : 							void					construct		(pointer p, const T& _Val)				{	std::_Construct(p, _Val);	}

	test	rcx, rcx
	je	SHORT $LN5@construct@4
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax
$LN5@construct@4:
	fatret	0
?construct@?$xalloc@U?$_vector3@M@@@@QEAAXPEAU?$_vector3@M@@AEBU2@@Z ENDP ; xalloc<_vector3<float> >::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@AEBU2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@AEBU2@@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@AEBU2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@AEBU2@@Z PROC ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> const & __ptr64>, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val@2
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax
$LN9@Cons_val@2:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@AEBU2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@AEBU2@@Z ENDP ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> const & __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Pnode$ = 16
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>, COMDAT

; 41   : 		{	// construct with node pointer _Pnode

	mov	QWORD PTR [rcx], rdx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

	mov	rax, rcx
	ret	0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > >,std::_Iterator_base0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z
_TEXT	SEGMENT
this$ = 8
??0?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z PROC ; std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_List_nod<_vector3<float>,xalloc<_vector3<float> > >, COMDAT

; 439  : 		}

	mov	rax, rcx
	ret	0
??0?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z ENDP ; std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_List_nod<_vector3<float>,xalloc<_vector3<float> > >
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z DD imagerel $LN61
	DD	imagerel $LN61+168
	DD	imagerel $unwind$?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z DD 010e01H
	DD	0420eH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z
_TEXT	SEGMENT
this$ = 48
_Where$ = 56
_Right$ = 64
_First$ = 72
_Last$ = 80
?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same, COMDAT

; 1467 : 		{	// splice _Right [_First, _Last) before _Where

$LN61:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+16], rdx
	sub	rsp, 40					; 00000028H

; 1468 : 		if (this != &_Right)

	cmp	rcx, r8
	je	SHORT $LN1@Splice_sam

; 1469 : 			{	// splicing from another list, adjust counts
; 1470 : 			_Incsize(_Count);

	mov	rdx, QWORD PTR [rcx+8]
	mov	rax, 1537228672809129300		; 1555555555555554H
	sub	rax, rdx
	cmp	rax, 1
	jae	SHORT $LN4@Splice_sam
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN4@Splice_sam:
	lea	rax, QWORD PTR [rdx+1]
	mov	QWORD PTR [rcx+8], rax

; 1471 : 			_Right._Mysize -= _Count;

	dec	QWORD PTR [r8+8]
$LN1@Splice_sam:

; 1472 : 			}
; 1473 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1474 : 			_Last._Mynode();

	mov	rcx, QWORD PTR [r9+8]
	mov	rax, QWORD PTR _Last$[rsp]
	mov	QWORD PTR [rcx], rax

; 1475 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1476 : 			_Where._Mynode();

	mov	rax, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR _Where$[rsp]
	mov	QWORD PTR [rcx], rax

; 1477 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1478 : 			_First._Mynode();

	mov	rax, QWORD PTR _Where$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR _First$[rsp]
	mov	QWORD PTR [rcx], rax

; 1479 : 
; 1480 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1481 : 		this->_Prevnode(_Where._Mynode()) =
; 1482 : 			this->_Prevnode(_Last._Mynode());

	mov	rax, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _Where$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rdx+8]
	mov	QWORD PTR [rdx+8], rcx

; 1483 : 		this->_Prevnode(_Last._Mynode()) =
; 1484 : 			this->_Prevnode(_First._Mynode());

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR _Last$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1485 : 		this->_Prevnode(_First._Mynode()) = _Pnode;

	mov	rax, QWORD PTR _First$[rsp]
	mov	QWORD PTR [rax+8], r8

; 1486 : 		}

	add	rsp, 40					; 00000028H
	ret	0
$LN60@Splice_sam:
?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++, COMDAT

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rax]

; 238  : 		return (*this);

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx

; 239  : 		}

	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Pnode$ = 16
??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >, COMDAT

; 184  : 		{	// construct with node pointer _Pnode

	mov	QWORD PTR [rcx], rdx

; 185  : 		}

	mov	rax, rcx
	ret	0
??0?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Pnode$ = 16
??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z PROC ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >, COMDAT

; 342  : 		{	// construct with node pointer _Pnode

	mov	QWORD PTR [rcx], rdx

; 343  : 		}

	mov	rax, rcx
	ret	0
??0?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@PEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEBV?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator!=, COMDAT

; 300  : 		return (!(*this == _Right));

	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rdx
	setne	al

; 301  : 		}

	ret	0
??9?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++, COMDAT

; 370  : 		++(*(_Mybase *)this);

	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rax]

; 371  : 		return (*this);

	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx

; 372  : 		}

	ret	0
??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::end, COMDAT

; 792  : 		return (iterator(this->_Myhead, this));

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax
	mov	rax, rdx

; 793  : 		}

	ret	0
?end@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::begin, COMDAT

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

	mov	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, rdx
	mov	QWORD PTR [rdx], rcx

; 783  : 		}

	ret	0
?begin@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@XZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::begin
_TEXT	ENDS
PUBLIC	??0Basis@@QEAA@XZ				; Basis::Basis
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_sphere.cpp
_TEXT	SEGMENT
this$ = 8
??0Basis@@QEAA@XZ PROC					; Basis::Basis

; 263  : 	reset();

	lea	rax, QWORD PTR [rcx+152]
	xor	edx, edx
	mov	QWORD PTR [rcx+4], rdx
	mov	QWORD PTR [rax], rdx
	mov	DWORD PTR [rax+8], edx
	mov	QWORD PTR [rcx+216], rax
	mov	DWORD PTR [rcx+224], -1082130432	; bf800000H

; 264  : }

	mov	rax, rcx
	ret	0
??0Basis@@QEAA@XZ ENDP					; Basis::Basis
_TEXT	ENDS
PUBLIC	?max_excess@Miniball@@AEBAMV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@0AEAV23@@Z ; Miniball::max_excess
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
t$ = 16
i$ = 24
pivot$ = 32
?max_excess@Miniball@@AEBAMV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@0AEAV23@@Z PROC ; Miniball::max_excess

; 158  : 	const	Fvector* pCenter = B.center();

	mov	rax, QWORD PTR [rcx+240]

; 159  : 	float				sqr_r	= B.squared_radius();

	movss	xmm4, DWORD PTR [rcx+248]

; 160  : 
; 161  : 	float e, max_e = 0;

	xorps	xmm2, xmm2

; 162  : 
; 163  : 	for (It k=t; k!=i; ++k)

	cmp	rdx, r8
	je	SHORT $LN31@max_excess
	xorps	xmm4, DWORD PTR __mask@@NegFloat@
	npad	2
$LL13@max_excess:

; 164  : 	{
; 165  : 		const Fvector & point = (*k);
; 166  : 		e = -sqr_r;
; 167  : 
; 168  : 		e += point.distance_to_sqr(*pCenter);

	movss	xmm1, DWORD PTR [rdx+20]
	movss	xmm3, DWORD PTR [rdx+16]
	movss	xmm0, DWORD PTR [rdx+24]
	subss	xmm3, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rax+8]
	mulss	xmm3, xmm3
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm3, xmm1
	addss	xmm3, xmm0
	addss	xmm3, xmm4

; 169  : 
; 170  : 		if (e > max_e)

	comiss	xmm3, xmm2
	jbe	SHORT $LN3@max_excess

; 171  : 		{
; 172  : 			max_e = e;

	movaps	xmm2, xmm3

; 173  : 			pivot = k;

	mov	QWORD PTR [r9], rdx
$LN3@max_excess:

; 162  : 
; 163  : 	for (It k=t; k!=i; ++k)

	mov	rdx, QWORD PTR [rdx]
	cmp	rdx, r8
	jne	SHORT $LL13@max_excess
$LN31@max_excess:

; 174  : 		}
; 175  : 	}
; 176  : 
; 177  : 	return max_e;

	movaps	xmm0, xmm2

; 178  : }

	ret	0
?max_excess@Miniball@@AEBAMV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@0AEAV23@@Z ENDP ; Miniball::max_excess
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z PROC ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> >, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val@17
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax
$LN9@Cons_val@17:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z ENDP ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
pdata	SEGMENT
$pdata$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z DD imagerel $LN29
	DD	imagerel $LN29+80
	DD	imagerel $unwind$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z DD imagerel $LN29+80
	DD	imagerel $LN29+146
	DD	imagerel $chain$1$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z DD imagerel $LN29+146
	DD	imagerel $LN29+164
	DD	imagerel $chain$2$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+80
	DD	imagerel $unwind$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z DD 040e21H
	DD	07540eH
	DD	063405H
	DD	imagerel $LN29
	DD	imagerel $LN29+80
	DD	imagerel $unwind$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z DD 040a01H
	DD	08640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
xdata	ENDS
;	COMDAT ??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z PROC ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN29:
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, QWORD PTR [rcx]
	mov	rsi, rcx
	test	rdi, rdi
	je	$LN1@xr_free@6
	inc	DWORD PTR ?Memory@@3VxrMemory@@A
	movzx	eax, BYTE PTR [rdi-1]
	dec	rdi
	cmp	eax, 55					; 00000037H
	jne	SHORT $LN6@xr_free@6
	test	rdi, rdi
	je	SHORT $LN27@xr_free@6
	and	rdi, -8
	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
	mov	QWORD PTR [rsi], 0
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@xr_free@6:
	mov	QWORD PTR [rsp+48], rbx
	lea	rbx, QWORD PTR [rax+rax*4]
	mov	QWORD PTR [rsp+56], rbp
	lea	rbp, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
	mov	rcx, QWORD PTR [rbp+rbx*8]
	call	QWORD PTR __imp_EnterCriticalSection
	mov	rax, QWORD PTR [rbp+rbx*8+32]
	mov	QWORD PTR [rdi], rax
	mov	rcx, QWORD PTR [rbp+rbx*8]
	mov	QWORD PTR [rbp+rbx*8+32], rdi
	call	QWORD PTR __imp_LeaveCriticalSection
	mov	rbp, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
$LN27@xr_free@6:
	mov	QWORD PTR [rsi], 0
$LN1@xr_free@6:
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ENDP ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++, COMDAT

; 243  : 		_Myiter _Tmp = *this;

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 244  : 		++*this;

	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 245  : 		return (_Tmp);

	mov	rax, rdx

; 246  : 		}

	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Where$ = 16
?_Make_iter@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Make_iter, COMDAT

; 802  : 		return (iterator(_Where._Ptr, this));

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx

; 803  : 		}

	ret	0
?_Make_iter@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Make_iter
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z DD 010901H
	DD	04209H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z
_TEXT	SEGMENT
p$ = 48
?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z PROC ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::deallocate, COMDAT

; 82   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	lea	rcx, QWORD PTR p$[rsp]
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
	add	rsp, 40					; 00000028H
	ret	0
?deallocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAXPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_K@Z ENDP ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::deallocate
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
pdata	SEGMENT
$pdata$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ DD imagerel $LN46
	DD	imagerel $LN46+42
	DD	imagerel $unwind$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ DD imagerel $LN46+42
	DD	imagerel $LN46+167
	DD	imagerel $chain$2$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ DD imagerel $LN46+167
	DD	imagerel $LN46+178
	DD	imagerel $chain$3$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ DD 021H
	DD	imagerel $LN46
	DD	imagerel $LN46+42
	DD	imagerel $unwind$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ DD 061621H
	DD	063416H
	DD	08c40aH
	DD	076405H
	DD	imagerel $LN46
	DD	imagerel $LN46+42
	DD	imagerel $unwind$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ DD 040a01H
	DD	09540aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear, COMDAT

; 1096 : 		{	// erase all

$LN46:
	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	sub	rsp, 32					; 00000020H

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

	mov	rax, QWORD PTR [rcx]
	mov	rbp, rcx
	mov	rdi, QWORD PTR [rax]

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	QWORD PTR [rax], rax

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rax

; 1105 : 		this->_Mysize = 0;

	mov	QWORD PTR [rcx+8], 0

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

	cmp	rdi, QWORD PTR [rcx]
	je	SHORT $LN1@clear
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], r12
	lea	r12, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
	mov	QWORD PTR [rsp+48], rbx
$LL3@clear:

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

	mov	rsi, QWORD PTR [rdi]

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);
; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

	inc	DWORD PTR ?Memory@@3VxrMemory@@A
	movzx	eax, BYTE PTR [rdi-1]
	dec	rdi
	cmp	eax, 55					; 00000037H
	jne	SHORT $LN21@clear
	test	rdi, rdi
	je	SHORT $LN2@clear
	and	rdi, -8
	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN2@clear
$LN21@clear:
	lea	rbx, QWORD PTR [rax+rax*4]
	mov	rcx, QWORD PTR [r12+rbx*8]
	call	QWORD PTR __imp_EnterCriticalSection
	mov	rax, QWORD PTR [r12+rbx*8+32]
	mov	QWORD PTR [rdi], rax
	mov	rcx, QWORD PTR [r12+rbx*8]
	mov	QWORD PTR [r12+rbx*8+32], rdi
	call	QWORD PTR __imp_LeaveCriticalSection
$LN2@clear:

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

	mov	rdi, rsi
	cmp	rsi, QWORD PTR [rbp]
	jne	SHORT $LL3@clear
	mov	r12, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
$LN1@clear:

; 1113 : 			}
; 1114 : 		}

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+27
	DD	imagerel $unwind$??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T190901 = 48
this$ = 48
??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::~_List_val<_vector3<float>,xalloc<_vector3<float> > >, COMDAT

; 501  : 		{	// destroy the object

$LN5:
	sub	rsp, 40					; 00000028H

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

	mov	rax, QWORD PTR [rcx]
	lea	rcx, QWORD PTR $T190901[rsp]
	mov	QWORD PTR $T190901[rsp], rax
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>

; 503  : 		}

	add	rsp, 40					; 00000028H
	ret	0
??1?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::~_List_val<_vector3<float>,xalloc<_vector3<float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Tidy@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Tidy, COMDAT

; 1497 : 		clear();
; 1498 : 		}

	jmp	?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear
?_Tidy@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++, COMDAT

; 376  : 		_Myiter _Tmp = *this;

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 377  : 		++*this;

	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 378  : 		return (_Tmp);

	mov	rax, rdx

; 379  : 		}

	ret	0
??E?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ DD imagerel $LN9
	DD	imagerel $LN9+38
	DD	imagerel $unwind$??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T190948 = 48
this$ = 48
??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::~list<_vector3<float>,xalloc<_vector3<float> > >, COMDAT

; 769  : 		{	// destroy the object

$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 770  : 		_Tidy();

	call	?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear

; 771  : 		}

	mov	r11, QWORD PTR [rbx]
	lea	rcx, QWORD PTR $T190948[rsp]
	mov	QWORD PTR $T190948[rsp], r11
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::~list<_vector3<float>,xalloc<_vector3<float> > >
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+38
	DD	imagerel $unwind$??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ
_TEXT	SEGMENT
$T190972 = 48
this$ = 48
??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ PROC ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::~xr_list<_vector3<float>,xalloc<_vector3<float> > >, COMDAT
$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear
	mov	r11, QWORD PTR [rbx]
	lea	rcx, QWORD PTR $T190972[rsp]
	mov	QWORD PTR $T190972[rsp], r11
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ ENDP ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::~xr_list<_vector3<float>,xalloc<_vector3<float> > >
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z DD imagerel $LN38
	DD	imagerel $LN38+113
	DD	imagerel $unwind$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z DD 040f01H
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z
_TEXT	SEGMENT
$T223244 = 48
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::erase, COMDAT

; 1054 : 		{	// erase element at _Where

$LN38:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	push	rdi
	sub	rsp, 32					; 00000020H

; 1055 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1056 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1057 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1058 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1059 : 		_Orphan_ptr(*this, _Pnode);
; 1060 : 
; 1061 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1062 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	mov	rax, QWORD PTR [r8]
	mov	rbx, rdx
	mov	rdi, rcx
	mov	QWORD PTR _Where$[rsp], rax

; 1063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1064 : 
; 1065 : 		if (_Pnode != this->_Myhead)

	cmp	r8, QWORD PTR [rcx]
	je	SHORT $LN36@erase@11

; 1066 : 			{	// not list head, safe to erase
; 1067 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1068 : 				this->_Nextnode(_Pnode);

	mov	r9, QWORD PTR [r8+8]
	mov	rax, QWORD PTR [r8]

; 1069 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1070 : 				this->_Prevnode(_Pnode);
; 1071 : 
; 1072 : 			_Dest_val(this->_Alnod, _Pnode);
; 1073 : 			this->_Alnod.deallocate(_Pnode, 1);

	lea	rcx, QWORD PTR $T223244[rsp]
	mov	QWORD PTR [r9], rax
	mov	r9, QWORD PTR [r8]
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [r9+8], rax
	mov	QWORD PTR $T223244[rsp], r8
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>

; 1074 : 
; 1075 : 			--this->_Mysize;
; 1076 : 			}
; 1077 : 		return (_Make_iter(_Where));

	mov	rax, QWORD PTR _Where$[rsp]
	dec	QWORD PTR [rdi+8]
	mov	QWORD PTR [rbx], rax
	mov	rax, rbx

; 1078 : 		}

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN36@erase@11:

; 1074 : 
; 1075 : 			--this->_Mysize;
; 1076 : 			}
; 1077 : 		return (_Make_iter(_Where));

	mov	QWORD PTR [rdx], rax
	mov	rax, rbx

; 1078 : 		}

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::erase
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z DD imagerel $LN123
	DD	imagerel $LN123+69
	DD	imagerel $unwind$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z DD imagerel $LN123+69
	DD	imagerel $LN123+243
	DD	imagerel $chain$3$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z DD imagerel $LN123+243
	DD	imagerel $LN123+258
	DD	imagerel $chain$4$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z DD 021H
	DD	imagerel $LN123
	DD	imagerel $LN123+69
	DD	imagerel $unwind$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z DD 081421H
	DD	057414H
	DD	06640fH
	DD	04d40aH
	DD	0a3405H
	DD	imagerel $LN123
	DD	imagerel $LN123+69
	DD	imagerel $unwind$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z DD 031101H
	DD	0c00d6211H
	DD	0500bH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
_First$ = 96
_Last$ = 104
?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::erase, COMDAT

; 1081 : 		{	// erase [_First, _Last)

$LN123:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	r12
	sub	rsp, 56					; 00000038H

; 1082 : 		if (_First == begin() && _Last == end())

	mov	rax, QWORD PTR [rcx]
	mov	r12, rdx
	mov	rbp, rcx
	cmp	r8, QWORD PTR [rax]
	jne	SHORT $LN120@erase@12
	cmp	r9, rax
	jne	SHORT $LN120@erase@12

; 1083 : 			{	// erase all and return fresh iterator
; 1084 : 			clear();

	call	?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear

; 1085 : 			return (end());

	mov	r11, QWORD PTR [rbp]

; 1091 : 			return (_Make_iter(_Last));

	mov	rax, r12
	mov	QWORD PTR [r12], r11

; 1092 : 			}
; 1093 : 		}

	add	rsp, 56					; 00000038H
	pop	r12
	pop	rbp
	ret	0
$LN120@erase@12:

; 1086 : 			}
; 1087 : 		else
; 1088 : 			{	// erase subrange
; 1089 : 			while (_First != _Last)

	cmp	r8, r9
	je	$LN1@erase@12
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+32], r13
	mov	QWORD PTR [rsp+48], rsi
	mov	QWORD PTR [rsp+40], rdi
	lea	r13, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
$LL2@erase@12:

; 1090 : 				_First = erase(_First);

	mov	rbx, QWORD PTR [r8]
	cmp	r8, QWORD PTR [rbp]
	je	SHORT $LN47@erase@12
	mov	rax, QWORD PTR [r8+8]
	lea	rsi, QWORD PTR [r8-1]
	mov	QWORD PTR [rax], rbx
	mov	rax, QWORD PTR [r8+8]
	mov	rcx, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax
	inc	DWORD PTR ?Memory@@3VxrMemory@@A
	movzx	eax, BYTE PTR [rsi]
	cmp	eax, 55					; 00000037H
	jne	SHORT $LN77@erase@12
	test	rsi, rsi
	je	SHORT $LN98@erase@12
	and	rsi, -8
	mov	rcx, QWORD PTR [rsi-8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN98@erase@12
$LN77@erase@12:
	lea	rdi, QWORD PTR [rax+rax*4]
	mov	rcx, QWORD PTR [r13+rdi*8]
	call	QWORD PTR __imp_EnterCriticalSection
	mov	rax, QWORD PTR [r13+rdi*8+32]
	mov	QWORD PTR [rsi], rax
	mov	rcx, QWORD PTR [r13+rdi*8]
	mov	QWORD PTR [r13+rdi*8+32], rsi
	call	QWORD PTR __imp_LeaveCriticalSection
$LN98@erase@12:
	dec	QWORD PTR [rbp+8]
	mov	r9, QWORD PTR _Last$[rsp]
$LN47@erase@12:
	mov	r8, rbx
	mov	QWORD PTR _First$[rsp], rbx
	cmp	rbx, r9
	jne	SHORT $LL2@erase@12
	mov	r13, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	mov	rbx, QWORD PTR [rsp+80]
$LN1@erase@12:

; 1091 : 			return (_Make_iter(_Last));

	mov	QWORD PTR [r12], r9
	mov	rax, r12

; 1092 : 			}
; 1093 : 		}

	add	rsp, 56					; 00000038H
	pop	r12
	pop	rbp
	ret	0
?erase@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@0@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::erase
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Miniball@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+38
	DD	imagerel $unwind$??1Miniball@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Miniball@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??1Miniball@@QEAA@XZ
_TEXT	SEGMENT
$T223783 = 48
this$ = 48
??1Miniball@@QEAA@XZ PROC				; Miniball::~Miniball, COMDAT
$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	?clear@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXXZ ; std::list<_vector3<float>,xalloc<_vector3<float> > >::clear
	mov	r11, QWORD PTR [rbx]
	lea	rcx, QWORD PTR $T223783[rsp]
	mov	QWORD PTR $T223783[rsp], r11
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1Miniball@@QEAA@XZ ENDP				; Miniball::~Miniball
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_alloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@I@Z PROC ; xr_alloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	shl	rdx, 5
	jmp	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
??$xr_alloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@I@Z ENDP ; xr_alloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_KPEBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_KPEBX@Z PROC ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::allocate, COMDAT

; 80   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 32					; 00000020H
	jmp	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
?allocate@?$xalloc@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@QEBAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@_KPEBX@Z ENDP ; xalloc<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>::allocate
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD imagerel $LN37
	DD	imagerel $LN37+106
	DD	imagerel $unwind$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA DD imagerel ?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA
	DD	imagerel ?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA+40
	DD	imagerel $unwind$?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD imagerel ?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
	DD	0ffffffffH
	DD	imagerel ?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z+59
	DD	00H
	DD	imagerel ?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z+87
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD 061919H
	DD	096419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
	DD	01H
	DD	imagerel $tryMap$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
	DD	05H
	DD	imagerel $ip2state$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z
_TEXT	SEGMENT
$T286815 = 32
_Next$ = 64
_Prev$ = 72
_Val$ = 80
$T286808 = 88
_Pnode$ = 88
?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode, COMDAT

; 507  : 		{	// allocate a node and set links and value

$LN37:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T286815[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 508  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	mov	edx, 32					; 00000020H
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r11, rax
	mov	QWORD PTR _Pnode$[rsp], rax

; 509  : 
; 510  : 		_TRY_BEGIN
; 511  : 		this->_Nextnode(_Pnode) = _Next;

	mov	QWORD PTR [rax], rsi

; 512  : 		this->_Prevnode(_Pnode) = _Prev;

	mov	QWORD PTR [rax+8], rdi

; 513  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Pnode)), _Val);

	lea	rcx, QWORD PTR [rax+16]
	test	rcx, rcx
	je	SHORT $LN28@Buynode@2
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rbx+8]
	mov	DWORD PTR [rcx+8], eax
$LN28@Buynode@2:

; 514  : 		_CATCH_ALL
; 515  : 		this->_Alnod.deallocate(_Pnode, 1);
; 516  : 		_RERAISE;
; 517  : 		_CATCH_END
; 518  : 
; 519  : 		return (_Pnode);

	mov	rax, r11

; 520  : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN36@Buynode@2:
?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T286815 = 32
_Next$ = 64
_Prev$ = 72
_Val$ = 80
$T286808 = 88
_Pnode$ = 88
?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA PROC ; `std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode'::`1'::catch$0

; 514  : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z$0:

; 515  : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	rax, QWORD PTR _Pnode$[rbp]
	mov	QWORD PTR $T286808[rbp], rax
	lea	rcx, QWORD PTR $T286808[rbp]
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>

; 516  : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0??_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z@4HA ENDP ; `std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode'::`1'::catch$0
text$x	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z DD imagerel $LN13
	DD	imagerel $LN13+56
	DD	imagerel $unwind$??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z
_TEXT	SEGMENT
this$ = 48
??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_List_val<_vector3<float>,xalloc<_vector3<float> > >, COMDAT

; 493  : 		{	// construct base, and allocator from _Al

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 494  : 		this->_Mysize = 0;

	mov	QWORD PTR [rcx+8], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 32					; 00000020H
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx], rax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	QWORD PTR [rax], rax

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rax+8], rax

; 498  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@V?$xalloc@U?$_vector3@M@@@@@Z ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_List_val<_vector3<float>,xalloc<_vector3<float> > >
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z DD imagerel $LN22
	DD	imagerel $LN22+97
	DD	imagerel $unwind$?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 48
_Where$ = 56
_Val$ = 64
?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Insert, COMDAT

; 967  : 		{	// insert _Val at _Where

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 968  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 969  : 		if (_Where._Getcont() != this)
; 970  : 			_DEBUG_ERROR("list insert iterator outside range");
; 971  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 972  : 
; 973  : 		_Nodeptr _Pnode = _Where._Mynode();
; 974  : 		_Nodeptr _Newnode =
; 975  : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode), _Val);

	mov	rdx, QWORD PTR [rdx+8]
	mov	rdi, rcx
	mov	rcx, rbx
	call	?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode

; 976  : 		_Incsize(1);

	mov	rdx, 1537228672809129300		; 1555555555555554H
	mov	r11, rax
	mov	rax, QWORD PTR [rdi+8]
	sub	rdx, rax
	cmp	rdx, 1
	jae	SHORT $LN7@Insert@6
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN7@Insert@6:
	inc	rax
	mov	QWORD PTR [rdi+8], rax

; 977  : 		this->_Prevnode(_Pnode) = _Newnode;

	mov	QWORD PTR [rbx+8], r11

; 978  : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

	mov	rax, QWORD PTR [r11+8]

; 979  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax], r11
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN21@Insert@6:
?_Insert@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEBU?$_vector3@M@@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Insert
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z DD imagerel $LN35
	DD	imagerel $LN35+100
	DD	imagerel $unwind$?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::push_back, COMDAT

; 926  : 		{	// insert element at end

$LN35:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 927  : 		_Insert(end(), _Val);

	mov	rdi, QWORD PTR [rcx]
	mov	r8, rdx
	mov	rbx, rcx
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode
	mov	rdx, 1537228672809129300		; 1555555555555554H
	mov	r11, rax
	mov	rax, QWORD PTR [rbx+8]
	sub	rdx, rax
	cmp	rdx, 1
	jae	SHORT $LN19@push_back@4
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN19@push_back@4:
	inc	rax
	mov	QWORD PTR [rbx+8], rax

; 928  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi+8], r11
	mov	rax, QWORD PTR [r11+8]
	mov	QWORD PTR [rax], r11
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN34@push_back@4:
?push_back@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::push_back
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+56
	DD	imagerel $unwind$??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::list<_vector3<float>,xalloc<_vector3<float> > >, COMDAT

; 607  : 		{	// construct empty list

$LN17:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	QWORD PTR [rcx+8], 0
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 32					; 00000020H
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rax+8], rax

; 608  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA@XZ ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::list<_vector3<float>,xalloc<_vector3<float> > >
_TEXT	ENDS
PUBLIC	?check_in@Miniball@@QEAAXAEBU?$_vector3@M@@@Z	; Miniball::check_in
pdata	SEGMENT
$pdata$?check_in@Miniball@@QEAAXAEBU?$_vector3@M@@@Z DD imagerel $LN38
	DD	imagerel $LN38+100
	DD	imagerel $unwind$?check_in@Miniball@@QEAAXAEBU?$_vector3@M@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?check_in@Miniball@@QEAAXAEBU?$_vector3@M@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_sphere.cpp
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
p$ = 56
?check_in@Miniball@@QEAAXAEBU?$_vector3@M@@@Z PROC	; Miniball::check_in

; 88   : {

$LN38:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 89   : 	L.push_back(p);

	mov	rdi, QWORD PTR [rcx]
	mov	r8, rdx
	mov	rbx, rcx
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode
	mov	rdx, 1537228672809129300		; 1555555555555554H
	mov	r11, rax
	mov	rax, QWORD PTR [rbx+8]
	sub	rdx, rax
	cmp	rdx, 1
	jae	SHORT $LN21@check_in
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN21@check_in:
	inc	rax
	mov	QWORD PTR [rbx+8], rax

; 90   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi+8], r11
	mov	rax, QWORD PTR [r11+8]
	mov	QWORD PTR [rax], r11
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN37@check_in:
?check_in@Miniball@@QEAAXAEBU?$_vector3@M@@@Z ENDP	; Miniball::check_in
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ DD imagerel $LN19
	DD	imagerel $LN19+56
	DD	imagerel $unwind$??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ PROC ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::xr_list<_vector3<float>,xalloc<_vector3<float> > >, COMDAT
$LN19:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	QWORD PTR [rcx+8], 0
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 32					; 00000020H
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rax+8], rax
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$xr_list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAA@XZ ENDP ; xr_list<_vector3<float>,xalloc<_vector3<float> > >::xr_list<_vector3<float>,xalloc<_vector3<float> > >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
pdata	SEGMENT
$pdata$??0Miniball@@QEAA@XZ DD imagerel $LN33
	DD	imagerel $LN33+102
	DD	imagerel $unwind$??0Miniball@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Miniball@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_sphere.cpp
xdata	ENDS
;	COMDAT ??0Miniball@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0Miniball@@QEAA@XZ PROC				; Miniball::Miniball, COMDAT

; 69   : 	Miniball() {}

$LN33:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	xor	edi, edi
	mov	rbx, rcx
	mov	QWORD PTR [rcx+8], rdi
	lea	edx, QWORD PTR [rdi+32]
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rax+8], rax
	lea	rax, QWORD PTR [rbx+176]
	mov	QWORD PTR [rbx+28], rdi
	mov	QWORD PTR [rax], rdi
	mov	DWORD PTR [rax+8], edi
	mov	QWORD PTR [rbx+240], rax
	mov	DWORD PTR [rbx+248], -1082130432	; bf800000H
	mov	rax, rbx
	mov	QWORD PTR [rbx+256], rdi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0Miniball@@QEAA@XZ ENDP				; Miniball::Miniball
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD imagerel $LN39
	DD	imagerel $LN39+106
	DD	imagerel $unwind$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA DD imagerel ?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA+40
	DD	imagerel $unwind$?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD imagerel ??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
	DD	0ffffffffH
	DD	imagerel ??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z+59
	DD	00H
	DD	imagerel ??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z+87
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD 061919H
	DD	096419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
	DD	05H
	DD	imagerel $ip2state$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z
_TEXT	SEGMENT
$T313427 = 32
_Next$ = 64
_Prev$ = 72
_Val$ = 80
$T313420 = 88
_Pnode$ = 88
??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z PROC ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >, COMDAT

; 541  : 		_Nodeptr _Buynode(_Nodeptr _Next,

$LN39:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T313427[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 542  : 		_Nodeptr _Prev, _Valty&& _Val)
; 543  : 		{	// allocate a node and set links and value
; 544  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	mov	edx, 32					; 00000020H
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r11, rax
	mov	QWORD PTR _Pnode$[rsp], rax

; 545  : 
; 546  : 		_TRY_BEGIN
; 547  : 		this->_Nextnode(_Pnode) = _Next;

	mov	QWORD PTR [rax], rsi

; 548  : 		this->_Prevnode(_Pnode) = _Prev;

	mov	QWORD PTR [rax+8], rdi

; 549  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Pnode)),
; 550  : 			_STD forward<_Valty>(_Val));

	lea	rcx, QWORD PTR [rax+16]
	test	rcx, rcx
	je	SHORT $LN30@Buynode@4
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rbx+8]
	mov	DWORD PTR [rcx+8], eax
$LN30@Buynode@4:

; 551  : 		_CATCH_ALL
; 552  : 		this->_Alnod.deallocate(_Pnode, 1);
; 553  : 		_RERAISE;
; 554  : 		_CATCH_END
; 555  : 
; 556  : 		return (_Pnode);

	mov	rax, r11

; 557  : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN38@Buynode@4:
??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z ENDP ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T313427 = 32
_Next$ = 64
_Prev$ = 72
_Val$ = 80
$T313420 = 88
_Pnode$ = 88
?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA PROC ; `std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >'::`1'::catch$0

; 551  : 		_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z$0:

; 552  : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	rax, QWORD PTR _Pnode$[rbp]
	mov	QWORD PTR $T313420[rbp], rax
	lea	rcx, QWORD PTR $T313420[rbp]
	call	??$xr_free@U_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@@YAXAEAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@Z ; xr_free<std::_List_nod<_vector3<float>,xalloc<_vector3<float> > >::_Node>

; 553  : 		_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z@4HA ENDP ; `std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >'::`1'::catch$0
text$x	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z DD imagerel $LN24
	DD	imagerel $LN24+97
	DD	imagerel $unwind$??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 48
_Where$ = 56
_Val$ = 64
??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Insert_rv<_vector3<float> >, COMDAT

; 746  : 		void _Insert_rv(const_iterator _Where,

$LN24:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 747  : 		_Valty&& _Val)
; 748  : 		{	// insert _Val at _Where
; 749  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 750  : 		if (_Where._Getcont() != this)
; 751  : 			_DEBUG_ERROR("list insert iterator outside range");
; 752  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 753  : 
; 754  : 		_Nodeptr _Pnode = _Where._Mynode();
; 755  : 		_Nodeptr _Newnode =
; 756  : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 757  : 				_STD forward<_Valty>(_Val));

	mov	rdx, QWORD PTR [rdx+8]
	mov	rdi, rcx
	mov	rcx, rbx
	call	??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >

; 758  : 		_Incsize(1);

	mov	rdx, 1537228672809129300		; 1555555555555554H
	mov	r11, rax
	mov	rax, QWORD PTR [rdi+8]
	sub	rdx, rax
	cmp	rdx, 1
	jae	SHORT $LN9@Insert_rv
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN9@Insert_rv:
	inc	rax
	mov	QWORD PTR [rdi+8], rax

; 759  : 		this->_Prevnode(_Pnode) = _Newnode;

	mov	QWORD PTR [rbx+8], r11

; 760  : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

	mov	rax, QWORD PTR [r11+8]

; 761  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax], r11
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN23@Insert_rv:
??$_Insert_rv@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Insert_rv<_vector3<float> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z DD imagerel $LN43
	DD	imagerel $LN43+133
	DD	imagerel $unwind$??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z DD 061401H
	DD	076414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
_Val$ = 72
??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::emplace<_vector3<float> >, COMDAT

; 739  : 		iterator emplace(const_iterator _Where, _Valty&& _Val)

$LN43:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], r8
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 740  : 		{	// insert _Val at _Where
; 741  : 		_Insert_rv(_Where, _STD forward<_Valty>(_Val));

	mov	rdx, QWORD PTR [rbx+8]
	mov	r8, r9
	mov	rcx, rbx
	call	??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >
	mov	r8, 1537228672809129300			; 1555555555555554H
	mov	r11, rax
	mov	rax, QWORD PTR [rsi+8]
	sub	r8, rax
	cmp	r8, 1
	jae	SHORT $LN13@emplace@4
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN13@emplace@4:
	inc	rax
	mov	QWORD PTR [rsi+8], rax

; 742  : 		return (_Make_iter(--_Where));
; 743  : 		}

	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rbx+8], r11
	mov	rax, QWORD PTR [r11+8]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax], r11
	mov	rax, QWORD PTR _Where$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, rdi
	mov	QWORD PTR [rdi], rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN42@emplace@4:
??$emplace@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::emplace<_vector3<float> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z DD imagerel $LN48
	DD	imagerel $LN48+123
	DD	imagerel $unwind$??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
_Val$ = 72
??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::insert<_vector3<float> >, COMDAT

; 733  : 		iterator insert(const_iterator _Where, _Valty&& _Val)

$LN48:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 734  : 		{	// insert _Val at _Where
; 735  : 		return (emplace(_Where, _STD forward<_Valty>(_Val)));

	mov	rdx, QWORD PTR [rbx+8]
	mov	r8, r9
	mov	rcx, rbx
	call	??$_Buynode@U?$_vector3@M@@@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@1@PEAU231@0$$QEAU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode<_vector3<float> >
	mov	r8, 1537228672809129300			; 1555555555555554H
	mov	r11, rax
	mov	rax, QWORD PTR [rsi+8]
	sub	r8, rax
	cmp	r8, 1
	jae	SHORT $LN17@insert@7
	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN17@insert@7:
	inc	rax
	mov	QWORD PTR [rsi+8], rax

; 736  : 		}

	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rbx+8], r11
	mov	rax, QWORD PTR [r11+8]
	mov	QWORD PTR [rax], r11
	mov	rax, QWORD PTR [rbx+8]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi], rax
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN47@insert@7:
??$insert@U?$_vector3@M@@@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@$$QEAU?$_vector3@M@@@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::insert<_vector3<float> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z DD imagerel $LN72
	DD	imagerel $LN72+24
	DD	imagerel $unwind$?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z
_TEXT	SEGMENT
this$ = 64
_Where$ = 72
_Right$ = 80
_First$ = 88
_Last$ = 96
?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice, COMDAT

; 1435 : 		{	// splice _Right [_First, _Last) before _Where

$LN72:
	sub	rsp, 56					; 00000038H

; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 		if (_Where._Getcont() != this)
; 1438 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1439 : 		if (this->_Alval == _Right._Alval)
; 1440 : 			{	// same allocator, just relink
; 1441 : 			if (this != &_Right)
; 1442 : 				for (const_iterator _Next = _First; _Next != _Last; )
; 1443 : 					{	// transfer ownership
; 1444 : 					const_iterator _Iter = _Next++;
; 1445 : 					_Orphan_ptr(_Right, _Iter._Ptr);
; 1446 : 					_Iter._Adopt(this);
; 1447 : 					}
; 1448 : 			_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1449 : 			}
; 1450 : 
; 1451 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1452 : 		if (this->_Alval == _Right._Alval)
; 1453 : 			_Splice_same(_Where, _Right, _First, _Last, _Count);

	mov	rax, QWORD PTR _Last$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same

; 1454 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1455 : 
; 1456 : 		else
; 1457 : 			{	// different allocator, copy nodes then erase source
; 1458 : 			for (const_iterator _Next = _First; _Next != _Last; ++_Next)
; 1459 : 				insert(_Where, (_Ty &&)*_Next);
; 1460 : 			_Right.erase(_First, _Last);
; 1461 : 			}
; 1462 : 		}

	add	rsp, 56					; 00000038H
	ret	0
?_Splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z DD imagerel $LN104
	DD	imagerel $LN104+42
	DD	imagerel $unwind$?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata	ENDS
;	COMDAT ?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z
_TEXT	SEGMENT
this$ = 64
_Where$ = 72
_Right$ = 80
_First$ = 88
?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z PROC ; std::list<_vector3<float>,xalloc<_vector3<float> > >::splice, COMDAT

; 1145 : 		{	// splice _Right [_First, _First + 1) at _Where

$LN104:
	sub	rsp, 56					; 00000038H

; 1146 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1147 : 		if (_First == _Right.end())
; 1148 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1149 : 		else
; 1150 : 
; 1151 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1152 : 		if (_First != _Right.end())

	cmp	r9, QWORD PTR [r8]
	je	SHORT $LL41@splice

; 1153 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1154 : 
; 1155 : 			{	// element exists, try splice
; 1156 : 			const_iterator _Last = _First;
; 1157 : 			++_Last;

	mov	rax, QWORD PTR [r9]

; 1158 : 			if (this != &_Right
; 1159 : 				|| (_Where != _First && _Where != _Last))

	cmp	rcx, r8
	jne	SHORT $LN1@splice
	cmp	rdx, r9
	je	SHORT $LL41@splice
	cmp	rdx, rax
	je	SHORT $LL41@splice
$LN1@splice:

; 1160 : 				_Splice(_Where, _Right, _First, _Last, 1);

	mov	QWORD PTR [rsp+32], rax
	call	?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same
$LL41@splice:

; 1161 : 			}
; 1162 : 		}

	add	rsp, 56					; 00000038H
	ret	0
?splice@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@0@Z ENDP ; std::list<_vector3<float>,xalloc<_vector3<float> > >::splice
_TEXT	ENDS
PUBLIC	?move_to_front@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::move_to_front
pdata	SEGMENT
$pdata$?move_to_front@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD imagerel $LN130
	DD	imagerel $LN130+85
	DD	imagerel $unwind$?move_to_front@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?move_to_front@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_sphere.cpp
xdata	ENDS
_TEXT	SEGMENT
this$ = 64
j$ = 72
?move_to_front@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z PROC ; Miniball::move_to_front

; 127  : {

$LN130:
	sub	rsp, 56					; 00000038H
	mov	r10, rcx

; 128  : 	if (support_end == j)

	cmp	QWORD PTR [rcx+256], rdx
	jne	SHORT $LN10@move_to_fr

; 129  : 		support_end++;

	mov	rax, QWORD PTR [rcx+256]
	mov	r8, QWORD PTR [rax]
	mov	QWORD PTR [rcx+256], r8
$LN10@move_to_fr:

; 130  : 	L.splice (L.begin(), L, j);

	mov	r8, QWORD PTR [rcx]
	mov	rax, QWORD PTR [r8]
	cmp	rdx, r8
	je	SHORT $LL66@move_to_fr
	mov	rcx, QWORD PTR [rdx]
	cmp	rax, rdx
	je	SHORT $LL66@move_to_fr
	cmp	rax, rcx
	je	SHORT $LL66@move_to_fr
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	mov	r8, r10
	mov	rdx, rax
	mov	rcx, r10
	call	?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same
	npad	1
$LL66@move_to_fr:

; 131  : }

	add	rsp, 56					; 00000038H
	ret	0
?move_to_front@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ENDP ; Miniball::move_to_front
_TEXT	ENDS
PUBLIC	?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::mtf_mb
pdata	SEGMENT
$pdata$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD imagerel $LN196
	DD	imagerel $LN196+53
	DD	imagerel $unwind$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
$pdata$3$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD imagerel $LN196+53
	DD	imagerel $LN196+308
	DD	imagerel $chain$3$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
$pdata$4$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD imagerel $LN196+308
	DD	imagerel $LN196+319
	DD	imagerel $chain$4$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD 040f01H
	DD	0f640fH
	DD	0700b920fH
$chain$3$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD 081c21H
	DD	03781cH
	DD	04680fH
	DD	0e540aH
	DD	0c3405H
	DD	imagerel $LN196
	DD	imagerel $LN196+53
	DD	imagerel $unwind$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
$chain$4$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD 021H
	DD	imagerel $LN196
	DD	imagerel $LN196+53
	DD	imagerel $unwind$?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 96
i$ = 104
?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z PROC ; Miniball::mtf_mb

; 105  : {

$LN196:
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+16], rdx
	push	rdi
	sub	rsp, 80					; 00000050H

; 106  : 	support_end = L.begin();
; 107  : 
; 108  : 	if ((B.size())== 4) 

	cmp	DWORD PTR [rcx+28], 4
	mov	rdi, QWORD PTR [rcx]
	mov	rsi, rcx
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rcx+256], rax
	je	$LN3@mtf_mb

; 109  : 		return;
; 110  : 
; 111  : 	for (It k=L.begin(); k!=i;) 

	mov	rdi, QWORD PTR [rdi]
	cmp	rdi, rdx
	je	$LN3@mtf_mb
	mov	QWORD PTR [rsp+96], rbx
	mov	QWORD PTR [rsp+112], rbp
	movaps	XMMWORD PTR [rsp+64], xmm6
	movss	xmm6, DWORD PTR __mask@@NegFloat@
	movaps	XMMWORD PTR [rsp+48], xmm7
	xorps	xmm7, xmm7
	npad	12
$LL4@mtf_mb:

; 112  : 	{
; 113  : 		It j=k++;
; 114  : 		if (B.excess(*j) > 0) 

	mov	rax, QWORD PTR [rsi+240]
	mov	rbx, rdi
	mov	rdi, QWORD PTR [rdi]
	lea	rdx, QWORD PTR [rbx+16]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [rdx]
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm2, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rax+4]
	mulss	xmm2, xmm2
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [rsi+248]
	xorps	xmm0, xmm6
	addss	xmm2, xmm0
	comiss	xmm2, xmm7
	jbe	SHORT $LL195@mtf_mb

; 115  : 		{
; 116  : 			if (B.push(*j)) 

	lea	rcx, QWORD PTR [rsi+24]
	call	?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z	; Basis::push
	test	al, al
	je	SHORT $LL195@mtf_mb

; 117  : 			{
; 118  : 				mtf_mb (j);

	mov	rdx, rbx
	mov	rcx, rsi
	call	?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::mtf_mb

; 119  : 				B.pop();

	dec	DWORD PTR [rsi+28]

; 120  : 				move_to_front(j);

	cmp	QWORD PTR [rsi+256], rbx
	jne	SHORT $LN73@mtf_mb
	mov	rax, QWORD PTR [rsi+256]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rsi+256], rcx
$LN73@mtf_mb:
	mov	rax, QWORD PTR [rsi]
	mov	rdx, QWORD PTR [rax]
	cmp	rbx, rax
	je	SHORT $LL195@mtf_mb
	mov	rax, QWORD PTR [rbx]
	cmp	rdx, rbx
	je	SHORT $LL195@mtf_mb
	cmp	rdx, rax
	je	SHORT $LL195@mtf_mb
	mov	r9, rbx
	mov	r8, rsi
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], rax
	call	?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same
$LL195@mtf_mb:

; 109  : 		return;
; 110  : 
; 111  : 	for (It k=L.begin(); k!=i;) 

	cmp	rdi, QWORD PTR i$[rsp]
	jne	$LL4@mtf_mb
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [rsp+96]
$LN3@mtf_mb:

; 121  : 			}
; 122  : 		}
; 123  : 	}
; 124  : }

	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ENDP ; Miniball::mtf_mb
PUBLIC	?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::pivot_mb
pdata	SEGMENT
$pdata$?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD imagerel $LN220
	DD	imagerel $LN220+435
	DD	imagerel $unwind$?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z DD 0124a01H
	DD	012644aH
	DD	03a831H
	DD	04982cH
	DD	058824H
	DD	06781fH
	DD	07681bH
	DD	0155417H
	DD	0143417H
	DD	07010f217H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 144
i$ = 152
?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z PROC ; Miniball::pivot_mb

; 135  : {

$LN220:
	mov	rax, rsp
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+32], rbp
	mov	QWORD PTR [rax+16], rdx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	mov	rbp, rcx
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10

; 136  : 	It t = ++L.begin();

	mov	rax, QWORD PTR [rcx]
	mov	rbx, QWORD PTR [rax]
	mov	rbx, QWORD PTR [rbx]

; 137  : 	mtf_mb (t);

	mov	rdx, rbx
	call	?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::mtf_mb
	mov	QWORD PTR [rsp+144], rsi
	movss	xmm10, DWORD PTR __mask@@NegFloat@
	xorps	xmm9, xmm9
	npad	9
$LL6@pivot_mb:

; 138  : 	float max_e, old_sqr_r = 0;
; 139  : 	do 
; 140  : 	{
; 141  : 		It pivot = L.begin();

	mov	rdi, QWORD PTR [rbp]

; 142  : 		max_e = max_excess (t, i, pivot);

	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR [rbp+240]
	movss	xmm6, DWORD PTR [rbp+248]
	movaps	xmm3, xmm9
	mov	rdi, QWORD PTR [rdi]
	cmp	rbx, rax
	je	$LN1@pivot_mb
	movss	xmm5, DWORD PTR [rcx+4]
	movss	xmm7, DWORD PTR [rcx]
	movss	xmm8, DWORD PTR [rcx+8]
	movaps	xmm4, xmm6
	xorps	xmm4, xmm10
$LL51@pivot_mb:
	movss	xmm1, DWORD PTR [rbx+20]
	movss	xmm2, DWORD PTR [rbx+16]
	movss	xmm0, DWORD PTR [rbx+24]
	subss	xmm2, xmm7
	subss	xmm1, xmm5
	subss	xmm0, xmm8
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	addss	xmm2, xmm4
	comiss	xmm2, xmm3
	jbe	SHORT $LN41@pivot_mb
	movaps	xmm3, xmm2
	mov	rdi, rbx
$LN41@pivot_mb:
	mov	rbx, QWORD PTR [rbx]
	cmp	rbx, rax
	jne	SHORT $LL51@pivot_mb

; 143  : 		if (max_e > 0) 

	comiss	xmm3, xmm9
	jbe	$LN1@pivot_mb

; 144  : 		{
; 145  : 			t = support_end;

	mov	rbx, QWORD PTR [rbp+256]

; 146  : 			if (t==pivot) ++t;

	cmp	rbx, rdi
	jne	SHORT $LN71@pivot_mb
	mov	rbx, QWORD PTR [rbx]
$LN71@pivot_mb:

; 147  : 			old_sqr_r = B.squared_radius();
; 148  : 			B.push (*pivot);

	lea	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [rbp+24]
	call	?push@Basis@@QEAA_NAEBU?$_vector3@M@@@Z	; Basis::push

; 149  : 			mtf_mb (support_end);

	mov	rdx, QWORD PTR [rbp+256]
	mov	rcx, rbp
	call	?mtf_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::mtf_mb

; 150  : 			B.pop();

	dec	DWORD PTR [rbp+28]

; 151  : 			move_to_front (pivot);

	cmp	QWORD PTR [rbp+256], rdi
	jne	SHORT $LN94@pivot_mb
	mov	rax, QWORD PTR [rbp+256]
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rbp+256], rcx
$LN94@pivot_mb:
	mov	rax, QWORD PTR [rbp]
	mov	rdx, QWORD PTR [rax]
	cmp	rdi, rax
	je	SHORT $LL5@pivot_mb
	mov	rax, QWORD PTR [rdi]
	cmp	rdx, rdi
	je	SHORT $LL5@pivot_mb
	cmp	rdx, rax
	je	SHORT $LL5@pivot_mb
	mov	r9, rdi
	mov	r8, rbp
	mov	rcx, rbp
	mov	QWORD PTR [rsp+32], rax
	call	?_Splice_same@?$list@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXV?$_List_const_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@2@AEAV12@00_K@Z ; std::list<_vector3<float>,xalloc<_vector3<float> > >::_Splice_same
	npad	10
$LL5@pivot_mb:

; 152  : 		}
; 153  : 	} while ((max_e > 0) && (B.squared_radius() > old_sqr_r));

	comiss	xmm6, DWORD PTR [rbp+248]
	jb	$LL6@pivot_mb
$LN1@pivot_mb:
	mov	rsi, QWORD PTR [rsp+144]

; 154  : }

	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+128]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rdi
	ret	0
?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ENDP ; Miniball::pivot_mb
_TEXT	ENDS
PUBLIC	?build@Miniball@@QEAAXXZ			; Miniball::build
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?build@Miniball@@QEAAXXZ PROC				; Miniball::build

; 94   : 	B.reset();

	lea	rax, QWORD PTR [rcx+176]
	xor	edx, edx
	mov	QWORD PTR [rcx+28], rdx
	mov	QWORD PTR [rax], rdx
	mov	DWORD PTR [rax+8], edx
	mov	QWORD PTR [rcx+240], rax
	mov	DWORD PTR [rcx+248], -1082130432	; bf800000H

; 95   : 	support_end = L.begin();

	mov	rdx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+256], rax

; 96   : 
; 97   : 	// @@ pivotting or not ?
; 98   : 	if ( 1 )
; 99   : 		pivot_mb	(L.end());
; 100  : 	else
; 101  : 		mtf_mb		(L.end());
; 102  : }

	jmp	?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::pivot_mb
?build@Miniball@@QEAAXXZ ENDP				; Miniball::build
PUBLIC	__real@bf800000
PUBLIC	?Fsphere_compute@@YAXAEAU?$_sphere@M@@PEBU?$_vector3@M@@H@Z ; Fsphere_compute
pdata	SEGMENT
$pdata$?Fsphere_compute@@YAXAEAU?$_sphere@M@@PEBU?$_vector3@M@@H@Z DD imagerel $LN218
	DD	imagerel $LN218+631
	DD	imagerel $unwind$?Fsphere_compute@@YAXAEAU?$_sphere@M@@PEBU?$_vector3@M@@H@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?Fsphere_compute@@YAXAEAU?$_sphere@M@@PEBU?$_vector3@M@@H@Z DD 0114001H
	DD	0147840H
	DD	0156831H
	DD	0347424H
	DD	0336424H
	DD	0323424H
	DD	02c0124H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
xdata	ENDS
;	COMDAT __real@bf800000
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_sphere.cpp
CONST	ENDS
_TEXT	SEGMENT
$T342929 = 32
mb$ = 48
dest$ = 400
verts$ = 408
count$ = 416
?Fsphere_compute@@YAXAEAU?$_sphere@M@@PEBU?$_vector3@M@@H@Z PROC ; Fsphere_compute

; 330  : {

$LN218:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	mov	QWORD PTR [rax+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-96]
	sub	rsp, 352				; 00000160H

; 331  : 	Miniball mb;

	xor	r14d, r14d
	mov	r12, rdx
	mov	r13, rcx
	movaps	XMMWORD PTR [rax-56], xmm6
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	lea	edx, QWORD PTR [r14+32]
	movaps	XMMWORD PTR [rax-72], xmm7
	mov	esi, r8d
	mov	QWORD PTR mb$[rsp+8], r14
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	xorps	xmm6, xmm6
	movss	xmm7, DWORD PTR __real@bf800000
	mov	QWORD PTR mb$[rsp], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR mb$[rsp]
	mov	QWORD PTR [rax+8], rax
	lea	rax, QWORD PTR mb$[rbp-80]

; 332  : 
; 333  : 	for(int i=0;i<count;i++)

	mov	ebx, r14d
	movss	DWORD PTR mb$[rbp-80], xmm6
	movss	DWORD PTR mb$[rbp-76], xmm6
	movss	DWORD PTR mb$[rbp-72], xmm6
	mov	QWORD PTR mb$[rsp+28], r14
	mov	QWORD PTR mb$[rbp], r14
	mov	QWORD PTR mb$[rbp-16], rax
	movss	DWORD PTR mb$[rbp-8], xmm7
	test	esi, esi
	jle	SHORT $LN1@Fsphere_co
	mov	r15, 1537228672809129300		; 1555555555555554H
	npad	1
$LL3@Fsphere_co:

; 334  : 		mb.check_in(verts[i]);

	mov	rdi, QWORD PTR mb$[rsp]
	movsxd	rax, ebx
	mov	rdx, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	r8, QWORD PTR [r12+rcx*4]
	mov	rcx, rdi
	call	?_Buynode@?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAPEAU_Node@?$_List_nod@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@2@PEAU342@0AEBU?$_vector3@M@@@Z ; std::_List_val<_vector3<float>,xalloc<_vector3<float> > >::_Buynode
	mov	rdx, QWORD PTR mb$[rsp+8]
	mov	rcx, r15
	sub	rcx, rdx
	cmp	rcx, 1
	jb	$LN212@Fsphere_co
	inc	rdx
	inc	ebx
	mov	QWORD PTR mb$[rsp+8], rdx
	mov	QWORD PTR [rdi+8], rax
	mov	rcx, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
	cmp	ebx, esi
	jl	SHORT $LL3@Fsphere_co
$LN1@Fsphere_co:

; 335  : 
; 336  : 	mb.build	();

	mov	rdx, QWORD PTR mb$[rsp]
	lea	rax, QWORD PTR mb$[rbp-80]
	movss	DWORD PTR mb$[rbp-80], xmm6
	movss	DWORD PTR mb$[rbp-76], xmm6
	movss	DWORD PTR mb$[rbp-72], xmm6
	movss	DWORD PTR mb$[rbp-8], xmm7
	mov	QWORD PTR mb$[rsp+28], r14
	mov	QWORD PTR mb$[rbp-16], rax
	mov	rax, QWORD PTR [rdx]
	lea	rcx, QWORD PTR mb$[rsp]
	mov	QWORD PTR mb$[rbp], rax
	call	?pivot_mb@Miniball@@AEAAXV?$_List_iterator@V?$_List_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@@Z ; Miniball::pivot_mb

; 337  : 
; 338  : 	dest.P.set	(mb.center());

	mov	rcx, QWORD PTR mb$[rbp-16]

; 339  : 	dest.R =	( _sqrt( mb.squared_radius() ));
; 340  : }

	lea	r12, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR $T342929[rsp], rax
	mov	eax, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR $T342929[rsp+4]
	movss	xmm0, DWORD PTR $T342929[rsp]
	mov	DWORD PTR $T342929[rsp+8], eax
	mov	rax, QWORD PTR mb$[rsp]
	movss	DWORD PTR [r13+4], xmm1
	movss	DWORD PTR [r13], xmm0
	sqrtss	xmm1, DWORD PTR mb$[rbp-8]
	movss	xmm0, DWORD PTR $T342929[rsp+8]
	movss	DWORD PTR [r13+8], xmm0
	mov	rdi, QWORD PTR [rax]
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR mb$[rsp]
	mov	QWORD PTR [rax+8], rax
	mov	rax, QWORD PTR mb$[rsp]
	mov	QWORD PTR mb$[rsp+8], r14
	movss	DWORD PTR [r13+12], xmm1
	cmp	rdi, rax
	je	SHORT $LN215@Fsphere_co
	npad	3
$LL137@Fsphere_co:
	mov	rsi, QWORD PTR [rdi]
	inc	DWORD PTR ?Memory@@3VxrMemory@@A
	movzx	ecx, BYTE PTR [rdi-1]
	dec	rdi
	cmp	ecx, 55					; 00000037H
	jne	SHORT $LN155@Fsphere_co
	test	rdi, rdi
	je	SHORT $LN136@Fsphere_co
	and	rdi, -8
	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN217@Fsphere_co
$LN212@Fsphere_co:

; 334  : 		mb.check_in(verts[i]);

	lea	rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3

; 339  : 	dest.R =	( _sqrt( mb.squared_radius() ));
; 340  : }

$LN155@Fsphere_co:
	lea	rbx, QWORD PTR [rcx+rcx*4]
	mov	rcx, QWORD PTR [r12+rbx*8]
	call	QWORD PTR __imp_EnterCriticalSection
	mov	rax, QWORD PTR [r12+rbx*8+32]
	mov	QWORD PTR [rdi], rax
	mov	rcx, QWORD PTR [r12+rbx*8]
	mov	QWORD PTR [r12+rbx*8+32], rdi
	call	QWORD PTR __imp_LeaveCriticalSection
$LN217@Fsphere_co:
	mov	rax, QWORD PTR mb$[rsp]
$LN136@Fsphere_co:
	mov	rdi, rsi
	cmp	rsi, rax
	jne	SHORT $LL137@Fsphere_co
$LN215@Fsphere_co:
	test	rax, rax
	je	SHORT $LN208@Fsphere_co
	inc	DWORD PTR ?Memory@@3VxrMemory@@A
	lea	rdi, QWORD PTR [rax-1]
	movzx	eax, BYTE PTR [rax-1]
	cmp	eax, 55					; 00000037H
	jne	SHORT $LN187@Fsphere_co
	test	rdi, rdi
	je	SHORT $LN208@Fsphere_co
	and	rdi, -8
	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN208@Fsphere_co
$LN187@Fsphere_co:
	lea	rbx, QWORD PTR [rax+rax*4]
	mov	rcx, QWORD PTR [r12+rbx*8]
	call	QWORD PTR __imp_EnterCriticalSection
	mov	rax, QWORD PTR [r12+rbx*8+32]
	mov	QWORD PTR [rdi], rax
	mov	rcx, QWORD PTR [r12+rbx*8]
	mov	QWORD PTR [r12+rbx*8+32], rdi
	call	QWORD PTR __imp_LeaveCriticalSection
$LN208@Fsphere_co:
	lea	r11, QWORD PTR [rsp+352]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
$LN216@Fsphere_co:
?Fsphere_compute@@YAXAEAU?$_sphere@M@@PEBU?$_vector3@M@@H@Z ENDP ; Fsphere_compute
END
