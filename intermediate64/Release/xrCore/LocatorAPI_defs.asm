; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z ; xr_strlwr
PUBLIC	?assign@?$_flags@I@@QEAAAEAU1@I@Z		; _flags<unsigned int>::assign
PUBLIC	??_C@_0O@OKDOADIG@FS_Path?3?3_set?$AA@		; `string'
PUBLIC	??_C@_0BE@LIJLDKGO@LocatorAPI_defs?4cpp?$AA@	; `string'
PUBLIC	??_C@_03BDGOHNNK@add?$AA@			; `string'
PUBLIC	??_C@_0BB@JHDHNHCI@FS_Path?3?3_update?$AA@	; `string'
PUBLIC	??_C@_04EEHDLEKF@dest?$AA@			; `string'
PUBLIC	??_C@_03LOJEKLML@src?$AA@			; `string'
EXTRN	__imp_tolower:PROC
;	COMDAT ?ignore_always@?3??_set@FS_Path@@QEAAXPEAD@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??_set@FS_Path@@QEAAXPEAD@Z@4_NA DB 01H DUP (?) ; `FS_Path::_set'::`4'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?3??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA DB 01H DUP (?) ; `FS_Path::_update'::`4'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?7??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA
_BSS	SEGMENT
?ignore_always@?7??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA DB 01H DUP (?) ; `FS_Path::_update'::`8'::ignore_always
;	COMDAT ??_C@_03LOJEKLML@src?$AA@
CONST	SEGMENT
??_C@_03LOJEKLML@src?$AA@ DB 'src', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEHDLEKF@dest?$AA@
CONST	SEGMENT
??_C@_04EEHDLEKF@dest?$AA@ DB 'dest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHDHNHCI@FS_Path?3?3_update?$AA@
CONST	SEGMENT
??_C@_0BB@JHDHNHCI@FS_Path?3?3_update?$AA@ DB 'FS_Path::_update', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BDGOHNNK@add?$AA@
CONST	SEGMENT
??_C@_03BDGOHNNK@add?$AA@ DB 'add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LIJLDKGO@LocatorAPI_defs?4cpp?$AA@
CONST	SEGMENT
??_C@_0BE@LIJLDKGO@LocatorAPI_defs?4cpp?$AA@ DB 'LocatorAPI_defs.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OKDOADIG@FS_Path?3?3_set?$AA@
CONST	SEGMENT
??_C@_0O@OKDOADIG@FS_Path?3?3_set?$AA@ DB 'FS_Path::_set', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_flags.h
;	COMDAT ?assign@?$_flags@I@@QEAAAEAU1@I@Z
_TEXT	SEGMENT
this$ = 8
mask$ = 16
?assign@?$_flags@I@@QEAAAEAU1@I@Z PROC			; _flags<unsigned int>::assign, COMDAT

; 21   : 	IC	SelfRef	assign	(const T mask)								{ flags	=	mask;		return *this;	}

	mov	DWORD PTR [rcx], edx
	mov	rax, rcx
	ret	0
?assign@?$_flags@I@@QEAAAEAU1@I@Z ENDP			; _flags<unsigned int>::assign
_TEXT	ENDS
PUBLIC	?PatternMatch@@YA_NPEBD0@Z			; PatternMatch
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi_defs.cpp
_TEXT	SEGMENT
s$ = 8
mask$ = 16
?PatternMatch@@YA_NPEBD0@Z PROC				; PatternMatch

; 114  : 	LPCSTR cp=0;

	xor	r11d, r11d
	mov	r9d, r11d

; 115  : 	LPCSTR mp=0;

	mov	r10d, r11d
$LN29@PatternMat:

; 116  : 	for (; *s&&*mask!='*'; mask++,s++) if (*mask!=*s&&*mask!='?') return false;

	movzx	r8d, BYTE PTR [rcx]
	test	r8b, r8b
	je	SHORT $LN21@PatternMat
	movzx	eax, BYTE PTR [rdx]
	cmp	al, 42					; 0000002aH
	je	SHORT $LN20@PatternMat
	cmp	al, r8b
	je	SHORT $LN12@PatternMat
	cmp	al, 63					; 0000003fH
	jne	SHORT $LN22@PatternMat
$LN12@PatternMat:
	inc	rdx
	inc	rcx
	jmp	SHORT $LN29@PatternMat
$LN22@PatternMat:
	xor	al, al

; 123  : }

	ret	0
$LN20@PatternMat:

; 117  : 	for (;;) {
; 118  : 		if (!*s) { while (*mask=='*') mask++; return !*mask; }

	movzx	r8d, BYTE PTR [rcx]
	test	r8b, r8b
	je	SHORT $LN21@PatternMat

; 119  : 		if (*mask=='*') { if (!*++mask) return true; mp=mask; cp=s+1; continue; }

	movzx	eax, BYTE PTR [rdx]
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN4@PatternMat
	inc	rdx
	cmp	BYTE PTR [rdx], r11b
	je	SHORT $LN23@PatternMat
	mov	r10, rdx
	lea	r9, QWORD PTR [rcx+1]
	jmp	SHORT $LN20@PatternMat
$LN4@PatternMat:

; 120  : 		if (*mask==*s||*mask=='?') { mask++, s++; continue; }

	cmp	al, r8b
	je	SHORT $LN1@PatternMat
	cmp	al, 63					; 0000003fH
	je	SHORT $LN1@PatternMat

; 121  : 		mask=mp; s=cp++;

	mov	rcx, r9
	mov	rdx, r10
	inc	r9

; 122  : 	}

	jmp	SHORT $LN20@PatternMat
$LN1@PatternMat:

; 120  : 		if (*mask==*s||*mask=='?') { mask++, s++; continue; }

	inc	rdx
	inc	rcx
	jmp	SHORT $LN20@PatternMat
$LN23@PatternMat:

; 119  : 		if (*mask=='*') { if (!*++mask) return true; mp=mask; cp=s+1; continue; }

	mov	al, 1

; 123  : }

	ret	0
$LN21@PatternMat:

; 117  : 	for (;;) {
; 118  : 		if (!*s) { while (*mask=='*') mask++; return !*mask; }

	cmp	BYTE PTR [rdx], 42			; 0000002aH
	jne	SHORT $LN5@PatternMat
$LL6@PatternMat:
	inc	rdx
	cmp	BYTE PTR [rdx], 42			; 0000002aH
	je	SHORT $LL6@PatternMat
$LN5@PatternMat:
	cmp	BYTE PTR [rdx], r11b
	sete	al

; 123  : }

	ret	0
?PatternMatch@@YA_NPEBD0@Z ENDP				; PatternMatch
PUBLIC	?rescan_path_cb@FS_Path@@QEAAXXZ		; FS_Path::rescan_path_cb
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
?rescan_path_cb@FS_Path@@QEAAXXZ PROC			; FS_Path::rescan_path_cb

; 108  : 	m_Flags.set(flNeedRescan,TRUE);

	or	DWORD PTR [rcx+40], 4

; 109  :     FS.m_Flags.set(CLocatorAPI::flNeedRescan,TRUE);

	mov	rax, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	or	DWORD PTR [rax+160], 1

; 110  : }

	ret	0
?rescan_path_cb@FS_Path@@QEAAXXZ ENDP			; FS_Path::rescan_path_cb
PUBLIC	??1FS_Path@@QEAA@XZ				; FS_Path::~FS_Path
pdata	SEGMENT
$pdata$??1FS_Path@@QEAA@XZ DD imagerel $LN28
	DD	imagerel $LN28+92
	DD	imagerel $unwind$??1FS_Path@@QEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??1FS_Path@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
??1FS_Path@@QEAA@XZ PROC				; FS_Path::~FS_Path

; 51   : {

$LN28:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 52   : 	xr_free	(m_Root);

	add	rcx, 8
	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN3@FS_Path
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN3@FS_Path:

; 53   : 	xr_free	(m_Path);

	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN8@FS_Path
	mov	rcx, rbx
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN8@FS_Path:

; 54   : 	xr_free	(m_Add);

	cmp	QWORD PTR [rbx+16], 0
	lea	rcx, QWORD PTR [rbx+16]
	je	SHORT $LN13@FS_Path
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN13@FS_Path:

; 55   : 	xr_free	(m_DefExt);

	cmp	QWORD PTR [rbx+24], 0
	lea	rcx, QWORD PTR [rbx+24]
	je	SHORT $LN18@FS_Path
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN18@FS_Path:

; 56   : 	xr_free	(m_FilterCaption);

	cmp	QWORD PTR [rbx+32], 0
	lea	rcx, QWORD PTR [rbx+32]
	je	SHORT $LN23@FS_Path
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN23@FS_Path:

; 57   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1FS_Path@@QEAA@XZ ENDP				; FS_Path::~FS_Path
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
pdata	SEGMENT
$pdata$?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z DD imagerel $LN58
	DD	imagerel $LN58+84
	DD	imagerel $unwind$?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrstring.h
xdata	ENDS
;	COMDAT ?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z
_TEXT	SEGMENT
src$ = 48
?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z PROC ; xr_strlwr, COMDAT

; 107  : IC void	xr_strlwr		(xr_string& src)									{ for(xr_string::iterator it=src.begin(); it!=src.end(); it++) *it=xr_string::value_type(tolower(*it));}

$LN58:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	cmp	QWORD PTR [rcx+24], 16
	mov	rdi, rcx
	jb	SHORT $LN10@xr_strlwr
	mov	rbx, QWORD PTR [rcx]
	jmp	SHORT $LL11@xr_strlwr
$LN10@xr_strlwr:
	mov	rbx, rcx
	npad	4
$LL11@xr_strlwr:
	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN28@xr_strlwr
	mov	rcx, QWORD PTR [rdi]
	jmp	SHORT $LN29@xr_strlwr
$LN28@xr_strlwr:
	mov	rcx, rdi
$LN29@xr_strlwr:
	add	rcx, QWORD PTR [rdi+16]
	cmp	rbx, rcx
	je	SHORT $LN1@xr_strlwr
	movsx	ecx, BYTE PTR [rbx]
	call	QWORD PTR __imp_tolower
	inc	rbx
	mov	BYTE PTR [rbx-1], al
	jmp	SHORT $LL11@xr_strlwr
$LN1@xr_strlwr:
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?xr_strlwr@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z ENDP ; xr_strlwr
PUBLIC	?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z	; FS_Path::_update
pdata	SEGMENT
$pdata$?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z DD imagerel $LN21
	DD	imagerel $LN21+316
	DD	imagerel $unwind$?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z DD 0b1b01H
	DD	052641bH
	DD	051541bH
	DD	050341bH
	DD	04c011bH
	DD	0c012d014H
	DD	07010H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi_defs.cpp
xdata	ENDS
_TEXT	SEGMENT
temp$ = 80
this$ = 640
dest$ = 648
src$ = 656
?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z PROC		; FS_Path::_update

; 91   : {

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 608				; 00000260H

; 92   : 	R_ASSERT			(dest);

	xor	ebx, ebx
	mov	rdi, r8
	mov	rsi, rdx
	cmp	BYTE PTR ?ignore_always@?3??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA, bl
	mov	rbp, rcx
	lea	r12, OFFSET FLAT:??_C@_0BB@JHDHNHCI@FS_Path?3?3_update?$AA@
	lea	r13, OFFSET FLAT:??_C@_0BE@LIJLDKGO@LocatorAPI_defs?4cpp?$AA@
	jne	SHORT $LN7@update@3
	test	rdx, rdx
	jne	SHORT $LN7@update@3
	lea	rax, OFFSET FLAT:?ignore_always@?3??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA
	lea	r8, OFFSET FLAT:??_C@_04EEHDLEKF@dest?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0BB@DBHFCHNO@assertion?5failed?$AA@
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r12
	mov	DWORD PTR [rsp+48], 92			; 0000005cH
	lea	rcx, OFFSET FLAT:?Debug@@3VxrDebug@@A	; Debug
	xor	r9d, r9d
	mov	QWORD PTR [rsp+40], r13
	mov	QWORD PTR [rsp+32], rbx
	call	?backend@xrDebug@@QEAAXPEBD0000H0AEA_N@Z ; xrDebug::backend
$LN7@update@3:

; 93   :     R_ASSERT			(src);

	cmp	BYTE PTR ?ignore_always@?7??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA, bl
	jne	SHORT $LN3@update@3
	test	rdi, rdi
	jne	SHORT $LN3@update@3
	lea	rax, OFFSET FLAT:?ignore_always@?7??_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z@4_NA
	lea	r8, OFFSET FLAT:??_C@_03LOJEKLML@src?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0BB@DBHFCHNO@assertion?5failed?$AA@
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r12
	mov	DWORD PTR [rsp+48], 93			; 0000005dH
	lea	rcx, OFFSET FLAT:?Debug@@3VxrDebug@@A	; Debug
	xor	r9d, r9d
	mov	QWORD PTR [rsp+40], r13
	mov	QWORD PTR [rsp+32], rbx
	call	?backend@xrDebug@@QEAAXPEBD0000H0AEA_N@Z ; xrDebug::backend
$LN3@update@3:

; 94   : 	string_path			temp;
; 95   : 	strcpy_s			(temp, sizeof(temp), src);

	mov	ebx, 520				; 00000208H
	lea	rcx, QWORD PTR temp$[rsp]
	mov	r8, rdi
	mov	edx, ebx
	call	QWORD PTR __imp_strcpy_s

; 96   : 	strconcat			(sizeof(dest), dest, m_Path, temp);

	mov	r8, QWORD PTR [rbp]
	or	rcx, -1
	xor	eax, eax
	mov	rdi, r8
	mov	edx, ebx
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	rcx, rsi
	call	QWORD PTR __imp_strcpy_s
	sub	ebx, edi
	lea	r8, QWORD PTR temp$[rsp]
	mov	edx, ebx
	mov	rcx, rsi
	call	QWORD PTR __imp_strcat_s

; 97   : 	return xr_strlwr	(dest);

	mov	rcx, rsi
	call	QWORD PTR __imp_strlwr

; 98   : }

	lea	r11, QWORD PTR [rsp+608]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z ENDP		; FS_Path::_update
PUBLIC	?_set_root@FS_Path@@QEAAXPEAD@Z			; FS_Path::_set_root
pdata	SEGMENT
$pdata$?_set_root@FS_Path@@QEAAXPEAD@Z DD imagerel $LN43
	DD	imagerel $LN43+407
	DD	imagerel $unwind$?_set_root@FS_Path@@QEAAXPEAD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?_set_root@FS_Path@@QEAAXPEAD@Z DD 0b1d01H
	DD	04b741dH
	DD	04a641dH
	DD	049541dH
	DD	048341dH
	DD	046011dH
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
temp$ = 32
this$ = 576
root$ = 584
?_set_root@FS_Path@@QEAAXPEAD@Z PROC			; FS_Path::_set_root

; 75   : {

$LN43:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 560				; 00000230H

; 76   : 	// m_Root
; 77   : //	R_ASSERT		(root);
; 78   : 	xr_free			(m_Root);

	cmp	QWORD PTR [rcx+8], 0
	mov	rsi, rdx
	mov	rbp, rcx
	je	SHORT $LN14@set_root
	add	rcx, 8
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>

; 79   : 	m_Root			= xr_strlwr(xr_strdup(root));

$LN14@set_root:
	or	rcx, -1
	xor	eax, eax
	mov	rdi, rsi
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	ebx, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r8d, ebx
	mov	rdx, rsi
	mov	rcx, rax
	mov	rdi, rax
	call	memcpy
	mov	rcx, rdi
	call	QWORD PTR __imp_strlwr
	mov	QWORD PTR [rbp+8], rax
	mov	r11, rax

; 80   : 	if (m_Root[0] && m_Root[xr_strlen(m_Root)-1]!='\\') strcat(m_Root,"\\");

	cmp	BYTE PTR [rax], 0
	je	SHORT $LN2@set_root
	or	rcx, -1
	xor	eax, eax
	mov	rdi, r11
	repne scasb
	not	rcx
	sub	ecx, 2
	cmp	BYTE PTR [rcx+r11], 92			; 0000005cH
	je	SHORT $LN2@set_root
	mov	rdi, r11
	or	rcx, -1
	repne scasb
	movzx	eax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [rdi-1], ax
$LN2@set_root:

; 81   : 
; 82   : 	// m_Path
; 83   : 	string_path		temp;
; 84   : 	strconcat		(sizeof(temp),temp,m_Root,m_Add ? m_Add : "");

	mov	rax, QWORD PTR [rbp+16]
	mov	r8, QWORD PTR [rbp+8]
	lea	rsi, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	test	rax, rax
	mov	rdi, r8
	cmovne	rsi, rax
	or	rcx, -1
	xor	eax, eax
	repne scasb
	mov	edi, 520				; 00000208H
	not	rcx
	mov	edx, edi
	lea	rbx, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR temp$[rsp]
	call	QWORD PTR __imp_strcpy_s
	sub	edi, ebx
	lea	rcx, QWORD PTR temp$[rsp]
	mov	edx, edi
	mov	r8, rsi
	call	QWORD PTR __imp_strcat_s

; 85   : 	if (*temp && temp[xr_strlen(temp)-1]!='\\') strcat(temp,"\\");

	cmp	BYTE PTR temp$[rsp], 0
	je	SHORT $LN1@set_root
	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	not	rcx
	sub	ecx, 2
	cmp	BYTE PTR temp$[rsp+rcx], 92		; 0000005cH
	je	SHORT $LN1@set_root
	lea	rdi, QWORD PTR temp$[rsp]
	or	rcx, -1
	repne scasb
	movzx	eax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [rdi-1], ax
$LN1@set_root:

; 86   : 	xr_free			(m_Path);

	cmp	QWORD PTR [rbp], 0
	je	SHORT $LN36@set_root
	mov	rcx, rbp
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>

; 87   : 	m_Path			= xr_strlwr(xr_strdup(temp));

$LN36@set_root:
	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	edi, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	lea	rdx, QWORD PTR temp$[rsp]
	mov	r8d, edi
	mov	rcx, rax
	mov	rbx, rax
	call	memcpy
	mov	rcx, rbx
	call	QWORD PTR __imp_strlwr

; 88   : }

	lea	r11, QWORD PTR [rsp+560]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	QWORD PTR [rbp], rax
	mov	rbp, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	r12
	ret	0
?_set_root@FS_Path@@QEAAXPEAD@Z ENDP			; FS_Path::_set_root
_TEXT	ENDS
PUBLIC	?_set@FS_Path@@QEAAXPEAD@Z			; FS_Path::_set
pdata	SEGMENT
$pdata$?_set@FS_Path@@QEAAXPEAD@Z DD imagerel $LN44
	DD	imagerel $LN44+425
	DD	imagerel $unwind$?_set@FS_Path@@QEAAXPEAD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?_set@FS_Path@@QEAAXPEAD@Z DD 0b1d01H
	DD	051741dH
	DD	050641dH
	DD	04f541dH
	DD	04e341dH
	DD	04c011dH
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
temp$ = 80
this$ = 624
add$ = 632
?_set@FS_Path@@QEAAXPEAD@Z PROC				; FS_Path::_set

; 60   : {

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 608				; 00000260H

; 61   : 	// m_Add
; 62   : 	R_ASSERT		(add);

	cmp	BYTE PTR ?ignore_always@?3??_set@FS_Path@@QEAAXPEAD@Z@4_NA, 0
	mov	rsi, rdx
	mov	rbp, rcx
	jne	SHORT $LN4@set@4
	test	rdx, rdx
	jne	SHORT $LN4@set@4
	lea	rax, OFFSET FLAT:?ignore_always@?3??_set@FS_Path@@QEAAXPEAD@Z@4_NA
	lea	r8, OFFSET FLAT:??_C@_03BDGOHNNK@add?$AA@
	lea	rcx, OFFSET FLAT:?Debug@@3VxrDebug@@A	; Debug
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:??_C@_0O@OKDOADIG@FS_Path?3?3_set?$AA@
	xor	r9d, r9d
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:??_C@_0BE@LIJLDKGO@LocatorAPI_defs?4cpp?$AA@
	mov	DWORD PTR [rsp+48], 62			; 0000003eH
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rdx
	lea	rdx, OFFSET FLAT:??_C@_0BB@DBHFCHNO@assertion?5failed?$AA@
	call	?backend@xrDebug@@QEAAXPEBD0000H0AEA_N@Z ; xrDebug::backend
$LN4@set@4:

; 63   : 	xr_free			(m_Add);

	cmp	QWORD PTR [rbp+16], 0
	je	SHORT $LN17@set@4
	lea	rcx, QWORD PTR [rbp+16]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>

; 64   : 	m_Add			= xr_strlwr(xr_strdup(add));

$LN17@set@4:
	or	rcx, -1
	xor	eax, eax
	mov	rdi, rsi
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	ebx, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r8d, ebx
	mov	rdx, rsi
	mov	rcx, rax
	mov	rdi, rax
	call	memcpy
	mov	rcx, rdi
	call	QWORD PTR __imp_strlwr

; 65   : 
; 66   : 	// m_Path
; 67   : 	string_path		temp;
; 68   : 	strconcat		(sizeof(temp),temp,m_Root,m_Add);

	mov	r8, QWORD PTR [rbp+8]
	or	rcx, -1
	mov	QWORD PTR [rbp+16], rax
	mov	rsi, rax
	xor	eax, eax
	mov	rdi, r8
	repne scasb
	mov	edi, 520				; 00000208H
	not	rcx
	mov	edx, edi
	lea	rbx, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR temp$[rsp]
	call	QWORD PTR __imp_strcpy_s
	sub	edi, ebx
	lea	rcx, QWORD PTR temp$[rsp]
	mov	edx, edi
	mov	r8, rsi
	call	QWORD PTR __imp_strcat_s

; 69   : 	if (temp[xr_strlen(temp)-1]!='\\') strcat(temp,"\\");

	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	not	rcx
	sub	ecx, 2
	cmp	BYTE PTR temp$[rsp+rcx], 92		; 0000005cH
	je	SHORT $LN1@set@4
	lea	rdi, QWORD PTR temp$[rsp]
	or	rcx, -1
	repne scasb
	movzx	eax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [rdi-1], ax
$LN1@set@4:

; 70   : 	xr_free			(m_Path);

	cmp	QWORD PTR [rbp], 0
	je	SHORT $LN37@set@4
	mov	rcx, rbp
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>

; 71   : 	m_Path			= xr_strlwr(xr_strdup(temp));

$LN37@set@4:
	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	edi, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	lea	rdx, QWORD PTR temp$[rsp]
	mov	r8d, edi
	mov	rcx, rax
	mov	rbx, rax
	call	memcpy
	mov	rcx, rbx
	call	QWORD PTR __imp_strlwr

; 72   : }

	lea	r11, QWORD PTR [rsp+608]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	QWORD PTR [rbp], rax
	mov	rbp, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	r12
	ret	0
?_set@FS_Path@@QEAAXPEAD@Z ENDP				; FS_Path::_set
_TEXT	ENDS
PUBLIC	??0FS_Path@@QEAA@PEBD000I@Z			; FS_Path::FS_Path
pdata	SEGMENT
$pdata$??0FS_Path@@QEAA@PEBD000I@Z DD imagerel $LN63
	DD	imagerel $LN63+575
	DD	imagerel $unwind$??0FS_Path@@QEAA@PEBD000I@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0FS_Path@@QEAA@PEBD000I@Z DD 0d2101H
	DD	04d7421H
	DD	04c6421H
	DD	04b5421H
	DD	04a3421H
	DD	0460121H
	DD	0d018e01aH
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
temp$ = 32
this$ = 592
_Root$ = 600
_Add$ = 608
_DefExt$ = 616
_FilterCaption$ = 624
flags$ = 632
??0FS_Path@@QEAA@PEBD000I@Z PROC			; FS_Path::FS_Path

; 32   : {

$LN63:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 560				; 00000230H
	mov	rsi, rcx
	mov	rbp, r8
	mov	r14, rdx

; 33   : //	VERIFY			(_Root&&_Root[0]);
; 34   : 	string_path		temp;
; 35   :     strcpy_s		(temp,sizeof(temp),_Root); 

	mov	r8, rdx
	lea	rcx, QWORD PTR temp$[rsp]
	mov	edx, 520				; 00000208H
	mov	r13, r9
	call	QWORD PTR __imp_strcpy_s

; 36   :     if (_Add) 		strcat(temp,_Add);

	test	rbp, rbp
	je	SHORT $LN2@FS_Path@2
	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	xor	ecx, ecx
	npad	12
$LL62@FS_Path@2:
	movzx	eax, BYTE PTR [rcx+rbp]
	inc	rcx
	mov	BYTE PTR [rdi+rcx-2], al
	test	al, al
	jne	SHORT $LL62@FS_Path@2
$LN2@FS_Path@2:

; 37   : 	if (temp[0] && temp[xr_strlen(temp)-1]!='\\') strcat(temp,"\\");

	cmp	BYTE PTR temp$[rsp], 0
	je	SHORT $LN17@FS_Path@2
	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	not	rcx
	sub	ecx, 2
	cmp	BYTE PTR temp$[rsp+rcx], 92		; 0000005cH
	je	SHORT $LN17@FS_Path@2
	lea	rdi, QWORD PTR temp$[rsp]
	or	rcx, -1
	repne scasb
	movzx	eax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR [rdi-1], ax

; 38   : 	m_Path			= xr_strlwr(xr_strdup(temp));

$LN17@FS_Path@2:
	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR temp$[rsp]
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	ebx, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	lea	rdx, QWORD PTR temp$[rsp]
	mov	r8d, ebx
	mov	rcx, rax
	mov	rdi, rax
	call	memcpy
	mov	rcx, rdi
	call	QWORD PTR __imp_strlwr

; 39   : 	m_DefExt		= _DefExt?xr_strlwr(xr_strdup(_DefExt)):0;

	xor	r12d, r12d
	mov	QWORD PTR [rsi], rax
	test	r13, r13
	je	SHORT $LN5@FS_Path@2
	or	rcx, -1
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	edi, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r8d, edi
	mov	rdx, r13
	mov	rcx, rax
	mov	rbx, rax
	call	memcpy
	mov	rcx, rbx
	call	QWORD PTR __imp_strlwr
	jmp	SHORT $LN6@FS_Path@2
$LN5@FS_Path@2:
	mov	rax, r12
$LN6@FS_Path@2:

; 40   : 	m_FilterCaption	= _FilterCaption?xr_strlwr(xr_strdup(_FilterCaption)):0;

	mov	r13, QWORD PTR _FilterCaption$[rsp]
	mov	QWORD PTR [rsi+24], rax
	test	r13, r13
	je	SHORT $LN7@FS_Path@2
	or	rcx, -1
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	edi, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r8d, edi
	mov	rdx, r13
	mov	rcx, rax
	mov	rbx, rax
	call	memcpy
	mov	rcx, rbx
	call	QWORD PTR __imp_strlwr
	jmp	SHORT $LN8@FS_Path@2
$LN7@FS_Path@2:
	mov	rax, r12
$LN8@FS_Path@2:
	mov	QWORD PTR [rsi+32], rax

; 41   : 	m_Add			= _Add?xr_strlwr(xr_strdup(_Add)):0;

	test	rbp, rbp
	je	SHORT $LN9@FS_Path@2
	or	rcx, -1
	xor	eax, eax
	mov	rdi, rbp
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	edi, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r8d, edi
	mov	rdx, rbp
	mov	rcx, rax
	mov	rbx, rax
	call	memcpy
	mov	rcx, rbx
	call	QWORD PTR __imp_strlwr
	jmp	SHORT $LN10@FS_Path@2
$LN9@FS_Path@2:
	mov	rax, r12
$LN10@FS_Path@2:
	mov	QWORD PTR [rsi+16], rax

; 42   : 	m_Root			= _Root?xr_strlwr(xr_strdup(_Root)):0;

	test	r14, r14
	je	SHORT $LN11@FS_Path@2
	or	rcx, -1
	xor	eax, eax
	mov	rdi, r14
	repne scasb
	not	rcx
	and	ecx, ecx
	mov	edi, ecx
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	r8d, edi
	mov	rdx, r14
	mov	rcx, rax
	mov	rbx, rax
	call	memcpy
	mov	rcx, rbx
	call	QWORD PTR __imp_strlwr
	mov	r12, rax
$LN11@FS_Path@2:

; 43   :     m_Flags.assign	(flags);

	mov	eax, DWORD PTR flags$[rsp]

; 44   : #ifdef _EDITOR
; 45   : 	// Editor(s)/User(s) wants pathes already created in "real" file system :)
; 46   : 	VerifyPath		(m_Path);
; 47   : #endif
; 48   : }

	lea	r11, QWORD PTR [rsp+560]
	mov	QWORD PTR [rsi+8], r12
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rdi, QWORD PTR [r11+56]
	mov	DWORD PTR [rsi+40], eax
	mov	rax, rsi
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	ret	0
??0FS_Path@@QEAA@PEBD000I@Z ENDP			; FS_Path::FS_Path
PUBLIC	?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ; FS_File::set
pdata	SEGMENT
$pdata$?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z DD imagerel $LN91
	DD	imagerel $LN91+201
	DD	imagerel $unwind$?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T304116 = 64
this$ = 64
nm$ = 72
sz$ = 80
modif$ = 88
attr$ = 96
?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z PROC ; FS_File::set

; 21   : {

$LN91:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 32					; 00000020H
	mov	r12, r9
	mov	r13d, r8d
	mov	rbp, rcx

; 22   : 	name		= nm;		xr_strlwr	(name);

	or	r9, -1
	xor	r8d, r8d
	add	rcx, 24
	mov	rsi, rdx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	cmp	QWORD PTR [rbp+48], 16
	jb	SHORT $LN16@set@5
	mov	rbx, QWORD PTR [rbp+24]
	jmp	SHORT $LL17@set@5
$LN16@set@5:
	lea	rbx, QWORD PTR [rbp+24]
$LL17@set@5:
	cmp	QWORD PTR [rbp+48], 16
	jb	SHORT $LN34@set@5
	mov	rcx, QWORD PTR [rbp+24]
	jmp	SHORT $LN35@set@5
$LN34@set@5:
	lea	rcx, QWORD PTR [rbp+24]
$LN35@set@5:
	add	rcx, QWORD PTR [rbp+40]
	cmp	rbx, rcx
	je	SHORT $LN7@set@5
	movsx	ecx, BYTE PTR [rbx]
	call	QWORD PTR __imp_tolower
	inc	rbx
	mov	BYTE PTR [rbx-1], al
	jmp	SHORT $LL17@set@5
$LN7@set@5:

; 23   : 	size		= sz;
; 24   : 	time_write	= modif;
; 25   : 	attrib		= attr;

	mov	eax, DWORD PTR attr$[rsp]
	mov	DWORD PTR [rbp+16], r13d
	mov	QWORD PTR [rbp+8], r12
	mov	DWORD PTR [rbp], eax

; 26   : }

	cmp	QWORD PTR [rsi+24], 16
	jb	SHORT $LN74@set@5
	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR $T304116[rsp], rax
	test	rax, rax
	je	SHORT $LN74@set@5
	lea	rcx, QWORD PTR $T304116[rsp]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN74@set@5:
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	QWORD PTR [rsi+24], 15
	mov	QWORD PTR [rsi+16], 0
	mov	BYTE PTR [rsi], 0
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ENDP ; FS_File::set
_TEXT	ENDS
PUBLIC	??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBU_finddata64i32_t@@@Z ; FS_File::FS_File
pdata	SEGMENT
$pdata$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBU_finddata64i32_t@@@Z DD imagerel $LN80
	DD	imagerel $LN80+192
	DD	imagerel $unwind$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBU_finddata64i32_t@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBU_finddata64i32_t@@@Z DD 060f01H
	DD	010640fH
	DD	0f340fH
	DD	0700bb20fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T304205 = 48
$T304409 = 112
this$ = 112
nm$ = 120
f$ = 128
??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBU_finddata64i32_t@@@Z PROC ; FS_File::FS_File

; 18   : FS_File::FS_File(xr_string nm, const _FINDDATA_T& f)				{set(nm,f.size,f.time_write,(f.attrib&_A_SUBDIR)?flSubDir:0);}

$LN80:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	QWORD PTR [rcx+48], 15
	mov	QWORD PTR [rcx+40], 0
	mov	rsi, rcx
	mov	BYTE PTR [rcx+24], 0
	mov	rbx, r8
	lea	rcx, QWORD PTR $T304205[rsp]
	or	r9, -1
	xor	r8d, r8d
	mov	rdi, rdx
	mov	QWORD PTR $T304205[rsp+24], 15
	mov	QWORD PTR $T304205[rsp+16], 0
	mov	BYTE PTR $T304205[rsp], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	mov	r11d, DWORD PTR [rbx]
	mov	r9, QWORD PTR [rbx+24]
	mov	r8d, DWORD PTR [rbx+32]
	shr	r11d, 4
	lea	rdx, QWORD PTR $T304205[rsp]
	and	r11d, 1
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], r11d
	call	?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ; FS_File::set
	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN65@FS_File@2
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR $T304409[rsp], rax
	test	rax, rax
	je	SHORT $LN65@FS_File@2
	lea	rcx, QWORD PTR $T304409[rsp]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN65@FS_File@2:
	mov	rbx, QWORD PTR [rsp+120]
	mov	QWORD PTR [rdi+24], 15
	mov	QWORD PTR [rdi+16], 0
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+128]
	mov	BYTE PTR [rdi], 0
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBU_finddata64i32_t@@@Z ENDP ; FS_File::FS_File
_TEXT	ENDS
PUBLIC	??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z ; FS_File::FS_File
pdata	SEGMENT
$pdata$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z DD imagerel $LN80
	DD	imagerel $LN80+165
	DD	imagerel $unwind$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z DD 060f01H
	DD	010640fH
	DD	0f340fH
	DD	0700bb20fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T304495 = 48
$T304699 = 112
this$ = 112
nm$ = 120
??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z PROC ; FS_File::FS_File

; 16   : FS_File::FS_File(xr_string nm)										{set(nm,0,0,0);}

$LN80:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 96					; 00000060H
	xor	esi, esi
	mov	QWORD PTR [rcx+48], 15
	mov	rdi, rcx
	mov	QWORD PTR [rcx+40], rsi
	mov	BYTE PTR [rcx+24], sil
	lea	rcx, QWORD PTR $T304495[rsp]
	or	r9, -1
	xor	r8d, r8d
	mov	rbx, rdx
	mov	QWORD PTR $T304495[rsp+24], 15
	mov	QWORD PTR $T304495[rsp+16], rsi
	mov	BYTE PTR $T304495[rsp], sil
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	lea	rdx, QWORD PTR $T304495[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rcx, rdi
	mov	DWORD PTR [rsp+32], esi
	call	?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ; FS_File::set
	cmp	QWORD PTR [rbx+24], 16
	jb	SHORT $LN65@FS_File@3
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR $T304699[rsp], rax
	test	rax, rax
	je	SHORT $LN65@FS_File@3
	lea	rcx, QWORD PTR $T304699[rsp]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN65@FS_File@3:
	mov	QWORD PTR [rbx+16], rsi
	mov	QWORD PTR [rbx+24], 15
	mov	BYTE PTR [rbx], sil
	mov	rbx, QWORD PTR [rsp+120]
	mov	rsi, QWORD PTR [rsp+128]
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@Z ENDP ; FS_File::FS_File
_TEXT	ENDS
PUBLIC	??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ; FS_File::FS_File
pdata	SEGMENT
$pdata$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z DD imagerel $LN80
	DD	imagerel $LN80+194
	DD	imagerel $unwind$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z DD 081401H
	DD	0116414H
	DD	0105414H
	DD	0f3414H
	DD	07010b214H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T304785 = 48
$T304989 = 112
this$ = 112
nm$ = 120
sz$ = 128
modif$ = 136
attr$ = 144
??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z PROC ; FS_File::FS_File

; 15   : FS_File::FS_File(xr_string nm, long sz, time_t modif,unsigned attr)	{set(nm,sz,modif,attr);}

$LN80:
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], rbp
	mov	QWORD PTR [rax+32], rsi
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	QWORD PTR [rcx+48], 15
	mov	QWORD PTR [rcx+40], 0
	mov	rbp, rcx
	mov	BYTE PTR [rcx+24], 0
	mov	rbx, r9
	mov	edi, r8d
	lea	rcx, QWORD PTR [rax-56]
	or	r9, -1
	xor	r8d, r8d
	mov	rsi, rdx
	mov	QWORD PTR [rax-32], 15
	mov	QWORD PTR [rax-40], 0
	mov	BYTE PTR [rax-56], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	mov	r11d, DWORD PTR attr$[rsp]
	lea	rdx, QWORD PTR $T304785[rsp]
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, rbp
	mov	DWORD PTR [rsp+32], r11d
	call	?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ; FS_File::set
	cmp	QWORD PTR [rsi+24], 16
	jb	SHORT $LN65@FS_File@4
	mov	rax, QWORD PTR [rsi]
	mov	QWORD PTR $T304989[rsp], rax
	test	rax, rax
	je	SHORT $LN65@FS_File@4
	lea	rcx, QWORD PTR $T304989[rsp]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN65@FS_File@4:
	lea	r11, QWORD PTR [rsp+96]
	mov	QWORD PTR [rsi+24], 15
	mov	QWORD PTR [rsi+16], 0
	mov	rbx, QWORD PTR [r11+24]
	mov	BYTE PTR [rsi], 0
	mov	rsi, QWORD PTR [r11+40]
	mov	rax, rbp
	mov	rbp, QWORD PTR [r11+32]
	mov	rsp, r11
	pop	rdi
	ret	0
??0FS_File@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ENDP ; FS_File::FS_File
PUBLIC	??0FS_File@@QEAA@AEBU_finddata64i32_t@@@Z	; FS_File::FS_File
pdata	SEGMENT
$pdata$??0FS_File@@QEAA@AEBU_finddata64i32_t@@@Z DD imagerel $LN57
	DD	imagerel $LN57+138
	DD	imagerel $unwind$??0FS_File@@QEAA@AEBU_finddata64i32_t@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0FS_File@@QEAA@AEBU_finddata64i32_t@@@Z DD 060f01H
	DD	0f640fH
	DD	0e340fH
	DD	0700bb20fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T322107 = 48
this$ = 112
f$ = 120
??0FS_File@@QEAA@AEBU_finddata64i32_t@@@Z PROC		; FS_File::FS_File

; 17   : FS_File::FS_File(const _FINDDATA_T& f)								{set(f.name,f.size,f.time_write,(f.attrib&_A_SUBDIR)?flSubDir:0);}

$LN57:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 96					; 00000060H
	xor	eax, eax
	mov	QWORD PTR [rcx+48], 15
	mov	rsi, rcx
	mov	QWORD PTR [rcx+40], rax
	mov	BYTE PTR [rcx+24], al
	or	rcx, -1
	mov	rbx, rdx
	add	rdx, 36					; 00000024H
	mov	QWORD PTR $T322107[rsp+24], 15
	mov	rdi, rdx
	mov	QWORD PTR $T322107[rsp+16], rax
	mov	BYTE PTR $T322107[rsp], al
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR $T322107[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	mov	edx, DWORD PTR [rbx]
	mov	r9, QWORD PTR [rbx+24]
	mov	r8d, DWORD PTR [rbx+32]
	shr	edx, 4
	mov	rcx, rsi
	and	edx, 1
	mov	DWORD PTR [rsp+32], edx
	lea	rdx, QWORD PTR $T322107[rsp]
	call	?set@FS_File@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@J_JI@Z ; FS_File::set
	mov	rbx, QWORD PTR [rsp+112]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??0FS_File@@QEAA@AEBU_finddata64i32_t@@@Z ENDP		; FS_File::FS_File
END
