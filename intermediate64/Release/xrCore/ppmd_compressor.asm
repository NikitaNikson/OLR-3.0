; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@OPMDLHAN@mp?2?$CBPPMd?4mdl?$AA@	; `string'
PUBLIC	??_C@_0O@MGNGOECP@$game_config$?$AA@		; `string'
PUBLIC	??_C@_0BA@MLBHOGFL@ppmd_initialize?$AA@		; `string'
PUBLIC	??_C@_0BE@JMEOGMEE@ppmd_compressor?4cpp?$AA@	; `string'
PUBLIC	??_C@_06CFOFDHM@reader?$AA@			; `string'
;	COMDAT ?ignore_always@?L@??ppmd_initialize@@YAXXZ@4_NA
_BSS	SEGMENT
?ignore_always@?L@??ppmd_initialize@@YAXXZ@4_NA DB 01H DUP (?) ; `ppmd_initialize'::`11'::ignore_always
_BSS	ENDS
;	COMDAT ?initialized@?3??ppmd_initialize@@YAXXZ@4_NA
_BSS	SEGMENT
?initialized@?3??ppmd_initialize@@YAXXZ@4_NA DB 01H DUP (?) ; `ppmd_initialize'::`4'::initialized
PPMd_Locked DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_06CFOFDHM@reader?$AA@
CONST	SEGMENT
??_C@_06CFOFDHM@reader?$AA@ DB 'reader', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JMEOGMEE@ppmd_compressor?4cpp?$AA@
CONST	SEGMENT
??_C@_0BE@JMEOGMEE@ppmd_compressor?4cpp?$AA@ DB 'ppmd_compressor.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLBHOGFL@ppmd_initialize?$AA@
CONST	SEGMENT
??_C@_0BA@MLBHOGFL@ppmd_initialize?$AA@ DB 'ppmd_initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGNGOECP@$game_config$?$AA@
CONST	SEGMENT
??_C@_0O@MGNGOECP@$game_config$?$AA@ DB '$game_config$', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OPMDLHAN@mp?2?$CBPPMd?4mdl?$AA@
CONST	SEGMENT
??_C@_0N@OPMDLHAN@mp?2?$CBPPMd?4mdl?$AA@ DB 'mp\!PPMd.mdl', 00H ; `string'
PUBLIC	??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z ; xr_new<compression::ppmd::stream,unsigned char * __ptr64,unsigned int>
PUBLIC	?ppmd_decompress@@YAIPEAXAEBIPEBX1@Z		; ppmd_decompress
PUBLIC	?ppmd_compress@@YAIPEAXAEBIPEBX1@Z		; ppmd_compress
PUBLIC	?ppmd_initialize@@YAXXZ				; ppmd_initialize
PUBLIC	PrintInfo
PUBLIC	?tell@stream@ppmd@compression@@QEBAIXZ		; compression::ppmd::stream::tell
PUBLIC	?rewind@stream@ppmd@compression@@QEAAXXZ	; compression::ppmd::stream::rewind
PUBLIC	??0stream@ppmd@compression@@QEAA@PEBXAEBI@Z	; compression::ppmd::stream::stream
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z DD imagerel $LN10
	DD	imagerel $LN10+75
	DD	imagerel $unwind$??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?ppmd_decompress@@YAIPEAXAEBIPEBX1@Z DD imagerel $LN26
	DD	imagerel $LN26+164
	DD	imagerel $unwind$?ppmd_decompress@@YAIPEAXAEBIPEBX1@Z
$pdata$?ppmd_compress@@YAIPEAXAEBIPEBX1@Z DD imagerel $LN26
	DD	imagerel $LN26+164
	DD	imagerel $unwind$?ppmd_compress@@YAIPEAXAEBIPEBX1@Z
$pdata$?ppmd_initialize@@YAXXZ DD imagerel $LN84
	DD	imagerel $LN84+112
	DD	imagerel $unwind$?ppmd_initialize@@YAXXZ
$pdata$3$?ppmd_initialize@@YAXXZ DD imagerel $LN84+112
	DD	imagerel $LN84+463
	DD	imagerel $chain$3$?ppmd_initialize@@YAXXZ
$pdata$4$?ppmd_initialize@@YAXXZ DD imagerel $LN84+463
	DD	imagerel $LN84+509
	DD	imagerel $chain$4$?ppmd_initialize@@YAXXZ
$pdata$5$?ppmd_initialize@@YAXXZ DD imagerel $LN84+509
	DD	imagerel $LN84+543
	DD	imagerel $chain$5$?ppmd_initialize@@YAXXZ
$pdata$?PPMd_Lock@@YAXXZ DD imagerel ?PPMd_Lock@@YAXXZ
	DD	imagerel ?PPMd_Lock@@YAXXZ+47
	DD	imagerel $unwind$?PPMd_Lock@@YAXXZ
xdata	SEGMENT
$unwind$?ppmd_decompress@@YAIPEAXAEBIPEBX1@Z DD 081501H
	DD	0e7415H
	DD	0d6415H
	DD	0c3415H
	DD	0e0119215H
$unwind$?ppmd_compress@@YAIPEAXAEBIPEBX1@Z DD 081501H
	DD	0e7415H
	DD	0d6415H
	DD	0c3415H
	DD	0e0119215H
$unwind$?ppmd_initialize@@YAXXZ DD 020701H
	DD	04d0107H
$chain$3$?ppmd_initialize@@YAXXZ DD 082721H
	DD	04c7427H
	DD	050641fH
	DD	04f5410H
	DD	04e3408H
	DD	imagerel $LN84
	DD	imagerel $LN84+112
	DD	imagerel $unwind$?ppmd_initialize@@YAXXZ
$chain$4$?ppmd_initialize@@YAXXZ DD 040021H
	DD	0506400H
	DD	04f5400H
	DD	imagerel $LN84
	DD	imagerel $LN84+112
	DD	imagerel $unwind$?ppmd_initialize@@YAXXZ
$chain$5$?ppmd_initialize@@YAXXZ DD 021H
	DD	imagerel $LN84
	DD	imagerel $LN84+112
	DD	imagerel $unwind$?ppmd_initialize@@YAXXZ
$unwind$?PPMd_Lock@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
;	COMDAT ??0stream@ppmd@compression@@QEAA@PEBXAEBI@Z
_TEXT	SEGMENT
this$ = 8
buffer$ = 16
buffer_size$ = 24
??0stream@ppmd@compression@@QEAA@PEBXAEBI@Z PROC	; compression::ppmd::stream::stream, COMDAT

; 8    : 	m_buffer_size	= buffer_size;

	mov	eax, DWORD PTR [r8]

; 9    : 	m_buffer		= (u8*)buffer;

	mov	QWORD PTR [rcx+8], rdx

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR [rcx+16], rdx
	mov	DWORD PTR [rcx], eax

; 11   : }

	mov	rax, rcx
	ret	0
??0stream@ppmd@compression@@QEAA@PEBXAEBI@Z ENDP	; compression::ppmd::stream::stream
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
;	COMDAT ?rewind@stream@ppmd@compression@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?rewind@stream@ppmd@compression@@QEAAXXZ PROC		; compression::ppmd::stream::rewind, COMDAT

; 30   : {

	mov	rcx, QWORD PTR ?trained_model@@3PEAVstream@ppmd@compression@@EA ; trained_model

; 31   : 	m_pointer		= m_buffer;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+16], rax

; 32   : }

	ret	0
?rewind@stream@ppmd@compression@@QEAAXXZ ENDP		; compression::ppmd::stream::rewind
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
;	COMDAT ?tell@stream@ppmd@compression@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?tell@stream@ppmd@compression@@QEBAIXZ PROC		; compression::ppmd::stream::tell, COMDAT

; 41   : 	VERIFY			(m_pointer >= m_buffer);
; 42   : 	VERIFY2			(m_pointer <= (m_buffer + m_buffer_size),make_string("0x%08x <= 0x%08x + %d",m_pointer,m_buffer,m_buffer_size));
; 43   : 	return			(u32(m_pointer - m_buffer));

	mov	eax, DWORD PTR [rcx+16]
	sub	eax, DWORD PTR [rcx+8]

; 44   : }

	ret	0
?tell@stream@ppmd@compression@@QEBAIXZ ENDP		; compression::ppmd::stream::tell
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
_TEXT	SEGMENT
DecodedFile$dead$ = 8
EncodedFile$dead$ = 16
PrintInfo PROC

; 15   : }

	ret	0
PrintInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
_TEXT	SEGMENT
?PPMd_Lock@@YAXXZ PROC					; PPMd_Lock

; 23   : {

	sub	rsp, 40					; 00000028H

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	mov	eax, 1
	xchg	DWORD PTR PPMd_Locked, eax
	test	eax, eax
	je	SHORT $LN1@PPMd_Lock
$LL2@PPMd_Lock:

; 25   :         ::Sleep( 0 );

	xor	ecx, ecx
	call	QWORD PTR __imp_Sleep
	mov	eax, 1
	xchg	DWORD PTR PPMd_Locked, eax
	test	eax, eax
	jne	SHORT $LL2@PPMd_Lock
$LN1@PPMd_Lock:

; 26   : }

	add	rsp, 40					; 00000028H
	ret	0
?PPMd_Lock@@YAXXZ ENDP					; PPMd_Lock
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
_TEXT	SEGMENT
?PPMd_Unlock@@YAXXZ PROC				; PPMd_Unlock

; 31   :     ::InterlockedExchange( &PPMd_Locked, 0 );

	xor	eax, eax
	xchg	DWORD PTR PPMd_Locked, eax

; 32   : }

	ret	0
?PPMd_Unlock@@YAXXZ ENDP				; PPMd_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrdebugnew.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_flags.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
_TEXT	SEGMENT
file_name$ = 80
?ppmd_initialize@@YAXXZ PROC				; ppmd_initialize

; 36   : {

$LN84:
	sub	rsp, 616				; 00000268H

; 37   : 	if (trained_model)

	mov	rcx, QWORD PTR ?trained_model@@3PEAVstream@ppmd@compression@@EA ; trained_model
	test	rcx, rcx
	je	SHORT $LN11@ppmd_initi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 31   : 	m_pointer		= m_buffer;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+16], rax
$LN11@ppmd_initi:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 41   : 	if (initialized)

	cmp	BYTE PTR ?initialized@?3??ppmd_initialize@@YAXXZ@4_NA, 0
	jne	$LN9@ppmd_initi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp

; 1391 :     return get_path(initial)->_update(dest,src);

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	lea	rdx, OFFSET FLAT:??_C@_0O@MGNGOECP@$game_config$?$AA@
	call	?get_path@CLocatorAPI@@QEAAPEAVFS_Path@@PEBD@Z ; CLocatorAPI::get_path
	lea	r8, OFFSET FLAT:??_C@_0N@OPMDLHAN@mp?2?$CBPPMd?4mdl?$AA@
	lea	rdx, QWORD PTR file_name$[rsp]
	mov	rcx, rax
	call	?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z ; FS_Path::_update
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 47   : 	if (FS.exist(file_name)) {

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	lea	rdx, QWORD PTR file_name$[rsp]
	call	?exist@CLocatorAPI@@QEAAPEBUfile@1@PEBD@Z ; CLocatorAPI::exist
	test	rax, rax
	je	$LN75@ppmd_initi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp

; 1181 : 	return					(r_open_impl<IReader>(path,_fname));

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	mov	QWORD PTR [rsp+624], rbx
	mov	QWORD PTR [rsp+632], rbp
	lea	r8, QWORD PTR file_name$[rsp]
	xor	edx, edx
	mov	QWORD PTR [rsp+640], rsi
	mov	QWORD PTR [rsp+608], rdi
	call	??$r_open_impl@VIReader@@@CLocatorAPI@@AEAAPEAVIReader@@PEBD0@Z ; CLocatorAPI::r_open_impl<IReader>
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 49   : 		R_ASSERT		(reader);

	cmp	BYTE PTR ?ignore_always@?L@??ppmd_initialize@@YAXXZ@4_NA, 0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp

; 1181 : 	return					(r_open_impl<IReader>(path,_fname));

	mov	rdi, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 49   : 		R_ASSERT		(reader);

	jne	SHORT $LN4@ppmd_initi
	test	rax, rax
	jne	SHORT $LN4@ppmd_initi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrdebugnew.cpp

; 452  : 	backend		("assertion failed",e1,0,0,file,line,function,ignore_always);

	lea	rax, OFFSET FLAT:?ignore_always@?L@??ppmd_initialize@@YAXXZ@4_NA
	lea	r8, OFFSET FLAT:??_C@_06CFOFDHM@reader?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0BB@DBHFCHNO@assertion?5failed?$AA@
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:??_C@_0BA@MLBHOGFL@ppmd_initialize?$AA@
	lea	rcx, OFFSET FLAT:?Debug@@3VxrDebug@@A	; Debug
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:??_C@_0BE@JMEOGMEE@ppmd_compressor?4cpp?$AA@
	mov	DWORD PTR [rsp+48], 49			; 00000031H
	mov	QWORD PTR [rsp+40], rax
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rdi
	call	?backend@xrDebug@@QEAAXPEBD0000H0AEA_N@Z ; xrDebug::backend
$LN4@ppmd_initi:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 50   : 		u32				buffer_size = reader->length();

	movsxd	rbp, DWORD PTR [rdi+20]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 110  : 	IC void*	xr_malloc	(size_t size)			{	return	Memory.mem_alloc(size);					}

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 51   : 		u8				*buffer = (u8*)xr_malloc(buffer_size);

	mov	edx, ebp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 110  : 	IC void*	xr_malloc	(size_t size)			{	return	Memory.mem_alloc(size);					}

	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.h

; 265  : 	IC void*		pointer		()	const		{	return &(data[Pos]);	};

	movsxd	rdx, DWORD PTR [rdi+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.cpp

; 318  : 	CopyMemory		(p,pointer(),cnt);

	mov	r8, rbp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.h

; 265  : 	IC void*		pointer		()	const		{	return &(data[Pos]);	};

	add	rdx, QWORD PTR [rdi+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.cpp

; 318  : 	CopyMemory		(p,pointer(),cnt);

	mov	rcx, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 110  : 	IC void*	xr_malloc	(size_t size)			{	return	Memory.mem_alloc(size);					}

	mov	rsi, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.cpp

; 318  : 	CopyMemory		(p,pointer(),cnt);

	call	memcpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fs.h

; 266  : 	IC void			advance		(int cnt)		{	Pos+=cnt;VERIFY((Pos<=Size) && (Pos>=0));};

	add	DWORD PTR [rdi+16], ebp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_flags.h

; 25   : 	IC 	BOOL	test	(const T mask)						const	{ return BOOL(flags&mask);				}

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	test	DWORD PTR [rcx+112], 512		; 00000200H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\locatorapi.cpp

; 1186 : 	if( m_Flags.test(flDumpFileActivity) )

	je	SHORT $LN37@ppmd_initi

; 1187 : 		_unregister_open_file	(fs);

	mov	rcx, rdi
	call	??$_unregister_open_file@VIReader@@@@YAXPEAVIReader@@@Z ; _unregister_open_file<IReader>
$LN37@ppmd_initi:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	rcx, rdi
	call	__RTCastToVoid

; 133  : 		ptr->~T			();

	mov	r8, QWORD PTR [rdi]
	xor	edx, edx
	mov	rcx, rdi
	mov	rbx, rax
	call	QWORD PTR [r8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 130  : 	stat_calls++;

	inc	DWORD PTR ?Memory@@3VxrMemory@@A

; 25   : ICF	u32		get_header			(void* P)	{	return	(u32)*acc_header(P);				}

	movzx	eax, BYTE PTR [rbx-1]

; 24   : ICF	u8*		acc_header			(void* P)	{	u8*		_P		= (u8*)P;	return	_P-1;	}

	lea	rdi, QWORD PTR [rbx-1]

; 131  : #ifdef USE_MEMORY_MONITOR
; 132  : 	memory_monitor::monitor_free(P);
; 133  : #endif // USE_MEMORY_MONITOR
; 134  : 
; 135  : #ifdef PURE_ALLOC
; 136  : 	if (g_use_pure_alloc) {
; 137  : 		free					(P);
; 138  : 		return;
; 139  : 	}
; 140  : #endif // PURE_ALLOC
; 141  : 
; 142  : #ifdef DEBUG_MEMORY_MANAGER
; 143  : 	if(g_globalCheckAddr==P)
; 144  : 		__asm int 3;
; 145  : #endif // DEBUG_MEMORY_MANAGER
; 146  : 
; 147  : #ifdef DEBUG_MEMORY_MANAGER
; 148  : 	if (mem_initialized)		debug_cs.Enter		();
; 149  : #endif // DEBUG_MEMORY_MANAGER
; 150  : 	if		(debug_mode)		dbg_unregister	(P);
; 151  : 	u32	pool					= get_header	(P);
; 152  : 	void* _real					= (void*)(((u8*)P)-1);
; 153  : 	if (mem_generic==pool)		

	cmp	eax, 55					; 00000037H
	jne	SHORT $LN49@ppmd_initi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp

; 293  : 	if (memblock == NULL)

	test	rdi, rdi
	je	SHORT $LN70@ppmd_initi

; 294  : 		return;
; 295  : 
; 296  : 	ptr = (uintptr_t)memblock;
; 297  : 
; 298  : 	/* ptr points to the pointer to starting of the memory block */
; 299  : 	ptr = (ptr & ~(PTR_SZ -1)) - PTR_SZ;

	and	rdi, -8

; 300  : 
; 301  : 	/* ptr is the pointer to the start of memory block*/
; 302  : 	ptr = *((uintptr_t *)ptr);
; 303  : 	free((void *)ptr);

	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 157  : 	} else {

	jmp	SHORT $LN70@ppmd_initi
$LN49@ppmd_initi:

; 160  : 		mem_pools[pool].destroy	(_real);

	lea	rdx, QWORD PTR [rax+rax*4]
	lea	rax, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 64   : 	EnterCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rax+rdx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 160  : 		mem_pools[pool].destroy	(_real);

	lea	rbx, QWORD PTR [rax+rdx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 64   : 	EnterCriticalSection			( (CRITICAL_SECTION*)pmutex );

	call	QWORD PTR __imp_EnterCriticalSection
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 46   : 		*access(P)		= list;

	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rbx]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 47   : 		list			= (u8*)P;

	mov	QWORD PTR [rbx+32], rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	call	QWORD PTR __imp_LeaveCriticalSection
$LN70@ppmd_initi:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 80   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 24
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	rdi, QWORD PTR [rsp+608]
	mov	rbx, QWORD PTR [rsp+624]

; 81   : 	return new (ptr) T(p1,p2);

	test	rax, rax
	je	SHORT $LN74@ppmd_initi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 8    : 	m_buffer_size	= buffer_size;

	mov	DWORD PTR [rax], ebp

; 9    : 	m_buffer		= (u8*)buffer;

	mov	QWORD PTR [rax+8], rsi

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR [rax+16], rsi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 81   : 	return new (ptr) T(p1,p2);

	mov	QWORD PTR ?trained_model@@3PEAVstream@ppmd@compression@@EA, rax ; trained_model
	jmp	SHORT $LN81@ppmd_initi
$LN74@ppmd_initi:
	mov	QWORD PTR ?trained_model@@3PEAVstream@ppmd@compression@@EA, 0 ; trained_model
$LN81@ppmd_initi:
	mov	rbp, QWORD PTR [rsp+632]
	mov	rsi, QWORD PTR [rsp+640]
$LN75@ppmd_initi:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 57   : 	initialized		= true;

	mov	BYTE PTR ?initialized@?3??ppmd_initialize@@YAXXZ@4_NA, 1

; 58   : 	if (StartSubAllocator(suballocator_size))

	call	StartSubAllocator
	test	eax, eax
	jne	SHORT $LN9@ppmd_initi

; 59   : 		return;
; 60   : 	
; 61   : 	exit			(-1);

	or	ecx, -1
	call	QWORD PTR __imp_exit
	int	3
$LN9@ppmd_initi:

; 62   : }

	add	rsp, 616				; 00000268H
	ret	0
$LN83@ppmd_initi:
?ppmd_initialize@@YAXXZ ENDP				; ppmd_initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
_TEXT	SEGMENT
dest$ = 32
source$ = 56
dest_buffer$ = 96
dest_buffer_size$ = 104
source_buffer$ = 112
source_buffer_size$ = 120
?ppmd_compress@@YAIPEAXAEBIPEBX1@Z PROC			; ppmd_compress

; 65   : {

$LN26:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 80					; 00000050H

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	mov	eax, 1

; 65   : {

	mov	rsi, r9
	mov	rbx, r8

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	xchg	DWORD PTR PPMd_Locked, eax

; 65   : {

	mov	r14, rdx
	mov	rdi, rcx

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	test	eax, eax
	je	SHORT $LN3@ppmd_compr
$LL4@ppmd_compr:

; 25   :         ::Sleep( 0 );

	xor	ecx, ecx
	call	QWORD PTR __imp_Sleep
	mov	eax, 1
	xchg	DWORD PTR PPMd_Locked, eax
	test	eax, eax
	jne	SHORT $LL4@ppmd_compr
$LN3@ppmd_compr:

; 66   :     PPMd_Lock();
; 67   : 	ppmd_initialize	();

	call	?ppmd_initialize@@YAXXZ			; ppmd_initialize
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 8    : 	m_buffer_size	= buffer_size;

	mov	eax, DWORD PTR [rsi]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 71   : 	EncodeFile		(&dest,&source,order_model,restoration_method_cut_off);

	lea	rdx, QWORD PTR source$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 8    : 	m_buffer_size	= buffer_size;

	mov	DWORD PTR source$[rsp], eax
	mov	eax, DWORD PTR [r14]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 71   : 	EncodeFile		(&dest,&source,order_model,restoration_method_cut_off);

	lea	rcx, QWORD PTR dest$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 9    : 	m_buffer		= (u8*)buffer;

	mov	QWORD PTR source$[rsp+8], rbx

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR source$[rsp+16], rbx

; 9    : 	m_buffer		= (u8*)buffer;

	mov	QWORD PTR dest$[rsp+8], rdi
	mov	DWORD PTR dest$[rsp], eax

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR dest$[rsp+16], rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 71   : 	EncodeFile		(&dest,&source,order_model,restoration_method_cut_off);

	call	EncodeFile

; 75   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	mov	rdi, QWORD PTR [rsp+112]

; 26   : }
; 27   : 
; 28   : static inline void
; 29   : PPMd_Unlock()
; 30   : {
; 31   :     ::InterlockedExchange( &PPMd_Locked, 0 );

	xor	eax, eax
	xchg	DWORD PTR PPMd_Locked, eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 43   : 	return			(u32(m_pointer - m_buffer));

	mov	rax, QWORD PTR dest$[rsp+16]
	sub	rax, QWORD PTR dest$[rsp+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 75   : }

	add	rsp, 80					; 00000050H
	pop	r14
	ret	0
?ppmd_compress@@YAIPEAXAEBIPEBX1@Z ENDP			; ppmd_compress
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp
_TEXT	SEGMENT
dest$ = 32
source$ = 56
dest_buffer$ = 96
dest_buffer_size$ = 104
source_buffer$ = 112
source_buffer_size$ = 120
?ppmd_decompress@@YAIPEAXAEBIPEBX1@Z PROC		; ppmd_decompress

; 78   : {

$LN26:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 80					; 00000050H

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	mov	eax, 1

; 78   : {

	mov	rsi, r9
	mov	rbx, r8

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	xchg	DWORD PTR PPMd_Locked, eax

; 78   : {

	mov	r14, rdx
	mov	rdi, rcx

; 24   :     while( ::InterlockedExchange( &PPMd_Locked, 1 ) )

	test	eax, eax
	je	SHORT $LN3@ppmd_decom
$LL4@ppmd_decom:

; 25   :         ::Sleep( 0 );

	xor	ecx, ecx
	call	QWORD PTR __imp_Sleep
	mov	eax, 1
	xchg	DWORD PTR PPMd_Locked, eax
	test	eax, eax
	jne	SHORT $LL4@ppmd_decom
$LN3@ppmd_decom:

; 79   :     PPMd_Lock();
; 80   : 	ppmd_initialize	();

	call	?ppmd_initialize@@YAXXZ			; ppmd_initialize
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 8    : 	m_buffer_size	= buffer_size;

	mov	eax, DWORD PTR [rsi]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 84   : 	DecodeFile		(&dest,&source,order_model,restoration_method_cut_off);

	lea	rdx, QWORD PTR source$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 8    : 	m_buffer_size	= buffer_size;

	mov	DWORD PTR source$[rsp], eax
	mov	eax, DWORD PTR [r14]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 84   : 	DecodeFile		(&dest,&source,order_model,restoration_method_cut_off);

	lea	rcx, QWORD PTR dest$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 9    : 	m_buffer		= (u8*)buffer;

	mov	QWORD PTR source$[rsp+8], rbx

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR source$[rsp+16], rbx

; 9    : 	m_buffer		= (u8*)buffer;

	mov	QWORD PTR dest$[rsp+8], rdi
	mov	DWORD PTR dest$[rsp], eax

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR dest$[rsp+16], rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 84   : 	DecodeFile		(&dest,&source,order_model,restoration_method_cut_off);

	call	DecodeFile

; 88   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	mov	rdi, QWORD PTR [rsp+112]

; 26   : }
; 27   : 
; 28   : static inline void
; 29   : PPMd_Unlock()
; 30   : {
; 31   :     ::InterlockedExchange( &PPMd_Locked, 0 );

	xor	eax, eax
	xchg	DWORD PTR PPMd_Locked, eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 43   : 	return			(u32(m_pointer - m_buffer));

	mov	rax, QWORD PTR dest$[rsp+16]
	sub	rax, QWORD PTR dest$[rsp+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\ppmd_compressor.cpp

; 88   : }

	add	rsp, 80					; 00000050H
	pop	r14
	ret	0
?ppmd_decompress@@YAIPEAXAEBIPEBX1@Z ENDP		; ppmd_decompress
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z
_TEXT	SEGMENT
p1$ = 48
p2$ = 56
??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z PROC ; xr_new<compression::ppmd::stream,unsigned char * __ptr64,unsigned int>, COMDAT

; 79   : IC	T*		xr_new		(const P1& p1, const P2& p2) {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx

; 80   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 24
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc

; 81   : 	return new (ptr) T(p1,p2);

	test	rax, rax
	je	SHORT $LN3@xr_new
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\compression_ppmd_stream_inline.h

; 9    : 	m_buffer		= (u8*)buffer;

	mov	rcx, QWORD PTR [rdi]
	mov	edx, DWORD PTR [rbx]
	mov	DWORD PTR [rax], edx
	mov	QWORD PTR [rax+8], rcx

; 10   : 	m_pointer		= m_buffer;

	mov	QWORD PTR [rax+16], rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 82   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@xr_new:
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$xr_new@Vstream@ppmd@compression@@PEAEI@@YAPEAVstream@ppmd@compression@@AEBQEAEAEBI@Z ENDP ; xr_new<compression::ppmd::stream,unsigned char * __ptr64,unsigned int>
_TEXT	ENDS
END
