; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

;	COMDAT ?c@?1??lzo1x_999_compress_level@@9@4QBU<unnamed-type-c>@?1??1@9@B
CONST	SEGMENT
?c@?1??lzo1x_999_compress_level@@9@4QBU<unnamed-type-c>@?1??1@9@B DD 00H ; `lzo1x_999_compress_level'::`2'::c
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000008H
	DQ	0000000000000004H
	DD	00H
	ORG $+4
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000010H
	DQ	0000000000000008H
	DD	00H
	ORG $+4
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000020H
	DQ	0000000000000010H
	DD	00H
	ORG $+4
	DD	01H
	ORG $+4
	DQ	0000000000000004H
	DQ	0000000000000004H
	DQ	0000000000000010H
	DQ	0000000000000010H
	DD	00H
	ORG $+4
	DD	01H
	ORG $+4
	DQ	0000000000000008H
	DQ	0000000000000010H
	DQ	0000000000000020H
	DQ	0000000000000020H
	DD	00H
	ORG $+4
	DD	01H
	ORG $+4
	DQ	0000000000000008H
	DQ	0000000000000010H
	DQ	0000000000000080H
	DQ	0000000000000080H
	DD	00H
	ORG $+4
	DD	02H
	ORG $+4
	DQ	0000000000000008H
	DQ	0000000000000020H
	DQ	0000000000000080H
	DQ	0000000000000100H
	DD	00H
	ORG $+4
	DD	02H
	ORG $+4
	DQ	0000000000000020H
	DQ	0000000000000080H
	DQ	0000000000000800H
	DQ	0000000000000800H
	DD	01H
	ORG $+4
	DD	02H
	ORG $+4
	DQ	0000000000000800H
	DQ	0000000000000800H
	DQ	0000000000000800H
	DQ	0000000000001000H
	DD	01H
	ORG $+4
PUBLIC	lzo1x_999_compress_level
PUBLIC	lzo1x_999_compress_internal
PUBLIC	lzo1x_999_compress_dict
PUBLIC	lzo1x_999_compress
pdata	SEGMENT
$pdata$lzo1x_999_compress_level DD imagerel $LN6
	DD	imagerel $LN6+96
	DD	imagerel $unwind$lzo1x_999_compress_level
$pdata$lzo1x_999_compress_internal DD imagerel $LN136
	DD	imagerel $LN136+321
	DD	imagerel $unwind$lzo1x_999_compress_internal
$pdata$0$lzo1x_999_compress_internal DD imagerel $LN136+321
	DD	imagerel $LN136+353
	DD	imagerel $chain$0$lzo1x_999_compress_internal
$pdata$1$lzo1x_999_compress_internal DD imagerel $LN136+353
	DD	imagerel $LN136+555
	DD	imagerel $chain$1$lzo1x_999_compress_internal
$pdata$2$lzo1x_999_compress_internal DD imagerel $LN136+555
	DD	imagerel $LN136+626
	DD	imagerel $chain$2$lzo1x_999_compress_internal
$pdata$3$lzo1x_999_compress_internal DD imagerel $LN136+626
	DD	imagerel $LN136+666
	DD	imagerel $chain$3$lzo1x_999_compress_internal
$pdata$4$lzo1x_999_compress_internal DD imagerel $LN136+666
	DD	imagerel $LN136+1656
	DD	imagerel $chain$4$lzo1x_999_compress_internal
$pdata$?min_gain@@YA_J_K00HHH@Z DD imagerel ?min_gain@@YA_J_K00HHH@Z
	DD	imagerel ?min_gain@@YA_J_K00HHH@Z+104
	DD	imagerel $unwind$?min_gain@@YA_J_K00HHH@Z
$pdata$?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z DD imagerel ?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z
	DD	imagerel ?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z+86
	DD	imagerel $unwind$?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z
$pdata$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+84
	DD	imagerel $unwind$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$pdata$0$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+84
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+112
	DD	imagerel $chain$0$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$pdata$1$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+112
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+163
	DD	imagerel $chain$1$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$pdata$2$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+163
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+181
	DD	imagerel $chain$2$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$pdata$3$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+181
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+217
	DD	imagerel $chain$3$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$pdata$?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z DD imagerel ?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z
	DD	imagerel ?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z+550
	DD	imagerel $unwind$?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z
$pdata$?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z DD imagerel ?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z
	DD	imagerel ?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z+241
	DD	imagerel $unwind$?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z
$pdata$?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z DD imagerel ?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z
	DD	imagerel ?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z+96
	DD	imagerel $unwind$?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z
$pdata$?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z DD imagerel ?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z
	DD	imagerel ?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z+651
	DD	imagerel $unwind$?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z
$pdata$?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD imagerel ?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
	DD	imagerel ?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+287
	DD	imagerel $unwind$?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
$pdata$?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z DD imagerel ?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z
	DD	imagerel ?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z+345
	DD	imagerel $unwind$?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z
$pdata$?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z DD imagerel ?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z
	DD	imagerel ?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z+398
	DD	imagerel $unwind$?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z
$pdata$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+40
	DD	imagerel $unwind$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
$pdata$3$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+40
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+242
	DD	imagerel $chain$3$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
$pdata$4$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+242
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+247
	DD	imagerel $chain$4$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
$pdata$?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z DD imagerel ?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z
	DD	imagerel ?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z+124
	DD	imagerel $unwind$?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z
$pdata$lzo1x_999_compress_dict DD imagerel $LN8
	DD	imagerel $LN8+95
	DD	imagerel $unwind$lzo1x_999_compress_dict
$pdata$lzo1x_999_compress DD imagerel $LN8
	DD	imagerel $LN8+82
	DD	imagerel $unwind$lzo1x_999_compress
xdata	SEGMENT
$unwind$lzo1x_999_compress_level DD 010401H
	DD	0e204H
$unwind$lzo1x_999_compress_internal DD 081f01H
	DD	01f011fH
	DD	0d011e013H
	DD	0700dc00fH
	DD	0500b300cH
$chain$0$lzo1x_999_compress_internal DD 020821H
	DD	01e6408H
	DD	imagerel $LN136
	DD	imagerel $LN136+321
	DD	imagerel $unwind$lzo1x_999_compress_internal
$chain$1$lzo1x_999_compress_internal DD 020821H
	DD	01df408H
	DD	imagerel $LN136+321
	DD	imagerel $LN136+353
	DD	imagerel $chain$0$lzo1x_999_compress_internal
$chain$2$lzo1x_999_compress_internal DD 021H
	DD	imagerel $LN136+321
	DD	imagerel $LN136+353
	DD	imagerel $chain$0$lzo1x_999_compress_internal
$chain$3$lzo1x_999_compress_internal DD 021H
	DD	imagerel $LN136
	DD	imagerel $LN136+321
	DD	imagerel $unwind$lzo1x_999_compress_internal
$chain$4$lzo1x_999_compress_internal DD 040021H
	DD	01df400H
	DD	01e6400H
	DD	imagerel $LN136
	DD	imagerel $LN136+321
	DD	imagerel $unwind$lzo1x_999_compress_internal
$unwind$?min_gain@@YA_J_K00HHH@Z DD 020501H
	DD	013405H
$unwind$?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD 010401H
	DD	0204H
$chain$0$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD 020521H
	DD	023405H
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+84
	DD	imagerel $unwind$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$chain$1$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD 020421H
	DD	07404H
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+84
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+112
	DD	imagerel $chain$0$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$chain$2$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD 021H
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+84
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+112
	DD	imagerel $chain$0$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$chain$3$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z DD 021H
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
	DD	imagerel ?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z+84
	DD	imagerel $unwind$?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z
$unwind$?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z DD 05ed01H
	DD	0274edH
	DD	033406H
	DD	06006H
$unwind$?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z DD 020601H
	DD	030023206H
$unwind$?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
$unwind$?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z DD 010401H
	DD	04204H
$unwind$?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD 010401H
	DD	0204H
$chain$3$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD 081321H
	DD	07413H
	DD	04640fH
	DD	03540aH
	DD	023405H
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+40
	DD	imagerel $unwind$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
$chain$4$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z DD 021H
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
	DD	imagerel ?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z+40
	DD	imagerel $unwind$?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z
$unwind$?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$lzo1x_999_compress_dict DD 010401H
	DD	0e204H
$unwind$lzo1x_999_compress DD 010401H
	DD	0e204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
in$ = 128
in_len$ = 136
out$ = 144
out_len$ = 152
wrkmem$ = 160
lzo1x_999_compress PROC

; 871  : {

$LN8:
	sub	rsp, 120				; 00000078H

; 849  :                                        c[compression_level].flags);

	mov	DWORD PTR [rsp+104], 1
	mov	QWORD PTR [rsp+96], 2048		; 00000800H
	mov	QWORD PTR [rsp+80], 128			; 00000080H
	xor	eax, eax
	mov	QWORD PTR [rsp+72], 32			; 00000020H
	mov	DWORD PTR [rsp+64], 2
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR wrkmem$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	lzo1x_999_compress_internal

; 872  :     return lzo1x_999_compress_level(in, in_len, out, out_len, wrkmem,
; 873  :                                     NULL, 0, (lzo_callback_p) 0, 8);
; 874  : }

	add	rsp, 120				; 00000078H
	ret	0
lzo1x_999_compress ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
in$ = 128
in_len$ = 136
out$ = 144
out_len$ = 152
wrkmem$ = 160
dict$dead$ = 168
dict_len$ = 176
lzo1x_999_compress_dict PROC

; 862  : {

$LN8:
	sub	rsp, 120				; 00000078H

; 849  :                                        c[compression_level].flags);

	mov	rax, QWORD PTR dict_len$[rsp]
	mov	DWORD PTR [rsp+104], 1
	mov	QWORD PTR [rsp+96], 2048		; 00000800H
	mov	QWORD PTR [rsp+80], 128			; 00000080H
	mov	QWORD PTR [rsp+72], 32			; 00000020H
	mov	DWORD PTR [rsp+64], 2
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR _LZO_Dictionary
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR wrkmem$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	lzo1x_999_compress_internal

; 863  :     return lzo1x_999_compress_level(in, in_len, out, out_len, wrkmem,
; 864  :                                     dict, dict_len, 0, 8);
; 865  : }

	add	rsp, 120				; 00000078H
	ret	0
lzo1x_999_compress_dict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 48
dict$ = 56
dict_len$ = 64
?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z PROC	; swd_initdict

; 226  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 227  :     s->dict = s->dict_end = NULL;

	xor	eax, eax
	mov	rbx, r8
	mov	rdi, rcx
	mov	QWORD PTR [rcx+656], rax
	mov	QWORD PTR [rcx+648], rax

; 228  :     s->dict_len = 0;

	mov	QWORD PTR [rcx+664], rax

; 229  : 
; 230  :     if (!dict || dict_len <= 0)

	test	rdx, rdx
	je	SHORT $LN2@swd_initdi
	test	rbx, rbx
	je	SHORT $LN2@swd_initdi

; 231  :         return;
; 232  :     if (dict_len > s->n)

	mov	rax, QWORD PTR [rcx]
	cmp	rbx, rax
	jbe	SHORT $LN1@swd_initdi

; 233  :     {
; 234  :         dict += dict_len - s->n;

	sub	rbx, rax
	add	rdx, rbx

; 235  :         dict_len = s->n;

	mov	rbx, rax
$LN1@swd_initdi:

; 236  :     }
; 237  : 
; 238  :     s->dict = dict;
; 239  :     s->dict_len = dict_len;
; 240  :     s->dict_end = dict + dict_len;

	lea	rax, QWORD PTR [rdx+rbx]
	mov	QWORD PTR [rcx+648], rdx
	mov	QWORD PTR [rcx+664], rbx
	mov	QWORD PTR [rcx+656], rax

; 241  :     lzo_memcpy(s_b(s),dict,dict_len);

	add	rcx, 728				; 000002d8H
	mov	r8, rbx
	call	memcpy

; 242  :     s->ip = dict_len;

	mov	QWORD PTR [rdi+672], rbx
$LN2@swd_initdi:

; 243  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z ENDP	; swd_initdict
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 16
node$dead$ = 24
len$ = 32
?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z PROC	; swd_insertdict

; 248  : {

	sub	rsp, 8

; 249  :     lzo_uint key;
; 250  : 
; 251  :     s->node_count = s->n - len;

	mov	rax, QWORD PTR [rcx]
	mov	r11, r8

; 252  :     s->first_rp = node;

	mov	QWORD PTR [rcx+720], 0
	sub	rax, r8
	mov	QWORD PTR [rcx+712], rax

; 253  : 
; 254  :     while (len-- > 0)

	test	r8, r8
	je	$LN6@swd_insert
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp], rdi
	lea	r10, QWORD PTR [rcx+728]
	lea	rdi, QWORD PTR [rcx+730]
	mov	rbp, rcx
	mov	rsi, r10
	lea	rbx, QWORD PTR [rcx+189142]
	sub	rbp, rdi
	sub	rdi, r10
	neg	rsi
	npad	1
$LL2@swd_insert:

; 255  :     {
; 256  :         key = HEAD3(s_b(s),node);

	movzx	eax, BYTE PTR [r10]
	lea	rdx, QWORD PTR [rdi+r10]

; 257  :         s_succ3(s)[node] = s_get_head3(s,key);
; 258  :         s_head3(s)[key] = SWD_UINT(node);
; 259  :         s_best3(s)[node] = SWD_UINT(s->f + 1);
; 260  :         s_llen3(s)[key]++;
; 261  :         assert(s_llen3(s)[key] <= SWD_N);
; 262  : 
; 263  : #ifdef HEAD2
; 264  :         key = HEAD2(s_b(s),node);
; 265  :         s_head2(s)[key] = SWD_UINT(node);
; 266  : #endif
; 267  : 
; 268  :         node++;

	lea	rbx, QWORD PTR [rbx+2]
	movzx	r8d, BYTE PTR [rdx+rbp+729]
	shl	rax, 5
	xor	r8, rax
	movzx	eax, BYTE PTR [rdx]
	lea	edx, DWORD PTR [r10+rsi]
	shl	r8, 5
	lea	r10, QWORD PTR [r10+1]
	xor	r8, rax
	imul	r9, r8, 40799				; 00009f5fH
	shr	r9, 5
	and	r9d, 16383				; 00003fffH
	movzx	eax, WORD PTR [rcx+r9*2+53976]
	mov	WORD PTR [rbx-102400], ax
	mov	WORD PTR [rcx+r9*2+53976], dx
	movzx	eax, WORD PTR [rcx+8]
	inc	ax
	mov	WORD PTR [rbx-2], ax
	inc	WORD PTR [rcx+r9*2+291540]
	movzx	eax, WORD PTR [r10-1]
	mov	WORD PTR [rcx+rax*2+324308], dx
	dec	r11
	jne	SHORT $LL2@swd_insert
	mov	rdi, QWORD PTR [rsp]
	mov	rsi, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+24]
	mov	rbx, QWORD PTR [rsp+16]
$LN6@swd_insert:

; 269  :     }
; 270  : }

	add	rsp, 8
	ret	0
?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z ENDP	; swd_insertdict
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 48
dict$ = 56
dict_len$ = 64
?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z PROC	; swd_init

; 279  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 280  :     lzo_uint i = 0;
; 281  :     int c = 0;
; 282  : 
; 283  : #if defined(__LZO_CHECKER)
; 284  :     s->b = malloc(SWD_N + SWD_F + SWD_F);
; 285  :     s->head3 = malloc(sizeof(swd_uint) * SWD_HSIZE);
; 286  :     s->succ3 = malloc(sizeof(swd_uint) * (SWD_N + SWD_F));
; 287  :     s->best3 = malloc(sizeof(swd_uint) * (SWD_N + SWD_F));
; 288  :     s->llen3 = malloc(sizeof(swd_uint) * SWD_HSIZE);
; 289  : #ifdef HEAD2
; 290  :     s->head2 = malloc(sizeof(swd_uint) * 65536L);
; 291  : #endif
; 292  : #endif
; 293  : 
; 294  :     s->n = SWD_N;
; 295  :     s->f = SWD_F;
; 296  :     s->threshold = SWD_THRESHOLD;
; 297  : 
; 298  :     /* defaults */
; 299  :     s->max_chain = SWD_MAX_CHAIN;
; 300  :     s->nice_length = SWD_F;
; 301  :     s->use_best_off = 0;
; 302  :     s->lazy_insert = 0;
; 303  : 
; 304  :     s->b_size = s->n + s->f;
; 305  : #if 0
; 306  :     if (2 * s->f >= s->n || s->b_size + s->f >= SWD_UINT_MAX)
; 307  :         return LZO_E_ERROR;
; 308  : #else
; 309  :     LZO_COMPILE_TIME_ASSERT(!(0ul + 2 * SWD_F >= SWD_N))
; 310  :     LZO_COMPILE_TIME_ASSERT(!(0ul + SWD_N + SWD_F + SWD_F >= SWD_UINT_MAX))
; 311  : #endif
; 312  :     s->b_wrap = s_b(s) + s->b_size;

	lea	rax, QWORD PTR [rcx+51927]
	xor	ebp, ebp
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	mov	QWORD PTR [rcx], 49151			; 0000bfffH
	mov	QWORD PTR [rcx+704], rax
	mov	QWORD PTR [rcx+8], 2048			; 00000800H
	mov	QWORD PTR [rcx+16], 1
	mov	QWORD PTR [rcx+24], 2048		; 00000800H
	mov	QWORD PTR [rcx+32], 2048		; 00000800H
	mov	DWORD PTR [rcx+40], ebp
	mov	QWORD PTR [rcx+48], rbp
	mov	QWORD PTR [rcx+696], 51199		; 0000c7ffH

; 313  :     s->node_count = s->n;

	mov	QWORD PTR [rcx+712], 49151		; 0000bfffH

; 314  : 
; 315  :     lzo_memset(s_llen3(s), 0, sizeof(s_llen3(s)[0]) * (lzo_uint)SWD_HSIZE);

	add	rcx, 291540				; 000472d4H
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	call	memset

; 316  : #ifdef HEAD2
; 317  : #if 1
; 318  :     lzo_memset(s_head2(s), 0xff, sizeof(s_head2(s)[0]) * 65536L);

	lea	rcx, QWORD PTR [rsi+324308]
	mov	edx, 255				; 000000ffH
	mov	r8d, 131072				; 00020000H
	call	memset

; 319  :     assert(s_head2(s)[0] == NIL2);
; 320  : #else
; 321  :     for (i = 0; i < 65536L; i++)
; 322  :         s_head2(s)[i] = NIL2;
; 323  : #endif
; 324  : #endif
; 325  : 
; 326  :     s->ip = 0;
; 327  :     swd_initdict(s,dict,dict_len);

	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, rsi
	mov	QWORD PTR [rsi+672], rbp
	call	?swd_initdict@@YAXPEAUlzo1x_999_swd_t@@PEBE_K@Z ; swd_initdict

; 328  :     s->bp = s->ip;

	mov	rcx, QWORD PTR [rsi+672]

; 329  :     s->first_rp = s->ip;
; 330  : 
; 331  :     assert(s->ip + s->f <= s->b_size);
; 332  : #if 1
; 333  :     s->look = (lzo_uint) (s->c->in_end - s->c->ip);

	mov	rdx, QWORD PTR [rsi+360]
	mov	QWORD PTR [rsi+680], rcx
	mov	QWORD PTR [rsi+720], rcx
	mov	r8, QWORD PTR [rdx+72]
	sub	r8, QWORD PTR [rdx+56]
	mov	QWORD PTR [rsi+72], r8

; 334  :     if (s->look > 0)

	je	SHORT $LN6@swd_init

; 335  :     {
; 336  :         if (s->look > s->f)

	cmp	r8, QWORD PTR [rsi+8]
	cmova	r8, QWORD PTR [rsi+8]

; 337  :             s->look = s->f;
; 338  :         lzo_memcpy(&s_b(s)[s->ip],s->c->ip,s->look);

	add	rcx, 728				; 000002d8H
	mov	QWORD PTR [rsi+72], r8
	mov	rdx, QWORD PTR [rdx+56]
	add	rcx, rsi
	call	memcpy

; 339  :         s->c->ip += s->look;

	mov	rax, QWORD PTR [rsi+72]
	mov	rcx, QWORD PTR [rsi+360]
	add	QWORD PTR [rcx+56], rax

; 340  :         s->ip += s->look;

	mov	rax, QWORD PTR [rsi+72]
	add	QWORD PTR [rsi+672], rax
$LN6@swd_init:

; 341  :     }
; 342  : #else
; 343  :     s->look = 0;
; 344  :     while (s->look < s->f)
; 345  :     {
; 346  :         if ((c = getbyte(*(s->c))) < 0)
; 347  :             break;
; 348  :         s_b(s)[s->ip] = LZO_BYTE(c);
; 349  :         s->ip++;
; 350  :         s->look++;
; 351  :     }
; 352  : #endif
; 353  :     if (s->ip == s->b_size)

	mov	rax, QWORD PTR [rsi+696]
	cmp	QWORD PTR [rsi+672], rax
	jne	SHORT $LN4@swd_init

; 354  :         s->ip = 0;

	mov	QWORD PTR [rsi+672], rbp
$LN4@swd_init:

; 355  : 
; 356  :     if (s->look >= 2 && s->dict_len > 0)

	cmp	QWORD PTR [rsi+72], 2
	jb	SHORT $LN3@swd_init
	mov	r8, QWORD PTR [rsi+664]
	test	r8, r8
	je	SHORT $LN3@swd_init

; 357  :         swd_insertdict(s,0,s->dict_len);

	mov	rcx, rsi
	call	?swd_insertdict@@YAXPEAUlzo1x_999_swd_t@@_K1@Z ; swd_insertdict
$LN3@swd_init:

; 358  : 
; 359  :     s->rp = s->first_rp;

	mov	rax, QWORD PTR [rsi+720]

; 360  :     if (s->rp >= s->node_count)

	mov	rcx, QWORD PTR [rsi+712]
	mov	QWORD PTR [rsi+688], rax
	cmp	rax, rcx
	jb	SHORT $LN2@swd_init

; 361  :         s->rp -= s->node_count;

	sub	rax, rcx

; 362  :     else

	jmp	SHORT $LN9@swd_init
$LN2@swd_init:

; 363  :         s->rp += s->b_size - s->node_count;

	sub	rax, rcx
	add	rax, QWORD PTR [rsi+696]
$LN9@swd_init:

; 364  : 
; 365  : #if defined(__LZO_CHECKER)
; 366  :     /* initialize memory for the first few HEAD3 (if s->ip is not far
; 367  :      * enough ahead to do this job for us). The value doesn't matter. */
; 368  :     if (s->look < 3)
; 369  :         lzo_memset(&s_b(s)[s->bp+s->look],0,3);
; 370  : #endif
; 371  : 
; 372  :     LZO_UNUSED(i);
; 373  :     LZO_UNUSED(c);
; 374  :     return LZO_E_OK;
; 375  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	QWORD PTR [rsi+688], rax
	mov	rsi, QWORD PTR [rsp+64]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z ENDP	; swd_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$dead$ = 8
?swd_exit@@YAXPEAUlzo1x_999_swd_t@@@Z PROC		; swd_exit

; 381  : #if defined(__LZO_CHECKER)
; 382  :     /* free in reverse order of allocations */
; 383  : #ifdef HEAD2
; 384  :     free(s->head2); s->head2 = NULL;
; 385  : #endif
; 386  :     free(s->llen3); s->llen3 = NULL;
; 387  :     free(s->best3); s->best3 = NULL;
; 388  :     free(s->succ3); s->succ3 = NULL;
; 389  :     free(s->head3); s->head3 = NULL;
; 390  :     free(s->b); s->b = NULL;
; 391  : #else
; 392  :     LZO_UNUSED(s);
; 393  : #endif
; 394  : }

	ret	0
?swd_exit@@YAXPEAUlzo1x_999_swd_t@@@Z ENDP		; swd_exit
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 8
?swd_getbyte@@YAXPEAUlzo1x_999_swd_t@@@Z PROC		; swd_getbyte

; 408  :     int c;
; 409  : 
; 410  :     if ((c = getbyte(*(s->c))) < 0)

	mov	r8, QWORD PTR [rcx+360]
	mov	rdx, rcx
	mov	rax, QWORD PTR [r8+56]
	cmp	rax, QWORD PTR [r8+72]
	jae	SHORT $LN12@swd_getbyt
	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	QWORD PTR [r8+56], rax
	test	ecx, ecx
	js	SHORT $LN12@swd_getbyt

; 414  : #if defined(__LZO_CHECKER)
; 415  :         /* initialize memory - value doesn't matter */
; 416  :         s_b(s)[s->ip] = 0;
; 417  :         if (s->ip < s->f)
; 418  :             s->b_wrap[s->ip] = 0;
; 419  : #endif
; 420  :     }
; 421  :     else
; 422  :     {
; 423  :         s_b(s)[s->ip] = LZO_BYTE(c);

	mov	rax, QWORD PTR [rdx+672]
	mov	BYTE PTR [rax+rdx+728], cl

; 424  :         if (s->ip < s->f)

	mov	r8, QWORD PTR [rdx+672]
	cmp	r8, QWORD PTR [rdx+8]
	jae	SHORT $LN4@swd_getbyt

; 425  :             s->b_wrap[s->ip] = LZO_BYTE(c);

	mov	rax, QWORD PTR [rdx+704]
	mov	BYTE PTR [r8+rax], cl
	jmp	SHORT $LN4@swd_getbyt
$LN12@swd_getbyt:

; 411  :     {
; 412  :         if (s->look > 0)

	mov	rax, QWORD PTR [rdx+72]
	test	rax, rax
	je	SHORT $LN4@swd_getbyt

; 413  :             --s->look;

	dec	rax
	mov	QWORD PTR [rdx+72], rax
$LN4@swd_getbyt:

; 426  :     }
; 427  :     if (++s->ip == s->b_size)

	inc	QWORD PTR [rdx+672]
	mov	rcx, QWORD PTR [rdx+696]
	mov	rax, QWORD PTR [rdx+672]
	xor	r8d, r8d
	cmp	rax, rcx
	cmove	rax, r8

; 428  :         s->ip = 0;
; 429  :     if (++s->bp == s->b_size)

	inc	QWORD PTR [rdx+680]
	mov	QWORD PTR [rdx+672], rax
	mov	rax, QWORD PTR [rdx+680]
	cmp	rax, rcx
	cmove	rax, r8

; 430  :         s->bp = 0;
; 431  :     if (++s->rp == s->b_size)

	inc	QWORD PTR [rdx+688]
	mov	QWORD PTR [rdx+680], rax
	mov	rax, QWORD PTR [rdx+688]
	cmp	rax, rcx
	cmove	rax, r8
	mov	QWORD PTR [rdx+688], rax

; 432  :         s->rp = 0;
; 433  : }

	ret	0
?swd_getbyte@@YAXPEAUlzo1x_999_swd_t@@@Z ENDP		; swd_getbyte
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 8
node$ = 16
?swd_remove_node@@YAXPEAUlzo1x_999_swd_t@@_K@Z PROC	; swd_remove_node

; 443  :     if (s->node_count == 0)

	mov	rax, QWORD PTR [rcx+712]
	mov	r9, rdx
	test	rax, rax
	jne	SHORT $LN3@swd_remove

; 444  :     {
; 445  :         lzo_uint key;
; 446  : 
; 447  : #ifdef LZO_DEBUG
; 448  :         if (s->first_rp != LZO_UINT_MAX)
; 449  :         {
; 450  :             if (node != s->first_rp)
; 451  :                 printf("Remove %5u: %5u %5u %5u %5u  %6u %6u\n",
; 452  :                         node, s->rp, s->ip, s->bp, s->first_rp,
; 453  :                         s->ip - node, s->ip - s->bp);
; 454  :             assert(node == s->first_rp);
; 455  :             s->first_rp = LZO_UINT_MAX;
; 456  :         }
; 457  : #endif
; 458  : 
; 459  :         key = HEAD3(s_b(s),node);

	movzx	eax, BYTE PTR [rcx+rdx+729]
	movzx	r8d, BYTE PTR [rcx+rdx+728]
	shl	r8, 5
	xor	r8, rax
	movzx	eax, BYTE PTR [rcx+rdx+730]
	shl	r8, 5
	xor	r8, rax
	imul	rax, r8, 40799				; 00009f5fH

; 460  :         assert(s_llen3(s)[key] > 0);
; 461  :         --s_llen3(s)[key];

	mov	r8d, 65535				; 0000ffffH
	shr	rax, 5
	and	eax, 16383				; 00003fffH
	add	WORD PTR [rcx+rax*2+291540], r8w

; 462  : 
; 463  : #ifdef HEAD2
; 464  :         key = HEAD2(s_b(s),node);

	movzx	eax, WORD PTR [rcx+rdx+728]

; 465  :         assert(s_head2(s)[key] != NIL2);
; 466  :         if ((lzo_uint) s_head2(s)[key] == node)

	lea	rdx, QWORD PTR [rcx+rax*2]
	movzx	eax, WORD PTR [rdx+324308]
	cmp	rax, r9
	jne	SHORT $LN1@swd_remove

; 467  :             s_head2(s)[key] = NIL2;

	mov	WORD PTR [rdx+324308], r8w

; 472  : }

	ret	0
$LN3@swd_remove:

; 468  : #endif
; 469  :     }
; 470  :     else
; 471  :         --s->node_count;

	dec	rax
	mov	QWORD PTR [rcx+712], rax
$LN1@swd_remove:

; 472  : }

	ret	0
?swd_remove_node@@YAXPEAUlzo1x_999_swd_t@@_K@Z ENDP	; swd_remove_node
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 48
n$ = 56
?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z PROC		; swd_accept

; 481  : {

	sub	rsp, 40					; 00000028H
	mov	r10, rdx
	mov	r9, rcx

; 482  :     assert(n <= s->look);
; 483  : 
; 484  :     while (n--)

	test	rdx, rdx
	je	$LN11@swd_accept
	mov	r11d, 65535				; 0000ffffH
	npad	7
$LL2@swd_accept:

; 443  :     if (s->node_count == 0)

	mov	rax, QWORD PTR [r9+712]

; 485  :     {
; 486  :         lzo_uint key;
; 487  : 
; 488  :         swd_remove_node(s,s->rp);

	mov	rdx, QWORD PTR [r9+688]
	dec	r10

; 443  :     if (s->node_count == 0)

	test	rax, rax
	jne	SHORT $LN7@swd_accept

; 444  :     {
; 445  :         lzo_uint key;
; 446  : 
; 447  : #ifdef LZO_DEBUG
; 448  :         if (s->first_rp != LZO_UINT_MAX)
; 449  :         {
; 450  :             if (node != s->first_rp)
; 451  :                 printf("Remove %5u: %5u %5u %5u %5u  %6u %6u\n",
; 452  :                         node, s->rp, s->ip, s->bp, s->first_rp,
; 453  :                         s->ip - node, s->ip - s->bp);
; 454  :             assert(node == s->first_rp);
; 455  :             s->first_rp = LZO_UINT_MAX;
; 456  :         }
; 457  : #endif
; 458  : 
; 459  :         key = HEAD3(s_b(s),node);

	movzx	eax, BYTE PTR [rdx+r9+728]
	movzx	ecx, BYTE PTR [rdx+r9+729]
	shl	rax, 5
	xor	rcx, rax
	movzx	eax, BYTE PTR [rdx+r9+730]
	shl	rcx, 5
	xor	rcx, rax
	imul	rax, rcx, 40799				; 00009f5fH
	shr	rax, 5
	and	eax, 16383				; 00003fffH

; 460  :         assert(s_llen3(s)[key] > 0);
; 461  :         --s_llen3(s)[key];

	add	WORD PTR [r9+rax*2+291540], r11w

; 462  : 
; 463  : #ifdef HEAD2
; 464  :         key = HEAD2(s_b(s),node);

	movzx	eax, WORD PTR [rdx+r9+728]

; 465  :         assert(s_head2(s)[key] != NIL2);
; 466  :         if ((lzo_uint) s_head2(s)[key] == node)

	lea	rcx, QWORD PTR [r9+rax*2]
	movzx	eax, WORD PTR [rcx+324308]
	cmp	rax, rdx
	jne	SHORT $LN5@swd_accept

; 467  :             s_head2(s)[key] = NIL2;

	mov	WORD PTR [rcx+324308], r11w

; 468  : #endif
; 469  :     }
; 470  :     else

	jmp	SHORT $LN5@swd_accept
$LN7@swd_accept:

; 471  :         --s->node_count;

	dec	rax
	mov	QWORD PTR [r9+712], rax
$LN5@swd_accept:

; 489  : 
; 490  :         /* add bp into HEAD3 */
; 491  :         key = HEAD3(s_b(s),s->bp);

	mov	r8, QWORD PTR [r9+680]
	movzx	eax, BYTE PTR [r8+r9+729]
	movzx	ecx, BYTE PTR [r8+r9+728]
	shl	rcx, 5
	xor	rcx, rax
	movzx	eax, BYTE PTR [r8+r9+730]
	shl	rcx, 5
	xor	rcx, rax
	imul	rdx, rcx, 40799				; 00009f5fH
	shr	rdx, 5
	and	edx, 16383				; 00003fffH

; 492  :         s_succ3(s)[s->bp] = s_get_head3(s,key);

	movzx	eax, WORD PTR [r9+rdx*2+53976]
	mov	WORD PTR [r9+r8*2+86744], ax

; 493  :         s_head3(s)[key] = SWD_UINT(s->bp);

	movzx	eax, WORD PTR [r9+680]
	mov	WORD PTR [r9+rdx*2+53976], ax

; 494  :         s_best3(s)[s->bp] = SWD_UINT(s->f + 1);

	movzx	ecx, WORD PTR [r9+8]
	mov	rax, QWORD PTR [r9+680]
	inc	cx
	mov	WORD PTR [r9+rax*2+189142], cx

; 495  :         s_llen3(s)[key]++;

	inc	WORD PTR [r9+rdx*2+291540]

; 496  :         assert(s_llen3(s)[key] <= SWD_N);
; 497  : 
; 498  : #ifdef HEAD2
; 499  :         /* add bp into HEAD2 */
; 500  :         key = HEAD2(s_b(s),s->bp);
; 501  :         s_head2(s)[key] = SWD_UINT(s->bp);

	mov	rax, QWORD PTR [r9+680]
	movzx	ecx, WORD PTR [r9+rax+728]
	mov	WORD PTR [r9+rcx*2+324308], ax

; 502  : #endif
; 503  : 
; 504  :         swd_getbyte(s);

	mov	rcx, r9
	call	?swd_getbyte@@YAXPEAUlzo1x_999_swd_t@@@Z ; swd_getbyte
	test	r10, r10
	jne	$LL2@swd_accept
$LN11@swd_accept:

; 505  :     }
; 506  : }

	add	rsp, 40					; 00000028H
	ret	0
?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z ENDP		; swd_accept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 8
node$ = 16
cnt$ = 24
?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z PROC		; swd_search

; 515  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi

; 516  :     const lzo_bytep p1;
; 517  :     const lzo_bytep p2;
; 518  :     const lzo_bytep px;
; 519  :     lzo_uint m_len = s->m_len;
; 520  :     const lzo_bytep b  = s_b(s);
; 521  :     const lzo_bytep bp = s_b(s) + s->bp;

	mov	r9, QWORD PTR [rcx+680]

; 522  :     const lzo_bytep bx = s_b(s) + s->bp + s->look;

	mov	rax, QWORD PTR [rcx+72]
	mov	rdi, QWORD PTR [rcx+56]
	add	rax, r9
	lea	rbx, QWORD PTR [rcx+728]
	mov	r11, rdx
	add	rbx, r9
	lea	r9, QWORD PTR [rcx+728]
	mov	r10, rcx

; 523  :     unsigned char scan_end1;
; 524  : 
; 525  :     assert(s->m_len > 0);
; 526  : 
; 527  :     scan_end1 = bp[m_len - 1];

	movzx	esi, BYTE PTR [rbx+rdi-1]
	add	r9, rax

; 528  :     for ( ; cnt-- > 0; node = s_succ3(s)[node])

	test	r8, r8
	je	$LN28@swd_search
	npad	7
$LL14@swd_search:

; 529  :     {
; 530  :         p1 = bp;
; 531  :         p2 = b + node;

	lea	rdx, QWORD PTR [r10+r11]
	dec	r8

; 532  :         px = bx;
; 533  : 
; 534  :         assert(m_len < s->look);
; 535  : 
; 536  :         if (
; 537  : #if 1
; 538  :             p2[m_len - 1] == scan_end1 &&
; 539  :             p2[m_len] == p1[m_len] &&
; 540  : #endif
; 541  :             p2[0] == p1[0] &&
; 542  :             p2[1] == p1[1])

	cmp	BYTE PTR [rdx+rdi+727], sil
	jne	$LN13@swd_search
	movzx	eax, BYTE PTR [rbx+rdi]
	cmp	BYTE PTR [rdx+rdi+728], al
	jne	$LN13@swd_search
	movzx	eax, BYTE PTR [rbx]
	cmp	BYTE PTR [rdx+728], al
	jne	SHORT $LN13@swd_search
	movzx	eax, BYTE PTR [rbx+1]
	cmp	BYTE PTR [rdx+729], al
	jne	SHORT $LN13@swd_search

; 543  :         {
; 544  :             lzo_uint i;
; 545  :             assert(lzo_memcmp(bp,&b[node],3) == 0);
; 546  : 
; 547  : #if 0 && defined(LZO_UNALIGNED_OK_4)
; 548  :             p1 += 3; p2 += 3;
; 549  :             while (p1 < px && * (const lzo_uint32p) p1 == * (const lzo_uint32p) p2)
; 550  :                 p1 += 4, p2 += 4;
; 551  :             while (p1 < px && *p1 == *p2)
; 552  :                 p1 += 1, p2 += 1;
; 553  : #else
; 554  :             p1 += 2; p2 += 2;

	lea	rax, QWORD PTR [rbx+2]
	add	rdx, 730				; 000002daH
$LL10@swd_search:

; 555  :             do {} while (++p1 < px && *p1 == *++p2);

	inc	rax
	cmp	rax, r9
	jae	SHORT $LN7@swd_search
	movzx	ecx, BYTE PTR [rdx+1]
	inc	rdx
	cmp	BYTE PTR [rax], cl
	je	SHORT $LL10@swd_search
$LN7@swd_search:

; 556  : #endif
; 557  :             i = pd(p1, bp);

	sub	rax, rbx

; 558  : 
; 559  : #ifdef LZO_DEBUG
; 560  :             if (lzo_memcmp(bp,&b[node],i) != 0)
; 561  :                 printf("%5ld %5ld %02x%02x %02x%02x\n",
; 562  :                         (long)s->bp, (long) node,
; 563  :                         bp[0], bp[1], b[node], b[node+1]);
; 564  : #endif
; 565  :             assert(lzo_memcmp(bp,&b[node],i) == 0);
; 566  : 
; 567  : #if defined(SWD_BEST_OFF)
; 568  :             if (i < SWD_BEST_OFF)

	cmp	rax, 34					; 00000022H
	jae	SHORT $LN5@swd_search

; 569  :             {
; 570  :                 if (s->best_pos[i] == 0)

	cmp	QWORD PTR [r10+rax*8+376], 0
	jne	SHORT $LN5@swd_search

; 571  :                     s->best_pos[i] = node + 1;

	lea	rcx, QWORD PTR [r11+1]
	mov	QWORD PTR [r10+rax*8+376], rcx
$LN5@swd_search:

; 572  :             }
; 573  : #endif
; 574  :             if (i > m_len)

	cmp	rax, rdi
	jbe	SHORT $LN13@swd_search

; 575  :             {
; 576  :                 s->m_len = m_len = i;

	mov	rdi, rax
	mov	QWORD PTR [r10+56], rax

; 577  :                 s->m_pos = node;

	mov	QWORD PTR [r10+368], r11

; 578  :                 if (m_len == s->look)

	cmp	rax, QWORD PTR [r10+72]
	je	SHORT $LN28@swd_search

; 579  :                     return;
; 580  :                 if (m_len >= s->nice_length)

	cmp	rax, QWORD PTR [r10+32]
	jae	SHORT $LN28@swd_search

; 581  :                     return;
; 582  :                 if (m_len > (lzo_uint) s_best3(s)[node])

	movzx	ecx, WORD PTR [r10+r11*2+189142]
	cmp	rax, rcx
	ja	SHORT $LN28@swd_search

; 583  :                     return;
; 584  :                 scan_end1 = bp[m_len - 1];

	movzx	esi, BYTE PTR [rax+rbx-1]
$LN13@swd_search:

; 528  :     for ( ; cnt-- > 0; node = s_succ3(s)[node])

	movzx	r11d, WORD PTR [r10+r11*2+86744]
	test	r8, r8
	jne	$LL14@swd_search
$LN28@swd_search:

; 585  :             }
; 586  :         }
; 587  :     }
; 588  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z ENDP		; swd_search
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 8
?swd_search2@@YAHPEAUlzo1x_999_swd_t@@@Z PROC		; swd_search2

; 600  :     lzo_uint key;
; 601  : 
; 602  :     assert(s->look >= 2);
; 603  :     assert(s->m_len > 0);
; 604  : 
; 605  :     key = s_head2(s)[ HEAD2(s_b(s),s->bp) ];

	mov	rax, QWORD PTR [rcx+680]
	movzx	edx, WORD PTR [rax+rcx+728]
	movzx	r8d, WORD PTR [rcx+rdx*2+324308]

; 606  :     if (key == NIL2)

	cmp	r8, 65535				; 0000ffffH
	jne	SHORT $LN3@swd_search

; 607  :         return 0;

	xor	eax, eax

; 625  : }

	ret	0
$LN3@swd_search:

; 608  : #ifdef LZO_DEBUG
; 609  :     if (lzo_memcmp(&s_b(s)[s->bp],&s_b(s)[key],2) != 0)
; 610  :         printf("%5ld %5ld %02x%02x %02x%02x\n", (long)s->bp, (long)key,
; 611  :                 s_b(s)[s->bp], s_b(s)[s->bp+1], s_b(s)[key], s_b(s)[key+1]);
; 612  : #endif
; 613  :     assert(lzo_memcmp(&s_b(s)[s->bp],&s_b(s)[key],2) == 0);
; 614  : #if defined(SWD_BEST_OFF)
; 615  :     if (s->best_pos[2] == 0)

	cmp	QWORD PTR [rcx+392], 0
	jne	SHORT $LN2@swd_search

; 616  :         s->best_pos[2] = key + 1;

	lea	rax, QWORD PTR [r8+1]
	mov	QWORD PTR [rcx+392], rax
$LN2@swd_search:

; 617  : #endif
; 618  : 
; 619  :     if (s->m_len < 2)

	cmp	QWORD PTR [rcx+56], 2
	jae	SHORT $LN1@swd_search

; 620  :     {
; 621  :         s->m_len = 2;

	mov	QWORD PTR [rcx+56], 2

; 622  :         s->m_pos = key;

	mov	QWORD PTR [rcx+368], r8
$LN1@swd_search:

; 623  :     }
; 624  :     return 1;

	mov	eax, 1

; 625  : }

	ret	0
?swd_search2@@YAHPEAUlzo1x_999_swd_t@@@Z ENDP		; swd_search2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_swd.ch
_TEXT	SEGMENT
s$ = 48
?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z PROC		; swd_findbest

; 636  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 637  :     lzo_uint key;
; 638  :     lzo_uint cnt, node;
; 639  :     lzo_uint len;
; 640  : 
; 641  :     assert(s->m_len > 0);
; 642  : 
; 643  :     /* get current head, add bp into HEAD3 */
; 644  :     key = HEAD3(s_b(s),s->bp);

	mov	r8, QWORD PTR [rcx+680]
	mov	rbx, rcx
	movzx	ecx, BYTE PTR [r8+rcx+728]
	movzx	eax, BYTE PTR [r8+rbx+729]
	shl	rcx, 5
	xor	rcx, rax
	movzx	eax, BYTE PTR [r8+rbx+730]
	shl	rcx, 5
	xor	rcx, rax
	imul	rdx, rcx, 40799				; 00009f5fH
	shr	rdx, 5
	and	edx, 16383				; 00003fffH

; 645  :     node = s_succ3(s)[s->bp] = s_get_head3(s,key);

	movzx	eax, WORD PTR [rbx+rdx*2+53976]
	mov	WORD PTR [rbx+r8*2+86744], ax
	mov	rax, QWORD PTR [rbx+680]
	movzx	r8d, WORD PTR [rbx+rdx*2+291540]
	movzx	r9d, WORD PTR [rbx+rax*2+86744]

; 646  :     cnt = s_llen3(s)[key]++;

	lea	eax, DWORD PTR [r8+1]
	mov	WORD PTR [rbx+rdx*2+291540], ax

; 647  :     assert(s_llen3(s)[key] <= SWD_N + SWD_F);
; 648  :     if (cnt > s->max_chain && s->max_chain > 0)

	mov	rax, QWORD PTR [rbx+24]
	cmp	r8, rax
	jbe	SHORT $LN13@swd_findbe
	test	rax, rax
	cmovne	r8, rax
$LN13@swd_findbe:

; 649  :         cnt = s->max_chain;
; 650  :     s_head3(s)[key] = SWD_UINT(s->bp);

	movzx	eax, WORD PTR [rbx+680]

; 651  : 
; 652  :     s->b_char = s_b(s)[s->bp];
; 653  :     len = s->m_len;
; 654  :     if (s->m_len >= s->look)

	mov	esi, 65535				; 0000ffffH
	mov	WORD PTR [rbx+rdx*2+53976], ax
	mov	rcx, QWORD PTR [rbx+680]
	mov	rdi, QWORD PTR [rbx+56]
	mov	rdx, QWORD PTR [rbx+72]
	movzx	eax, BYTE PTR [rcx+rbx+728]
	mov	DWORD PTR [rbx+80], eax
	cmp	rdi, rdx
	jb	SHORT $LN12@swd_findbe

; 655  :     {
; 656  :         if (s->look == 0)

	or	r8d, -1
	test	rdx, rdx
	cmove	eax, r8d

; 657  :             s->b_char = -1;
; 658  :         s->m_off = 0;

	xor	r10d, r10d
	mov	DWORD PTR [rbx+80], eax

; 659  :         s_best3(s)[s->bp] = SWD_UINT(s->f + 1);

	movzx	eax, WORD PTR [rbx+8]
	mov	QWORD PTR [rbx+64], r10
	inc	ax
	mov	WORD PTR [rbx+rcx*2+189142], ax

; 660  :     }
; 661  :     else

	jmp	$LN3@swd_findbe
$LN12@swd_findbe:

; 472  : }
; 473  : 
; 474  : 
; 475  : /***********************************************************************
; 476  : //
; 477  : ************************************************************************/
; 478  : 
; 479  : static
; 480  : void swd_accept(lzo_swd_p s, lzo_uint n)
; 481  : {
; 482  :     assert(n <= s->look);
; 483  : 
; 484  :     while (n--)
; 485  :     {
; 486  :         lzo_uint key;
; 487  : 
; 488  :         swd_remove_node(s,s->rp);
; 489  : 
; 490  :         /* add bp into HEAD3 */
; 491  :         key = HEAD3(s_b(s),s->bp);
; 492  :         s_succ3(s)[s->bp] = s_get_head3(s,key);
; 493  :         s_head3(s)[key] = SWD_UINT(s->bp);
; 494  :         s_best3(s)[s->bp] = SWD_UINT(s->f + 1);
; 495  :         s_llen3(s)[key]++;
; 496  :         assert(s_llen3(s)[key] <= SWD_N);
; 497  : 
; 498  : #ifdef HEAD2
; 499  :         /* add bp into HEAD2 */
; 500  :         key = HEAD2(s_b(s),s->bp);
; 501  :         s_head2(s)[key] = SWD_UINT(s->bp);
; 502  : #endif
; 503  : 
; 504  :         swd_getbyte(s);
; 505  :     }
; 506  : }
; 507  : 
; 508  : 
; 509  : /***********************************************************************
; 510  : //
; 511  : ************************************************************************/
; 512  : 
; 513  : static
; 514  : void swd_search(lzo_swd_p s, lzo_uint node, lzo_uint cnt)
; 515  : {
; 516  :     const lzo_bytep p1;
; 517  :     const lzo_bytep p2;
; 518  :     const lzo_bytep px;
; 519  :     lzo_uint m_len = s->m_len;
; 520  :     const lzo_bytep b  = s_b(s);
; 521  :     const lzo_bytep bp = s_b(s) + s->bp;
; 522  :     const lzo_bytep bx = s_b(s) + s->bp + s->look;
; 523  :     unsigned char scan_end1;
; 524  : 
; 525  :     assert(s->m_len > 0);
; 526  : 
; 527  :     scan_end1 = bp[m_len - 1];
; 528  :     for ( ; cnt-- > 0; node = s_succ3(s)[node])
; 529  :     {
; 530  :         p1 = bp;
; 531  :         p2 = b + node;
; 532  :         px = bx;
; 533  : 
; 534  :         assert(m_len < s->look);
; 535  : 
; 536  :         if (
; 537  : #if 1
; 538  :             p2[m_len - 1] == scan_end1 &&
; 539  :             p2[m_len] == p1[m_len] &&
; 540  : #endif
; 541  :             p2[0] == p1[0] &&
; 542  :             p2[1] == p1[1])
; 543  :         {
; 544  :             lzo_uint i;
; 545  :             assert(lzo_memcmp(bp,&b[node],3) == 0);
; 546  : 
; 547  : #if 0 && defined(LZO_UNALIGNED_OK_4)
; 548  :             p1 += 3; p2 += 3;
; 549  :             while (p1 < px && * (const lzo_uint32p) p1 == * (const lzo_uint32p) p2)
; 550  :                 p1 += 4, p2 += 4;
; 551  :             while (p1 < px && *p1 == *p2)
; 552  :                 p1 += 1, p2 += 1;
; 553  : #else
; 554  :             p1 += 2; p2 += 2;
; 555  :             do {} while (++p1 < px && *p1 == *++p2);
; 556  : #endif
; 557  :             i = pd(p1, bp);
; 558  : 
; 559  : #ifdef LZO_DEBUG
; 560  :             if (lzo_memcmp(bp,&b[node],i) != 0)
; 561  :                 printf("%5ld %5ld %02x%02x %02x%02x\n",
; 562  :                         (long)s->bp, (long) node,
; 563  :                         bp[0], bp[1], b[node], b[node+1]);
; 564  : #endif
; 565  :             assert(lzo_memcmp(bp,&b[node],i) == 0);
; 566  : 
; 567  : #if defined(SWD_BEST_OFF)
; 568  :             if (i < SWD_BEST_OFF)
; 569  :             {
; 570  :                 if (s->best_pos[i] == 0)
; 571  :                     s->best_pos[i] = node + 1;
; 572  :             }
; 573  : #endif
; 574  :             if (i > m_len)
; 575  :             {
; 576  :                 s->m_len = m_len = i;
; 577  :                 s->m_pos = node;
; 578  :                 if (m_len == s->look)
; 579  :                     return;
; 580  :                 if (m_len >= s->nice_length)
; 581  :                     return;
; 582  :                 if (m_len > (lzo_uint) s_best3(s)[node])
; 583  :                     return;
; 584  :                 scan_end1 = bp[m_len - 1];
; 585  :             }
; 586  :         }
; 587  :     }
; 588  : }
; 589  : 
; 590  : 
; 591  : /***********************************************************************
; 592  : //
; 593  : ************************************************************************/
; 594  : 
; 595  : #ifdef HEAD2
; 596  : 
; 597  : static
; 598  : lzo_bool swd_search2(lzo_swd_p s)
; 599  : {
; 600  :     lzo_uint key;
; 601  : 
; 602  :     assert(s->look >= 2);
; 603  :     assert(s->m_len > 0);
; 604  : 
; 605  :     key = s_head2(s)[ HEAD2(s_b(s),s->bp) ];

	movzx	eax, WORD PTR [rcx+rbx+728]
	movzx	ecx, WORD PTR [rbx+rax*2+324308]

; 606  :     if (key == NIL2)

	cmp	rcx, rsi
	je	SHORT $LN8@swd_findbe

; 607  :         return 0;
; 608  : #ifdef LZO_DEBUG
; 609  :     if (lzo_memcmp(&s_b(s)[s->bp],&s_b(s)[key],2) != 0)
; 610  :         printf("%5ld %5ld %02x%02x %02x%02x\n", (long)s->bp, (long)key,
; 611  :                 s_b(s)[s->bp], s_b(s)[s->bp+1], s_b(s)[key], s_b(s)[key+1]);
; 612  : #endif
; 613  :     assert(lzo_memcmp(&s_b(s)[s->bp],&s_b(s)[key],2) == 0);
; 614  : #if defined(SWD_BEST_OFF)
; 615  :     if (s->best_pos[2] == 0)

	cmp	QWORD PTR [rbx+392], 0
	jne	SHORT $LN21@swd_findbe

; 616  :         s->best_pos[2] = key + 1;

	lea	rax, QWORD PTR [rcx+1]
	mov	QWORD PTR [rbx+392], rax
$LN21@swd_findbe:

; 617  : #endif
; 618  : 
; 619  :     if (s->m_len < 2)

	cmp	rdi, 2
	jae	SHORT $LN20@swd_findbe

; 620  :     {
; 621  :         s->m_len = 2;

	mov	QWORD PTR [rbx+56], 2

; 622  :         s->m_pos = key;

	mov	QWORD PTR [rbx+368], rcx
$LN20@swd_findbe:

; 662  :     {
; 663  : #ifdef HEAD2
; 664  :         if (swd_search2(s))
; 665  : #endif
; 666  :             if (s->look >= 3)

	cmp	rdx, 3
	jb	SHORT $LN8@swd_findbe

; 667  :                 swd_search(s,node,cnt);

	mov	rdx, r9
	mov	rcx, rbx
	call	?swd_search@@YAXPEAUlzo1x_999_swd_t@@_K1@Z ; swd_search
$LN8@swd_findbe:

; 668  :         if (s->m_len > len)

	cmp	QWORD PTR [rbx+56], rdi
	jbe	SHORT $LN7@swd_findbe

; 669  :             s->m_off = swd_pos2off(s,s->m_pos);

	mov	rcx, QWORD PTR [rbx+680]
	mov	rdx, QWORD PTR [rbx+368]
	cmp	rcx, rdx
	jbe	SHORT $LN16@swd_findbe
	sub	rcx, rdx
	jmp	SHORT $LN17@swd_findbe
$LN16@swd_findbe:
	mov	rax, QWORD PTR [rbx+696]
	sub	rax, rdx
	add	rcx, rax
$LN17@swd_findbe:
	mov	QWORD PTR [rbx+64], rcx
$LN7@swd_findbe:

; 670  :         s_best3(s)[s->bp] = SWD_UINT(s->m_len);

	mov	rcx, QWORD PTR [rbx+680]
	movzx	eax, WORD PTR [rbx+56]
	mov	WORD PTR [rbx+rcx*2+189142], ax

; 671  : 
; 672  : #if defined(SWD_BEST_OFF)
; 673  :         if (s->use_best_off)

	cmp	DWORD PTR [rbx+40], 0
	je	SHORT $LN3@swd_findbe

; 674  :         {
; 675  :             int i;
; 676  :             for (i = 2; i < SWD_BEST_OFF; i++)

	lea	rdx, QWORD PTR [rbx+104]
	mov	r9d, 32					; 00000020H
	xor	r10d, r10d
	npad	6
$LL5@swd_findbe:

; 677  :                 if (s->best_pos[i] > 0)

	mov	r8, QWORD PTR [rdx+288]
	test	r8, r8
	je	SHORT $LN2@swd_findbe

; 678  :                     s->best_off[i] = swd_pos2off(s,s->best_pos[i]-1);

	mov	rcx, QWORD PTR [rbx+680]
	lea	rax, QWORD PTR [r8-1]
	cmp	rcx, rax
	jbe	SHORT $LN18@swd_findbe
	sub	rcx, r8
	inc	rcx
	mov	QWORD PTR [rdx], rcx

; 679  :                 else

	jmp	SHORT $LN4@swd_findbe
$LN18@swd_findbe:

; 678  :                     s->best_off[i] = swd_pos2off(s,s->best_pos[i]-1);

	mov	rax, QWORD PTR [rbx+696]
	inc	rcx
	sub	rax, r8
	add	rcx, rax
	mov	QWORD PTR [rdx], rcx

; 679  :                 else

	jmp	SHORT $LN4@swd_findbe
$LN2@swd_findbe:

; 680  :                     s->best_off[i] = 0;

	mov	QWORD PTR [rdx], r10
$LN4@swd_findbe:

; 674  :         {
; 675  :             int i;
; 676  :             for (i = 2; i < SWD_BEST_OFF; i++)

	add	rdx, 8
	dec	r9
	jne	SHORT $LL5@swd_findbe
$LN3@swd_findbe:

; 443  :     if (s->node_count == 0)

	mov	rax, QWORD PTR [rbx+712]

; 681  :         }
; 682  : #endif
; 683  :     }
; 684  : 
; 685  :     swd_remove_node(s,s->rp);

	mov	rdx, QWORD PTR [rbx+688]

; 443  :     if (s->node_count == 0)

	test	rax, rax
	jne	SHORT $LN27@swd_findbe

; 444  :     {
; 445  :         lzo_uint key;
; 446  : 
; 447  : #ifdef LZO_DEBUG
; 448  :         if (s->first_rp != LZO_UINT_MAX)
; 449  :         {
; 450  :             if (node != s->first_rp)
; 451  :                 printf("Remove %5u: %5u %5u %5u %5u  %6u %6u\n",
; 452  :                         node, s->rp, s->ip, s->bp, s->first_rp,
; 453  :                         s->ip - node, s->ip - s->bp);
; 454  :             assert(node == s->first_rp);
; 455  :             s->first_rp = LZO_UINT_MAX;
; 456  :         }
; 457  : #endif
; 458  : 
; 459  :         key = HEAD3(s_b(s),node);

	movzx	eax, BYTE PTR [rdx+rbx+728]
	movzx	ecx, BYTE PTR [rdx+rbx+729]
	shl	rax, 5
	xor	rcx, rax
	movzx	eax, BYTE PTR [rdx+rbx+730]
	shl	rcx, 5
	xor	rcx, rax
	imul	rax, rcx, 40799				; 00009f5fH
	shr	rax, 5
	and	eax, 16383				; 00003fffH

; 460  :         assert(s_llen3(s)[key] > 0);
; 461  :         --s_llen3(s)[key];

	add	WORD PTR [rbx+rax*2+291540], si

; 462  : 
; 463  : #ifdef HEAD2
; 464  :         key = HEAD2(s_b(s),node);

	movzx	eax, WORD PTR [rdx+rbx+728]

; 465  :         assert(s_head2(s)[key] != NIL2);
; 466  :         if ((lzo_uint) s_head2(s)[key] == node)

	lea	rcx, QWORD PTR [rbx+rax*2]
	movzx	eax, WORD PTR [rcx+324308]
	cmp	rax, rdx
	jne	SHORT $LN25@swd_findbe

; 467  :             s_head2(s)[key] = NIL2;

	mov	WORD PTR [rcx+324308], si

; 468  : #endif
; 469  :     }
; 470  :     else

	jmp	SHORT $LN25@swd_findbe
$LN27@swd_findbe:

; 471  :         --s->node_count;

	dec	rax
	mov	QWORD PTR [rbx+712], rax
$LN25@swd_findbe:

; 686  : 
; 687  : #ifdef HEAD2
; 688  :     /* add bp into HEAD2 */
; 689  :     key = HEAD2(s_b(s),s->bp);
; 690  :     s_head2(s)[key] = SWD_UINT(s->bp);

	mov	rax, QWORD PTR [rbx+680]

; 691  : #endif
; 692  : }

	mov	rsi, QWORD PTR [rsp+56]
	movzx	ecx, WORD PTR [rbx+rax+728]
	mov	WORD PTR [rbx+rcx*2+324308], ax
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z ENDP		; swd_findbest
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
_TEXT	SEGMENT
c$ = 48
s$ = 56
dict$ = 64
dict_len$ = 72
flags$ = 80
?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z PROC ; init_match

; 132  : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 133  :     int r;
; 134  : 
; 135  :     assert(!c->init);
; 136  :     c->init = 1;

	mov	DWORD PTR [rcx], 1

; 137  : 
; 138  :     s->c = c;

	mov	QWORD PTR [rdx+360], rcx

; 139  : 
; 140  :     c->last_m_len = c->last_m_off = 0;

	xor	edx, edx
	mov	rax, r8

; 141  : 
; 142  :     c->textsize = c->codesize = c->printcount = 0;
; 143  :     c->lit_bytes = c->match_bytes = c->rep_bytes = 0;
; 144  :     c->lazy = 0;
; 145  : 
; 146  :     r = swd_init(s,dict,dict_len);

	mov	r8, r9
	mov	QWORD PTR [rcx+40], rdx
	mov	QWORD PTR [rcx+32], rdx
	mov	QWORD PTR [rcx+112], rdx
	mov	QWORD PTR [rcx+104], rdx
	mov	QWORD PTR [rcx+96], rdx
	mov	QWORD PTR [rcx+124], rdx
	mov	DWORD PTR [rcx+120], edx
	mov	DWORD PTR [rcx+132], edx
	mov	rdx, rax
	mov	rcx, rbx
	call	?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z ; swd_init

; 147  :     if (r != 0)

	test	eax, eax
	jne	SHORT $LN2@init_match

; 148  :         return r;
; 149  : 
; 150  :     s->use_best_off = (flags & 1) ? 1 : 0;

	mov	eax, DWORD PTR flags$[rsp]
	and	eax, 1
	mov	DWORD PTR [rbx+40], eax

; 151  :     return r;

	xor	eax, eax
$LN2@init_match:

; 152  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?init_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@PEBE_KI@Z ENDP ; init_match
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
_TEXT	SEGMENT
c$ = 48
s$ = 56
this_len$ = 64
skip$ = 72
?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z PROC ; find_match

; 162  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, r9
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx

; 163  :     assert(c->init);
; 164  : 
; 165  :     if (skip > 0)

	test	r9, r9
	je	SHORT $LN6@find_match

; 166  :     {
; 167  :         assert(this_len >= skip);
; 168  :         swd_accept(s, this_len - skip);

	mov	rdx, r8
	mov	rcx, rdi
	sub	rdx, r9
	call	?swd_accept@@YAXPEAUlzo1x_999_swd_t@@_K@Z ; swd_accept

; 169  :         c->textsize += this_len - skip + 1;

	sub	rsi, rbp
	inc	rsi
	add	QWORD PTR [rbx+96], rsi

; 170  :     }
; 171  :     else

	jmp	SHORT $LN5@find_match
$LN6@find_match:

; 172  :     {
; 173  :         assert(this_len <= 1);
; 174  :         c->textsize += this_len - skip;

	sub	rsi, r9
	add	QWORD PTR [rcx+96], rsi
$LN5@find_match:

; 175  :     }
; 176  : 
; 177  :     s->m_len = 1;

	mov	QWORD PTR [rdi+56], 1

; 178  :     s->m_len = THRESHOLD;
; 179  : #ifdef SWD_BEST_OFF
; 180  :     if (s->use_best_off)

	cmp	DWORD PTR [rdi+40], 0
	je	SHORT $LN4@find_match

; 181  :         lzo_memset(s->best_pos,0,sizeof(s->best_pos));

	lea	rcx, QWORD PTR [rdi+376]
	xor	edx, edx
	mov	r8d, 272				; 00000110H
	call	memset
$LN4@find_match:

; 182  : #endif
; 183  :     swd_findbest(s);

	mov	rcx, rdi
	call	?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z ; swd_findbest

; 184  :     c->m_len = s->m_len;

	mov	rax, QWORD PTR [rdi+56]

; 185  :     c->m_off = s->m_off;
; 186  : 
; 187  :     swd_getbyte(s);

	mov	rcx, rdi
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR [rdi+64]
	mov	QWORD PTR [rbx+24], rax
	call	?swd_getbyte@@YAXPEAUlzo1x_999_swd_t@@@Z ; swd_getbyte

; 188  : 
; 189  :     if (s->b_char < 0)

	cmp	DWORD PTR [rdi+80], 0
	jge	SHORT $LN3@find_match

; 190  :     {
; 191  :         c->look = 0;

	xor	eax, eax

; 192  :         c->m_len = 0;

	mov	QWORD PTR [rbx+16], rax

; 193  :         swd_exit(s);
; 194  :     }
; 195  :     else

	jmp	SHORT $LN21@find_match
$LN3@find_match:

; 196  :     {
; 197  :         c->look = s->look + 1;

	mov	rax, QWORD PTR [rdi+72]
	inc	rax
$LN21@find_match:

; 198  :     }
; 199  :     c->bp = c->ip - c->look;
; 200  : 
; 201  : #if 0
; 202  :     /* brute force match search */
; 203  :     if (c->m_len > THRESHOLD && c->m_len + 1 <= c->look)
; 204  :     {
; 205  :         const lzo_bytep ip = c->bp;
; 206  :         const lzo_bytep m  = c->bp - c->m_off;
; 207  :         const lzo_bytep in = c->in;
; 208  : 
; 209  :         if (ip - in > N)
; 210  :             in = ip - N;
; 211  :         for (;;)
; 212  :         {
; 213  :             while (*in != *ip)
; 214  :                 in++;
; 215  :             if (in == ip)
; 216  :                 break;
; 217  :             if (in != m)
; 218  :                 if (lzo_memcmp(in,ip,c->m_len+1) == 0)
; 219  :                     printf("%p %p %p %5d\n",in,ip,m,c->m_len);
; 220  :             in++;
; 221  :         }
; 222  :     }
; 223  : #endif
; 224  : 
; 225  :     if (c->cb && c->cb->nprogress && c->textsize > c->printcount)

	mov	rcx, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+8], rax
	mov	rax, QWORD PTR [rbx+56]
	sub	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rbx+48], rax
	test	rcx, rcx
	je	SHORT $LN18@find_match
	mov	rax, QWORD PTR [rcx+16]
	test	rax, rax
	je	SHORT $LN18@find_match
	mov	rdx, QWORD PTR [rbx+96]
	cmp	rdx, QWORD PTR [rbx+112]
	jbe	SHORT $LN18@find_match

; 226  :     {
; 227  :         (*c->cb->nprogress)(c->cb, c->textsize, c->codesize, 0);

	mov	r8, QWORD PTR [rbx+104]
	xor	r9d, r9d
	call	rax

; 228  :         c->printcount += 1024;

	add	QWORD PTR [rbx+112], 1024		; 00000400H
$LN18@find_match:

; 229  :     }
; 230  : 
; 231  :     return LZO_E_OK;
; 232  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z ENDP ; find_match
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
c$ = 16
op$ = 24
m_len$ = 32
m_off$ = 40
?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z PROC	; code_match

; 119  : {

	mov	QWORD PTR [rsp+16], rbx
	push	rsi

; 120  :     lzo_uint x_len = m_len;
; 121  :     lzo_uint x_off = m_off;
; 122  : 
; 123  :     c->match_bytes += (unsigned long) m_len;

	add	DWORD PTR [rcx+124], r8d
	mov	r10, rdx
	mov	r11, rcx
	mov	rbx, r8
	mov	rsi, r9

; 124  : 
; 125  : #if 0
; 126  : /*
; 127  :     static lzo_uint last_m_len = 0, last_m_off = 0;
; 128  :     static lzo_uint prev_m_off[4];
; 129  :     static int prev_m_off_ptr = 0;
; 130  :     int i;
; 131  : 
; 132  :     //if (m_len >= 3 && m_len <= M2_MAX_LEN && m_off <= M2_MAX_OFFSET)
; 133  :     if (m_len >= 3 && m_len <= M2_MAX_LEN)
; 134  :     {
; 135  :     //if (m_len == last_m_len && m_off == last_m_off)
; 136  :         //printf("last_m_len + last_m_off\n");
; 137  :     //else
; 138  :     if (m_off == last_m_off)
; 139  :         printf("last_m_off\n");
; 140  :     else
; 141  :     {
; 142  :         for (i = 0; i < 4; i++)
; 143  :             if (m_off == prev_m_off[i])
; 144  :                 printf("prev_m_off %d: %5ld\n",i,(long)m_off);
; 145  :     }
; 146  :     }
; 147  :     last_m_len = m_len;
; 148  :     last_m_off = prev_m_off[prev_m_off_ptr] = m_off;
; 149  :     prev_m_off_ptr = (prev_m_off_ptr + 1) & 3;
; 150  : */
; 151  : #endif
; 152  : 
; 153  :     assert(op > c->out);
; 154  :     if (m_len == 2)

	cmp	r8, 2
	jne	SHORT $LN16@code_match

; 155  :     {
; 156  :         assert(m_off <= M1_MAX_OFFSET);
; 157  :         assert(c->r1_lit > 0); assert(c->r1_lit < 4);
; 158  :         m_off -= 1;

	dec	r9

; 159  : #if defined(LZO1Z)
; 160  :         *op++ = LZO_BYTE(M1_MARKER | (m_off >> 6));
; 161  :         *op++ = LZO_BYTE(m_off << 2);
; 162  : #else
; 163  :         *op++ = LZO_BYTE(M1_MARKER | ((m_off & 3) << 2));
; 164  :         *op++ = LZO_BYTE(m_off >> 2);

	add	r10, r8
	movzx	eax, r9b
	shr	r9, 2
	shl	al, 2
	and	al, 12
	mov	BYTE PTR [rdx], al
	mov	BYTE PTR [rdx+1], r9b

; 165  : #endif
; 166  :         c->m1a_m++;

	inc	DWORD PTR [rcx+152]

; 268  :     }
; 269  : 
; 270  :     c->last_m_len = x_len;

	mov	QWORD PTR [rcx+32], rbx

; 271  :     c->last_m_off = x_off;

	mov	QWORD PTR [rcx+40], rsi

; 272  :     return op;

	mov	rax, r10

; 273  : }

	mov	rbx, QWORD PTR [rsp+24]
	pop	rsi
	ret	0
$LN16@code_match:

; 167  :     }
; 168  : #if defined(LZO1Z)
; 169  :     else if (m_len <= M2_MAX_LEN && (m_off <= M2_MAX_OFFSET || m_off == c->last_m_off))
; 170  : #else
; 171  :     else if (m_len <= M2_MAX_LEN && m_off <= M2_MAX_OFFSET)

	cmp	r8, 8
	ja	SHORT $LN14@code_match
	cmp	r9, 2048				; 00000800H
	ja	SHORT $LN14@code_match

; 172  : #endif
; 173  :     {
; 174  :         assert(m_len >= 3);
; 175  : #if defined(LZO1X)
; 176  :         m_off -= 1;

	dec	r9

; 177  :         *op++ = LZO_BYTE(((m_len - 1) << 5) | ((m_off & 7) << 2));

	add	r8b, 255				; 000000ffH

; 178  :         *op++ = LZO_BYTE(m_off >> 3);

	add	r10, 2
	movzx	eax, r9b
	shl	r8b, 5
	shr	r9, 3
	shl	al, 2
	and	al, 28
	or	al, r8b
	mov	BYTE PTR [rdx], al
	mov	BYTE PTR [rdx+1], r9b

; 179  :         assert(op[-2] >= M2_MARKER);
; 180  : #elif defined(LZO1Y)
; 181  :         m_off -= 1;
; 182  :         *op++ = LZO_BYTE(((m_len + 1) << 4) | ((m_off & 3) << 2));
; 183  :         *op++ = LZO_BYTE(m_off >> 2);
; 184  :         assert(op[-2] >= M2_MARKER);
; 185  : #elif defined(LZO1Z)
; 186  :         if (m_off == c->last_m_off)
; 187  :             *op++ = LZO_BYTE(((m_len - 1) << 5) | (0x700 >> 6));
; 188  :         else
; 189  :         {
; 190  :             m_off -= 1;
; 191  :             *op++ = LZO_BYTE(((m_len - 1) << 5) | (m_off >> 6));
; 192  :             *op++ = LZO_BYTE(m_off << 2);
; 193  :         }
; 194  : #endif
; 195  :         c->m2_m++;

	inc	DWORD PTR [rcx+160]

; 268  :     }
; 269  : 
; 270  :     c->last_m_len = x_len;

	mov	QWORD PTR [r11+32], rbx

; 271  :     c->last_m_off = x_off;

	mov	QWORD PTR [r11+40], rsi

; 272  :     return op;

	mov	rax, r10

; 273  : }

	mov	rbx, QWORD PTR [rsp+24]
	pop	rsi
	ret	0
$LN14@code_match:

; 196  :     }
; 197  :     else if (m_len == M2_MIN_LEN && m_off <= MX_MAX_OFFSET && c->r1_lit >= 4)

	cmp	r8, 3
	jne	SHORT $LN12@code_match
	cmp	r9, 3072				; 00000c00H
	ja	SHORT $LN12@code_match
	cmp	QWORD PTR [rcx+136], 4
	jb	SHORT $LN12@code_match

; 198  :     {
; 199  :         assert(m_len == 3);
; 200  :         assert(m_off > M2_MAX_OFFSET);
; 201  :         m_off -= 1 + M2_MAX_OFFSET;

	sub	r9, 2049				; 00000801H

; 202  : #if defined(LZO1Z)
; 203  :         *op++ = LZO_BYTE(M1_MARKER | (m_off >> 6));
; 204  :         *op++ = LZO_BYTE(m_off << 2);
; 205  : #else
; 206  :         *op++ = LZO_BYTE(M1_MARKER | ((m_off & 3) << 2));
; 207  :         *op++ = LZO_BYTE(m_off >> 2);

	add	r10, 2
	movzx	eax, r9b
	shr	r9, 2
	shl	al, 2
	and	al, 12
	mov	BYTE PTR [rdx], al
	mov	BYTE PTR [rdx+1], r9b

; 208  : #endif
; 209  :         c->m1b_m++;

	inc	DWORD PTR [rcx+156]

; 268  :     }
; 269  : 
; 270  :     c->last_m_len = x_len;

	mov	QWORD PTR [r11+32], rbx

; 271  :     c->last_m_off = x_off;

	mov	QWORD PTR [r11+40], rsi

; 272  :     return op;

	mov	rax, r10

; 273  : }

	mov	rbx, QWORD PTR [rsp+24]
	pop	rsi
	ret	0
$LN12@code_match:
	mov	QWORD PTR [rsp+16], rdi

; 210  :     }
; 211  :     else if (m_off <= M3_MAX_OFFSET)

	cmp	r9, 16384				; 00004000H
	ja	$LN10@code_match

; 212  :     {
; 213  :         assert(m_len >= 3);
; 214  :         m_off -= 1;

	dec	r9

; 215  :         if (m_len <= M3_MAX_LEN)

	cmp	r8, 33					; 00000021H
	ja	SHORT $LN9@code_match

; 216  :             *op++ = LZO_BYTE(M3_MARKER | (m_len - 2));

	sub	r8b, 2
	or	r8b, 32					; 00000020H
	mov	BYTE PTR [rdx], r8b

; 217  :         else

	jmp	SHORT $LN28@code_match
$LN9@code_match:

; 218  :         {
; 219  :             m_len -= M3_MAX_LEN;

	sub	r8, 33					; 00000021H

; 220  :             *op++ = M3_MARKER | 0;

	inc	r10
	mov	BYTE PTR [rdx], 32			; 00000020H

; 221  :             while (m_len > 255)

	cmp	r8, 255					; 000000ffH
	jbe	SHORT $LN7@code_match

; 218  :         {
; 219  :             m_len -= M3_MAX_LEN;

	lea	rcx, QWORD PTR [r8-256]
	mov	rdi, r10
	mov	rax, -9187201950435737471		; 8080808080808081H
	mul	rcx
	xor	eax, eax
	shr	rdx, 7
	inc	rdx
	mov	rcx, rdx
	rep stosb

; 221  :             while (m_len > 255)

	imul	rax, rdx, -255				; ffffffffffffff01H
	add	r8, rax
	add	r10, rdx
$LN7@code_match:

; 222  :             {
; 223  :                 m_len -= 255;
; 224  :                 *op++ = 0;
; 225  :             }
; 226  :             assert(m_len > 0);
; 227  :             *op++ = LZO_BYTE(m_len);

	mov	BYTE PTR [r10], r8b
$LN28@code_match:
	inc	r10

; 228  :         }
; 229  : #if defined(LZO1Z)
; 230  :         *op++ = LZO_BYTE(m_off >> 6);
; 231  :         *op++ = LZO_BYTE(m_off << 2);
; 232  : #else
; 233  :         *op++ = LZO_BYTE(m_off << 2);

	movzx	eax, r9b

; 234  :         *op++ = LZO_BYTE(m_off >> 6);

	shr	r9, 6
	shl	al, 2
	add	r10, 2
	mov	BYTE PTR [r10-2], al
	mov	BYTE PTR [r10-1], r9b

; 235  : #endif
; 236  :         c->m3_m++;

	inc	DWORD PTR [r11+164]

; 237  :     }
; 238  :     else

	jmp	$LN27@code_match
$LN10@code_match:

; 239  :     {
; 240  :         lzo_uint k;
; 241  : 
; 242  :         assert(m_len >= 3);
; 243  :         assert(m_off > 0x4000); assert(m_off <= 0xbfff);
; 244  :         m_off -= 0x4000;

	sub	r9, 16384				; 00004000H

; 245  :         k = (m_off & 0x4000) >> 11;

	mov	rax, r9
	shr	rax, 11
	and	eax, 8

; 246  :         if (m_len <= M4_MAX_LEN)

	cmp	r8, 9
	ja	SHORT $LN4@code_match

; 247  :             *op++ = LZO_BYTE(M4_MARKER | k | (m_len - 2));

	sub	r8b, 2
	or	r8b, al
	or	r8b, 16
	mov	BYTE PTR [rdx], r8b

; 248  :         else

	jmp	SHORT $LN29@code_match
$LN4@code_match:

; 251  :             *op++ = LZO_BYTE(M4_MARKER | k | 0);

	or	al, 16
	sub	r8, 9
	inc	r10
	mov	BYTE PTR [rdx], al

; 252  :             while (m_len > 255)

	cmp	r8, 255					; 000000ffH
	jbe	SHORT $LN2@code_match

; 249  :         {
; 250  :             m_len -= M4_MAX_LEN;

	lea	rcx, QWORD PTR [r8-256]
	mov	rdi, r10
	mov	rax, -9187201950435737471		; 8080808080808081H
	mul	rcx
	xor	eax, eax
	shr	rdx, 7
	inc	rdx
	mov	rcx, rdx
	rep stosb

; 252  :             while (m_len > 255)

	imul	rax, rdx, -255				; ffffffffffffff01H
	add	r8, rax
	add	r10, rdx
$LN2@code_match:

; 253  :             {
; 254  :                 m_len -= 255;
; 255  :                 *op++ = 0;
; 256  :             }
; 257  :             assert(m_len > 0);
; 258  :             *op++ = LZO_BYTE(m_len);

	mov	BYTE PTR [r10], r8b
$LN29@code_match:
	inc	r10

; 259  :         }
; 260  : #if defined(LZO1Z)
; 261  :         *op++ = LZO_BYTE(m_off >> 6);
; 262  :         *op++ = LZO_BYTE(m_off << 2);
; 263  : #else
; 264  :         *op++ = LZO_BYTE(m_off << 2);

	movzx	eax, r9b

; 265  :         *op++ = LZO_BYTE(m_off >> 6);

	shr	r9, 6
	shl	al, 2
	add	r10, 2
	mov	BYTE PTR [r10-2], al
	mov	BYTE PTR [r10-1], r9b

; 266  : #endif
; 267  :         c->m4_m++;

	inc	DWORD PTR [r11+168]
$LN27@code_match:

; 268  :     }
; 269  : 
; 270  :     c->last_m_len = x_len;

	mov	rdi, QWORD PTR [rsp+16]
	mov	QWORD PTR [r11+32], rbx

; 273  : }

	mov	rbx, QWORD PTR [rsp+24]
	mov	QWORD PTR [r11+40], rsi
	mov	rax, r10
	pop	rsi
	ret	0
?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z ENDP	; code_match
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
c$ = 16
op$ = 24
ii$ = 32
t$ = 40
?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z PROC	; STORE_RUN

; 278  : {

	sub	rsp, 8

; 279  :     c->lit_bytes += (unsigned long) t;

	add	DWORD PTR [rcx+120], r9d
	mov	r10, rdx
	mov	r11, rcx

; 280  : 
; 281  :     if (op == c->out && t <= 238)

	cmp	rdx, QWORD PTR [rcx+80]
	jne	SHORT $LN11@STORE_RUN
	cmp	r9, 238					; 000000eeH
	ja	SHORT $LN11@STORE_RUN

; 282  :     {
; 283  :         *op++ = LZO_BYTE(17 + t);

	lea	eax, DWORD PTR [r9+17]
	inc	r10
	mov	BYTE PTR [rdx], al
	jmp	$LN21@STORE_RUN
$LN11@STORE_RUN:

; 284  :     }
; 285  :     else if (t <= 3)

	cmp	r9, 3
	ja	SHORT $LN9@STORE_RUN

; 286  :     {
; 287  : #if defined(LZO1Z)
; 288  :         op[-1] |= LZO_BYTE(t);
; 289  : #else
; 290  :         op[-2] |= LZO_BYTE(t);

	or	BYTE PTR [rdx-2], r9b

; 291  : #endif
; 292  :         c->lit1_r++;

	inc	DWORD PTR [rcx+172]
	jmp	SHORT $LN21@STORE_RUN
$LN9@STORE_RUN:

; 293  :     }
; 294  :     else if (t <= 18)
; 295  :     {
; 296  :         *op++ = LZO_BYTE(t - 3);

	inc	r10
	cmp	r9, 18
	ja	SHORT $LN7@STORE_RUN
	lea	eax, DWORD PTR [r9-3]
	mov	BYTE PTR [rdx], al

; 297  :         c->lit2_r++;

	inc	DWORD PTR [rcx+176]

; 298  :     }
; 299  :     else

	jmp	SHORT $LN21@STORE_RUN
$LN7@STORE_RUN:
	mov	QWORD PTR [rsp+16], rbx

; 300  :     {
; 301  :         lzo_uint tt = t - 18;

	lea	rbx, QWORD PTR [r9-18]

; 302  : 
; 303  :         *op++ = 0;

	mov	BYTE PTR [rdx], 0

; 304  :         while (tt > 255)

	cmp	rbx, 255				; 000000ffH
	jbe	SHORT $LN5@STORE_RUN

; 300  :     {
; 301  :         lzo_uint tt = t - 18;

	lea	rcx, QWORD PTR [rbx-256]
	mov	QWORD PTR [rsp], rdi
	mov	rdi, r10
	mov	rax, -9187201950435737471		; 8080808080808081H
	mul	rcx
	xor	eax, eax
	shr	rdx, 7
	inc	rdx
	mov	rcx, rdx

; 304  :         while (tt > 255)

	add	r10, rdx
	rep stosb
	mov	rdi, QWORD PTR [rsp]
	imul	rax, rdx, -255				; ffffffffffffff01H
	add	rbx, rax
$LN5@STORE_RUN:

; 305  :         {
; 306  :             tt -= 255;
; 307  :             *op++ = 0;
; 308  :         }
; 309  :         assert(tt > 0);
; 310  :         *op++ = LZO_BYTE(tt);

	mov	BYTE PTR [r10], bl
	mov	rbx, QWORD PTR [rsp+16]
	inc	r10

; 311  :         c->lit3_r++;

	inc	DWORD PTR [r11+180]
$LN21@STORE_RUN:

; 312  :     }
; 313  :     do *op++ = *ii++; while (--t > 0);

	sub	r8, r10
	npad	8
$LL3@STORE_RUN:
	movzx	eax, BYTE PTR [r8+r10]
	inc	r10
	mov	BYTE PTR [r10-1], al
	dec	r9
	jne	SHORT $LL3@STORE_RUN

; 314  : 
; 315  :     return op;

	mov	rax, r10

; 316  : }

	add	rsp, 8
	ret	0
?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z ENDP	; STORE_RUN
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
c$ = 48
op$ = 56
ii$ = 64
lit$ = 72
m_len$ = 80
?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z PROC	; code_run

; 322  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r9
	mov	rbx, rcx

; 323  :     if (lit > 0)

	test	r9, r9
	je	SHORT $LN2@code_run

; 324  :     {
; 325  :         assert(m_len >= 2);
; 326  :         op = STORE_RUN(c,op,ii,lit);

	call	?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z ; STORE_RUN

; 327  :         c->r1_m_len = m_len;

	mov	rdx, QWORD PTR m_len$[rsp]

; 328  :         c->r1_lit = lit;

	mov	QWORD PTR [rbx+136], rdi
	mov	QWORD PTR [rbx+144], rdx

; 329  :     }
; 330  :     else
; 331  :     {
; 332  :         assert(m_len >= 3);
; 333  :         c->r1_m_len = 0;
; 334  :         c->r1_lit = 0;
; 335  :     }
; 336  : 
; 337  :     return op;
; 338  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@code_run:
	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	QWORD PTR [rcx+144], rax
	mov	QWORD PTR [rcx+136], rax
	mov	rax, rdx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?code_run@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K3@Z ENDP	; code_run
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
m_len$ = 8
m_off$ = 16
lit$ = 24
?len_of_coded_match@@YAH_K00@Z PROC			; len_of_coded_match

; 348  :     int n = 4;

	mov	eax, 4

; 349  : 
; 350  :     if (m_len < 2)

	cmp	rcx, 2
	jb	$LN4@len_of_cod

; 351  :         return -1;
; 352  :     if (m_len == 2)

	jne	SHORT $LN11@len_of_cod

; 353  :         return (m_off <= M1_MAX_OFFSET && lit > 0 && lit < 4) ? 2 : -1;

	cmp	rdx, 1024				; 00000400H
	ja	$LN4@len_of_cod
	lea	rax, QWORD PTR [r8-1]
	cmp	rax, 2
	ja	$LN4@len_of_cod
$LN26@len_of_cod:
	mov	eax, 2

; 383  : }

	ret	0
$LN11@len_of_cod:

; 354  :     if (m_len <= M2_MAX_LEN && m_off <= M2_MAX_OFFSET)

	cmp	rcx, 8
	ja	SHORT $LN10@len_of_cod
	cmp	rdx, 2048				; 00000800H
	jbe	SHORT $LN26@len_of_cod
$LN10@len_of_cod:

; 355  :         return 2;
; 356  :     if (m_len == M2_MIN_LEN && m_off <= MX_MAX_OFFSET && lit >= 4)

	cmp	rcx, 3
	jne	SHORT $LN9@len_of_cod
	cmp	rdx, 3072				; 00000c00H
	ja	SHORT $LN9@len_of_cod
	cmp	r8, rax
	jae	SHORT $LN26@len_of_cod
$LN9@len_of_cod:

; 357  :         return 2;
; 358  :     if (m_off <= M3_MAX_OFFSET)

	cmp	rdx, 16384				; 00004000H
	ja	SHORT $LN8@len_of_cod

; 359  :     {
; 360  :         if (m_len <= M3_MAX_LEN)

	cmp	rcx, 33					; 00000021H
	ja	SHORT $LN7@len_of_cod
$LN27@len_of_cod:

; 361  :             return 3;

	mov	eax, 3

; 383  : }

	ret	0
$LN7@len_of_cod:

; 362  :         m_len -= M3_MAX_LEN;

	sub	rcx, 33					; 00000021H

; 363  :         while (m_len > 255)

	cmp	rcx, 255				; 000000ffH
	jbe	SHORT $LN13@len_of_cod

; 362  :         m_len -= M3_MAX_LEN;

	add	rcx, -256				; ffffffffffffff00H
	mov	rax, -9187201950435737471		; 8080808080808081H
	mul	rcx
	mov	rax, rdx
	shr	rax, 7

; 363  :         while (m_len > 255)

	add	eax, 5

; 383  : }

	ret	0
$LN8@len_of_cod:

; 364  :         {
; 365  :             m_len -= 255;
; 366  :             n++;
; 367  :         }
; 368  :         return n;
; 369  :     }
; 370  :     if (m_off <= M4_MAX_OFFSET)

	cmp	rdx, 49151				; 0000bfffH
	ja	SHORT $LN4@len_of_cod

; 371  :     {
; 372  :         if (m_len <= M4_MAX_LEN)

	cmp	rcx, 9
	jbe	SHORT $LN27@len_of_cod

; 373  :             return 3;
; 374  :         m_len -= M4_MAX_LEN;

	sub	rcx, 9

; 375  :         while (m_len > 255)

	cmp	rcx, 255				; 000000ffH
	jbe	SHORT $LN13@len_of_cod

; 373  :             return 3;
; 374  :         m_len -= M4_MAX_LEN;

	add	rcx, -256				; ffffffffffffff00H
	mov	rax, -9187201950435737471		; 8080808080808081H
	mul	rcx
	shr	rdx, 7

; 375  :         while (m_len > 255)

	lea	eax, DWORD PTR [rdx+5]

; 383  : }

	ret	0
$LN4@len_of_cod:

; 376  :         {
; 377  :             m_len -= 255;
; 378  :             n++;
; 379  :         }
; 380  :         return n;
; 381  :     }
; 382  :     return -1;

	or	eax, -1
$LN13@len_of_cod:

; 383  : }

	ret	0
?len_of_coded_match@@YAH_K00@Z ENDP			; len_of_coded_match
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
ahead$ = 8
lit1$ = 16
lit2$ = 24
l1$ = 32
l2$ = 40
l3$ = 48
?min_gain@@YA_J_K00HHH@Z PROC				; min_gain

; 388  : {

	mov	QWORD PTR [rsp+8], rbx

; 389  :     lzo_int lazy_match_min_gain = 0;
; 390  : 
; 391  :     assert (ahead >= 1);
; 392  :     lazy_match_min_gain += ahead;
; 393  : 
; 394  : #if 0
; 395  :     if (l3 > 0)
; 396  :         lit2 -= ahead;
; 397  : #endif
; 398  : 
; 399  :     if (lit1 <= 3)

	xor	ebx, ebx
	mov	r11, rcx
	mov	r10, rcx
	cmp	rdx, 3
	ja	SHORT $LN5@min_gain

; 400  :         lazy_match_min_gain += (lit2 <= 3) ? 0 : 2;

	mov	r10d, 2
	cmp	r8, 3
	cmovbe	r10d, ebx
	jmp	SHORT $LN8@min_gain
$LN5@min_gain:

; 401  :     else if (lit1 <= 18)

	cmp	rdx, 18
	ja	SHORT $LN3@min_gain

; 402  :         lazy_match_min_gain += (lit2 <= 18) ? 0 : 1;

	cmp	r8, 18
	mov	r10, rbx
	seta	r10b
$LN8@min_gain:
	add	r10, rcx
$LN3@min_gain:

; 403  : 
; 404  :     lazy_match_min_gain += (l2 - l1) * 2;

	mov	eax, DWORD PTR l2$[rsp]
	sub	eax, r9d
	add	eax, eax
	cdqe
	add	r10, rax

; 405  :     if (l3 > 0)

	movsxd	rax, DWORD PTR l3$[rsp]
	test	eax, eax
	jle	SHORT $LN2@min_gain

; 406  :         lazy_match_min_gain -= (ahead - l3) * 2;

	mov	rcx, rax
	sub	rcx, r11
	lea	r10, QWORD PTR [r10+rcx*2]
$LN2@min_gain:

; 407  : 
; 408  :     if (lazy_match_min_gain < 0)

	test	r10, r10
	cmovs	r10, rbx

; 409  :         lazy_match_min_gain = 0;
; 410  : 
; 411  : #if 0
; 412  :     if (l1 == 2)
; 413  :         if (lazy_match_min_gain == 0)
; 414  :             lazy_match_min_gain = 1;
; 415  : #endif
; 416  : 
; 417  :     return lazy_match_min_gain;
; 418  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rax, r10
	ret	0
?min_gain@@YA_J_K00HHH@Z ENDP				; min_gain
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
swd$ = 8
m_len$ = 16
m_off$ = 24
?better_match@@YAXPEBUlzo1x_999_swd_t@@PEA_K1@Z PROC	; better_match

; 465  : #if defined(LZO1Z)
; 466  :     const LZO_COMPRESS_T *c = swd->c;
; 467  : #endif
; 468  : 
; 469  :     if (*m_len <= M2_MIN_LEN)
; 470  :         return;
; 471  : #if defined(LZO1Z)
; 472  :     if (*m_off == c->last_m_off && *m_len <= M2_MAX_LEN)
; 473  :         return;
; 474  : #if 1
; 475  :     if (*m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1 &&
; 476  :         c->last_m_off && swd->best_off[*m_len-1] == c->last_m_off)
; 477  :     {
; 478  :         *m_len = *m_len - 1;
; 479  :         *m_off = swd->best_off[*m_len];
; 480  :         return;
; 481  :     }
; 482  : #endif
; 483  : #endif
; 484  : 
; 485  :     if (*m_off <= M2_MAX_OFFSET)

	mov	r10, QWORD PTR [r8]
	cmp	r10, 2048				; 00000800H
	jbe	SHORT $LN1@better_mat

; 486  :         return;
; 487  : 
; 488  : #if 1
; 489  :     /* M3/M4 -> M2 */
; 490  :     if (*m_off > M2_MAX_OFFSET &&
; 491  :         *m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1 &&
; 492  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M2_MAX_OFFSET)

	mov	r9, QWORD PTR [rdx]
	lea	rax, QWORD PTR [r9-4]
	cmp	rax, 5
	ja	SHORT $LN3@better_mat

; 493  :     {
; 494  :         *m_len = *m_len - 1;
; 495  :         *m_off = swd->best_off[*m_len];
; 496  :         return;

	mov	rax, QWORD PTR [rcx+r9*8+80]
	dec	rax
	cmp	rax, 2047				; 000007ffH
	jbe	SHORT $LN19@better_mat
$LN3@better_mat:

; 497  :     }
; 498  : #endif
; 499  : 
; 500  : #if 1
; 501  :     /* M4 -> M2 */
; 502  :     if (*m_off > M3_MAX_OFFSET &&
; 503  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M2_MAX_LEN + 2 &&
; 504  :         swd->best_off[*m_len-2] && swd->best_off[*m_len-2] <= M2_MAX_OFFSET)

	cmp	r10, 16384				; 00004000H
	jbe	SHORT $LN1@better_mat
	cmp	r9, 10
	jne	SHORT $LN2@better_mat
	mov	rax, QWORD PTR [rcx+r9*8+72]
	dec	rax
	cmp	rax, 2047				; 000007ffH
	ja	SHORT $LN2@better_mat

; 505  :     {
; 506  :         *m_len = *m_len - 2;

	lea	rax, QWORD PTR [r9-2]

; 507  :         *m_off = swd->best_off[*m_len];
; 508  :         return;
; 509  :     }
; 510  : #endif
; 511  : 
; 512  : #if 1
; 513  :     /* M4 -> M3 */
; 514  :     if (*m_off > M3_MAX_OFFSET &&
; 515  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M3_MAX_LEN + 1 &&
; 516  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M3_MAX_OFFSET)
; 517  :     {
; 518  :         *m_len = *m_len - 1;

	mov	QWORD PTR [rdx], rax

; 519  :         *m_off = swd->best_off[*m_len];

	mov	rax, QWORD PTR [rcx+rax*8+88]
	mov	QWORD PTR [r8], rax

; 520  :     }
; 521  : #endif
; 522  : }

	ret	0
$LN2@better_mat:
	lea	rax, QWORD PTR [r9-10]
	cmp	rax, 24
	ja	SHORT $LN1@better_mat
	mov	rax, QWORD PTR [rcx+r9*8+80]
	dec	rax
	cmp	rax, 16383				; 00003fffH
	ja	SHORT $LN1@better_mat
$LN19@better_mat:

; 507  :         *m_off = swd->best_off[*m_len];
; 508  :         return;
; 509  :     }
; 510  : #endif
; 511  : 
; 512  : #if 1
; 513  :     /* M4 -> M3 */
; 514  :     if (*m_off > M3_MAX_OFFSET &&
; 515  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M3_MAX_LEN + 1 &&
; 516  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M3_MAX_OFFSET)
; 517  :     {
; 518  :         *m_len = *m_len - 1;

	lea	rax, QWORD PTR [r9-1]
	mov	QWORD PTR [rdx], rax

; 519  :         *m_off = swd->best_off[*m_len];

	mov	rax, QWORD PTR [rcx+rax*8+88]
	mov	QWORD PTR [r8], rax
$LN1@better_mat:

; 520  :     }
; 521  : #endif
; 522  : }

	ret	0
?better_match@@YAXPEBUlzo1x_999_swd_t@@PEA_K1@Z ENDP	; better_match
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
cc$ = 32
ii$1$ = 304
in$ = 304
m_off$1$ = 312
in_len$ = 312
out$ = 320
out_len$ = 328
l1$1$ = 336
wrkmem$ = 336
dict$ = 344
dict_len$ = 352
max_ahead$1$ = 360
cb$dead$ = 360
try_lazy$ = 368
good_length$ = 376
max_lazy$ = 384
nice_length$dead$ = 392
max_chain$ = 400
flags$ = 408
lzo1x_999_compress_internal PROC

; 543  : {

$LN136:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rbx
	push	rdi
	push	r12
	push	r13
	push	r14
	lea	rbp, QWORD PTR [rsp-7]
	sub	rsp, 248				; 000000f8H

; 566  :     if (try_lazy < 0)

	mov	eax, DWORD PTR try_lazy$[rbp-241]

; 578  :     if (max_chain <= 0)

	mov	r14, QWORD PTR max_chain$[rbp-241]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 138  :     s->c = c;

	mov	rbx, QWORD PTR wrkmem$[rbp-241]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 566  :     if (try_lazy < 0)

	test	eax, eax
	mov	rdi, rcx
	mov	r10d, 1
	cmovs	eax, r10d
	mov	QWORD PTR ii$1$[rbp-241], rcx

; 569  :     if (good_length <= 0)

	mov	ecx, 32					; 00000020H
	mov	DWORD PTR try_lazy$[rbp-241], eax
	mov	rax, QWORD PTR good_length$[rbp-241]

; 584  :     c->out = out;

	mov	QWORD PTR cc$[rsp+80], r8
	test	rax, rax

; 588  : 
; 589  :     op = out;

	mov	r12, r8
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 146  :     r = swd_init(s,dict,dict_len);

	mov	r8, QWORD PTR dict_len$[rbp-241]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 569  :     if (good_length <= 0)

	cmove	rax, rcx

; 579  :         max_chain = SWD_MAX_CHAIN;
; 580  : 
; 581  :     c->init = 0;
; 582  :     c->ip = c->in = in;

	mov	QWORD PTR cc$[rsp+64], rdi
	mov	QWORD PTR cc$[rsp+56], rdi
	mov	QWORD PTR good_length$[rbp-241], rax
	mov	rax, QWORD PTR max_lazy$[rbp-241]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 136  :     c->init = 1;

	mov	DWORD PTR cc$[rsp], r10d
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 572  :     if (max_lazy <= 0)

	test	rax, rax
	cmove	rax, rcx

; 578  :     if (max_chain <= 0)

	test	r14, r14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 146  :     r = swd_init(s,dict,dict_len);

	mov	rcx, rbx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 572  :     if (max_lazy <= 0)

	mov	QWORD PTR max_lazy$[rbp-241], rax

; 578  :     if (max_chain <= 0)

	mov	eax, 2048				; 00000800H
	cmove	r14, rax

; 585  :     c->cb = cb;

	xor	r9d, r9d
	lea	rax, QWORD PTR [rdi+rdx]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 146  :     r = swd_init(s,dict,dict_len);

	mov	rdx, QWORD PTR dict$[rbp-241]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 583  :     c->in_end = in + in_len;

	mov	QWORD PTR cc$[rsp+72], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 138  :     s->c = c;

	lea	rax, QWORD PTR cc$[rsp]
	mov	QWORD PTR [rbx+360], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 578  :     if (max_chain <= 0)

	mov	QWORD PTR max_chain$[rbp-241], r14

; 585  :     c->cb = cb;

	mov	QWORD PTR cc$[rbp-153], r9

; 586  :     c->m1a_m = c->m1b_m = c->m2_m = c->m3_m = c->m4_m = 0;

	mov	QWORD PTR cc$[rbp-77], r9
	mov	QWORD PTR cc$[rbp-85], r9
	mov	DWORD PTR cc$[rbp-89], r9d

; 587  :     c->lit1_r = c->lit2_r = c->lit3_r = 0;

	mov	QWORD PTR cc$[rbp-65], r9
	mov	DWORD PTR cc$[rbp-69], r9d

; 590  :     ii = c->ip;             /* point to start of literal run */
; 591  :     lit = 0;

	mov	r13d, r9d

; 592  :     c->r1_lit = c->r1_m_len = 0;

	mov	QWORD PTR cc$[rbp-97], r9
	mov	QWORD PTR cc$[rbp-105], r9
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 140  :     c->last_m_len = c->last_m_off = 0;

	mov	QWORD PTR cc$[rsp+40], r9
	mov	QWORD PTR cc$[rsp+32], r9

; 141  : 
; 142  :     c->textsize = c->codesize = c->printcount = 0;

	mov	QWORD PTR cc$[rbp-129], r9
	mov	QWORD PTR cc$[rbp-137], r9
	mov	QWORD PTR cc$[rbp-145], r9

; 143  :     c->lit_bytes = c->match_bytes = c->rep_bytes = 0;

	mov	QWORD PTR cc$[rbp-117], r9
	mov	DWORD PTR cc$[rbp-121], r9d

; 144  :     c->lazy = 0;

	mov	DWORD PTR cc$[rbp-109], r9d

; 146  :     r = swd_init(s,dict,dict_len);

	call	?swd_init@@YAHPEAUlzo1x_999_swd_t@@PEBE_K@Z ; swd_init

; 147  :     if (r != 0)

	test	eax, eax
	jne	$LN46@lzo1x_999_

; 148  :         return r;
; 149  : 
; 150  :     s->use_best_off = (flags & 1) ? 1 : 0;

	mov	eax, DWORD PTR flags$[rbp-241]
	and	eax, 1
	mov	DWORD PTR [rbx+40], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 597  :     if (max_chain > 0)

	test	r14, r14
	je	SHORT $LN31@lzo1x_999_

; 598  :         swd->max_chain = max_chain;

	mov	QWORD PTR [rbx+24], r14
$LN31@lzo1x_999_:

; 599  :     if (nice_length > 0)
; 600  :         swd->nice_length = nice_length;
; 601  : 
; 602  :     r = find_match(c,swd,0,0);

	lea	rcx, QWORD PTR cc$[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rbx
	call	?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z ; find_match

; 603  :     if (r != 0)

	test	eax, eax
	jne	$LN46@lzo1x_999_

; 604  :         return r;
; 605  :     while (c->look > 0)

	mov	QWORD PTR [rsp+240], rsi
	mov	rsi, QWORD PTR cc$[rsp+8]
	test	rsi, rsi
	je	$LN2@lzo1x_999_
	mov	r10, QWORD PTR cc$[rsp+24]
	mov	r9, QWORD PTR cc$[rsp+16]
	mov	QWORD PTR [rsp+232], r15
	npad	7
$LL29@lzo1x_999_:

; 606  :     {
; 607  :         lzo_uint ahead;
; 608  :         lzo_uint max_ahead;
; 609  :         int l1, l2, l3;
; 610  : 
; 611  :         c->codesize = pd(op, out);
; 612  : 
; 613  :         m_len = c->m_len;
; 614  :         m_off = c->m_off;
; 615  : 
; 616  :         assert(c->bp == c->ip - c->look);
; 617  :         assert(c->bp >= in);
; 618  :         if (lit == 0)

	mov	rdx, QWORD PTR ii$1$[rbp-241]
	mov	rcx, QWORD PTR out$[rbp-241]
	mov	rax, r12
	sub	rax, rcx
	test	r13, r13
	mov	r15, r9
	cmove	rdx, QWORD PTR cc$[rsp+48]
	mov	rdi, r10
	mov	QWORD PTR m_off$1$[rbp-241], r10
	mov	QWORD PTR cc$[rbp-137], rax
	mov	QWORD PTR ii$1$[rbp-241], rdx

; 619  :             ii = c->bp;
; 620  :         assert(ii + lit == c->bp);
; 621  :         assert(swd->b_char == *(c->bp));
; 622  : 
; 623  :         if ( m_len < 2 ||
; 624  :             (m_len == 2 && (m_off > M1_MAX_OFFSET || lit == 0 || lit >= 4)) ||
; 625  : #if 1
; 626  :             /* Do not accept this match for compressed-data compatibility
; 627  :              * with LZO v1.01 and before
; 628  :              * [ might be a problem for decompress() and optimize() ]
; 629  :              */
; 630  :             (m_len == 2 && op == out) ||
; 631  : #endif
; 632  :             (op == out && lit == 0))

	cmp	r9, 2
	jb	SHORT $LN109@lzo1x_999_
	jne	SHORT $LN23@lzo1x_999_
	cmp	r10, 1024				; 00000400H
	ja	SHORT $LN109@lzo1x_999_
	lea	rax, QWORD PTR [r13-1]
	cmp	rax, 2
	ja	SHORT $LN109@lzo1x_999_
	cmp	r12, rcx
	jmp	$LN127@lzo1x_999_
$LN23@lzo1x_999_:
	cmp	r12, rcx
	jne	SHORT $LN26@lzo1x_999_
	test	r13, r13
	je	SHORT $LN109@lzo1x_999_
$LN26@lzo1x_999_:

; 633  :         {
; 634  :             /* a literal */
; 635  :             m_len = 0;
; 636  :         }
; 637  :         else if (m_len == M2_MIN_LEN)

	cmp	r9, 3
	jne	$LN20@lzo1x_999_

; 638  :         {
; 639  :             /* compression ratio improves if we code a literal in some cases */
; 640  :             if (m_off > MX_MAX_OFFSET && lit >= 4)

	cmp	r10, 3072				; 00000c00H
	jbe	$LN19@lzo1x_999_
	cmp	r13, 4
	jb	$LN19@lzo1x_999_
$LN109@lzo1x_999_:

; 645  :         {
; 646  :     /* a literal */
; 647  :             lit++;
; 648  :             swd->max_chain = max_chain;
; 649  :             r = find_match(c,swd,1,0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR cc$[rsp]
	mov	rdx, rbx
	lea	r8d, QWORD PTR [r9+1]
	inc	r13
	mov	QWORD PTR [rbx+24], r14
	call	?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z ; find_match
$LN133@lzo1x_999_:
	mov	rdi, QWORD PTR ii$1$[rbp-241]
$LN132@lzo1x_999_:
	mov	r10, QWORD PTR cc$[rsp+24]
	mov	r9, QWORD PTR cc$[rsp+16]
	mov	rsi, QWORD PTR cc$[rsp+8]
$lazy_match_done$137:

; 604  :         return r;
; 605  :     while (c->look > 0)

	test	rsi, rsi
	jne	$LL29@lzo1x_999_

; 764  :         assert(r == 0);
; 765  : 
; 766  : lazy_match_done: ;
; 767  :     }
; 768  : 
; 769  : 
; 770  :     /* store final run */
; 771  :     if (lit > 0)

	mov	r15, QWORD PTR [rsp+232]
	test	r13, r13
	je	SHORT $LN2@lzo1x_999_

; 772  :         op = STORE_RUN(c,op,ii,lit);

	lea	rcx, QWORD PTR cc$[rsp]
	mov	r9, r13
	mov	r8, rdi
	mov	rdx, r12
	call	?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z ; STORE_RUN
	mov	r12, rax
$LN2@lzo1x_999_:

; 773  : 
; 774  : #if defined(LZO_EOF_CODE)
; 775  :     *op++ = M4_MARKER | 1;
; 776  :     *op++ = 0;
; 777  :     *op++ = 0;
; 778  : #endif
; 779  : 
; 780  :     c->codesize = pd(op, out);
; 781  :     assert(c->textsize == in_len);
; 782  : 
; 783  :     *out_len = pd(op, out);

	mov	rax, QWORD PTR out_len$[rbp-241]
	mov	rsi, QWORD PTR [rsp+240]
	mov	WORD PTR [r12], 17
	mov	BYTE PTR [r12+2], 0

; 784  : 
; 785  :     if (c->cb && c->cb->nprogress)

	mov	rcx, QWORD PTR cc$[rbp-153]
	add	r12, 3
	sub	r12, QWORD PTR out$[rbp-241]
	mov	QWORD PTR cc$[rbp-137], r12
	mov	QWORD PTR [rax], r12
	test	rcx, rcx
	je	SHORT $LN1@lzo1x_999_
	mov	rax, QWORD PTR [rcx+16]
	test	rax, rax
	je	SHORT $LN1@lzo1x_999_

; 786  :         (*c->cb->nprogress)(c->cb, c->textsize, c->codesize, 0);

	mov	rdx, QWORD PTR cc$[rbp-145]
	xor	r9d, r9d
	mov	r8, r12
	call	rax
$LN1@lzo1x_999_:

; 787  : 
; 788  : #if 0
; 789  :     printf("%ld %ld -> %ld  %ld: %ld %ld %ld %ld %ld  %ld: %ld %ld %ld  %ld\n",
; 790  :         (long) c->textsize, (long) in_len, (long) c->codesize,
; 791  :         c->match_bytes, c->m1a_m, c->m1b_m, c->m2_m, c->m3_m, c->m4_m,
; 792  :         c->lit_bytes, c->lit1_r, c->lit2_r, c->lit3_r, c->lazy);
; 793  : #endif
; 794  :     assert(c->lit_bytes + c->match_bytes == in_len);
; 795  : 
; 796  :     return LZO_E_OK;

	xor	eax, eax
$LN46@lzo1x_999_:

; 797  : }

	add	rsp, 248				; 000000f8H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN20@lzo1x_999_:

; 641  :                 m_len = 0;
; 642  :         }
; 643  : 
; 644  :         if (m_len == 0)

	test	r9, r9
$LN127@lzo1x_999_:
	je	$LN109@lzo1x_999_
$LN19@lzo1x_999_:

; 650  :             assert(r == 0);
; 651  :             continue;
; 652  :         }
; 653  : 
; 654  :     /* a match */
; 655  : #if defined(SWD_BEST_OFF)
; 656  :         if (swd->use_best_off)

	cmp	DWORD PTR [rbx+40], 0
	je	SHORT $LN48@lzo1x_999_

; 409  :         lazy_match_min_gain = 0;
; 410  : 
; 411  : #if 0
; 412  :     if (l1 == 2)
; 413  :         if (lazy_match_min_gain == 0)
; 414  :             lazy_match_min_gain = 1;
; 415  : #endif
; 416  : 
; 417  :     return lazy_match_min_gain;
; 418  : }
; 419  : 
; 420  : 
; 421  : /***********************************************************************
; 422  : //
; 423  : ************************************************************************/
; 424  : 
; 425  : #if !defined(NDEBUG)
; 426  : static
; 427  : void assert_match( const lzo_swd_p swd, lzo_uint m_len, lzo_uint m_off )
; 428  : {
; 429  :     const LZO_COMPRESS_T *c = swd->c;
; 430  :     lzo_uint d_off;
; 431  : 
; 432  :     assert(m_len >= 2);
; 433  :     if (m_off <= (lzo_uint) (c->bp - c->in))
; 434  :     {
; 435  :         assert(c->bp - m_off + m_len < c->ip);
; 436  :         assert(lzo_memcmp(c->bp, c->bp - m_off, m_len) == 0);
; 437  :     }
; 438  :     else
; 439  :     {
; 440  :         assert(swd->dict != NULL);
; 441  :         d_off = m_off - (lzo_uint) (c->bp - c->in);
; 442  :         assert(d_off <= swd->dict_len);
; 443  :         if (m_len > d_off)
; 444  :         {
; 445  :             assert(lzo_memcmp(c->bp, swd->dict_end - d_off, d_off) == 0);
; 446  :             assert(c->in + m_len - d_off < c->ip);
; 447  :             assert(lzo_memcmp(c->bp + d_off, c->in, m_len - d_off) == 0);
; 448  :         }
; 449  :         else
; 450  :         {
; 451  :             assert(lzo_memcmp(c->bp, swd->dict_end - d_off, m_len) == 0);
; 452  :         }
; 453  :     }
; 454  : }
; 455  : #else
; 456  : #  define assert_match(a,b,c)   ((void)0)
; 457  : #endif
; 458  : 
; 459  : 
; 460  : #if defined(SWD_BEST_OFF)
; 461  : 
; 462  : static void
; 463  : better_match ( const lzo_swd_p swd, lzo_uint *m_len, lzo_uint *m_off )
; 464  : {
; 465  : #if defined(LZO1Z)
; 466  :     const LZO_COMPRESS_T *c = swd->c;
; 467  : #endif
; 468  : 
; 469  :     if (*m_len <= M2_MIN_LEN)

	cmp	r9, 3
	jbe	SHORT $LN48@lzo1x_999_

; 470  :         return;
; 471  : #if defined(LZO1Z)
; 472  :     if (*m_off == c->last_m_off && *m_len <= M2_MAX_LEN)
; 473  :         return;
; 474  : #if 1
; 475  :     if (*m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1 &&
; 476  :         c->last_m_off && swd->best_off[*m_len-1] == c->last_m_off)
; 477  :     {
; 478  :         *m_len = *m_len - 1;
; 479  :         *m_off = swd->best_off[*m_len];
; 480  :         return;
; 481  :     }
; 482  : #endif
; 483  : #endif
; 484  : 
; 485  :     if (*m_off <= M2_MAX_OFFSET)

	cmp	r10, 2048				; 00000800H
	jbe	SHORT $LN48@lzo1x_999_

; 486  :         return;
; 487  : 
; 488  : #if 1
; 489  :     /* M3/M4 -> M2 */
; 490  :     if (*m_off > M2_MAX_OFFSET &&
; 491  :         *m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1 &&
; 492  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M2_MAX_OFFSET)

	lea	rax, QWORD PTR [r9-4]
	cmp	rax, 5
	ja	SHORT $LN50@lzo1x_999_
	mov	rax, QWORD PTR [rbx+r9*8+80]
	dec	rax
	cmp	rax, 2047				; 000007ffH

; 493  :     {
; 494  :         *m_len = *m_len - 1;
; 495  :         *m_off = swd->best_off[*m_len];
; 496  :         return;

	jbe	SHORT $LN128@lzo1x_999_
$LN50@lzo1x_999_:

; 497  :     }
; 498  : #endif
; 499  : 
; 500  : #if 1
; 501  :     /* M4 -> M2 */
; 502  :     if (*m_off > M3_MAX_OFFSET &&
; 503  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M2_MAX_LEN + 2 &&
; 504  :         swd->best_off[*m_len-2] && swd->best_off[*m_len-2] <= M2_MAX_OFFSET)

	cmp	r10, 16384				; 00004000H
	jbe	SHORT $LN48@lzo1x_999_
	lea	rcx, QWORD PTR [r9-10]
	test	rcx, rcx
	jne	SHORT $LN49@lzo1x_999_
	mov	rax, QWORD PTR [rbx+r9*8+72]
	dec	rax
	cmp	rax, 2047				; 000007ffH
	ja	SHORT $LN49@lzo1x_999_

; 505  :     {
; 506  :         *m_len = *m_len - 2;

	lea	r15, QWORD PTR [r9-2]

; 507  :         *m_off = swd->best_off[*m_len];
; 508  :         return;

	jmp	SHORT $LN129@lzo1x_999_
$LN49@lzo1x_999_:

; 509  :     }
; 510  : #endif
; 511  : 
; 512  : #if 1
; 513  :     /* M4 -> M3 */
; 514  :     if (*m_off > M3_MAX_OFFSET &&
; 515  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M3_MAX_LEN + 1 &&
; 516  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M3_MAX_OFFSET)

	cmp	rcx, 24
	ja	SHORT $LN48@lzo1x_999_
	mov	rax, QWORD PTR [rbx+r9*8+80]
	dec	rax
	cmp	rax, 16383				; 00003fffH
	ja	SHORT $LN48@lzo1x_999_
$LN128@lzo1x_999_:

; 517  :     {
; 518  :         *m_len = *m_len - 1;

	lea	r15, QWORD PTR [r9-1]
$LN129@lzo1x_999_:

; 519  :         *m_off = swd->best_off[*m_len];

	mov	rdi, QWORD PTR [rbx+r15*8+88]
	mov	QWORD PTR m_off$1$[rbp-241], rdi
$LN48@lzo1x_999_:

; 657  :             better_match(swd,&m_len,&m_off);
; 658  : #endif
; 659  :         assert_match(swd,m_len,m_off);
; 660  : 
; 661  : 
; 662  : 
; 663  :         /* shall we try a lazy match ? */
; 664  :         ahead = 0;
; 665  :         if (try_lazy <= 0 || m_len >= max_lazy)

	mov	r9d, DWORD PTR try_lazy$[rbp-241]
	xor	r8d, r8d
	mov	r14d, r8d
	test	r9d, r9d
	jle	$LN117@lzo1x_999_
	cmp	r15, QWORD PTR max_lazy$[rbp-241]
	jae	$LN117@lzo1x_999_

; 666  :         {
; 667  :             /* no */
; 668  :             l1 = 0;
; 669  :             max_ahead = 0;
; 670  :         }
; 671  :         else
; 672  :         {
; 673  :             /* yes, try a lazy match */
; 674  :             l1 = len_of_coded_match(m_len,m_off,lit);

	mov	r8, r13
	mov	rdx, rdi
	mov	rcx, r15
	call	?len_of_coded_match@@YAH_K00@Z		; len_of_coded_match
	mov	DWORD PTR l1$1$[rbp-241], eax

; 675  :             assert(l1 > 0);
; 676  : #if 1
; 677  :             max_ahead = LZO_MIN(try_lazy, l1 - 1);

	lea	ecx, DWORD PTR [rax-1]
	cmp	r9d, ecx
	cmovle	ecx, r9d
	movsxd	rax, ecx
	mov	QWORD PTR max_ahead$1$[rbp-241], rax

; 678  : #else
; 679  :             max_ahead = LZO_MIN3(try_lazy, l1, m_len - 1);
; 680  : #endif
; 681  :         }
; 682  : 
; 683  : 
; 684  :         while (ahead < max_ahead && c->look > m_len)

	test	ecx, ecx
	je	$LN122@lzo1x_999_
$LL14@lzo1x_999_:
	cmp	rsi, r15
	jbe	$LN122@lzo1x_999_

; 685  :         {
; 686  :             lzo_int lazy_match_min_gain;
; 687  : 
; 688  :             if (m_len >= good_length)
; 689  :                 swd->max_chain = max_chain >> 2;

	mov	rax, QWORD PTR max_chain$[rbp-241]
	cmp	r15, QWORD PTR good_length$[rbp-241]
	jb	SHORT $LN12@lzo1x_999_
	shr	rax, 2
$LN12@lzo1x_999_:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 174  :         c->textsize += this_len - skip;

	inc	QWORD PTR cc$[rbp-145]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 691  :                 swd->max_chain = max_chain;

	mov	QWORD PTR [rbx+24], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo_mchw.ch

; 177  :     s->m_len = 1;

	mov	QWORD PTR [rbx+56], 1

; 178  :     s->m_len = THRESHOLD;
; 179  : #ifdef SWD_BEST_OFF
; 180  :     if (s->use_best_off)

	cmp	DWORD PTR [rbx+40], 0
	je	SHORT $LN58@lzo1x_999_

; 181  :         lzo_memset(s->best_pos,0,sizeof(s->best_pos));

	lea	rcx, QWORD PTR [rbx+376]
	xor	edx, edx
	mov	r8d, 272				; 00000110H
	call	memset
$LN58@lzo1x_999_:

; 182  : #endif
; 183  :     swd_findbest(s);

	mov	rcx, rbx
	call	?swd_findbest@@YAXPEAUlzo1x_999_swd_t@@@Z ; swd_findbest

; 184  :     c->m_len = s->m_len;

	mov	rax, QWORD PTR [rbx+56]

; 185  :     c->m_off = s->m_off;
; 186  : 
; 187  :     swd_getbyte(s);

	mov	rcx, rbx
	mov	QWORD PTR cc$[rsp+16], rax
	mov	rax, QWORD PTR [rbx+64]
	mov	QWORD PTR cc$[rsp+24], rax
	call	?swd_getbyte@@YAXPEAUlzo1x_999_swd_t@@@Z ; swd_getbyte

; 188  : 
; 189  :     if (s->b_char < 0)

	cmp	DWORD PTR [rbx+80], 0
	jge	SHORT $LN57@lzo1x_999_

; 190  :     {
; 191  :         c->look = 0;

	xor	r9d, r9d
	mov	esi, r9d
	mov	QWORD PTR cc$[rsp+8], r9

; 192  :         c->m_len = 0;

	mov	QWORD PTR cc$[rsp+16], r9

; 193  :         swd_exit(s);
; 194  :     }
; 195  :     else

	jmp	SHORT $LN56@lzo1x_999_
$LN57@lzo1x_999_:

; 196  :     {
; 197  :         c->look = s->look + 1;

	mov	rsi, QWORD PTR [rbx+72]
	mov	r9, QWORD PTR cc$[rsp+16]
	inc	rsi
	mov	QWORD PTR cc$[rsp+8], rsi
$LN56@lzo1x_999_:

; 198  :     }
; 199  :     c->bp = c->ip - c->look;

	mov	rax, QWORD PTR cc$[rsp+56]

; 200  : 
; 201  : #if 0
; 202  :     /* brute force match search */
; 203  :     if (c->m_len > THRESHOLD && c->m_len + 1 <= c->look)
; 204  :     {
; 205  :         const lzo_bytep ip = c->bp;
; 206  :         const lzo_bytep m  = c->bp - c->m_off;
; 207  :         const lzo_bytep in = c->in;
; 208  : 
; 209  :         if (ip - in > N)
; 210  :             in = ip - N;
; 211  :         for (;;)
; 212  :         {
; 213  :             while (*in != *ip)
; 214  :                 in++;
; 215  :             if (in == ip)
; 216  :                 break;
; 217  :             if (in != m)
; 218  :                 if (lzo_memcmp(in,ip,c->m_len+1) == 0)
; 219  :                     printf("%p %p %p %5d\n",in,ip,m,c->m_len);
; 220  :             in++;
; 221  :         }
; 222  :     }
; 223  : #endif
; 224  : 
; 225  :     if (c->cb && c->cb->nprogress && c->textsize > c->printcount)

	mov	rcx, QWORD PTR cc$[rbp-153]
	sub	rax, rsi
	mov	QWORD PTR cc$[rsp+48], rax
	test	rcx, rcx
	je	SHORT $LN118@lzo1x_999_
	mov	rax, QWORD PTR [rcx+16]
	test	rax, rax
	je	SHORT $LN118@lzo1x_999_
	mov	rdx, QWORD PTR cc$[rbp-145]
	cmp	rdx, QWORD PTR cc$[rbp-129]
	jbe	SHORT $LN118@lzo1x_999_

; 226  :     {
; 227  :         (*c->cb->nprogress)(c->cb, c->textsize, c->codesize, 0);

	mov	r8, QWORD PTR cc$[rbp-137]
	xor	r9d, r9d
	call	rax

; 228  :         c->printcount += 1024;

	add	QWORD PTR cc$[rbp-129], 1024		; 00000400H
	mov	r9, QWORD PTR cc$[rsp+16]
	mov	rsi, QWORD PTR cc$[rsp+8]
$LN118@lzo1x_999_:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp

; 693  :             ahead++;

	inc	r14

; 694  : 
; 695  :             assert(r == 0);
; 696  :             assert(c->look > 0);
; 697  :             assert(ii + lit + ahead == c->bp);
; 698  : 
; 699  : #if defined(LZO1Z)
; 700  :             if (m_off == c->last_m_off && c->m_off != c->last_m_off)
; 701  :                 if (m_len >= M2_MIN_LEN && m_len <= M2_MAX_LEN)
; 702  :                     c->m_len = 0;
; 703  : #endif
; 704  :             if (c->m_len < m_len)

	cmp	r9, r15
	jb	$LN125@lzo1x_999_

; 705  :                 continue;
; 706  : #if 1
; 707  :             if (c->m_len == m_len && c->m_off >= m_off)

	mov	r10, QWORD PTR cc$[rsp+24]
	jne	SHORT $LN9@lzo1x_999_
	cmp	r10, rdi
	jae	$LN125@lzo1x_999_
$LN9@lzo1x_999_:

; 708  :                 continue;
; 709  : #endif
; 710  : #if defined(SWD_BEST_OFF)
; 711  :             if (swd->use_best_off)

	cmp	DWORD PTR [rbx+40], 0
	je	SHORT $LN65@lzo1x_999_

; 409  :         lazy_match_min_gain = 0;
; 410  : 
; 411  : #if 0
; 412  :     if (l1 == 2)
; 413  :         if (lazy_match_min_gain == 0)
; 414  :             lazy_match_min_gain = 1;
; 415  : #endif
; 416  : 
; 417  :     return lazy_match_min_gain;
; 418  : }
; 419  : 
; 420  : 
; 421  : /***********************************************************************
; 422  : //
; 423  : ************************************************************************/
; 424  : 
; 425  : #if !defined(NDEBUG)
; 426  : static
; 427  : void assert_match( const lzo_swd_p swd, lzo_uint m_len, lzo_uint m_off )
; 428  : {
; 429  :     const LZO_COMPRESS_T *c = swd->c;
; 430  :     lzo_uint d_off;
; 431  : 
; 432  :     assert(m_len >= 2);
; 433  :     if (m_off <= (lzo_uint) (c->bp - c->in))
; 434  :     {
; 435  :         assert(c->bp - m_off + m_len < c->ip);
; 436  :         assert(lzo_memcmp(c->bp, c->bp - m_off, m_len) == 0);
; 437  :     }
; 438  :     else
; 439  :     {
; 440  :         assert(swd->dict != NULL);
; 441  :         d_off = m_off - (lzo_uint) (c->bp - c->in);
; 442  :         assert(d_off <= swd->dict_len);
; 443  :         if (m_len > d_off)
; 444  :         {
; 445  :             assert(lzo_memcmp(c->bp, swd->dict_end - d_off, d_off) == 0);
; 446  :             assert(c->in + m_len - d_off < c->ip);
; 447  :             assert(lzo_memcmp(c->bp + d_off, c->in, m_len - d_off) == 0);
; 448  :         }
; 449  :         else
; 450  :         {
; 451  :             assert(lzo_memcmp(c->bp, swd->dict_end - d_off, m_len) == 0);
; 452  :         }
; 453  :     }
; 454  : }
; 455  : #else
; 456  : #  define assert_match(a,b,c)   ((void)0)
; 457  : #endif
; 458  : 
; 459  : 
; 460  : #if defined(SWD_BEST_OFF)
; 461  : 
; 462  : static void
; 463  : better_match ( const lzo_swd_p swd, lzo_uint *m_len, lzo_uint *m_off )
; 464  : {
; 465  : #if defined(LZO1Z)
; 466  :     const LZO_COMPRESS_T *c = swd->c;
; 467  : #endif
; 468  : 
; 469  :     if (*m_len <= M2_MIN_LEN)

	cmp	r9, 3
	jbe	SHORT $LN65@lzo1x_999_

; 470  :         return;
; 471  : #if defined(LZO1Z)
; 472  :     if (*m_off == c->last_m_off && *m_len <= M2_MAX_LEN)
; 473  :         return;
; 474  : #if 1
; 475  :     if (*m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1 &&
; 476  :         c->last_m_off && swd->best_off[*m_len-1] == c->last_m_off)
; 477  :     {
; 478  :         *m_len = *m_len - 1;
; 479  :         *m_off = swd->best_off[*m_len];
; 480  :         return;
; 481  :     }
; 482  : #endif
; 483  : #endif
; 484  : 
; 485  :     if (*m_off <= M2_MAX_OFFSET)

	cmp	r10, 2048				; 00000800H
	jbe	SHORT $LN65@lzo1x_999_

; 486  :         return;
; 487  : 
; 488  : #if 1
; 489  :     /* M3/M4 -> M2 */
; 490  :     if (*m_off > M2_MAX_OFFSET &&
; 491  :         *m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1 &&
; 492  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M2_MAX_OFFSET)

	lea	rax, QWORD PTR [r9-4]
	cmp	rax, 5
	ja	SHORT $LN67@lzo1x_999_
	mov	rax, QWORD PTR [rbx+r9*8+80]
	dec	rax
	cmp	rax, 2047				; 000007ffH

; 493  :     {
; 494  :         *m_len = *m_len - 1;
; 495  :         *m_off = swd->best_off[*m_len];
; 496  :         return;

	jbe	SHORT $LN130@lzo1x_999_
$LN67@lzo1x_999_:

; 497  :     }
; 498  : #endif
; 499  : 
; 500  : #if 1
; 501  :     /* M4 -> M2 */
; 502  :     if (*m_off > M3_MAX_OFFSET &&
; 503  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M2_MAX_LEN + 2 &&
; 504  :         swd->best_off[*m_len-2] && swd->best_off[*m_len-2] <= M2_MAX_OFFSET)

	cmp	r10, 16384				; 00004000H
	jbe	SHORT $LN65@lzo1x_999_
	lea	rax, QWORD PTR [r9-10]
	test	rax, rax
	jne	SHORT $LN66@lzo1x_999_
	mov	rax, QWORD PTR [rbx+r9*8+72]
	dec	rax
	cmp	rax, 2047				; 000007ffH
	ja	SHORT $LN66@lzo1x_999_

; 505  :     {
; 506  :         *m_len = *m_len - 2;

	sub	r9, 2

; 507  :         *m_off = swd->best_off[*m_len];
; 508  :         return;

	jmp	SHORT $LN131@lzo1x_999_
$LN66@lzo1x_999_:

; 509  :     }
; 510  : #endif
; 511  : 
; 512  : #if 1
; 513  :     /* M4 -> M3 */
; 514  :     if (*m_off > M3_MAX_OFFSET &&
; 515  :         *m_len >= M4_MAX_LEN + 1 && *m_len <= M3_MAX_LEN + 1 &&
; 516  :         swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M3_MAX_OFFSET)

	lea	rax, QWORD PTR [r9-10]
	cmp	rax, 24
	ja	SHORT $LN65@lzo1x_999_
	mov	rax, QWORD PTR [rbx+r9*8+80]
	dec	rax
	cmp	rax, 16383				; 00003fffH
	ja	SHORT $LN65@lzo1x_999_
$LN130@lzo1x_999_:

; 517  :     {
; 518  :         *m_len = *m_len - 1;

	dec	r9
$LN131@lzo1x_999_:
	mov	QWORD PTR cc$[rsp+16], r9

; 519  :         *m_off = swd->best_off[*m_len];

	mov	r10, QWORD PTR [rbx+r9*8+88]
	mov	QWORD PTR cc$[rsp+24], r10
$LN65@lzo1x_999_:

; 712  :                 better_match(swd,&c->m_len,&c->m_off);
; 713  : #endif
; 714  :             l2 = len_of_coded_match(c->m_len,c->m_off,lit+ahead);

	lea	rdi, QWORD PTR [r14+r13]
	mov	rdx, r10
	mov	rcx, r9
	mov	r8, rdi
	call	?len_of_coded_match@@YAH_K00@Z		; len_of_coded_match
	mov	r11d, eax

; 715  :             if (l2 < 0)

	test	eax, eax
	js	$LN119@lzo1x_999_

; 716  :                 continue;
; 717  : #if 0
; 718  :             if (c->m_len == m_len && l2 >= l1)
; 719  :                 continue;
; 720  : #endif
; 721  : 
; 722  : 
; 723  : #if 1
; 724  :             /* compressed-data compatibility [see above] */
; 725  :             l3 = (op == out) ? -1 : len_of_coded_match(ahead,m_off,lit);

	cmp	r12, QWORD PTR out$[rbp-241]
	jne	SHORT $LN43@lzo1x_999_
	or	edx, -1
	jmp	SHORT $LN44@lzo1x_999_
$LN43@lzo1x_999_:
	mov	rdx, QWORD PTR m_off$1$[rbp-241]
	mov	r8, r13
	mov	rcx, r14
	call	?len_of_coded_match@@YAH_K00@Z		; len_of_coded_match
	mov	edx, eax
$LN44@lzo1x_999_:

; 335  :     }
; 336  : 
; 337  :     return op;
; 338  : }
; 339  : 
; 340  : 
; 341  : /***********************************************************************
; 342  : //
; 343  : ************************************************************************/
; 344  : 
; 345  : static int
; 346  : len_of_coded_match ( lzo_uint m_len, lzo_uint m_off, lzo_uint lit )
; 347  : {
; 348  :     int n = 4;
; 349  : 
; 350  :     if (m_len < 2)
; 351  :         return -1;
; 352  :     if (m_len == 2)
; 353  :         return (m_off <= M1_MAX_OFFSET && lit > 0 && lit < 4) ? 2 : -1;
; 354  :     if (m_len <= M2_MAX_LEN && m_off <= M2_MAX_OFFSET)
; 355  :         return 2;
; 356  :     if (m_len == M2_MIN_LEN && m_off <= MX_MAX_OFFSET && lit >= 4)
; 357  :         return 2;
; 358  :     if (m_off <= M3_MAX_OFFSET)
; 359  :     {
; 360  :         if (m_len <= M3_MAX_LEN)
; 361  :             return 3;
; 362  :         m_len -= M3_MAX_LEN;
; 363  :         while (m_len > 255)
; 364  :         {
; 365  :             m_len -= 255;
; 366  :             n++;
; 367  :         }
; 368  :         return n;
; 369  :     }
; 370  :     if (m_off <= M4_MAX_OFFSET)
; 371  :     {
; 372  :         if (m_len <= M4_MAX_LEN)
; 373  :             return 3;
; 374  :         m_len -= M4_MAX_LEN;
; 375  :         while (m_len > 255)
; 376  :         {
; 377  :             m_len -= 255;
; 378  :             n++;
; 379  :         }
; 380  :         return n;
; 381  :     }
; 382  :     return -1;
; 383  : }
; 384  : 
; 385  : 
; 386  : static lzo_int
; 387  : min_gain(lzo_uint ahead, lzo_uint lit1, lzo_uint lit2, int l1, int l2, int l3)
; 388  : {
; 389  :     lzo_int lazy_match_min_gain = 0;
; 390  : 
; 391  :     assert (ahead >= 1);
; 392  :     lazy_match_min_gain += ahead;

	mov	rcx, r14

; 393  : 
; 394  : #if 0
; 395  :     if (l3 > 0)
; 396  :         lit2 -= ahead;
; 397  : #endif
; 398  : 
; 399  :     if (lit1 <= 3)

	cmp	r13, 3
	ja	SHORT $LN76@lzo1x_999_

; 400  :         lazy_match_min_gain += (lit2 <= 3) ? 0 : 2;

	mov	ecx, 2
	cmp	rdi, 3
	mov	r8d, 0
	cmovbe	ecx, r8d
	jmp	SHORT $LN134@lzo1x_999_
$LN76@lzo1x_999_:

; 401  :     else if (lit1 <= 18)
; 402  :         lazy_match_min_gain += (lit2 <= 18) ? 0 : 1;

	xor	r8d, r8d
	cmp	r13, 18
	ja	SHORT $LN74@lzo1x_999_
	cmp	rdi, 18
	mov	ecx, r8d
	seta	cl
$LN134@lzo1x_999_:
	add	rcx, r14
$LN74@lzo1x_999_:

; 403  : 
; 404  :     lazy_match_min_gain += (l2 - l1) * 2;

	sub	r11d, DWORD PTR l1$1$[rbp-241]
	lea	eax, DWORD PTR [r11+r11]
	cdqe
	add	rcx, rax

; 405  :     if (l3 > 0)

	test	edx, edx
	jle	SHORT $LN73@lzo1x_999_

; 406  :         lazy_match_min_gain -= (ahead - l3) * 2;

	movsxd	rax, edx
	sub	rax, r14
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN73@lzo1x_999_:

; 407  : 
; 408  :     if (lazy_match_min_gain < 0)

	test	rcx, rcx
	cmovs	rcx, r8

; 726  : #else
; 727  :             l3 = len_of_coded_match(ahead,m_off,lit);
; 728  : #endif
; 729  : 
; 730  :             lazy_match_min_gain = min_gain(ahead,lit,lit+ahead,l1,l2,l3);
; 731  :             if (c->m_len >= m_len + lazy_match_min_gain)

	lea	rax, QWORD PTR [rcx+r15]
	cmp	r9, rax
	jae	SHORT $LN93@lzo1x_999_
	mov	rdi, QWORD PTR m_off$1$[rbp-241]
	jmp	SHORT $LN6@lzo1x_999_
$LN119@lzo1x_999_:
	mov	rdi, QWORD PTR m_off$1$[rbp-241]
$LN125@lzo1x_999_:
	xor	r8d, r8d
$LN6@lzo1x_999_:

; 678  : #else
; 679  :             max_ahead = LZO_MIN3(try_lazy, l1, m_len - 1);
; 680  : #endif
; 681  :         }
; 682  : 
; 683  : 
; 684  :         while (ahead < max_ahead && c->look > m_len)

	cmp	r14, QWORD PTR max_ahead$1$[rbp-241]
	jb	$LL14@lzo1x_999_
	jmp	SHORT $LN123@lzo1x_999_
$LN93@lzo1x_999_:

; 732  :             {
; 733  :                 c->lazy++;

	inc	DWORD PTR cc$[rbp-109]

; 324  :     {
; 325  :         assert(m_len >= 2);
; 326  :         op = STORE_RUN(c,op,ii,lit);

	mov	rdi, QWORD PTR ii$1$[rbp-241]

; 734  :                 assert_match(swd,c->m_len,c->m_off);
; 735  : 
; 736  :                 if (l3 > 0)

	test	edx, edx
	jle	SHORT $LN5@lzo1x_999_

; 323  :     if (lit > 0)

	test	r13, r13
	je	SHORT $LN80@lzo1x_999_

; 324  :     {
; 325  :         assert(m_len >= 2);
; 326  :         op = STORE_RUN(c,op,ii,lit);

	lea	rcx, QWORD PTR cc$[rsp]
	mov	r9, r13
	mov	r8, rdi
	mov	rdx, r12
	call	?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z ; STORE_RUN

; 327  :         c->r1_m_len = m_len;

	mov	QWORD PTR cc$[rbp-97], r14

; 328  :         c->r1_lit = lit;

	mov	QWORD PTR cc$[rbp-105], r13
	mov	r12, rax

; 329  :     }
; 330  :     else

	xor	r8d, r8d
	jmp	SHORT $LN79@lzo1x_999_
$LN80@lzo1x_999_:

; 331  :     {
; 332  :         assert(m_len >= 3);
; 333  :         c->r1_m_len = 0;

	mov	QWORD PTR cc$[rbp-97], r8

; 334  :         c->r1_lit = 0;

	mov	QWORD PTR cc$[rbp-105], r8
$LN79@lzo1x_999_:

; 737  :                 {
; 738  :                     /* code previous run */
; 739  :                     op = code_run(c,op,ii,lit,ahead);
; 740  :                     lit = 0;
; 741  :                     /* code shortened match */
; 742  :                     op = code_match(c,op,ahead,m_off);

	mov	r9, QWORD PTR m_off$1$[rbp-241]
	mov	r13, r8
	lea	rcx, QWORD PTR cc$[rsp]
	mov	r8, r14
	mov	rdx, r12
	call	?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z ; code_match

; 743  :                 }
; 744  :                 else

	mov	r14, QWORD PTR max_chain$[rbp-241]
	mov	r12, rax
	jmp	$LN132@lzo1x_999_
$LN5@lzo1x_999_:

; 745  :                 {
; 746  :                     lit += ahead;

	add	r13, r14

; 747  :                     assert(ii + lit == c->bp);
; 748  :                 }
; 749  :                 goto lazy_match_done;

	mov	r14, QWORD PTR max_chain$[rbp-241]
	jmp	$lazy_match_done$137
$LN122@lzo1x_999_:
	xor	r8d, r8d
$LN123@lzo1x_999_:
	mov	rdx, QWORD PTR ii$1$[rbp-241]
$LN117@lzo1x_999_:

; 323  :     if (lit > 0)

	test	r13, r13
	je	SHORT $LN84@lzo1x_999_

; 324  :     {
; 325  :         assert(m_len >= 2);
; 326  :         op = STORE_RUN(c,op,ii,lit);

	mov	r8, rdx
	lea	rcx, QWORD PTR cc$[rsp]
	mov	r9, r13
	mov	rdx, r12
	call	?STORE_RUN@@YAPEAEPEAUlzo1x_999_t@@PEAEPEBE_K@Z ; STORE_RUN

; 327  :         c->r1_m_len = m_len;

	mov	QWORD PTR cc$[rbp-97], r15

; 328  :         c->r1_lit = lit;

	mov	QWORD PTR cc$[rbp-105], r13
	mov	r12, rax

; 329  :     }
; 330  :     else

	xor	r8d, r8d
	jmp	SHORT $LN83@lzo1x_999_
$LN84@lzo1x_999_:

; 331  :     {
; 332  :         assert(m_len >= 3);
; 333  :         c->r1_m_len = 0;

	mov	QWORD PTR cc$[rbp-97], r8

; 334  :         c->r1_lit = 0;

	mov	QWORD PTR cc$[rbp-105], r8
$LN83@lzo1x_999_:

; 750  :             }
; 751  :         }
; 752  : 
; 753  : 
; 754  :         assert(ii + lit + ahead == c->bp);
; 755  : 
; 756  :         /* 1 - code run */
; 757  :         op = code_run(c,op,ii,lit,m_len);
; 758  :         lit = 0;

	mov	r13, r8

; 759  : 
; 760  :         /* 2 - code match */
; 761  :         op = code_match(c,op,m_len,m_off);

	lea	rcx, QWORD PTR cc$[rsp]
	mov	r9, rdi
	mov	r8, r15
	mov	rdx, r12
	call	?code_match@@YAPEAEPEAUlzo1x_999_t@@PEAE_K2@Z ; code_match

; 762  :         swd->max_chain = max_chain;
; 763  :         r = find_match(c,swd,m_len,1+ahead);

	lea	r9, QWORD PTR [r14+1]
	lea	rcx, QWORD PTR cc$[rsp]
	mov	r12, rax
	mov	rax, QWORD PTR max_chain$[rbp-241]
	mov	r8, r15
	mov	rdx, rbx
	mov	QWORD PTR [rbx+24], rax
	call	?find_match@@YAHPEAUlzo1x_999_t@@PEAUlzo1x_999_swd_t@@_K2@Z ; find_match
	mov	r14, QWORD PTR max_chain$[rbp-241]
	jmp	$LN133@lzo1x_999_
lzo1x_999_compress_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\rt_lzo1x_9x.cpp
_TEXT	SEGMENT
in$ = 128
in_len$ = 136
out$ = 144
out_len$ = 152
wrkmem$ = 160
dict$ = 168
dict_len$ = 176
cb$dead$ = 184
compression_level$dead$ = 192
lzo1x_999_compress_level PROC

; 811  : {

$LN6:
	sub	rsp, 120				; 00000078H

; 812  :     static const struct
; 813  :     {
; 814  :         int try_lazy;
; 815  :         lzo_uint good_length;
; 816  :         lzo_uint max_lazy;
; 817  :         lzo_uint nice_length;
; 818  :         lzo_uint max_chain;
; 819  :         lzo_uint32 flags;
; 820  :     } c[9] = {
; 821  :         {   0,   0,   0,   8,    4,   0 },      /* faster compression */
; 822  :         {   0,   0,   0,  16,    8,   0 },
; 823  :         {   0,   0,   0,  32,   16,   0 },
; 824  : 
; 825  :         {   1,   4,   4,  16,   16,   0 },
; 826  :         {   1,   8,  16,  32,   32,   0 },
; 827  :         {   1,   8,  16, 128,  128,   0 },
; 828  : 
; 829  :         {   2,   8,  32, 128,  256,   0 },
; 830  :         {   2,  32, 128,   F, 2048,   1 },
; 831  :         {   2,   F,   F,   F, 4096,   1 }       /* max. compression */
; 832  :     };
; 833  : 
; 834  :     if (compression_level < 1 || compression_level > 9)
; 835  :         return LZO_E_ERROR;
; 836  : 
; 837  :     compression_level -= 1;
; 838  :     return lzo1x_999_compress_internal(in, in_len, out, out_len, wrkmem,
; 839  :                                        dict, dict_len, cb,
; 840  :                                        c[compression_level].try_lazy,
; 841  :                                        c[compression_level].good_length,
; 842  :                                        c[compression_level].max_lazy,
; 843  : #if 0
; 844  :                                        c[compression_level].nice_length,
; 845  : #else
; 846  :                                        0,
; 847  : #endif
; 848  :                                        c[compression_level].max_chain,
; 849  :                                        c[compression_level].flags);

	mov	rax, QWORD PTR dict_len$[rsp]
	mov	DWORD PTR [rsp+104], 1
	mov	QWORD PTR [rsp+96], 2048		; 00000800H
	mov	QWORD PTR [rsp+80], 128			; 00000080H
	mov	QWORD PTR [rsp+72], 32			; 00000020H
	mov	DWORD PTR [rsp+64], 2
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR dict$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR wrkmem$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	lzo1x_999_compress_internal

; 850  : }

	add	rsp, 120				; 00000078H
	ret	0
lzo1x_999_compress_level ENDP
_TEXT	ENDS
END
