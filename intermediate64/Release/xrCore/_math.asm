; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?qpc_overhead@CPU@@3_KA				; CPU::qpc_overhead
PUBLIC	?qpc_freq@CPU@@3_KA				; CPU::qpc_freq
PUBLIC	??_C@_0CD@NJGICNGF@?$CK?5Detected?5CPU?3?5?$CFs?5?$CFs?0?5F?$CFd?1M?$CFd?1S@ ; `string'
PUBLIC	??_C@_04NGDEOHJ@?9x86?$AA@			; `string'
PUBLIC	??_C@_05FDMJBNPD@RDTSC?$AA@			; `string'
PUBLIC	??_C@_05JMMMPNDK@?0?5MMX?$AA@			; `string'
PUBLIC	??_C@_08NAKAGFEO@?0?53DNow?$CB?$AA@		; `string'
PUBLIC	??_C@_05MFNODPPA@?0?5SSE?$AA@			; `string'
PUBLIC	??_C@_06FAAIHIFC@?0?5SSE2?$AA@			; `string'
PUBLIC	??_C@_06EJBDEJBD@?0?5SSE3?$AA@			; `string'
PUBLIC	??_C@_08HLGKFFE@?0?5SSE4?41?$AA@		; `string'
PUBLIC	??_C@_08CMJLPGJH@?0?5SSE4?42?$AA@		; `string'
PUBLIC	??_C@_0BE@DIBPOHIO@?$CK?5CPU?5Features?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	?ID@CPU@@3U_processor_info@@A			; CPU::ID
PUBLIC	?qpc_counter@CPU@@3IA				; CPU::qpc_counter
PUBLIC	?clk_to_microsec@CPU@@3MA			; CPU::clk_to_microsec
PUBLIC	?clk_to_milisec@CPU@@3MA			; CPU::clk_to_milisec
PUBLIC	?clk_to_seconds@CPU@@3MA			; CPU::clk_to_seconds
PUBLIC	?clk_overhead@CPU@@3_KA				; CPU::clk_overhead
PUBLIC	?clk_per_microsec@CPU@@3_KA			; CPU::clk_per_microsec
PUBLIC	?clk_per_milisec@CPU@@3_KA			; CPU::clk_per_milisec
PUBLIC	?clk_per_second@CPU@@3_KA			; CPU::clk_per_second
PUBLIC	?Didentity@@3U?$_matrix@N@@A			; Didentity
PUBLIC	?Fidentity@@3U?$_matrix@M@@A			; Fidentity
EXTRN	__imp__beginthread:PROC
EXTRN	__imp_RaiseException:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_timeGetTime:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	__imp_SetPriorityClass:PROC
EXTRN	__imp_abort:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
	ALIGN	8

?qpc_overhead@CPU@@3_KA DQ 01H DUP (?)			; CPU::qpc_overhead
?qpc_freq@CPU@@3_KA DQ 01H DUP (?)			; CPU::qpc_freq
?ID@CPU@@3U_processor_info@@A DB 074H DUP (?)		; CPU::ID
?qpc_counter@CPU@@3IA DD 01H DUP (?)			; CPU::qpc_counter
?clk_to_microsec@CPU@@3MA DD 01H DUP (?)		; CPU::clk_to_microsec
?clk_to_milisec@CPU@@3MA DD 01H DUP (?)			; CPU::clk_to_milisec
?clk_to_seconds@CPU@@3MA DD 01H DUP (?)			; CPU::clk_to_seconds
	ALIGN	8

?clk_overhead@CPU@@3_KA DQ 01H DUP (?)			; CPU::clk_overhead
?clk_per_microsec@CPU@@3_KA DQ 01H DUP (?)		; CPU::clk_per_microsec
?clk_per_milisec@CPU@@3_KA DQ 01H DUP (?)		; CPU::clk_per_milisec
?clk_per_second@CPU@@3_KA DQ 01H DUP (?)		; CPU::clk_per_second
?Didentity@@3U?$_matrix@N@@A DB 080H DUP (?)		; Didentity
?Fidentity@@3U?$_matrix@M@@A DB 040H DUP (?)		; Fidentity
_BSS	ENDS
_denormals_are_zero_supported DD 01H
_DATA	ENDS
;	COMDAT ??_C@_0BE@DIBPOHIO@?$CK?5CPU?5Features?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BE@DIBPOHIO@?$CK?5CPU?5Features?3?5?$CFs?6?$AA@ DB '* CPU Features'
	DB	': %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMJLPGJH@?0?5SSE4?42?$AA@
CONST	SEGMENT
??_C@_08CMJLPGJH@?0?5SSE4?42?$AA@ DB ', SSE4.2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HLGKFFE@?0?5SSE4?41?$AA@
CONST	SEGMENT
??_C@_08HLGKFFE@?0?5SSE4?41?$AA@ DB ', SSE4.1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJBDEJBD@?0?5SSE3?$AA@
CONST	SEGMENT
??_C@_06EJBDEJBD@?0?5SSE3?$AA@ DB ', SSE3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAAIHIFC@?0?5SSE2?$AA@
CONST	SEGMENT
??_C@_06FAAIHIFC@?0?5SSE2?$AA@ DB ', SSE2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFNODPPA@?0?5SSE?$AA@
CONST	SEGMENT
??_C@_05MFNODPPA@?0?5SSE?$AA@ DB ', SSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NAKAGFEO@?0?53DNow?$CB?$AA@
CONST	SEGMENT
??_C@_08NAKAGFEO@?0?53DNow?$CB?$AA@ DB ', 3DNow!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMMMPNDK@?0?5MMX?$AA@
CONST	SEGMENT
??_C@_05JMMMPNDK@?0?5MMX?$AA@ DB ', MMX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDMJBNPD@RDTSC?$AA@
CONST	SEGMENT
??_C@_05FDMJBNPD@RDTSC?$AA@ DB 'RDTSC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NGDEOHJ@?9x86?$AA@
CONST	SEGMENT
??_C@_04NGDEOHJ@?9x86?$AA@ DB '-x86', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NJGICNGF@?$CK?5Detected?5CPU?3?5?$CFs?5?$CFs?0?5F?$CFd?1M?$CFd?1S@
CONST	SEGMENT
??_C@_0CD@NJGICNGF@?$CK?5Detected?5CPU?3?5?$CFs?5?$CFs?0?5F?$CFd?1M?$CFd?1S@ DB '*'
	DB	' Detected CPU: %s %s, F%d/M%d/S%d', 00H	; `string'
PUBLIC	??0CRandom@@QEAA@XZ				; CRandom::CRandom
PUBLIC	?GetCLK@CPU@@YA_KXZ				; CPU::GetCLK
PUBLIC	??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z ; xr_special_free<0,THREAD_STARTUP>::operator()
PUBLIC	??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ ; xr_new<THREAD_STARTUP>
PUBLIC	??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z ; xr_delete<THREAD_STARTUP>
PUBLIC	?identity@?$_matrix@N@@QEAAAEAU1@XZ		; _matrix<double>::identity
PUBLIC	?identity@?$_matrix@M@@QEAAAEAU1@XZ		; _matrix<float>::identity
PUBLIC	?thread_spawn@@YAXP6AXPEAX@ZPEBDI0@Z		; thread_spawn
PUBLIC	?thread_entry@@YAXPEAX@Z			; thread_entry
PUBLIC	?thread_name@@YAXPEBD@Z				; thread_name
PUBLIC	?_initialize_cpu_thread@@YAXXZ			; _initialize_cpu_thread
PUBLIC	?initialize@FPU@@YAXXZ				; FPU::initialize
PUBLIC	?m64@FPU@@YAXXZ					; FPU::m64
PUBLIC	?m53r@FPU@@YAXXZ				; FPU::m53r
PUBLIC	?m53@FPU@@YAXXZ					; FPU::m53
PUBLIC	?m24@FPU@@YAXXZ					; FPU::m24
PUBLIC	?Detect@CPU@@YAXXZ				; CPU::Detect
PUBLIC	?_initialize_cpu@@YAXXZ				; _initialize_cpu
PUBLIC	?m64r@FPU@@YAXXZ				; FPU::m64r
PUBLIC	?m24r@FPU@@YAXXZ				; FPU::m24r
PUBLIC	?QPC@CPU@@YA_KXZ				; CPU::QPC
PUBLIC	?Random@@3VCRandom@@A				; Random
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z DD imagerel $LN29
	DD	imagerel $LN29+63
	DD	imagerel $unwind$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z DD imagerel $LN29+63
	DD	imagerel $LN29+107
	DD	imagerel $chain$0$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z DD imagerel $LN29+107
	DD	imagerel $LN29+113
	DD	imagerel $chain$1$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ DD imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z DD imagerel $LN37
	DD	imagerel $LN37+162
	DD	imagerel $unwind$??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?thread_spawn@@YAXP6AXPEAX@ZPEBDI0@Z DD imagerel $LN10
	DD	imagerel $LN10+117
	DD	imagerel $unwind$?thread_spawn@@YAXP6AXPEAX@ZPEBDI0@Z
$pdata$?thread_entry@@YAXPEAX@Z DD imagerel $LN34
	DD	imagerel $LN34+158
	DD	imagerel $unwind$?thread_entry@@YAXPEAX@Z
$pdata$?thread_name@@YAXPEBD@Z DD imagerel $LN9
	DD	imagerel $LN9+62
	DD	imagerel $unwind$?thread_name@@YAXPEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?filt$0@?0??thread_name@@YAXPEBD@Z@4HA DD imagerel ?filt$0@?0??thread_name@@YAXPEBD@Z@4HA
	DD	imagerel ?filt$0@?0??thread_name@@YAXPEBD@Z@4HA+19
	DD	imagerel $unwind$?filt$0@?0??thread_name@@YAXPEBD@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?_initialize_cpu_thread@@YAXXZ DD imagerel $LN15
	DD	imagerel $LN15+124
	DD	imagerel $unwind$?_initialize_cpu_thread@@YAXXZ
$pdata$?m64@FPU@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$?m64@FPU@@YAXXZ
$pdata$?m53r@FPU@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$?m53r@FPU@@YAXXZ
$pdata$?m53@FPU@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$?m53@FPU@@YAXXZ
$pdata$?m24@FPU@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$?m24@FPU@@YAXXZ
$pdata$?Detect@CPU@@YAXXZ DD imagerel $LN44
	DD	imagerel $LN44+20
	DD	imagerel $unwind$?Detect@CPU@@YAXXZ
$pdata$2$?Detect@CPU@@YAXXZ DD imagerel $LN44+20
	DD	imagerel $LN44+146
	DD	imagerel $chain$2$?Detect@CPU@@YAXXZ
$pdata$3$?Detect@CPU@@YAXXZ DD imagerel $LN44+146
	DD	imagerel $LN44+429
	DD	imagerel $chain$3$?Detect@CPU@@YAXXZ
$pdata$4$?Detect@CPU@@YAXXZ DD imagerel $LN44+429
	DD	imagerel $LN44+512
	DD	imagerel $chain$4$?Detect@CPU@@YAXXZ
$pdata$?_initialize_cpu@@YAXXZ DD imagerel $LN54
	DD	imagerel $LN54+645
	DD	imagerel $unwind$?_initialize_cpu@@YAXXZ
$pdata$?m64r@FPU@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$?m64r@FPU@@YAXXZ
$pdata$?m24r@FPU@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$?m24r@FPU@@YAXXZ
$pdata$?QPC@CPU@@YA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$?QPC@CPU@@YA_KXZ
?Random@@3VCRandom@@A DD 01H				; Random
_DATA	ENDS
xdata	SEGMENT
$unwind$?thread_spawn@@YAXP6AXPEAX@ZPEBDI0@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$?thread_entry@@YAXPEAX@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$?thread_name@@YAXPEBD@Z DD 010409H
	DD	08204H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN9+33
	DD	imagerel $LN9+57
	DD	imagerel ?filt$0@?0??thread_name@@YAXPEBD@Z@4HA
	DD	imagerel $LN9+57
$unwind$?filt$0@?0??thread_name@@YAXPEBD@Z@4HA DD 020601H
	DD	050023206H
$unwind$?_initialize_cpu_thread@@YAXXZ DD 010409H
	DD	04204H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN15+86
	DD	imagerel $LN15+109
	DD	01H
	DD	imagerel $LN15+109
$unwind$?m64@FPU@@YAXXZ DD 010401H
	DD	04204H
$unwind$?m53r@FPU@@YAXXZ DD 010401H
	DD	04204H
$unwind$?m53@FPU@@YAXXZ DD 010401H
	DD	04204H
$unwind$?m24@FPU@@YAXXZ DD 010401H
	DD	04204H
$unwind$?Detect@CPU@@YAXXZ DD 010401H
	DD	04204H
$chain$2$?Detect@CPU@@YAXXZ DD 060f21H
	DD	04740fH
	DD	09640aH
	DD	083405H
	DD	imagerel $LN44
	DD	imagerel $LN44+20
	DD	imagerel $unwind$?Detect@CPU@@YAXXZ
$chain$3$?Detect@CPU@@YAXXZ DD 020021H
	DD	047400H
	DD	imagerel $LN44
	DD	imagerel $LN44+20
	DD	imagerel $unwind$?Detect@CPU@@YAXXZ
$chain$4$?Detect@CPU@@YAXXZ DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+20
	DD	imagerel $unwind$?Detect@CPU@@YAXXZ
$unwind$?_initialize_cpu@@YAXXZ DD 020701H
	DD	0170107H
$unwind$?m64r@FPU@@YAXXZ DD 010401H
	DD	04204H
$unwind$?m24r@FPU@@YAXXZ DD 010401H
	DD	04204H
$unwind$?QPC@CPU@@YA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z DD 066901H
	DD	063469H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+63
	DD	imagerel $unwind$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z DD 020521H
	DD	063405H
	DD	imagerel $LN29
	DD	imagerel $LN29+63
	DD	imagerel $unwind$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
_dest$ = 48
?QPC@CPU@@YA_KXZ PROC					; CPU::QPC

; 141  : 	XRCORE_API u64				QPC	()			{

$LN4:
	sub	rsp, 40					; 00000028H

; 142  : 		u64		_dest	;
; 143  : 		QueryPerformanceCounter			((PLARGE_INTEGER)&_dest);

	lea	rcx, QWORD PTR _dest$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 144  : 		qpc_counter	++	;

	inc	DWORD PTR ?qpc_counter@CPU@@3IA		; CPU::qpc_counter

; 145  : 		return	_dest	;

	mov	rax, QWORD PTR _dest$[rsp]

; 146  : 	}

	add	rsp, 40					; 00000028H
	ret	0
?QPC@CPU@@YA_KXZ ENDP					; CPU::QPC
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?m24r@FPU@@YAXXZ PROC					; FPU::m24r

; 28   : 	XRCORE_API void 	m24r	(void)	{

$LN4:
	sub	rsp, 40					; 00000028H

; 29   : 		_control87	( _PC_24,   MCW_PC );

	mov	edx, 196608				; 00030000H
	mov	ecx, 131072				; 00020000H
	call	QWORD PTR __imp__control87

; 30   : 		_control87	( _RC_NEAR, MCW_RC );

	mov	edx, 768				; 00000300H
	xor	ecx, ecx

; 31   : 	}

	add	rsp, 40					; 00000028H

; 30   : 		_control87	( _RC_NEAR, MCW_RC );

	rex_jmp	QWORD PTR __imp__control87
?m24r@FPU@@YAXXZ ENDP					; FPU::m24r
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?m64r@FPU@@YAXXZ PROC					; FPU::m64r

; 44   : 	XRCORE_API void 	m64r	(void)	{

$LN4:
	sub	rsp, 40					; 00000028H

; 45   : 		_control87	( _PC_64,   MCW_PC );

	mov	edx, 196608				; 00030000H
	xor	ecx, ecx
	call	QWORD PTR __imp__control87

; 46   : 		_control87	( _RC_NEAR, MCW_RC );

	mov	edx, 768				; 00000300H
	xor	ecx, ecx

; 47   : 	}

	add	rsp, 40					; 00000028H

; 46   : 		_control87	( _RC_NEAR, MCW_RC );

	rex_jmp	QWORD PTR __imp__control87
?m64r@FPU@@YAXXZ ENDP					; FPU::m64r
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
features$ = 48
?_initialize_cpu@@YAXXZ PROC				; _initialize_cpu

; 217  : {

$LN54:
	sub	rsp, 184				; 000000b8H

; 218  : //	Msg("* Detected CPU: %s %s, F%d/M%d/S%d, %.2f mhz, %d-clk 'rdtsc'",
; 219  : 	Msg("* Detected CPU: %s %s, F%d/M%d/S%d",
; 220  : 		CPU::ID.v_name,CPU::ID.model_name,
; 221  : 		CPU::ID.family,CPU::ID.model,CPU::ID.stepping
; 222  : //		float(CPU::clk_per_second/u64(1000000)),
; 223  : //		u32(CPU::clk_overhead)
; 224  : 		);

	mov	eax, DWORD PTR ?ID@CPU@@3U_processor_info@@A+104
	mov	r9d, DWORD PTR ?ID@CPU@@3U_processor_info@@A+96
	lea	r8, OFFSET FLAT:?ID@CPU@@3U_processor_info@@A+32
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ?ID@CPU@@3U_processor_info@@A+100
	lea	rdx, OFFSET FLAT:?ID@CPU@@3U_processor_info@@A ; CPU::ID
	lea	rcx, OFFSET FLAT:??_C@_0CD@NJGICNGF@?$CK?5Detected?5CPU?3?5?$CFs?5?$CFs?0?5F?$CFd?1M?$CFd?1S@
	mov	DWORD PTR [rsp+32], eax
	call	?Msg@@YAXPEBDZZ				; Msg
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h

; 228  :         { return (char*)strstr((const char*)_Str, _SubStr); }

	lea	rdx, OFFSET FLAT:??_C@_04NGDEOHJ@?9x86?$AA@
	lea	rcx, OFFSET FLAT:?Core@@3VxrCore@@A+1232
	call	QWORD PTR __imp_strstr
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 228  : 	if (strstr(Core.Params,"-x86"))		{

	test	rax, rax
	je	SHORT $LN8@initialize

; 229  : 		CPU::ID.feature	&= ~_CPU_FEATURE_3DNOW	;
; 230  : 		CPU::ID.feature	&= ~_CPU_FEATURE_SSE	;
; 231  : 		CPU::ID.feature	&= ~_CPU_FEATURE_SSE2	;
; 232  : 		CPU::ID.feature	&= ~_CPU_FEATURE_SSE3	;
; 233  : 		CPU::ID.feature	&= ~_CPU_FEATURE_SSE41	;
; 234  : 		CPU::ID.feature	&= ~_CPU_FEATURE_SSE42	;

	and	DWORD PTR ?ID@CPU@@3U_processor_info@@A+108, -126 ; ffffffffffffff82H
$LN8@initialize:

; 235  : 	};
; 236  : 
; 237  : 	string128	features;	strcpy_s(features,sizeof(features),"RDTSC");

	lea	r8, OFFSET FLAT:??_C@_05FDMJBNPD@RDTSC?$AA@
	lea	rcx, QWORD PTR features$[rsp]
	mov	edx, 128				; 00000080H
	call	QWORD PTR __imp_strcpy_s

; 238  :     if (CPU::ID.feature&_CPU_FEATURE_MMX)	strcat(features,", MMX");

	mov	edx, DWORD PTR ?ID@CPU@@3U_processor_info@@A+108
	test	dl, 2
	je	SHORT $LN7@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
$LL52@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL52@initialize
	mov	eax, DWORD PTR ??_C@_05JMMMPNDK@?0?5MMX?$AA@
	mov	DWORD PTR [rcx], eax
	movzx	eax, WORD PTR ??_C@_05JMMMPNDK@?0?5MMX?$AA@+4
	mov	WORD PTR [rcx+4], ax
$LN7@initialize:

; 239  :     if (CPU::ID.feature&_CPU_FEATURE_3DNOW)	strcat(features,", 3DNow!");

	test	dl, 1
	je	SHORT $LN6@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
$LL51@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL51@initialize
	movsdx	xmm0, QWORD PTR ??_C@_08NAKAGFEO@?0?53DNow?$CB?$AA@
	movzx	eax, BYTE PTR ??_C@_08NAKAGFEO@?0?53DNow?$CB?$AA@+8
	movsdx	QWORD PTR [rcx], xmm0
	mov	BYTE PTR [rcx+8], al
$LN6@initialize:

; 240  :     if (CPU::ID.feature&_CPU_FEATURE_SSE)	strcat(features,", SSE");

	test	dl, 4
	je	SHORT $LN5@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
	npad	3
$LL50@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL50@initialize
	mov	eax, DWORD PTR ??_C@_05MFNODPPA@?0?5SSE?$AA@
	mov	DWORD PTR [rcx], eax
	movzx	eax, WORD PTR ??_C@_05MFNODPPA@?0?5SSE?$AA@+4
	mov	WORD PTR [rcx+4], ax
$LN5@initialize:

; 241  :     if (CPU::ID.feature&_CPU_FEATURE_SSE2)	strcat(features,", SSE2");

	test	dl, 8
	je	SHORT $LN4@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
	npad	6
$LL49@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL49@initialize
	mov	eax, DWORD PTR ??_C@_06FAAIHIFC@?0?5SSE2?$AA@
	mov	DWORD PTR [rcx], eax
	movzx	eax, WORD PTR ??_C@_06FAAIHIFC@?0?5SSE2?$AA@+4
	mov	WORD PTR [rcx+4], ax
	movzx	eax, BYTE PTR ??_C@_06FAAIHIFC@?0?5SSE2?$AA@+6
	mov	BYTE PTR [rcx+6], al
$LN4@initialize:

; 242  : 	if (CPU::ID.feature&_CPU_FEATURE_SSE3)	strcat(features,", SSE3");

	test	dl, 16
	je	SHORT $LN3@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
$LL48@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL48@initialize
	mov	eax, DWORD PTR ??_C@_06EJBDEJBD@?0?5SSE3?$AA@
	mov	DWORD PTR [rcx], eax
	movzx	eax, WORD PTR ??_C@_06EJBDEJBD@?0?5SSE3?$AA@+4
	mov	WORD PTR [rcx+4], ax
	movzx	eax, BYTE PTR ??_C@_06EJBDEJBD@?0?5SSE3?$AA@+6
	mov	BYTE PTR [rcx+6], al
$LN3@initialize:

; 243  : 	if (CPU::ID.feature&_CPU_FEATURE_SSE41)	strcat(features,", SSE4.1");

	test	dl, 32					; 00000020H
	je	SHORT $LN2@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
	npad	8
$LL47@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL47@initialize
	movsdx	xmm0, QWORD PTR ??_C@_08HLGKFFE@?0?5SSE4?41?$AA@
	movzx	eax, BYTE PTR ??_C@_08HLGKFFE@?0?5SSE4?41?$AA@+8
	movsdx	QWORD PTR [rcx], xmm0
	mov	BYTE PTR [rcx+8], al
$LN2@initialize:

; 244  : 	if (CPU::ID.feature&_CPU_FEATURE_SSE42)	strcat(features,", SSE4.2");

	test	dl, 64					; 00000040H
	je	SHORT $LN1@initialize
	lea	rcx, QWORD PTR features$[rsp]
	dec	rcx
	npad	3
$LL46@initialize:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL46@initialize
	movsdx	xmm0, QWORD PTR ??_C@_08CMJLPGJH@?0?5SSE4?42?$AA@
	movzx	eax, BYTE PTR ??_C@_08CMJLPGJH@?0?5SSE4?42?$AA@+8
	movsdx	QWORD PTR [rcx], xmm0
	mov	BYTE PTR [rcx+8], al
$LN1@initialize:

; 245  : 	Msg("* CPU Features: %s\n",features);

	lea	rdx, QWORD PTR features$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@DIBPOHIO@?$CK?5CPU?5Features?3?5?$CFs?6?$AA@
	call	?Msg@@YAXPEBDZZ				; Msg
	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A+16, xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A+32, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A+48, xmm1
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	xorps	xmm1, xmm1
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+16, xmm1
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+48, xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+80, xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+32, xmm0
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+64, xmm0
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+96, xmm0
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+112, xmm1

; 246  : 
; 247  : 	Fidentity.identity		();	// Identity matrix
; 248  : 	Didentity.identity		();	// Identity matrix
; 249  : 	pvInitializeStatics		();	// Lookup table for compressed normals

	call	?pvInitializeStatics@@YAXXZ		; pvInitializeStatics

; 250  : 	FPU::initialize			();
; 251  : 	_initialize_cpu_thread	();

	call	?_initialize_cpu_thread@@YAXXZ		; _initialize_cpu_thread

; 252  : }

	add	rsp, 184				; 000000b8H
	ret	0
?_initialize_cpu@@YAXXZ ENDP				; _initialize_cpu
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
_dest$1 = 48
_dest$2 = 56
?Detect@CPU@@YAXXZ PROC					; CPU::Detect

; 157  : 	{

$LN44:
	sub	rsp, 40					; 00000028H

; 158  : 		// General CPU identification
; 159  : 		if (!_cpuid	(&ID))	

	call	?_cpuid@@YAHPEAU_processor_info@@@Z	; _cpuid
	test	eax, eax
	jne	SHORT $LN12@Detect

; 160  : 		{
; 161  : 			// Core.Fatal		("Fatal error: can't detect CPU/FPU.");
; 162  : 			abort				();

	call	QWORD PTR __imp_abort
	int	3
$LN12@Detect:
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	mov	QWORD PTR [rsp+32], rdi

; 163  : 		}
; 164  : 
; 165  : 		// Timers & frequency
; 166  : 		u64			start,end;
; 167  : 		u32			dwStart,dwTest;
; 168  : 
; 169  : 		SetPriorityClass		(GetCurrentProcess(),REALTIME_PRIORITY_CLASS);

	call	QWORD PTR __imp_GetCurrentProcess
	mov	edi, 256				; 00000100H
	mov	rcx, rax
	mov	edx, edi
	call	QWORD PTR __imp_SetPriorityClass

; 170  : 
; 171  : 		// Detect Freq
; 172  : 		dwTest	= timeGetTime();

	call	QWORD PTR __imp_timeGetTime
	mov	esi, eax
$LL11@Detect:

; 173  : 		do { dwStart = timeGetTime(); } while (dwTest==dwStart);

	call	QWORD PTR __imp_timeGetTime
	mov	ebx, eax
	cmp	esi, eax
	je	SHORT $LL11@Detect
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h

; 40   : 			return __rdtsc();

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	mov	rsi, rax
	npad	7
$LL8@Detect:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 175  : 		while (timeGetTime()-dwStart<1000) ;

	call	QWORD PTR __imp_timeGetTime
	sub	eax, ebx
	cmp	eax, 1000				; 000003e8H
	jb	SHORT $LL8@Detect
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h

; 40   : 			return __rdtsc();

	rdtsc
	mov	rbx, QWORD PTR [rsp+64]
	shl	rdx, 32					; 00000020H
	mov	r9, rdi
	or	rax, rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 177  : 		clk_per_second = end-start;

	sub	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]

; 178  : 
; 179  : 		// Detect RDTSC Overhead
; 180  : 		clk_overhead	= 0;

	xor	r8d, r8d
	mov	QWORD PTR ?clk_per_second@CPU@@3_KA, rax ; CPU::clk_per_second
$LL6@Detect:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h

; 40   : 			return __rdtsc();

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	mov	rcx, rax
	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 184  : 			clk_overhead	+=	GetCLK()-start-dummy;

	sub	rax, rcx
	add	r8, rax
	dec	r9
	jne	SHORT $LL6@Detect

; 185  : 		}
; 186  : 		clk_overhead		/=	256;

	shr	r8, 8

; 187  : 
; 188  : 		// Detect QPC Overhead
; 189  : 		QueryPerformanceFrequency	((PLARGE_INTEGER)&qpc_freq)	;

	lea	rcx, OFFSET FLAT:?qpc_freq@CPU@@3_KA	; CPU::qpc_freq
	mov	QWORD PTR ?clk_overhead@CPU@@3_KA, r8	; CPU::clk_overhead
	call	QWORD PTR __imp_QueryPerformanceFrequency

; 190  : 		qpc_overhead	= 0;

	mov	QWORD PTR ?qpc_overhead@CPU@@3_KA, 0	; CPU::qpc_overhead
$LL3@Detect:

; 143  : 		QueryPerformanceCounter			((PLARGE_INTEGER)&_dest);

	lea	rcx, QWORD PTR _dest$2[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 144  : 		qpc_counter	++	;

	inc	DWORD PTR ?qpc_counter@CPU@@3IA		; CPU::qpc_counter

; 143  : 		QueryPerformanceCounter			((PLARGE_INTEGER)&_dest);

	lea	rcx, QWORD PTR _dest$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 191  : 		for (i=0; i<256; i++)	{
; 192  : 			start			=	QPC();
; 193  : 			qpc_overhead	+=	QPC()-start-dummy;

	mov	rcx, QWORD PTR ?qpc_overhead@CPU@@3_KA	; CPU::qpc_overhead
	mov	rax, QWORD PTR _dest$1[rsp]
	sub	rax, QWORD PTR _dest$2[rsp]

; 144  : 		qpc_counter	++	;

	inc	DWORD PTR ?qpc_counter@CPU@@3IA		; CPU::qpc_counter

; 191  : 		for (i=0; i<256; i++)	{
; 192  : 			start			=	QPC();
; 193  : 			qpc_overhead	+=	QPC()-start-dummy;

	add	rcx, rax
	mov	QWORD PTR ?qpc_overhead@CPU@@3_KA, rcx	; CPU::qpc_overhead
	dec	rdi
	jne	SHORT $LL3@Detect

; 194  : 		}
; 195  : 		qpc_overhead		/=	256;

	shr	rcx, 8
	mov	QWORD PTR ?qpc_overhead@CPU@@3_KA, rcx	; CPU::qpc_overhead

; 196  : 
; 197  : 		SetPriorityClass	(GetCurrentProcess(),NORMAL_PRIORITY_CLASS);

	call	QWORD PTR __imp_GetCurrentProcess
	lea	edx, QWORD PTR [rdi+32]
	mov	rcx, rax
	call	QWORD PTR __imp_SetPriorityClass

; 198  : 
; 199  : 		clk_per_second	-=	clk_overhead;

	mov	rcx, QWORD PTR ?clk_per_second@CPU@@3_KA ; CPU::clk_per_second

; 200  : 		clk_per_milisec	=	clk_per_second/1000;

	mov	r8, 442721857769029239			; 0624dd2f1a9fbe77H
	sub	rcx, QWORD PTR ?clk_overhead@CPU@@3_KA	; CPU::clk_overhead
	mov	rax, r8
	mov	QWORD PTR ?clk_per_second@CPU@@3_KA, rcx ; CPU::clk_per_second
	mul	rcx
	sub	rcx, rdx

; 201  : 		clk_per_microsec	=	clk_per_milisec/1000;

	mov	rax, r8
	shr	rcx, 1
	add	rcx, rdx
	shr	rcx, 9
	mov	QWORD PTR ?clk_per_milisec@CPU@@3_KA, rcx ; CPU::clk_per_milisec
	mul	rcx
	sub	rcx, rdx
	shr	rcx, 1
	add	rcx, rdx

; 202  : 
; 203  : 		_control87	( _PC_64,   MCW_PC );

	mov	edx, 196608				; 00030000H
	shr	rcx, 9
	mov	QWORD PTR ?clk_per_microsec@CPU@@3_KA, rcx ; CPU::clk_per_microsec
	xor	ecx, ecx
	call	QWORD PTR __imp__control87

; 204  : //		_control87	( _RC_CHOP, MCW_RC );
; 205  : 		double a,b;
; 206  : 		a = 1;		b = double(clk_per_second);

	mov	rax, QWORD PTR ?clk_per_second@CPU@@3_KA ; CPU::clk_per_second
	mov	rdi, QWORD PTR [rsp+32]
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, rax
	test	rax, rax
	jns	SHORT $LN41@Detect
	addsd	xmm0, QWORD PTR __real@43f0000000000000
$LN41@Detect:

; 207  : 		clk_to_seconds = float(double(a/b));

	movsdx	xmm2, QWORD PTR __real@3ff0000000000000
	divsd	xmm2, xmm0
	cvtpd2ps xmm0, xmm2

; 208  : 		a = 1000;	b = double(clk_per_second);
; 209  : 		clk_to_milisec = float(double(a/b));

	movaps	xmm1, xmm2

; 210  : 		a = 1000000;b = double(clk_per_second);
; 211  : 		clk_to_microsec = float(double(a/b));

	mulsd	xmm2, QWORD PTR __real@412e848000000000
	mulsd	xmm1, QWORD PTR __real@408f400000000000
	movss	DWORD PTR ?clk_to_seconds@CPU@@3MA, xmm0 ; CPU::clk_to_seconds
	xorps	xmm0, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR ?clk_to_milisec@CPU@@3MA, xmm0 ; CPU::clk_to_milisec
	cvtpd2ps xmm0, xmm2
	movss	DWORD PTR ?clk_to_microsec@CPU@@3MA, xmm0 ; CPU::clk_to_microsec

; 212  : 	}

	add	rsp, 40					; 00000028H
	ret	0
$LN43@Detect:
?Detect@CPU@@YAXXZ ENDP					; CPU::Detect
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?m24@FPU@@YAXXZ PROC					; FPU::m24

; 24   : 	XRCORE_API void 	m24		(void)	{

$LN4:
	sub	rsp, 40					; 00000028H

; 25   : 		_control87	( _PC_24,   MCW_PC );

	mov	edx, 196608				; 00030000H
	mov	ecx, 131072				; 00020000H
	call	QWORD PTR __imp__control87

; 26   : 		_control87	( _RC_CHOP, MCW_RC );

	mov	edx, 768				; 00000300H
	mov	ecx, edx

; 27   : 	}

	add	rsp, 40					; 00000028H

; 26   : 		_control87	( _RC_CHOP, MCW_RC );

	rex_jmp	QWORD PTR __imp__control87
?m24@FPU@@YAXXZ ENDP					; FPU::m24
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?m53@FPU@@YAXXZ PROC					; FPU::m53

; 32   : 	XRCORE_API void 	m53		(void)	{

$LN4:
	sub	rsp, 40					; 00000028H

; 33   : 		_control87	( _PC_53,   MCW_PC );

	mov	edx, 196608				; 00030000H
	mov	ecx, 65536				; 00010000H
	call	QWORD PTR __imp__control87

; 34   : 		_control87	( _RC_CHOP, MCW_RC );

	mov	edx, 768				; 00000300H
	mov	ecx, edx

; 35   : 	}

	add	rsp, 40					; 00000028H

; 34   : 		_control87	( _RC_CHOP, MCW_RC );

	rex_jmp	QWORD PTR __imp__control87
?m53@FPU@@YAXXZ ENDP					; FPU::m53
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?m53r@FPU@@YAXXZ PROC					; FPU::m53r

; 36   : 	XRCORE_API void 	m53r	(void)	{

$LN4:
	sub	rsp, 40					; 00000028H

; 37   : 		_control87	( _PC_53,   MCW_PC );

	mov	edx, 196608				; 00030000H
	mov	ecx, 65536				; 00010000H
	call	QWORD PTR __imp__control87

; 38   : 		_control87	( _RC_NEAR, MCW_RC );

	mov	edx, 768				; 00000300H
	xor	ecx, ecx

; 39   : 	}

	add	rsp, 40					; 00000028H

; 38   : 		_control87	( _RC_NEAR, MCW_RC );

	rex_jmp	QWORD PTR __imp__control87
?m53r@FPU@@YAXXZ ENDP					; FPU::m53r
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?m64@FPU@@YAXXZ PROC					; FPU::m64

; 40   : 	XRCORE_API void 	m64		(void)	{

$LN4:
	sub	rsp, 40					; 00000028H

; 41   : 		_control87	( _PC_64,   MCW_PC );

	mov	edx, 196608				; 00030000H
	xor	ecx, ecx
	call	QWORD PTR __imp__control87

; 42   : 		_control87	( _RC_CHOP, MCW_RC );

	mov	edx, 768				; 00000300H
	mov	ecx, edx

; 43   : 	}

	add	rsp, 40					; 00000028H

; 42   : 		_control87	( _RC_CHOP, MCW_RC );

	rex_jmp	QWORD PTR __imp__control87
?m64@FPU@@YAXXZ ENDP					; FPU::m64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
?initialize@FPU@@YAXXZ PROC				; FPU::initialize

; 49   : 	void		initialize		()				{}

	ret	0
?initialize@FPU@@YAXXZ ENDP				; FPU::initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrdebugnew.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
tv133 = 48
tv132 = 48
tv131 = 48
tv130 = 48
?_initialize_cpu_thread@@YAXXZ PROC			; _initialize_cpu_thread

; 271  : {

$LN15:
	sub	rsp, 40					; 00000028H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrdebugnew.cpp

; 924  : 		std::set_terminate				(_terminate);

	lea	rcx, OFFSET FLAT:?_terminate@@YAXXZ	; _terminate
	call	QWORD PTR __imp_?set_terminate@@YAP6AXXZP6AXXZ@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 29   : 		_control87	( _PC_24,   MCW_PC );

	mov	edx, 196608				; 00030000H
	mov	ecx, 131072				; 00020000H
	call	QWORD PTR __imp__control87

; 30   : 		_control87	( _RC_NEAR, MCW_RC );

	mov	edx, 768				; 00000300H
	xor	ecx, ecx
	call	QWORD PTR __imp__control87

; 272  : 	debug_on_thread_spawn	();
; 273  : #ifndef XRCORE_STATIC
; 274  : 	// fpu & sse 
; 275  : 	FPU::m24r	();
; 276  : #endif  // XRCORE_STATIC
; 277  : 	if (CPU::ID.feature&_CPU_FEATURE_SSE)	{

	test	BYTE PTR ?ID@CPU@@3U_processor_info@@A+108, 4
	je	SHORT $LN10@initialize

; 278  : 		//_mm_setcsr ( _mm_getcsr() | (_MM_FLUSH_ZERO_ON+_MM_DENORMALS_ZERO_ON) );
; 279  : 		_MM_SET_FLUSH_ZERO_MODE			(_MM_FLUSH_ZERO_ON);

	stmxcsr	DWORD PTR tv130[rsp]
	mov	eax, DWORD PTR tv130[rsp]
	bts	eax, 15
	mov	DWORD PTR tv131[rsp], eax
	ldmxcsr	DWORD PTR tv131[rsp]

; 280  : 		if (_denormals_are_zero_supported)	{

	cmp	DWORD PTR _denormals_are_zero_supported, 0
	je	SHORT $LN10@initialize

; 281  : 			__try	{
; 282  : 				_MM_SET_DENORMALS_ZERO_MODE	(_MM_DENORMALS_ZERO_ON);

	stmxcsr	DWORD PTR tv132[rsp]
	mov	eax, DWORD PTR tv132[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR tv133[rsp], eax
	ldmxcsr	DWORD PTR tv133[rsp]
	jmp	SHORT $LN10@initialize
$LN8@initialize:

; 283  : 			} __except(EXCEPTION_EXECUTE_HANDLER) {
; 284  : 				_denormals_are_zero_supported	= FALSE;

	mov	DWORD PTR _denormals_are_zero_supported, 0
$LN10@initialize:

; 285  : 			}
; 286  : 		}
; 287  : 	}
; 288  : }

	add	rsp, 40					; 00000028H
	ret	0
?_initialize_cpu_thread@@YAXXZ ENDP			; _initialize_cpu_thread
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
tn$ = 32
name$ = 80
?thread_name@@YAXPEBD@Z PROC				; thread_name

; 299  : {

$LN9:
	sub	rsp, 72					; 00000048H

; 300  : 	THREAD_NAME		tn;
; 301  : 	tn.dwType		= 0x1000;

	mov	DWORD PTR tn$[rsp], 4096		; 00001000H

; 302  : 	tn.szName		= name;

	mov	QWORD PTR tn$[rsp+8], rcx

; 303  : 	tn.dwThreadID	= DWORD(-1);

	mov	DWORD PTR tn$[rsp+16], -1		; ffffffffH

; 304  : 	tn.dwFlags		= 0;

	mov	DWORD PTR tn$[rsp+20], 0

; 305  : 	__try
; 306  : 	{
; 307  : #ifdef _WIN64
; 308  : 		RaiseException(0x406D1388,0,sizeof(tn)/sizeof(DWORD),(ULONG_PTR*)&tn);

	lea	r9, QWORD PTR tn$[rsp]
	xor	edx, edx
	mov	ecx, 1080890248				; 406d1388H
	lea	r8d, QWORD PTR [rdx+6]
	call	QWORD PTR __imp_RaiseException

; 309  : #else
; 310  : 		RaiseException(0x406D1388,0,sizeof(tn)/sizeof(DWORD),(DWORD*)&tn);
; 311  : #endif
; 312  : 	}

	jmp	SHORT $LN8@thread_nam
$LN6@thread_nam:
$LN8@thread_nam:

; 313  : 	__except(EXCEPTION_CONTINUE_EXECUTION)
; 314  : 	{
; 315  : 	}
; 316  : }

	add	rsp, 72					; 00000048H
	ret	0
?thread_name@@YAXPEBD@Z ENDP				; thread_name
_TEXT	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
tn$ = 32
name$ = 80
?filt$0@?0??thread_name@@YAXPEBD@Z@4HA PROC		; `thread_name'::`1'::filt$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
$LN5@filt$0:

; 313  : 	__except(EXCEPTION_CONTINUE_EXECUTION)

	or	eax, -1
$LN7@filt$0:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
?filt$0@?0??thread_name@@YAXPEBD@Z@4HA ENDP		; `thread_name'::`1'::filt$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
_params$ = 48
?thread_entry@@YAXPEAX@Z PROC				; thread_entry

; 325  : void	__cdecl			thread_entry	(void*	_params )	{

$LN34:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 326  : 	// initialize
; 327  : 	THREAD_STARTUP*		startup	= (THREAD_STARTUP*)_params	;
; 328  : 	thread_name			(startup->name);

	mov	rcx, QWORD PTR [rcx+8]
	call	?thread_name@@YAXPEBD@Z			; thread_name

; 329  : 	thread_t*			entry	= startup->entry;

	mov	rsi, QWORD PTR [rbx]

; 330  : 	void*				arglist	= startup->args;

	mov	rbp, QWORD PTR [rbx+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 130  : 	stat_calls++;

	inc	DWORD PTR ?Memory@@3VxrMemory@@A

; 25   : ICF	u32		get_header			(void* P)	{	return	(u32)*acc_header(P);				}

	movzx	eax, BYTE PTR [rbx-1]

; 24   : ICF	u8*		acc_header			(void* P)	{	u8*		_P		= (u8*)P;	return	_P-1;	}

	lea	rdi, QWORD PTR [rbx-1]

; 131  : #ifdef USE_MEMORY_MONITOR
; 132  : 	memory_monitor::monitor_free(P);
; 133  : #endif // USE_MEMORY_MONITOR
; 134  : 
; 135  : #ifdef PURE_ALLOC
; 136  : 	if (g_use_pure_alloc) {
; 137  : 		free					(P);
; 138  : 		return;
; 139  : 	}
; 140  : #endif // PURE_ALLOC
; 141  : 
; 142  : #ifdef DEBUG_MEMORY_MANAGER
; 143  : 	if(g_globalCheckAddr==P)
; 144  : 		__asm int 3;
; 145  : #endif // DEBUG_MEMORY_MANAGER
; 146  : 
; 147  : #ifdef DEBUG_MEMORY_MANAGER
; 148  : 	if (mem_initialized)		debug_cs.Enter		();
; 149  : #endif // DEBUG_MEMORY_MANAGER
; 150  : 	if		(debug_mode)		dbg_unregister	(P);
; 151  : 	u32	pool					= get_header	(P);
; 152  : 	void* _real					= (void*)(((u8*)P)-1);
; 153  : 	if (mem_generic==pool)		

	cmp	eax, 55					; 00000037H
	jne	SHORT $LN10@thread_ent
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp

; 293  : 	if (memblock == NULL)

	test	rdi, rdi
	je	SHORT $LN31@thread_ent

; 294  : 		return;
; 295  : 
; 296  : 	ptr = (uintptr_t)memblock;
; 297  : 
; 298  : 	/* ptr points to the pointer to starting of the memory block */
; 299  : 	ptr = (ptr & ~(PTR_SZ -1)) - PTR_SZ;

	and	rdi, -8

; 300  : 
; 301  : 	/* ptr is the pointer to the start of memory block*/
; 302  : 	ptr = *((uintptr_t *)ptr);
; 303  : 	free((void *)ptr);

	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 157  : 	} else {

	jmp	SHORT $LN31@thread_ent
$LN10@thread_ent:

; 160  : 		mem_pools[pool].destroy	(_real);

	lea	rdx, QWORD PTR [rax+rax*4]
	lea	rax, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 64   : 	EnterCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rax+rdx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 160  : 		mem_pools[pool].destroy	(_real);

	lea	rbx, QWORD PTR [rax+rdx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 64   : 	EnterCriticalSection			( (CRITICAL_SECTION*)pmutex );

	call	QWORD PTR __imp_EnterCriticalSection
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 46   : 		*access(P)		= list;

	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rbx]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 47   : 		list			= (u8*)P;

	mov	QWORD PTR [rbx+32], rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	call	QWORD PTR __imp_LeaveCriticalSection
$LN31@thread_ent:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 332  : 	_initialize_cpu_thread		();

	call	?_initialize_cpu_thread@@YAXXZ		; _initialize_cpu_thread

; 333  : 
; 334  : 	// call
; 335  : 	entry				(arglist);

	mov	rcx, rbp
	mov	rax, rsi

; 336  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi

; 333  : 
; 334  : 	// call
; 335  : 	entry				(arglist);

	rex_jmp	rax
?thread_entry@@YAXPEAX@Z ENDP				; thread_entry
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp
_TEXT	SEGMENT
entry$ = 48
name$ = 56
stack$ = 64
arglist$ = 72
?thread_spawn@@YAXP6AXPEAX@ZPEBDI0@Z PROC		; thread_spawn

; 339  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rcx
	mov	rsi, rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 24
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 339  : {

	mov	rbx, r9
	mov	edi, r8d
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc

; 69   : 	return new (ptr) T();

	test	rax, rax
	je	SHORT $LN6@thread_spa
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rcx
$LN6@thread_spa:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.cpp

; 344  : 	_beginthread		(thread_entry,stack,startup);

	lea	rcx, OFFSET FLAT:?thread_entry@@YAXPEAX@Z ; thread_entry
	mov	r8, rax
	mov	edx, edi
	mov	QWORD PTR [rax], rbp
	mov	QWORD PTR [rax+8], rsi
	mov	QWORD PTR [rax+16], rbx

; 345  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi

; 344  : 	_beginthread		(thread_entry,stack,startup);

	rex_jmp	QWORD PTR __imp__beginthread
?thread_spawn@@YAXP6AXPEAX@ZPEBDI0@Z ENDP		; thread_spawn
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_matrix.h
;	COMDAT ?identity@?$_matrix@M@@QEAAAEAU1@XZ
_TEXT	SEGMENT
this$dead$ = 8
?identity@?$_matrix@M@@QEAAAEAU1@XZ PROC		; _matrix<float>::identity, COMDAT

; 71   : 	{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003f80000000000000

; 72   : 		_11=1; _12=0; _13=0; _14=0;
; 73   : 		_21=0; _22=1; _23=0; _24=0;
; 74   : 		_31=0; _32=0; _33=1; _34=0;
; 75   : 		_41=0; _42=0; _43=0; _44=1;
; 76   : 		return *this;

	lea	rax, OFFSET FLAT:?Fidentity@@3U?$_matrix@M@@A ; Fidentity
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A+16, xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A+32, xmm0
	movaps	XMMWORD PTR ?Fidentity@@3U?$_matrix@M@@A+48, xmm1

; 77   : 	}

	ret	0
?identity@?$_matrix@M@@QEAAAEAU1@XZ ENDP		; _matrix<float>::identity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_matrix.h
;	COMDAT ?identity@?$_matrix@N@@QEAAAEAU1@XZ
_TEXT	SEGMENT
this$dead$ = 8
?identity@?$_matrix@N@@QEAAAEAU1@XZ PROC		; _matrix<double>::identity, COMDAT

; 71   : 	{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1

; 72   : 		_11=1; _12=0; _13=0; _14=0;
; 73   : 		_21=0; _22=1; _23=0; _24=0;
; 74   : 		_31=0; _32=0; _33=1; _34=0;
; 75   : 		_41=0; _42=0; _43=0; _44=1;
; 76   : 		return *this;

	lea	rax, OFFSET FLAT:?Didentity@@3U?$_matrix@N@@A ; Didentity
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+16, xmm1
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+48, xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+80, xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+32, xmm0
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+64, xmm0
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+96, xmm0
	movaps	XMMWORD PTR ?Didentity@@3U?$_matrix@N@@A+112, xmm1

; 77   : 	}

	ret	0
?identity@?$_matrix@N@@QEAAAEAU1@XZ ENDP		; _matrix<double>::identity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z
_TEXT	SEGMENT
ptr$ = 48
??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z PROC ; xr_delete<THREAD_STARTUP>, COMDAT

; 150  : {

$LN37:
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 130  : 	stat_calls++;

	inc	DWORD PTR ?Memory@@3VxrMemory@@A
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 144  : 		Memory.mem_free	(ptr);

	mov	rdi, QWORD PTR [rcx]

; 150  : {

	mov	rsi, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 25   : ICF	u32		get_header			(void* P)	{	return	(u32)*acc_header(P);				}

	movzx	eax, BYTE PTR [rdi-1]

; 24   : ICF	u8*		acc_header			(void* P)	{	u8*		_P		= (u8*)P;	return	_P-1;	}

	dec	rdi

; 131  : #ifdef USE_MEMORY_MONITOR
; 132  : 	memory_monitor::monitor_free(P);
; 133  : #endif // USE_MEMORY_MONITOR
; 134  : 
; 135  : #ifdef PURE_ALLOC
; 136  : 	if (g_use_pure_alloc) {
; 137  : 		free					(P);
; 138  : 		return;
; 139  : 	}
; 140  : #endif // PURE_ALLOC
; 141  : 
; 142  : #ifdef DEBUG_MEMORY_MANAGER
; 143  : 	if(g_globalCheckAddr==P)
; 144  : 		__asm int 3;
; 145  : #endif // DEBUG_MEMORY_MANAGER
; 146  : 
; 147  : #ifdef DEBUG_MEMORY_MANAGER
; 148  : 	if (mem_initialized)		debug_cs.Enter		();
; 149  : #endif // DEBUG_MEMORY_MANAGER
; 150  : 	if		(debug_mode)		dbg_unregister	(P);
; 151  : 	u32	pool					= get_header	(P);
; 152  : 	void* _real					= (void*)(((u8*)P)-1);
; 153  : 	if (mem_generic==pool)		

	cmp	eax, 55					; 00000037H
	jne	SHORT $LN11@xr_delete
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp

; 293  : 	if (memblock == NULL)

	test	rdi, rdi
	je	SHORT $LN34@xr_delete

; 294  : 		return;
; 295  : 
; 296  : 	ptr = (uintptr_t)memblock;
; 297  : 
; 298  : 	/* ptr points to the pointer to starting of the memory block */
; 299  : 	ptr = (ptr & ~(PTR_SZ -1)) - PTR_SZ;

	and	rdi, -8

; 300  : 
; 301  : 	/* ptr is the pointer to the start of memory block*/
; 302  : 	ptr = *((uintptr_t *)ptr);
; 303  : 	free((void *)ptr);

	mov	rcx, QWORD PTR [rdi-8]
	call	QWORD PTR __imp_free
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 154  : 		ptr = NULL;

	mov	QWORD PTR [rsi], 0

; 155  : 	}
; 156  : }

	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN34@xr_delete:

; 154  : 		ptr = NULL;

	mov	QWORD PTR [rcx], 0

; 155  : 	}
; 156  : }

	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@xr_delete:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 160  : 		mem_pools[pool].destroy	(_real);

	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
	mov	QWORD PTR [rsp+48], rbx
	lea	rbx, QWORD PTR [rax+rcx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 64   : 	EnterCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rax+rcx*8]
	call	QWORD PTR __imp_EnterCriticalSection
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 46   : 		*access(P)		= list;

	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rbx]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 47   : 		list			= (u8*)P;

	mov	QWORD PTR [rbx+32], rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	call	QWORD PTR __imp_LeaveCriticalSection
	mov	rbx, QWORD PTR [rsp+48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 154  : 		ptr = NULL;

	mov	QWORD PTR [rsi], 0

; 155  : 	}
; 156  : }

	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$xr_delete@UTHREAD_STARTUP@@@@YAXAEAPEAUTHREAD_STARTUP@@@Z ENDP ; xr_delete<THREAD_STARTUP>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ
_TEXT	SEGMENT
??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ PROC ; xr_new<THREAD_STARTUP>, COMDAT

; 67   : {

$LN8:
	sub	rsp, 40					; 00000028H

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 24
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc

; 69   : 	return new (ptr) T();

	test	rax, rax
	je	SHORT $LN3@xr_new
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rcx

; 70   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN3@xr_new:
	add	rsp, 40					; 00000028H
	ret	0
??$xr_new@UTHREAD_STARTUP@@@@YAPEAUTHREAD_STARTUP@@XZ ENDP ; xr_new<THREAD_STARTUP>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z
_TEXT	SEGMENT
this$dead$ = 48
ptr$ = 56
??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z PROC ; xr_special_free<0,THREAD_STARTUP>::operator(), COMDAT

; 142  : 	{

$LN29:
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 130  : 	stat_calls++;

	inc	DWORD PTR ?Memory@@3VxrMemory@@A
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 144  : 		Memory.mem_free	(ptr);

	mov	rdi, QWORD PTR [rdx]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 25   : ICF	u32		get_header			(void* P)	{	return	(u32)*acc_header(P);				}

	movzx	eax, BYTE PTR [rdi-1]

; 24   : ICF	u8*		acc_header			(void* P)	{	u8*		_P		= (u8*)P;	return	_P-1;	}

	dec	rdi

; 131  : #ifdef USE_MEMORY_MONITOR
; 132  : 	memory_monitor::monitor_free(P);
; 133  : #endif // USE_MEMORY_MONITOR
; 134  : 
; 135  : #ifdef PURE_ALLOC
; 136  : 	if (g_use_pure_alloc) {
; 137  : 		free					(P);
; 138  : 		return;
; 139  : 	}
; 140  : #endif // PURE_ALLOC
; 141  : 
; 142  : #ifdef DEBUG_MEMORY_MANAGER
; 143  : 	if(g_globalCheckAddr==P)
; 144  : 		__asm int 3;
; 145  : #endif // DEBUG_MEMORY_MANAGER
; 146  : 
; 147  : #ifdef DEBUG_MEMORY_MANAGER
; 148  : 	if (mem_initialized)		debug_cs.Enter		();
; 149  : #endif // DEBUG_MEMORY_MANAGER
; 150  : 	if		(debug_mode)		dbg_unregister	(P);
; 151  : 	u32	pool					= get_header	(P);
; 152  : 	void* _real					= (void*)(((u8*)P)-1);
; 153  : 	if (mem_generic==pool)		

	cmp	eax, 55					; 00000037H
	jne	SHORT $LN5@operator
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp

; 293  : 	if (memblock == NULL)

	test	rdi, rdi
	je	SHORT $LN26@operator

; 294  : 		return;
; 295  : 
; 296  : 	ptr = (uintptr_t)memblock;
; 297  : 
; 298  : 	/* ptr points to the pointer to starting of the memory block */
; 299  : 	ptr = (ptr & ~(PTR_SZ -1)) - PTR_SZ;

	and	rdi, -8

; 303  : 	free((void *)ptr);

	mov	rcx, QWORD PTR [rdi-8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 145  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_align.cpp

; 303  : 	free((void *)ptr);

	rex_jmp	QWORD PTR __imp_free
$LN5@operator:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.cpp

; 160  : 		mem_pools[pool].destroy	(_real);

	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, OFFSET FLAT:?mem_pools@@3PAVMEMPOOL@@A ; mem_pools
	mov	QWORD PTR [rsp+48], rbx
	lea	rbx, QWORD PTR [rax+rcx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 64   : 	EnterCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rax+rcx*8]
	call	QWORD PTR __imp_EnterCriticalSection
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 46   : 		*access(P)		= list;

	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	mov	rcx, QWORD PTR [rbx]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_pool.h

; 47   : 		list			= (u8*)P;

	mov	QWORD PTR [rbx+32], rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrsyncronize.cpp

; 69   : 	LeaveCriticalSection			( (CRITICAL_SECTION*)pmutex );

	call	QWORD PTR __imp_LeaveCriticalSection
	mov	rbx, QWORD PTR [rsp+48]
$LN26@operator:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory_subst_msvc.h

; 145  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??R?$xr_special_free@$0A@UTHREAD_STARTUP@@@@QEAAXAEAPEAUTHREAD_STARTUP@@@Z ENDP ; xr_special_free<0,THREAD_STARTUP>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_math.h
;	COMDAT ?GetCLK@CPU@@YA_KXZ
_TEXT	SEGMENT
?GetCLK@CPU@@YA_KXZ PROC				; CPU::GetCLK, COMDAT

; 40   : 			return __rdtsc();

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx

; 41   : 		}

	ret	0
?GetCLK@CPU@@YA_KXZ ENDP				; CPU::GetCLK
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_random.h
;	COMDAT ??0CRandom@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0CRandom@@QEAA@XZ PROC				; CRandom::CRandom, COMDAT

; 26   : 	CRandom()			: holdrand(1)				{};

	mov	DWORD PTR ?Random@@3VCRandom@@A, 1	; Random
	lea	rax, OFFSET FLAT:?Random@@3VCRandom@@A	; Random
	ret	0
??0CRandom@@QEAA@XZ ENDP				; CRandom::CRandom
_TEXT	ENDS
END
