; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??0?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@QEAA@XZ ; xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> > const ,void * __ptr64> >::xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> > const ,void * __ptr64> >
PUBLIC	??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >
PUBLIC	??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ ; std::map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >::map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >
PUBLIC	??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ ; xr_map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >::xr_map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z ; std::operator+<char,std::char_traits<char>,xalloc<char> >
PUBLIC	?strext@@YAPEADPEBD@Z				; strext
PUBLIC	?strconcat@@YAPEBDHPEADPEBD111@Z		; strconcat
PUBLIC	?strconcat@@YAPEBDHPEADPEBD11@Z			; strconcat
PUBLIC	?xr_EFS@@3PEAVEFS_Utils@@EA			; xr_EFS
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_02GFKOMOKH@?5?$CI?$AA@			; `string'
PUBLIC	??_C@_0M@IAFBEOBH@Open?5a?5File?$AA@		; `string'
PUBLIC	??_C@_0BI@KCPLAHKE@Too?5many?5file?5selected?4?$AA@ ; `string'
PUBLIC	??_C@_0M@KIPHFBFH@Save?5a?5File?$AA@		; `string'
PUBLIC	??_C@_08DPIBIONE@?$CFs?$CF02d?$CFs?$AA@		; `string'
PUBLIC	??_C@_0L@FILKDGJI@?$CFs?$CFs?$CF02d?$CFs?$AA@	; `string'
EXTRN	__imp_strrchr:PROC
EXTRN	__imp_GetOpenFileNameA:PROC
EXTRN	__imp_strlwr:PROC
EXTRN	__imp_GetForegroundWindow:PROC
EXTRN	__imp_GetSaveFileNameA:PROC
EXTRN	__imp_CommDlgExtendedError:PROC
	ALIGN	8

?xr_EFS@@3PEAVEFS_Utils@@EA DQ 01H DUP (?)		; xr_EFS
;	COMDAT ??_C@_0L@FILKDGJI@?$CFs?$CFs?$CF02d?$CFs?$AA@
CONST	SEGMENT
??_C@_0L@FILKDGJI@?$CFs?$CFs?$CF02d?$CFs?$AA@ DB '%s%s%02d%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPIBIONE@?$CFs?$CF02d?$CFs?$AA@
CONST	SEGMENT
??_C@_08DPIBIONE@?$CFs?$CF02d?$CFs?$AA@ DB '%s%02d%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIPHFBFH@Save?5a?5File?$AA@
CONST	SEGMENT
??_C@_0M@KIPHFBFH@Save?5a?5File?$AA@ DB 'Save a File', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KCPLAHKE@Too?5many?5file?5selected?4?$AA@
CONST	SEGMENT
??_C@_0BI@KCPLAHKE@Too?5many?5file?5selected?4?$AA@ DB 'Too many file sel'
	DB	'ected.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IAFBEOBH@Open?5a?5File?$AA@
CONST	SEGMENT
??_C@_0M@IAFBEOBH@Open?5a?5File?$AA@ DB 'Open a File', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GFKOMOKH@?5?$CI?$AA@
CONST	SEGMENT
??_C@_02GFKOMOKH@?5?$CI?$AA@ DB ' (', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
;	COMDAT ?strext@@YAPEADPEBD@Z
_TEXT	SEGMENT
S$ = 8
?strext@@YAPEADPEBD@Z PROC				; strext, COMDAT

; 267  : {	return (char*) strrchr(S,'.');	}

	mov	edx, 46					; 0000002eH
	rex_jmp	QWORD PTR __imp_strrchr
?strext@@YAPEADPEBD@Z ENDP				; strext
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@QEAA@XZ PROC ; xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> > const ,void * __ptr64> >::xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> > const ,void * __ptr64> >, COMDAT

; 76   : 													xalloc			()										{	}

	mov	rax, rcx
	ret	0
??0?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@QEAA@XZ ENDP ; xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> > const ,void * __ptr64> >::xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> > const ,void * __ptr64> >
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
pdata	SEGMENT
$pdata$?strconcat@@YAPEBDHPEADPEBD111@Z DD imagerel $LN9
	DD	imagerel $LN9+193
	DD	imagerel $unwind$?strconcat@@YAPEBDHPEADPEBD111@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strconcat@@YAPEBDHPEADPEBD111@Z DD 0a1901H
	DD	0a7419H
	DD	096419H
	DD	085419H
	DD	0e0153219H
	DD	0c011d013H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?strconcat@@YAPEBDHPEADPEBD111@Z
_TEXT	SEGMENT
dest_sz$ = 64
dest$ = 72
S1$ = 80
S2$ = 88
S3$ = 96
S4$ = 104
?strconcat@@YAPEBDHPEADPEBD111@Z PROC			; strconcat, COMDAT

; 194  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbp
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H
	movsxd	r13, ecx

; 195  : 	u32 l1 = xr_strlen(S1);

	or	rcx, -1
	xor	eax, eax
	mov	rdi, r8
	mov	r14, rdx

; 196  : 	u32 l2 = xr_strlen(S2);
; 197  : 	u32 l3 = xr_strlen(S3);
; 198  : 	strcpy_s(dest,dest_sz,S1);

	mov	rdx, r13
	repne scasb
	mov	rdi, r9
	mov	rbp, r9
	not	rcx
	lea	r12, QWORD PTR [rcx-1]
	or	rcx, -1
	repne scasb
	mov	rdi, QWORD PTR S3$[rsp]
	not	rcx
	lea	rsi, QWORD PTR [rcx-1]
	or	rcx, -1
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	rcx, r14
	call	QWORD PTR __imp_strcpy_s

; 199  : 	strcat_s(dest,dest_sz-l1,S2);

	mov	edx, r13d
	mov	r8, rbp
	sub	edx, r12d
	mov	rcx, r14
	call	QWORD PTR __imp_strcat_s

; 200  : 	strcat_s(dest,dest_sz-l1-l2,S3);

	mov	r8, QWORD PTR S3$[rsp]
	mov	edx, r13d
	sub	edx, esi
	mov	rcx, r14
	sub	edx, r12d
	call	QWORD PTR __imp_strcat_s

; 201  : 	strcat_s(dest,dest_sz-l1-l2-l3,S4);

	mov	r8, QWORD PTR S4$[rsp]
	sub	r13d, edi
	sub	r13d, esi
	mov	rcx, r14
	sub	r13d, r12d
	mov	edx, r13d
	call	QWORD PTR __imp_strcat_s

; 202  : 
; 203  : 	return dest;
; 204  : //.	return strcat(strcat(strcat(strcpy(dest,S1),S2),S3),S4);
; 205  : }

	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rdi, QWORD PTR [rsp+80]
	mov	rax, r14
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	r12
	ret	0
?strconcat@@YAPEBDHPEADPEBD111@Z ENDP			; strconcat
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strconcat@@YAPEBDHPEADPEBD11@Z DD imagerel $LN7
	DD	imagerel $LN7+148
	DD	imagerel $unwind$?strconcat@@YAPEBDHPEADPEBD11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strconcat@@YAPEBDHPEADPEBD11@Z DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?strconcat@@YAPEBDHPEADPEBD11@Z
_TEXT	SEGMENT
dest$ = 64
S1$ = 72
S2$ = 80
S3$ = 88
?strconcat@@YAPEBDHPEADPEBD11@Z PROC			; strconcat, COMDAT

; 181  : {

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 32					; 00000020H
	mov	r13, rcx

; 182  : 	u32 l1 = xr_strlen(S1);

	or	rcx, -1
	xor	eax, eax
	mov	rdi, rdx
	mov	rbp, r8

; 183  : 	u32 l2 = xr_strlen(S2);
; 184  : 	strcpy_s(dest,dest_sz,S1);

	mov	ebx, 520				; 00000208H
	repne scasb
	mov	rdi, r8
	mov	r8, rdx
	not	rcx
	mov	edx, ebx
	mov	r12, r9
	lea	rsi, QWORD PTR [rcx-1]
	or	rcx, -1
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	rcx, r13
	call	QWORD PTR __imp_strcpy_s

; 185  : 	strcat_s(dest,dest_sz-l1,S2);

	mov	edx, ebx
	mov	r8, rbp
	sub	edx, esi
	mov	rcx, r13
	call	QWORD PTR __imp_strcat_s

; 186  : 	strcat_s(dest,dest_sz-l1-l2,S3);

	sub	ebx, edi
	mov	r8, r12
	sub	ebx, esi
	mov	rcx, r13
	mov	edx, ebx
	call	QWORD PTR __imp_strcat_s

; 187  : 
; 188  : 	return dest;
; 189  : //.	return strcat(strcat(strcpy(dest,S1),S2),S3);
; 190  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rax, r13
	add	rsp, 32					; 00000020H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?strconcat@@YAPEBDHPEADPEBD11@Z ENDP			; strconcat
PUBLIC	?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z	; EFS_Utils::GenerateName
pdata	SEGMENT
$pdata$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD imagerel $LN19
	DD	imagerel $LN19+11
	DD	imagerel $unwind$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$pdata$3$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD imagerel $LN19+11
	DD	imagerel $LN19+47
	DD	imagerel $chain$3$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$pdata$4$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD imagerel $LN19+47
	DD	imagerel $LN19+154
	DD	imagerel $chain$4$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$pdata$5$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD imagerel $LN19+154
	DD	imagerel $LN19+384
	DD	imagerel $chain$5$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$pdata$6$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD imagerel $LN19+384
	DD	imagerel $LN19+410
	DD	imagerel $chain$6$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD 030b01H
	DD	04c010bH
	DD	07004H
$chain$3$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD 081221H
	DD	04ad412H
	DD	04bc40cH
	DD	0506408H
	DD	04f5404H
	DD	imagerel $LN19
	DD	imagerel $LN19+11
	DD	imagerel $unwind$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$chain$4$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD 020421H
	DD	04e3404H
	DD	imagerel $LN19+11
	DD	imagerel $LN19+47
	DD	imagerel $chain$3$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$chain$5$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD 021H
	DD	imagerel $LN19+11
	DD	imagerel $LN19+47
	DD	imagerel $chain$3$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
$chain$6$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+11
	DD	imagerel $unwind$?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\filesystem.cpp
xdata	ENDS
_TEXT	SEGMENT
fn$ = 64
this$ = 624
base_path$ = 632
base_name$ = 640
def_ext$ = 648
out_name$ = 656
?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z PROC	; EFS_Utils::GenerateName

; 228  : {

$LN19:
	mov	rax, rsp
	push	rdi
	sub	rsp, 608				; 00000260H
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax-16], r12

; 229  :     int cnt = 0;

	xor	esi, esi
	mov	QWORD PTR [rax-24], r13
	mov	rbp, r8
	mov	r13, r9
	mov	r12, rdx

; 230  : 	string_path fn;
; 231  :     if (base_name)	

	test	r8, r8
	je	SHORT $LN6@GenerateNa

; 232  : 		strconcat		(sizeof(fn), fn, base_path,base_name,def_ext);

	or	rcx, -1
	mov	QWORD PTR [rax+8], rbx
	mov	rdi, rdx
	xor	eax, eax
	repne scasb
	mov	rdi, r8
	mov	r8, rdx
	not	rcx
	mov	edx, 520				; 00000208H
	lea	rbx, QWORD PTR [rcx-1]
	or	rcx, -1
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR fn$[rsp]
	call	QWORD PTR __imp_strcpy_s
	mov	edx, 520				; 00000208H
	lea	rcx, QWORD PTR fn$[rsp]
	sub	edx, ebx
	mov	r8, rbp
	call	QWORD PTR __imp_strcat_s
	mov	edx, 520				; 00000208H
	lea	rcx, QWORD PTR fn$[rsp]
	sub	edx, edi
	mov	r8, r13
	sub	edx, ebx
	call	QWORD PTR __imp_strcat_s
	mov	rbx, QWORD PTR [rsp+624]

; 233  : 	else 			

	jmp	SHORT $LN16@GenerateNa
$LN6@GenerateNa:

; 234  : 		sprintf_s		(fn, sizeof(fn), "%s%02d%s",base_path,cnt++,def_ext);

	mov	QWORD PTR [rsp+40], r9
	mov	r9, rdx
	lea	r8, OFFSET FLAT:??_C@_08DPIBIONE@?$CFs?$CF02d?$CFs?$AA@
	lea	rcx, QWORD PTR fn$[rsp]
	mov	edx, 520				; 00000208H
	mov	DWORD PTR [rsp+32], esi
	call	QWORD PTR __imp_sprintf_s
	mov	esi, 1
$LN16@GenerateNa:

; 235  : 
; 236  : 	while (FS.exist(fn))

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	lea	rdx, QWORD PTR fn$[rsp]
	call	?exist@CLocatorAPI@@QEAAPEBUfile@1@PEBD@Z ; CLocatorAPI::exist
	test	rax, rax
	je	SHORT $LN3@GenerateNa
	npad	8
$LL4@GenerateNa:

; 237  : 	    if (base_name)	
; 238  : 			sprintf_s	(fn, sizeof(fn),"%s%s%02d%s",base_path,base_name,cnt++,def_ext);

	mov	r9, r12
	mov	edx, 520				; 00000208H
	lea	rcx, QWORD PTR fn$[rsp]
	test	rbp, rbp
	je	SHORT $LN2@GenerateNa
	mov	QWORD PTR [rsp+48], r13
	lea	r8, OFFSET FLAT:??_C@_0L@FILKDGJI@?$CFs?$CFs?$CF02d?$CFs?$AA@
	mov	DWORD PTR [rsp+40], esi
	mov	QWORD PTR [rsp+32], rbp
	call	QWORD PTR __imp_sprintf_s

; 239  :         else 			

	jmp	SHORT $LN18@GenerateNa
$LN2@GenerateNa:

; 240  : 			sprintf_s	(fn, sizeof(fn), "%s%02d%s",base_path,cnt++,def_ext);

	lea	r8, OFFSET FLAT:??_C@_08DPIBIONE@?$CFs?$CF02d?$CFs?$AA@
	mov	QWORD PTR [rsp+40], r13
	mov	DWORD PTR [rsp+32], esi
	call	QWORD PTR __imp_sprintf_s
$LN18@GenerateNa:

; 235  : 
; 236  : 	while (FS.exist(fn))

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	lea	rdx, QWORD PTR fn$[rsp]

; 240  : 			sprintf_s	(fn, sizeof(fn), "%s%02d%s",base_path,cnt++,def_ext);

	inc	esi
	call	?exist@CLocatorAPI@@QEAAPEBUfile@1@PEBD@Z ; CLocatorAPI::exist
	test	rax, rax
	jne	SHORT $LL4@GenerateNa
$LN3@GenerateNa:

; 241  :     strcpy(out_name,fn);

	mov	rdi, QWORD PTR out_name$[rsp]
	mov	r13, QWORD PTR [rsp+592]
	mov	r12, QWORD PTR [rsp+600]
	mov	rsi, QWORD PTR [rsp+640]
	mov	rbp, QWORD PTR [rsp+632]
	lea	rcx, QWORD PTR fn$[rsp]
	mov	rax, rdi
	lea	rdx, QWORD PTR fn$[rsp]
	sub	rax, rcx
	npad	11
$LL9@GenerateNa:
	movzx	ecx, BYTE PTR [rdx]
	inc	rdx
	mov	BYTE PTR [rax+rdx-1], cl
	test	cl, cl
	jne	SHORT $LL9@GenerateNa

; 242  : 	return out_name;

	mov	rax, rdi

; 243  : }

	add	rsp, 608				; 00000260H
	pop	rdi
	ret	0
?GenerateName@EFS_Utils@@QEAAPEBDPEBD00PEAD@Z ENDP	; EFS_Utils::GenerateName
PUBLIC	?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z		; MakeFilter
pdata	SEGMENT
$pdata$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z DD imagerel $LN76
	DD	imagerel $LN76+172
	DD	imagerel $unwind$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z
$pdata$0$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z DD imagerel $LN76+172
	DD	imagerel $LN76+704
	DD	imagerel $chain$0$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z
$pdata$1$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z DD imagerel $LN76+704
	DD	imagerel $LN76+733
	DD	imagerel $chain$1$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z DD 0a1c01H
	DD	017641cH
	DD	016541cH
	DD	0f018d21cH
	DD	0d014e016H
	DD	07010c012H
$chain$0$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z DD 020821H
	DD	0153408H
	DD	imagerel $LN76
	DD	imagerel $LN76+172
	DD	imagerel $unwind$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z
$chain$1$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z DD 021H
	DD	imagerel $LN76
	DD	imagerel $LN76+172
	DD	imagerel $unwind$?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
buf$98124 = 48
dest$ = 160
info$ = 168
ext$ = 176
?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z PROC		; MakeFilter

; 70   : {

$LN76:
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 112				; 00000070H
	mov	r15, rdx
	mov	r13, rcx

; 71   : 	ZeroMemory(dest,sizeof(dest));
; 72   :     if (ext){
; 73   :         int icnt=_GetItemCount(ext,';');

	mov	dl, 59					; 0000003bH
	mov	rcx, r8
	mov	r12, r8
	call	?_GetItemCount@@YAHPEBDD@Z		; _GetItemCount

; 74   : 		LPSTR dst=dest;

	mov	rbp, r13
	mov	r14d, eax

; 75   :         if (icnt>1)

	lea	rax, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
	cmp	r14d, 1
	jle	SHORT $LN4@MakeFilter

; 76   : 		{
; 77   :             strconcat		(sizeof(dest),dst,info," (",ext,")");

	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_02GFKOMOKH@?5?$CI?$AA@
	mov	r8, r15
	mov	rdx, r13
	mov	ecx, 1024				; 00000400H
	mov	QWORD PTR [rsp+32], r12
	call	?strconcat@@YAPEBDHPEADPEBD111@Z	; strconcat

; 78   :             dst				+= (xr_strlen(dst)+1);

	or	rcx, -1
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	lea	rbp, QWORD PTR [r13+rcx]

; 79   :             strcpy			(dst,ext);

	mov	rcx, r12
	mov	rdx, rbp
	sub	rdx, r12
	npad	1
$LL8@MakeFilter:
	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	BYTE PTR [rdx+rcx-1], al
	test	al, al
	jne	SHORT $LL8@MakeFilter

; 80   :             dst				+= (xr_strlen(ext)+1);

	xor	eax, eax
	or	rcx, -1
	mov	rdi, r12
	repne scasb
	not	rcx
	mov	eax, ecx
	add	rbp, rax
$LN4@MakeFilter:

; 81   :         }
; 82   :         for (int i=0; i<icnt; i++)

	xor	esi, esi
	test	r14d, r14d
	jle	$LN74@MakeFilter
	mov	QWORD PTR [rsp+168], rbx
	lea	r13, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	npad	5
$LL3@MakeFilter:

; 83   : 		{
; 84   :             string64		buf;
; 85   :             _GetItem		(ext,i,buf,';');

	xor	edi, edi
	mov	rbx, r12
	test	esi, esi
	je	SHORT $LN23@MakeFilter
	npad	7
$LL24@MakeFilter:
	mov	edx, 59					; 0000003bH
	mov	rcx, rbx
	call	QWORD PTR __imp_strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN19@MakeFilter
	inc	edi
	inc	rbx
	cmp	edi, esi
	jb	SHORT $LL24@MakeFilter
$LN23@MakeFilter:
	test	rbx, rbx
	je	SHORT $LN19@MakeFilter
	mov	edx, 59					; 0000003bH
	mov	rcx, rbx
	call	QWORD PTR __imp_strchr
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN29@MakeFilter
	sub	rdi, rbx
	jmp	SHORT $LN30@MakeFilter
$LN29@MakeFilter:
	or	rcx, -1
	mov	rdi, rbx
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	edi, edi
$LN30@MakeFilter:
	lea	rcx, QWORD PTR buf$98124[rsp]
	mov	r8, rdi
	mov	rdx, rbx
	call	QWORD PTR __imp_strncpy
	mov	BYTE PTR buf$98124[rsp+rdi], 0
	jmp	SHORT $LN18@MakeFilter
$LN19@MakeFilter:
	xor	ecx, ecx
	npad	5
$LL22@MakeFilter:
	movzx	eax, BYTE PTR [rcx+r13]
	inc	rcx
	mov	BYTE PTR buf$98124[rsp+rcx-1], al
	test	al, al
	jne	SHORT $LL22@MakeFilter
$LN18@MakeFilter:
	movzx	ecx, BYTE PTR buf$98124[rsp]
	lea	rax, QWORD PTR buf$98124[rsp]
	test	cl, cl
	je	SHORT $LN38@MakeFilter
	npad	2
$LL40@MakeFilter:
	cmp	cl, 32					; 00000020H
	ja	SHORT $LN39@MakeFilter
	movzx	ecx, BYTE PTR [rax+1]
	inc	rax
	test	cl, cl
	jne	SHORT $LL40@MakeFilter
$LN39@MakeFilter:
	lea	rcx, QWORD PTR buf$98124[rsp]
	cmp	rax, rcx
	je	SHORT $LN38@MakeFilter
	movzx	edx, BYTE PTR [rax]
	lea	rcx, QWORD PTR buf$98124[rsp]
	test	dl, dl
	je	SHORT $LN35@MakeFilter
	lea	rdi, QWORD PTR buf$98124[rsp]
	sub	rax, rdi
	npad	2
$LL37@MakeFilter:
	mov	BYTE PTR [rcx], dl
	movzx	edx, BYTE PTR [rax+rcx+1]
	inc	rcx
	test	dl, dl
	jne	SHORT $LL37@MakeFilter
$LN35@MakeFilter:
	mov	BYTE PTR [rcx], 0
$LN38@MakeFilter:
	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR buf$98124[rsp]
	repne scasb
	not	rcx
	lea	rax, QWORD PTR [rcx-1]
	mov	eax, eax
	lea	rcx, QWORD PTR buf$98124[rsp+rax]
	lea	rax, QWORD PTR buf$98124[rsp]
	cmp	rcx, rax
	je	SHORT $LN75@MakeFilter
$LL44@MakeFilter:
	cmp	BYTE PTR [rcx], 32			; 00000020H
	ja	SHORT $LN75@MakeFilter
	lea	rax, QWORD PTR buf$98124[rsp]
	dec	rcx
	cmp	rcx, rax
	jne	SHORT $LL44@MakeFilter
$LN75@MakeFilter:
	mov	BYTE PTR [rcx+1], 0

; 86   :             strconcat		(sizeof(dest), dst,info," (",buf,")");

	or	rcx, -1
	xor	eax, eax
	mov	rdi, r15
	mov	r8, r15
	mov	edx, 1024				; 00000400H
	repne scasb
	lea	rdi, QWORD PTR buf$98124[rsp]
	not	rcx
	lea	rbx, QWORD PTR [rcx-1]
	or	rcx, -1
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	rcx, rbp
	call	QWORD PTR __imp_strcpy_s
	mov	edx, 1024				; 00000400H
	lea	r8, OFFSET FLAT:??_C@_02GFKOMOKH@?5?$CI?$AA@
	sub	edx, ebx
	mov	rcx, rbp
	call	QWORD PTR __imp_strcat_s
	mov	edx, 1022				; 000003feH
	lea	r8, QWORD PTR buf$98124[rsp]
	sub	edx, ebx
	mov	rcx, rbp
	call	QWORD PTR __imp_strcat_s
	mov	edx, 1022				; 000003feH
	lea	r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
	sub	edx, edi
	mov	rcx, rbp
	sub	edx, ebx
	call	QWORD PTR __imp_strcat_s

; 87   :             dst				+= (xr_strlen(dst)+1);

	xor	eax, eax
	or	rcx, -1
	mov	rdi, rbp
	repne scasb
	not	rcx
	mov	eax, ecx

; 88   :             strcpy			(dst, buf);

	lea	rcx, QWORD PTR buf$98124[rsp]
	add	rbp, rax
	lea	rax, QWORD PTR buf$98124[rsp]
	mov	rdx, rbp
	sub	rdx, rax
	npad	7
$LL9@MakeFilter:
	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	BYTE PTR [rdx+rcx-1], al
	test	al, al
	jne	SHORT $LL9@MakeFilter

; 89   :             dst				+= (xr_strlen(buf)+1);

	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR buf$98124[rsp]
	repne scasb
	inc	esi
	not	rcx
	mov	eax, ecx
	add	rbp, rax
	cmp	esi, r14d
	jl	$LL3@MakeFilter

; 90   :         }
; 91   :     }
; 92   : 	return dest;

	mov	rax, QWORD PTR dest$[rsp]
	mov	rbx, QWORD PTR [rsp+168]
	jmp	SHORT $LN1@MakeFilter
$LN74@MakeFilter:
	mov	rax, r13
$LN1@MakeFilter:

; 93   : }

	lea	r11, QWORD PTR [rsp+112]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z ENDP		; MakeFilter
_TEXT	ENDS
PUBLIC	??1EFS_Utils@@UEAA@XZ				; EFS_Utils::~EFS_Utils
pdata	SEGMENT
$pdata$??1EFS_Utils@@UEAA@XZ DD imagerel $LN39
	DD	imagerel $LN39+68
	DD	imagerel $unwind$??1EFS_Utils@@UEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??1EFS_Utils@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T255509 = 48
$T255599 = 48
this$ = 48
??1EFS_Utils@@UEAA@XZ PROC				; EFS_Utils::~EFS_Utils

; 18   : {

$LN39:
	push	rbx
	sub	rsp, 32					; 00000020H

; 19   : }

	lea	rbx, QWORD PTR [rcx+8]
	lea	rax, OFFSET FLAT:??_7EFS_Utils@@6B@
	lea	rdx, QWORD PTR $T255599[rsp]
	mov	QWORD PTR [rcx], rax
	mov	r8, QWORD PTR [rbx+8]
	mov	rcx, rbx
	mov	r9, r8
	mov	r8, QWORD PTR [r8]
	call	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >::erase
	mov	r11, QWORD PTR [rbx+8]
	lea	rcx, QWORD PTR $T255509[rsp]
	mov	QWORD PTR $T255509[rsp], r11
	call	??$xr_free@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@@@YAXAEAPEAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@@Z ; xr_free<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >::_Node>
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1EFS_Utils@@UEAA@XZ ENDP				; EFS_Utils::~EFS_Utils
PUBLIC	?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z ; EFS_Utils::AppendFolderToName
pdata	SEGMENT
$pdata$?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z DD imagerel $LN40
	DD	imagerel $LN40+204
	DD	imagerel $unwind$?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
src_name$ = 56
dest_name$ = 64
depth$ = 72
full_name$ = 80
?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z PROC ; EFS_Utils::AppendFolderToName

; 209  : {

$LN40:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 	shared_str tmp = src_name;

	mov	rcx, QWORD PTR ?g_pStringContainer@@3PEAVstr_container@@EA ; g_pStringContainer
	mov	ebx, r9d
	mov	rsi, r8
	mov	rdi, rdx
	call	?dock@str_container@@QEAAPEAUstr_value@@PEBD@Z ; str_container::dock
	mov	r11, rax
	test	rax, rax
	je	SHORT $LN19@AppendFold
	inc	DWORD PTR [rax]
$LN19@AppendFold:

; 211  :     LPCSTR s 	= src_name;
; 212  :     LPSTR d 	= dest_name;
; 213  :     int sv_depth= depth;
; 214  : 	for (; *s&&depth; s++, d++){

	cmp	BYTE PTR [rdi], 0
	mov	rcx, rsi
	mov	edx, ebx
	je	SHORT $LN39@AppendFold
$LL11@AppendFold:
	test	ebx, ebx
	je	SHORT $LN39@AppendFold

; 215  : 		if (*s=='_'){depth--; *d='\\';}else{*d=*s;}

	movzx	eax, BYTE PTR [rdi]
	cmp	al, 95					; 0000005fH
	jne	SHORT $LN8@AppendFold
	dec	ebx
	mov	BYTE PTR [rcx], 92			; 0000005cH
	jmp	SHORT $LN10@AppendFold
$LN8@AppendFold:
	mov	BYTE PTR [rcx], al
$LN10@AppendFold:

; 211  :     LPCSTR s 	= src_name;
; 212  :     LPSTR d 	= dest_name;
; 213  :     int sv_depth= depth;
; 214  : 	for (; *s&&depth; s++, d++){

	inc	rdi
	inc	rcx
	cmp	BYTE PTR [rdi], 0
	jne	SHORT $LL11@AppendFold
$LN39@AppendFold:

; 216  : 	}
; 217  : 	if (full_name){

	cmp	DWORD PTR full_name$[rsp], 0
	je	SHORT $LN6@AppendFold

; 218  : 		*d			= 0;

	mov	BYTE PTR [rcx], 0

; 219  : 		if (depth<sv_depth)	strcat(dest_name,*tmp);

	cmp	ebx, edx
	jge	SHORT $LN4@AppendFold
	test	r11, r11
	je	SHORT $LN25@AppendFold
	lea	rdx, QWORD PTR [r11+12]
	jmp	SHORT $LN26@AppendFold
$LN25@AppendFold:
	xor	edx, edx
$LN26@AppendFold:
	xor	eax, eax
	or	rcx, -1
	mov	rdi, rsi
	repne scasb
	xor	ecx, ecx
	npad	1
$LL37@AppendFold:
	movzx	eax, BYTE PTR [rdx+rcx]
	inc	rcx
	mov	BYTE PTR [rdi+rcx-2], al
	test	al, al
	jne	SHORT $LL37@AppendFold

; 220  : 	}else{

	jmp	SHORT $LN4@AppendFold
$LN6@AppendFold:

; 221  : 		for (; *s; s++, d++) *d=*s;

	movzx	eax, BYTE PTR [rdi]
	test	al, al
	je	SHORT $LN1@AppendFold
	sub	rdi, rcx
	npad	5
$LL3@AppendFold:
	mov	BYTE PTR [rcx], al
	movzx	eax, BYTE PTR [rdi+rcx+1]
	inc	rcx
	test	al, al
	jne	SHORT $LL3@AppendFold
$LN1@AppendFold:

; 222  : 		*d			= 0;

	mov	BYTE PTR [rcx], 0
$LN4@AppendFold:

; 223  : 	}
; 224  :     return dest_name;

	mov	rax, rsi
	test	r11, r11
	je	SHORT $LN29@AppendFold
	dec	DWORD PTR [r11]
$LN29@AppendFold:

; 225  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z ENDP ; EFS_Utils::AppendFolderToName
_TEXT	ENDS
PUBLIC	?AppendFolderToName@EFS_Utils@@QEAAPEBDPEADHH@Z	; EFS_Utils::AppendFolderToName
pdata	SEGMENT
$pdata$?AppendFolderToName@EFS_Utils@@QEAAPEBDPEADHH@Z DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$?AppendFolderToName@EFS_Utils@@QEAAPEBDPEADHH@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AppendFolderToName@EFS_Utils@@QEAAPEBDPEADHH@Z DD 030901H
	DD	0260109H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
_fn$ = 48
this$ = 320
tex_name$ = 328
depth$ = 336
full_name$ = 344
?AppendFolderToName@EFS_Utils@@QEAAPEBDPEADHH@Z PROC	; EFS_Utils::AppendFolderToName

; 202  : {

$LN5:
	push	rbx
	sub	rsp, 304				; 00000130H

; 203  : 	string256 _fn;
; 204  : 	strcpy(tex_name,AppendFolderToName(tex_name, _fn, depth, full_name));

	mov	DWORD PTR [rsp+32], r9d
	mov	r9d, r8d
	lea	r8, QWORD PTR _fn$[rsp]
	mov	rbx, rdx
	call	?AppendFolderToName@EFS_Utils@@QEAAPEBDPEBDPEADHH@Z ; EFS_Utils::AppendFolderToName
	mov	r8, rbx
	sub	r8, rax
	npad	12
$LL3@AppendFold@2:
	movzx	ecx, BYTE PTR [rax]
	inc	rax
	mov	BYTE PTR [r8+rax-1], cl
	test	cl, cl
	jne	SHORT $LL3@AppendFold@2

; 205  : 	return tex_name;

	mov	rax, rbx

; 206  : }

	add	rsp, 304				; 00000130H
	pop	rbx
	ret	0
?AppendFolderToName@EFS_Utils@@QEAAPEBDPEADHH@Z ENDP	; EFS_Utils::AppendFolderToName
PUBLIC	?GetSaveName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@D0H@Z ; EFS_Utils::GetSaveName
pdata	SEGMENT
$pdata$?GetSaveName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@D0H@Z DD imagerel $LN30
	DD	imagerel $LN30+478
	DD	imagerel $unwind$?GetSaveName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@D0H@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?GetSaveName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@D0H@Z DD 0b1d01H
	DD	0121741dH
	DD	0120641dH
	DD	011f541dH
	DD	011e341dH
	DD	011c011dH
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
ofn$ = 48
path$ = 208
dr$98180 = 720
flt$ = 1248
this$ = 2288
initial$ = 2296
buffer$ = 2304
offset$ = 2312
start_flt_ext$ = 2320
?GetSaveName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@D0H@Z PROC	; EFS_Utils::GetSaveName

; 164  : {

$LN30:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 2272				; 000008e0H

; 165  : 	FS_Path& P			= *FS.get_path(initial);

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	mov	rbx, r9
	mov	rsi, r8
	call	?get_path@CLocatorAPI@@QEAAPEAVFS_Path@@PEBD@Z ; CLocatorAPI::get_path

; 166  : 	string1024 flt;
; 167  : 	MakeFilter(flt,P.m_FilterCaption?P.m_FilterCaption:"",P.m_DefExt);

	lea	rdi, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	r8d, 1024				; 00000400H
	mov	rcx, QWORD PTR [rax+32]
	mov	r12, QWORD PTR [rax+24]
	mov	rbp, rax
	test	rcx, rcx
	cmovne	rdi, rcx
	lea	rcx, QWORD PTR flt$[rsp]
	xor	edx, edx
	call	QWORD PTR ?Memory@@3VxrMemory@@A+16
	test	r12, r12
	je	SHORT $LN20@GetSaveNam
	lea	rcx, QWORD PTR flt$[rsp]
	mov	r8, r12
	mov	rdx, rdi
	call	?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z	; MakeFilter
$LN20@GetSaveNam:

; 168  : 	OPENFILENAME ofn;
; 169  : 	Memory.mem_fill		( &ofn, 0, sizeof(ofn) );

	lea	rcx, QWORD PTR ofn$[rsp]
	xor	edx, edx
	mov	r8d, 152				; 00000098H
	call	QWORD PTR ?Memory@@3VxrMemory@@A+16

; 170  :     if (xr_strlen(buffer)){ 

	or	rcx, -1
	xor	eax, eax
	mov	rdi, rsi
	repne scasb
	not	rcx
	dec	rcx
	test	ecx, ecx
	je	SHORT $LN5@GetSaveNam

; 171  :         string_path		dr;
; 172  :         if (!(buffer[0]=='\\' && buffer[1]=='\\')){ // if !network

	cmp	BYTE PTR [rsi], 92			; 0000005cH
	jne	SHORT $LN6@GetSaveNam
	cmp	BYTE PTR [rsi+1], 92			; 0000005cH
	je	SHORT $LN5@GetSaveNam
$LN6@GetSaveNam:

; 173  :             _splitpath		(buffer,dr,0,0,0);

	lea	rdx, QWORD PTR dr$98180[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp__splitpath

; 174  :             if (0==dr[0])	P._update(buffer,buffer); 

	cmp	BYTE PTR dr$98180[rsp], 0
	jne	SHORT $LN5@GetSaveNam
	mov	r8, rsi
	mov	rdx, rsi
	mov	rcx, rbp
	call	?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z ; FS_Path::_update
$LN5@GetSaveNam:

; 175  :         }
; 176  :     }
; 177  : 	ofn.hwndOwner 		= GetForegroundWindow();

	call	QWORD PTR __imp_GetForegroundWindow
	mov	QWORD PTR ofn$[rsp+8], rax

; 178  : 	ofn.lpstrDefExt 	= P.m_DefExt;

	mov	rax, QWORD PTR [rbp+24]

; 179  : 	ofn.lpstrFile 		= buffer;

	mov	QWORD PTR ofn$[rsp+48], rsi
	mov	QWORD PTR ofn$[rsp+104], rax

; 180  : 	ofn.lpstrFilter 	= flt;

	lea	rax, QWORD PTR flt$[rsp]

; 181  : 	ofn.lStructSize 	= sizeof(ofn);

	mov	DWORD PTR ofn$[rsp], 152		; 00000098H
	mov	QWORD PTR ofn$[rsp+24], rax

; 182  : 	ofn.nMaxFile 		= sizeof(buffer);
; 183  : 	ofn.nFilterIndex 	= start_flt_ext+2;

	mov	eax, DWORD PTR start_flt_ext$[rsp]
	mov	DWORD PTR ofn$[rsp+56], 520		; 00000208H
	add	eax, 2
	mov	DWORD PTR ofn$[rsp+44], eax

; 184  :     ofn.lpstrTitle      = "Save a File";

	lea	rax, OFFSET FLAT:??_C@_0M@KIPHFBFH@Save?5a?5File?$AA@
	mov	QWORD PTR ofn$[rsp+88], rax

; 185  :     string512 path; strcpy(path,(offset&&offset[0])?offset:P.m_Path);

	test	rbx, rbx
	je	SHORT $LN13@GetSaveNam
	cmp	BYTE PTR [rbx], 0
	jne	SHORT $LN14@GetSaveNam
$LN13@GetSaveNam:
	mov	rbx, QWORD PTR [rbp]
$LN14@GetSaveNam:
	lea	rcx, QWORD PTR path$[rsp]
	sub	rcx, rbx
	npad	4
$LL15@GetSaveNam:
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rcx+rbx-1], al
	test	al, al
	jne	SHORT $LL15@GetSaveNam

; 186  : 	ofn.lpstrInitialDir = path;

	lea	rax, QWORD PTR path$[rsp]

; 187  : 	ofn.Flags 			= OFN_HIDEREADONLY|OFN_OVERWRITEPROMPT|OFN_NOCHANGEDIR;
; 188  :     ofn.FlagsEx			= OFN_EX_NOPLACESBAR;
; 189  : 
; 190  : 	bool bRes = !!GetSaveFileName( &ofn );

	lea	rcx, QWORD PTR ofn$[rsp]
	mov	DWORD PTR ofn$[rsp+96], 14
	mov	QWORD PTR ofn$[rsp+80], rax
	mov	DWORD PTR ofn$[rsp+148], 1
	call	QWORD PTR __imp_GetSaveFileNameA
	test	eax, eax
	setne	dil

; 191  :     if (!bRes){

	test	dil, dil
	jne	SHORT $LN2@GetSaveNam

; 192  : 	    u32 err = CommDlgExtendedError();

	call	QWORD PTR __imp_CommDlgExtendedError

; 193  : 	    switch(err){

	cmp	eax, 12291				; 00003003H
	jne	SHORT $LN2@GetSaveNam

; 194  :         case FNERR_BUFFERTOOSMALL: 	Log("Too many file selected."); break;

	lea	rcx, OFFSET FLAT:??_C@_0BI@KCPLAHKE@Too?5many?5file?5selected?4?$AA@
	call	?Log@@YAXPEBD@Z				; Log
$LN2@GetSaveNam:

; 195  :         }
; 196  : 	}
; 197  :     strlwr(buffer);

	mov	rcx, rsi
	call	QWORD PTR __imp_strlwr

; 198  : 	return bRes;
; 199  : }

	lea	r11, QWORD PTR [rsp+2272]
	movzx	eax, dil
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	r12
	ret	0
?GetSaveName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@D0H@Z ENDP	; EFS_Utils::GetSaveName
_TEXT	ENDS
PUBLIC	?GetOpenName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@DH_N0H@Z ; EFS_Utils::GetOpenName
pdata	SEGMENT
$pdata$?GetOpenName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@DH_N0H@Z DD imagerel $LN146
	DD	imagerel $LN146+1500
	DD	imagerel $unwind$?GetOpenName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@DH_N0H@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?GetOpenName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@DH_N0H@Z DD 0d2d01H
	DD	0334742dH
	DD	0333642dH
	DD	0332342dH
	DD	032c012dH
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
buf$98160 = 48
ofn$ = 112
dir$98161 = 272
path$ = 336
dr$98141 = 848
flt$ = 1376
fns$98162 = 2400
this$ = 6544
initial$ = 6552
buffer$ = 6560
sz_buf$ = 6568
bMulti$ = 6576
offset$ = 6584
start_flt_ext$ = 6592
?GetOpenName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@DH_N0H@Z PROC ; EFS_Utils::GetOpenName

; 99   : {

$LN146:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-6240]
	mov	eax, 6496				; 00001960H
	call	__chkstk
	sub	rsp, rax

; 100  : 	VERIFY(buffer&&(sz_buf>0));
; 101  : 	FS_Path& P			= *FS.get_path(initial);

	mov	rcx, QWORD PTR ?xr_FS@@3PEAVCLocatorAPI@@EA ; xr_FS
	mov	r12d, r9d
	mov	r13, r8
	call	?get_path@CLocatorAPI@@QEAAPEAVFS_Path@@PEBD@Z ; CLocatorAPI::get_path

; 102  : 	string1024 flt;
; 103  : 	MakeFilter(flt,P.m_FilterCaption?P.m_FilterCaption:"",P.m_DefExt);

	lea	r15, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	r8d, 1024				; 00000400H
	mov	rcx, QWORD PTR [rax+32]
	mov	rsi, QWORD PTR [rax+24]
	mov	rdi, r15
	test	rcx, rcx
	mov	rbx, rax
	cmovne	rdi, rcx
	lea	rcx, QWORD PTR flt$[rbp-256]
	xor	edx, edx
	call	QWORD PTR ?Memory@@3VxrMemory@@A+16
	test	rsi, rsi
	je	SHORT $LN31@GetOpenNam
	lea	rcx, QWORD PTR flt$[rbp-256]
	mov	r8, rsi
	mov	rdx, rdi
	call	?MakeFilter@@YAPEBDAEAY0EAA@DPEBD1@Z	; MakeFilter
$LN31@GetOpenNam:

; 104  : 
; 105  : 	OPENFILENAME ofn;
; 106  : 	Memory.mem_fill		( &ofn, 0, sizeof(ofn) );

	lea	rcx, QWORD PTR ofn$[rsp]
	xor	edx, edx
	mov	r8d, 152				; 00000098H
	call	QWORD PTR ?Memory@@3VxrMemory@@A+16

; 107  :     if (xr_strlen(buffer)){ 

	or	rcx, -1
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	dec	rcx
	test	ecx, ecx
	je	SHORT $LN10@GetOpenNam

; 108  :         string_path		dr;
; 109  :         if (!(buffer[0]=='\\' && buffer[1]=='\\')){ // if !network

	cmp	BYTE PTR [r13], 92			; 0000005cH
	jne	SHORT $LN11@GetOpenNam
	cmp	BYTE PTR [r13+1], 92			; 0000005cH
	je	SHORT $LN10@GetOpenNam
$LN11@GetOpenNam:

; 110  :             _splitpath		(buffer,dr,0,0,0);

	lea	rdx, QWORD PTR dr$98141[rbp-256]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rcx, r13
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp__splitpath

; 111  :             if (0==dr[0])	P._update(buffer,buffer); 

	cmp	BYTE PTR dr$98141[rbp-256], 0
	jne	SHORT $LN10@GetOpenNam
	mov	r8, r13
	mov	rdx, r13
	mov	rcx, rbx
	call	?_update@FS_Path@@QEBAPEBDAEAY0CAI@DPEBD@Z ; FS_Path::_update
$LN10@GetOpenNam:

; 112  :         }
; 113  :     }
; 114  :     ofn.lStructSize		= sizeof(OPENFILENAME);

	mov	DWORD PTR ofn$[rsp], 152		; 00000098H

; 115  : 	ofn.hwndOwner 		= GetForegroundWindow();

	call	QWORD PTR __imp_GetForegroundWindow

; 116  : 	ofn.lpstrDefExt 	= P.m_DefExt;
; 117  : 	ofn.lpstrFile 		= buffer;
; 118  : 	ofn.nMaxFile 		= sz_buf;
; 119  : 	ofn.lpstrFilter 	= flt;
; 120  : 	ofn.nFilterIndex 	= start_flt_ext+2;
; 121  :     ofn.lpstrTitle      = "Open a File";
; 122  :     string512 path; 
; 123  : 	strcpy				(path,(offset&&offset[0])?offset:P.m_Path);

	mov	rcx, QWORD PTR offset$[rbp-256]
	mov	QWORD PTR ofn$[rsp+8], rax
	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR ofn$[rbp-208], r13
	mov	QWORD PTR ofn$[rbp-152], rax
	lea	rax, QWORD PTR flt$[rbp-256]
	mov	DWORD PTR ofn$[rbp-200], r12d
	mov	QWORD PTR ofn$[rbp-232], rax
	mov	eax, DWORD PTR start_flt_ext$[rbp-256]
	add	eax, 2
	mov	DWORD PTR ofn$[rbp-212], eax
	lea	rax, OFFSET FLAT:??_C@_0M@IAFBEOBH@Open?5a?5File?$AA@
	mov	QWORD PTR ofn$[rbp-168], rax
	test	rcx, rcx
	je	SHORT $LN21@GetOpenNam
	cmp	BYTE PTR [rcx], 0
	jne	SHORT $LN22@GetOpenNam
$LN21@GetOpenNam:
	mov	rcx, QWORD PTR [rbx]
$LN22@GetOpenNam:
	lea	rdx, QWORD PTR path$[rbp-256]
	sub	rdx, rcx
	npad	1
$LL23@GetOpenNam:
	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	BYTE PTR [rdx+rcx-1], al
	test	al, al
	jne	SHORT $LL23@GetOpenNam

; 124  : 	ofn.lpstrInitialDir = path;
; 125  : 	ofn.Flags =
; 126  :     	OFN_PATHMUSTEXIST|
; 127  :     	OFN_FILEMUSTEXIST|
; 128  : 		OFN_HIDEREADONLY|
; 129  : 		OFN_FILEMUSTEXIST|
; 130  : 		OFN_NOCHANGEDIR|(bMulti?OFN_ALLOWMULTISELECT|OFN_EXPLORER:0);

	movzx	edi, BYTE PTR bMulti$[rbp-256]
	lea	rax, QWORD PTR path$[rbp-256]

; 131  :     ofn.FlagsEx			= OFN_EX_NOPLACESBAR;

	mov	DWORD PTR ofn$[rbp-108], 1
	mov	QWORD PTR ofn$[rbp-176], rax
	movzx	eax, dil
	neg	al
	sbb	ecx, ecx
	and	ecx, 524800				; 00080200H
	or	ecx, 6156				; 0000180cH
	mov	DWORD PTR ofn$[rbp-160], ecx

; 132  :     
; 133  : 	bool bRes = !!GetOpenFileName( &ofn );

	lea	rcx, QWORD PTR ofn$[rsp]
	call	QWORD PTR __imp_GetOpenFileNameA
	test	eax, eax
	setne	r14b

; 134  :     if (!bRes){

	test	r14b, r14b
	jne	SHORT $LN139@GetOpenNam

; 135  : 	    u32 err = CommDlgExtendedError();

	call	QWORD PTR __imp_CommDlgExtendedError

; 136  : 	    switch(err){

	cmp	eax, 12291				; 00003003H
	jne	$LN4@GetOpenNam

; 137  :         case FNERR_BUFFERTOOSMALL: 	Log("Too many file selected."); break;

	lea	rcx, OFFSET FLAT:??_C@_0BI@KCPLAHKE@Too?5many?5file?5selected?4?$AA@
	call	?Log@@YAXPEBD@Z				; Log

; 138  :         }
; 139  : 	}
; 140  :     if (bRes&&bMulti){

	jmp	$LN4@GetOpenNam
$LN139@GetOpenNam:
	test	dil, dil
	je	$LN4@GetOpenNam

; 141  : 		int cnt		= _GetItemCount(buffer,0x0);

	xor	r12d, r12d
	test	r13, r13
	je	$LN4@GetOpenNam
	cmp	BYTE PTR [r13], r12b
	je	$LN4@GetOpenNam
	xor	edx, edx
	mov	rcx, r13
	mov	rdi, r13
	call	QWORD PTR __imp_strchr
	test	rax, rax
	je	SHORT $LN143@GetOpenNam
	npad	11
$LL43@GetOpenNam:
	inc	r12d
	cmp	BYTE PTR [rax+1], 0
	lea	rdi, QWORD PTR [rax+1]
	je	SHORT $LN143@GetOpenNam
	lea	rcx, QWORD PTR [rax+1]
	xor	edx, edx
	call	QWORD PTR __imp_strchr
	test	rax, rax
	jne	SHORT $LL43@GetOpenNam
$LN143@GetOpenNam:
	or	rcx, -1
	xor	eax, eax
	repne scasb
	not	rcx
	dec	rcx
	test	ecx, ecx
	je	SHORT $LN40@GetOpenNam
	inc	r12d
$LN40@GetOpenNam:

; 142  :         if (cnt>1){

	cmp	r12d, 1
	jle	$LN4@GetOpenNam

; 143  :             string64  	buf;
; 144  :             string64  	dir;
; 145  :             string4096 	fns;
; 146  :             strcpy		(dir, buffer);

	lea	rdx, QWORD PTR dir$98161[rbp-256]
	mov	rcx, r13
	sub	rdx, r13
	npad	9
$LL24@GetOpenNam:
	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	BYTE PTR [rdx+rcx-1], al
	test	al, al
	jne	SHORT $LL24@GetOpenNam

; 147  :             strcpy		(fns,dir);

	xor	ecx, ecx
$LL25@GetOpenNam:
	movzx	eax, BYTE PTR dir$98161[rbp+rcx-256]
	inc	rcx
	mov	BYTE PTR fns$98162[rbp+rcx-257], al
	test	al, al
	jne	SHORT $LL25@GetOpenNam

; 148  :             strcat		(fns,"\\");

	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR fns$98162[rbp-256]
	repne scasb
	movzx	eax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@

; 149  :             strcat		(fns,_GetItem(buffer,1,buf,0x0));

	mov	rbx, r13
	mov	WORD PTR [rdi-1], ax
	xor	edi, edi
$LL56@GetOpenNam:
	xor	edx, edx
	mov	rcx, rbx
	call	QWORD PTR __imp_strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN51@GetOpenNam
	inc	edi
	inc	rbx
	cmp	edi, 1
	jb	SHORT $LL56@GetOpenNam
	test	rbx, rbx
	je	SHORT $LN51@GetOpenNam
	xor	edx, edx
	mov	rcx, rbx
	call	QWORD PTR __imp_strchr
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN61@GetOpenNam
	sub	rdi, rbx
	jmp	SHORT $LN62@GetOpenNam
$LN61@GetOpenNam:
	or	rcx, -1
	mov	rdi, rbx
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	edi, edi
$LN62@GetOpenNam:
	lea	rcx, QWORD PTR buf$98160[rsp]
	mov	r8, rdi
	mov	rdx, rbx
	call	QWORD PTR __imp_strncpy
	mov	BYTE PTR buf$98160[rsp+rdi], 0
	jmp	SHORT $LN50@GetOpenNam
$LN51@GetOpenNam:
	xor	ecx, ecx
	npad	8
$LL54@GetOpenNam:
	movzx	eax, BYTE PTR [rcx+r15]
	inc	rcx
	mov	BYTE PTR buf$98160[rsp+rcx-1], al
	test	al, al
	jne	SHORT $LL54@GetOpenNam
$LN50@GetOpenNam:
	movzx	ecx, BYTE PTR buf$98160[rsp]
	lea	rax, QWORD PTR buf$98160[rsp]
	test	cl, cl
	je	SHORT $LN70@GetOpenNam
	npad	2
$LL72@GetOpenNam:
	cmp	cl, 32					; 00000020H
	ja	SHORT $LN71@GetOpenNam
	movzx	ecx, BYTE PTR [rax+1]
	inc	rax
	test	cl, cl
	jne	SHORT $LL72@GetOpenNam
$LN71@GetOpenNam:
	lea	rcx, QWORD PTR buf$98160[rsp]
	cmp	rax, rcx
	je	SHORT $LN70@GetOpenNam
	movzx	edx, BYTE PTR [rax]
	lea	rcx, QWORD PTR buf$98160[rsp]
	test	dl, dl
	je	SHORT $LN67@GetOpenNam
	lea	rdi, QWORD PTR buf$98160[rsp]
	sub	rax, rdi
	npad	2
$LL69@GetOpenNam:
	mov	BYTE PTR [rcx], dl
	movzx	edx, BYTE PTR [rax+rcx+1]
	inc	rcx
	test	dl, dl
	jne	SHORT $LL69@GetOpenNam
$LN67@GetOpenNam:
	mov	BYTE PTR [rcx], 0
$LN70@GetOpenNam:
	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR buf$98160[rsp]
	repne scasb
	not	rcx
	lea	rax, QWORD PTR [rcx-1]
	mov	eax, eax
	lea	rcx, QWORD PTR buf$98160[rsp+rax]
	lea	rax, QWORD PTR buf$98160[rsp]
	cmp	rcx, rax
	je	SHORT $LN144@GetOpenNam
$LL76@GetOpenNam:
	cmp	BYTE PTR [rcx], 32			; 00000020H
	ja	SHORT $LN144@GetOpenNam
	lea	rax, QWORD PTR buf$98160[rsp]
	dec	rcx
	cmp	rcx, rax
	jne	SHORT $LL76@GetOpenNam
$LN144@GetOpenNam:
	mov	BYTE PTR [rcx+1], 0
	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR fns$98162[rbp-256]
	lea	rdx, QWORD PTR buf$98160[rsp]
	repne scasb
	xor	ecx, ecx
	npad	14
$LL142@GetOpenNam:
	movzx	eax, BYTE PTR [rdx+rcx]
	inc	rcx
	mov	BYTE PTR [rdi+rcx-2], al
	test	al, al
	jne	SHORT $LL142@GetOpenNam

; 150  :             for (int i=2; i<cnt; i++){

	mov	esi, 2
	cmp	r12d, esi
	jle	$LN1@GetOpenNam
	npad	3
$LL3@GetOpenNam:

; 151  :                 strcat	(fns,",");

	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR fns$98162[rbp-256]
	repne scasb
	movzx	eax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@

; 152  :                 strcat	(fns,dir);

	or	rcx, -1
	mov	WORD PTR [rdi-1], ax
	xor	eax, eax
	lea	rdi, QWORD PTR fns$98162[rbp-256]
	repne scasb
	xor	ecx, ecx
	lea	rdx, QWORD PTR dir$98161[rbp-256]
	npad	1
$LL141@GetOpenNam:
	movzx	eax, BYTE PTR [rdx+rcx]
	inc	rcx
	mov	BYTE PTR [rdi+rcx-2], al
	test	al, al
	jne	SHORT $LL141@GetOpenNam

; 153  :                 strcat	(fns,"\\");

	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR fns$98162[rbp-256]
	repne scasb
	movzx	eax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@

; 154  :                 strcat	(fns,_GetItem(buffer,i,buf,0x0));

	mov	rbx, r13
	mov	WORD PTR [rdi-1], ax
	xor	edi, edi
	test	esi, esi
	je	SHORT $LN87@GetOpenNam
$LL88@GetOpenNam:
	xor	edx, edx
	mov	rcx, rbx
	call	QWORD PTR __imp_strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN83@GetOpenNam
	inc	edi
	inc	rbx
	cmp	edi, esi
	jb	SHORT $LL88@GetOpenNam
$LN87@GetOpenNam:
	test	rbx, rbx
	je	SHORT $LN83@GetOpenNam
	xor	edx, edx
	mov	rcx, rbx
	call	QWORD PTR __imp_strchr
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN93@GetOpenNam
	sub	rdi, rbx
	jmp	SHORT $LN94@GetOpenNam
$LN93@GetOpenNam:
	or	rcx, -1
	mov	rdi, rbx
	repne scasb
	not	rcx
	lea	rdi, QWORD PTR [rcx-1]
	mov	edi, edi
$LN94@GetOpenNam:
	lea	rcx, QWORD PTR buf$98160[rsp]
	mov	r8, rdi
	mov	rdx, rbx
	call	QWORD PTR __imp_strncpy
	mov	BYTE PTR buf$98160[rsp+rdi], 0
	jmp	SHORT $LN82@GetOpenNam
$LN83@GetOpenNam:
	xor	ecx, ecx
	npad	9
$LL86@GetOpenNam:
	movzx	eax, BYTE PTR [rcx+r15]
	inc	rcx
	mov	BYTE PTR buf$98160[rsp+rcx-1], al
	test	al, al
	jne	SHORT $LL86@GetOpenNam
$LN82@GetOpenNam:
	movzx	ecx, BYTE PTR buf$98160[rsp]
	lea	rax, QWORD PTR buf$98160[rsp]
	test	cl, cl
	je	SHORT $LN102@GetOpenNam
	npad	2
$LL104@GetOpenNam:
	cmp	cl, 32					; 00000020H
	ja	SHORT $LN103@GetOpenNam
	movzx	ecx, BYTE PTR [rax+1]
	inc	rax
	test	cl, cl
	jne	SHORT $LL104@GetOpenNam
$LN103@GetOpenNam:
	lea	rcx, QWORD PTR buf$98160[rsp]
	cmp	rax, rcx
	je	SHORT $LN102@GetOpenNam
	movzx	edx, BYTE PTR [rax]
	lea	rcx, QWORD PTR buf$98160[rsp]
	test	dl, dl
	je	SHORT $LN99@GetOpenNam
	lea	rdi, QWORD PTR buf$98160[rsp]
	sub	rax, rdi
	npad	2
$LL101@GetOpenNam:
	mov	BYTE PTR [rcx], dl
	movzx	edx, BYTE PTR [rax+rcx+1]
	inc	rcx
	test	dl, dl
	jne	SHORT $LL101@GetOpenNam
$LN99@GetOpenNam:
	mov	BYTE PTR [rcx], 0
$LN102@GetOpenNam:
	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR buf$98160[rsp]
	repne scasb
	not	rcx
	lea	rax, QWORD PTR [rcx-1]
	mov	eax, eax
	lea	rcx, QWORD PTR buf$98160[rsp+rax]
	lea	rax, QWORD PTR buf$98160[rsp]
	cmp	rcx, rax
	je	SHORT $LN145@GetOpenNam
$LL108@GetOpenNam:
	cmp	BYTE PTR [rcx], 32			; 00000020H
	ja	SHORT $LN145@GetOpenNam
	lea	rax, QWORD PTR buf$98160[rsp]
	dec	rcx
	cmp	rcx, rax
	jne	SHORT $LL108@GetOpenNam
$LN145@GetOpenNam:
	mov	BYTE PTR [rcx+1], 0
	xor	eax, eax
	or	rcx, -1
	lea	rdi, QWORD PTR fns$98162[rbp-256]
	lea	rdx, QWORD PTR buf$98160[rsp]
	repne scasb
	xor	ecx, ecx
	npad	14
$LL140@GetOpenNam:
	movzx	eax, BYTE PTR [rdx+rcx]
	inc	rcx
	mov	BYTE PTR [rdi+rcx-2], al
	test	al, al
	jne	SHORT $LL140@GetOpenNam

; 150  :             for (int i=2; i<cnt; i++){

	inc	esi
	cmp	esi, r12d
	jl	$LL3@GetOpenNam
$LN1@GetOpenNam:

; 155  :             }
; 156  :             strcpy		(buffer,fns);

	lea	rcx, QWORD PTR fns$98162[rbp-256]
	mov	rax, r13
	lea	rdx, QWORD PTR fns$98162[rbp-256]
	sub	rax, rcx
	npad	2
$LL26@GetOpenNam:
	movzx	ecx, BYTE PTR [rdx]
	inc	rdx
	mov	BYTE PTR [rdx+rax-1], cl
	test	cl, cl
	jne	SHORT $LL26@GetOpenNam
$LN4@GetOpenNam:

; 157  :         }
; 158  :     }
; 159  :     strlwr(buffer);

	mov	rcx, r13
	call	QWORD PTR __imp_strlwr

; 160  :     return bRes;
; 161  : }

	lea	r11, QWORD PTR [rsp+6496]
	movzx	eax, r14b
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?GetOpenName@EFS_Utils@@QEAA_NPEBDAEAY0CAI@DH_N0H@Z ENDP ; EFS_Utils::GetOpenName
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
pdata	SEGMENT
$pdata$??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z DD imagerel $LN23
	DD	imagerel $LN23+82
	DD	imagerel $unwind$??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z
_TEXT	SEGMENT
this$ = 48
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >, COMDAT

; 698  : 		{	// construct empty tree

$LN23:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	QWORD PTR [rcx+16], 0
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 80					; 00000050H
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+8], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+16], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rax+72], 1
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rax+73], 1

; 699  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@$0A@@std@@@std@@QEAA@AEBU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@1@AEBV?$xalloc@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> >,0> >
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ DD imagerel $LN27
	DD	imagerel $LN27+82
	DD	imagerel $unwind$??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
xdata	ENDS
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >::map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >, COMDAT

; 106  : 		{	// construct empty map from defaults

$LN27:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	QWORD PTR [rcx+16], 0
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 80					; 00000050H
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+8], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+16], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rax+72], 1
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rax+73], 1

; 107  : 		}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@std@@QEAA@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >::map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ DD imagerel $LN29
	DD	imagerel $LN29+82
	DD	imagerel $unwind$??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ PROC ; xr_map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >::xr_map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >, COMDAT
$LN29:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	QWORD PTR [rcx+16], 0
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	mov	edx, 80					; 00000050H
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+8], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+16], rax
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rax+72], 1
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rax+73], 1
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0?$xr_map@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAXU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@@2@V?$xalloc@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEAX@std@@@@@@QEAA@XZ ENDP ; xr_map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >::xr_map<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64,std::less<std::basic_string<char,std::char_traits<char>,xalloc<char> > >,xalloc<std::pair<std::basic_string<char,std::char_traits<char>,xalloc<char> >,void * __ptr64> > >
_TEXT	ENDS
PUBLIC	??0EFS_Utils@@QEAA@XZ				; EFS_Utils::EFS_Utils
pdata	SEGMENT
$pdata$??0EFS_Utils@@QEAA@XZ DD imagerel $LN31
	DD	imagerel $LN31+92
	DD	imagerel $unwind$??0EFS_Utils@@QEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??0EFS_Utils@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\filesystem.cpp
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
??0EFS_Utils@@QEAA@XZ PROC				; EFS_Utils::EFS_Utils

; 14   : {

$LN31:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7EFS_Utils@@6B@
	mov	rbx, rcx
	mov	edx, 80					; 00000050H
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+24], 0
	lea	rcx, OFFSET FLAT:?Memory@@3VxrMemory@@A	; Memory
	call	?mem_alloc@xrMemory@@QEAAPEAX_K@Z	; xrMemory::mem_alloc
	mov	QWORD PTR [rbx+16], rax
	mov	QWORD PTR [rax], rax
	mov	rax, QWORD PTR [rbx+16]
	mov	QWORD PTR [rax+8], rax
	mov	rax, QWORD PTR [rbx+16]
	mov	QWORD PTR [rax+16], rax
	mov	rax, QWORD PTR [rbx+16]
	mov	BYTE PTR [rax+72], 1
	mov	rax, QWORD PTR [rbx+16]
	mov	BYTE PTR [rax+73], 1

; 15   : }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0EFS_Utils@@QEAA@XZ ENDP				; EFS_Utils::EFS_Utils
PUBLIC	?ExcludeBasePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z ; EFS_Utils::ExcludeBasePath
pdata	SEGMENT
$pdata$?ExcludeBasePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z DD imagerel $LN66
	DD	imagerel $LN66+150
	DD	imagerel $unwind$?ExcludeBasePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ExcludeBasePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
full_path$ = 64
excl_path$ = 72
?ExcludeBasePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z PROC ; EFS_Utils::ExcludeBasePath

; 43   : {

$LN66:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 44   :     LPCSTR sub		= strstr(full_path,excl_path);

	mov	rcx, r8
	mov	rdx, r9
	mov	rdi, r9
	mov	rsi, r8
	call	QWORD PTR __imp_strstr

; 45   : 	if (0!=sub) 	return xr_string(sub+xr_strlen(excl_path));

	or	rcx, -1
	mov	r11, rax
	test	rax, rax
	je	SHORT $LN2@ExcludeBas
	xor	eax, eax
	repne scasb
	mov	QWORD PTR [rbx+24], 15
	mov	QWORD PTR [rbx+16], rax
	not	rcx
	mov	BYTE PTR [rbx], al
	lea	rdx, QWORD PTR [rcx-1]
	mov	edx, edx
	add	rdx, r11
	or	rcx, -1
	mov	rdi, rdx
	jmp	SHORT $LN65@ExcludeBas
$LN2@ExcludeBas:

; 46   : 	else	   		return xr_string(full_path);

	mov	QWORD PTR [rbx+24], 15
	mov	QWORD PTR [rbx+16], 0
	xor	eax, eax
	mov	BYTE PTR [rbx], 0
	mov	rdi, rsi
	mov	rdx, rsi
$LN65@ExcludeBas:
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	mov	rcx, rbx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign

; 47   : }

	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?ExcludeBasePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z ENDP ; EFS_Utils::ExcludeBasePath
_TEXT	ENDS
PUBLIC	?ExtractFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z ; EFS_Utils::ExtractFileExt
pdata	SEGMENT
$pdata$?ExtractFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z DD imagerel $LN32
	DD	imagerel $LN32+118
	DD	imagerel $unwind$?ExtractFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ExtractFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z DD 050d01H
	DD	04a340dH
	DD	048010dH
	DD	07006H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
ext$ = 48
this$ = 592
__$ReturnUdt$ = 600
src$ = 608
?ExtractFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z PROC ; EFS_Utils::ExtractFileExt

; 29   : {

$LN32:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 576				; 00000240H
	mov	rax, r8

; 30   : 	string_path ext;
; 31   : 	_splitpath	(src,0,0,0,ext);

	lea	rcx, QWORD PTR ext$[rsp]
	mov	rbx, rdx
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rcx, rax
	xor	edx, edx
	call	QWORD PTR __imp__splitpath

; 32   :     return xr_string(ext);

	or	rcx, -1
	xor	eax, eax
	mov	QWORD PTR [rbx+24], 15
	mov	QWORD PTR [rbx+16], 0
	mov	BYTE PTR [rbx], 0
	lea	rdi, QWORD PTR ext$[rsp]
	lea	rdx, QWORD PTR ext$[rsp]
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	mov	rcx, rbx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	mov	rax, rbx

; 33   : }

	mov	rbx, QWORD PTR [rsp+592]
	add	rsp, 576				; 00000240H
	pop	rdi
	ret	0
?ExtractFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z ENDP ; EFS_Utils::ExtractFileExt
_TEXT	ENDS
PUBLIC	?ExtractFileName@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z ; EFS_Utils::ExtractFileName
pdata	SEGMENT
$pdata$?ExtractFileName@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z DD imagerel $LN32
	DD	imagerel $LN32+110
	DD	imagerel $unwind$?ExtractFileName@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ExtractFileName@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z DD 050d01H
	DD	04a340dH
	DD	048010dH
	DD	07006H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
name$ = 48
this$ = 592
__$ReturnUdt$ = 600
src$ = 608
?ExtractFileName@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z PROC ; EFS_Utils::ExtractFileName

; 22   : {

$LN32:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 576				; 00000240H

; 23   : 	string_path name;
; 24   : 	_splitpath	(src,0,0,name,0);

	mov	rcx, r8
	mov	rbx, rdx
	lea	r9, QWORD PTR name$[rsp]
	xor	edi, edi
	xor	r8d, r8d
	xor	edx, edx
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp__splitpath

; 25   :     return xr_string(name);

	mov	QWORD PTR [rbx+16], rdi
	or	rcx, -1
	mov	QWORD PTR [rbx+24], 15
	mov	BYTE PTR [rbx], dil
	xor	eax, eax
	lea	rdi, QWORD PTR name$[rsp]
	lea	rdx, QWORD PTR name$[rsp]
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	mov	rcx, rbx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	mov	rax, rbx

; 26   : }

	mov	rbx, QWORD PTR [rsp+592]
	add	rsp, 576				; 00000240H
	pop	rdi
	ret	0
?ExtractFileName@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z ENDP ; EFS_Utils::ExtractFileName
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z DD imagerel $LN36
	DD	imagerel $LN36+92
	DD	imagerel $unwind$??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
xdata	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_Left$ = 56
_Right$ = 64
??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z PROC ; std::operator+<char,std::char_traits<char>,xalloc<char> >, COMDAT

; 146  : 	{	// return string + NTCS

$LN36:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 147  : 	return (_STD move(_Left.append(_Right)));

	or	rcx, -1
	mov	rdi, r8
	mov	r9, r8
	mov	r10, rdx
	xor	eax, eax
	repne scasb
	mov	rdx, r9
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	mov	rcx, r10
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::append
	mov	QWORD PTR [rbx+24], 15
	mov	QWORD PTR [rbx+16], 0
	mov	rcx, rbx
	mov	rdx, rax
	mov	BYTE PTR [rbx], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	mov	rax, rbx

; 148  : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HDU?$char_traits@D@std@@V?$xalloc@D@@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@0@$$QEAV10@PEBD@Z ENDP ; std::operator+<char,std::char_traits<char>,xalloc<char> >
_TEXT	ENDS
PUBLIC	?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z ; EFS_Utils::ChangeFileExt
pdata	SEGMENT
$pdata$?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z DD imagerel $LN100
	DD	imagerel $LN100+245
	DD	imagerel $unwind$?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z DD 081201H
	DD	0105412H
	DD	0e3412H
	DD	0c00e9212H
	DD	0600b700cH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\filesystem.cpp
xdata	ENDS
_TEXT	SEGMENT
$T341893 = 32
this$ = 112
$T342111 = 120
__$ReturnUdt$ = 120
src$ = 128
ext$ = 136
?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z PROC ; EFS_Utils::ChangeFileExt

; 50   : {

$LN100:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	sub	rsp, 80					; 00000050H

; 51   : 	xr_string	tmp;

	xor	edi, edi
	mov	QWORD PTR [rdx+24], 15
	mov	rbx, rdx
	mov	QWORD PTR [rdx+16], rdi
	mov	BYTE PTR [rdx], dil

; 52   : 	LPSTR src_ext	= strext(src);

	lea	edx, QWORD PTR [rdi+46]
	mov	rcx, r8
	mov	rbp, r9
	mov	rsi, r8
	call	QWORD PTR __imp_strrchr

; 53   :     if (src_ext){
; 54   : 	    size_t		ext_pos	= src_ext-src;
; 55   :         tmp.assign	(src,0,ext_pos);

	or	rcx, -1
	mov	rdx, rsi
	mov	r12, rax
	test	rax, rax
	je	SHORT $LN2@ChangeFile
	mov	QWORD PTR $T341893[rsp+16], rdi
	mov	BYTE PTR $T341893[rsp], dil
	xor	eax, eax
	mov	rdi, rsi
	sub	r12, rsi
	mov	QWORD PTR $T341893[rsp+24], 15
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR $T341893[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	lea	rdx, QWORD PTR $T341893[rsp]
	mov	r9, r12
	xor	r8d, r8d
	mov	rcx, rbx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	cmp	QWORD PTR $T341893[rsp+24], 16
	jb	SHORT $LN88@ChangeFile
	mov	rax, QWORD PTR $T341893[rsp]
	mov	QWORD PTR $T342111[rsp], rax
	test	rax, rax
	je	SHORT $LN88@ChangeFile
	lea	rcx, QWORD PTR $T342111[rsp]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>

; 56   :     }else{

	jmp	SHORT $LN88@ChangeFile
$LN2@ChangeFile:

; 57   :         tmp			= src;

	mov	rdi, rsi
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	mov	rcx, rbx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
$LN88@ChangeFile:

; 58   :     }
; 59   :     tmp				+= ext;

	or	rcx, -1
	xor	eax, eax
	mov	rdi, rbp
	repne scasb
	mov	rdx, rbp
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	mov	rcx, rbx
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::append

; 60   :     return tmp;
; 61   : }

	mov	rbp, QWORD PTR [rsp+128]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 80					; 00000050H
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z ENDP ; EFS_Utils::ChangeFileExt
_TEXT	ENDS
PUBLIC	?ExtractFilePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z ; EFS_Utils::ExtractFilePath
pdata	SEGMENT
$pdata$?ExtractFilePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z DD imagerel $LN96
	DD	imagerel $LN96+238
	DD	imagerel $unwind$?ExtractFilePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ExtractFilePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z DD 050d01H
	DD	092340dH
	DD	090010dH
	DD	07006H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T342232 = 48
drive$ = 96
dir$ = 624
this$ = 1168
$T342503 = 1176
__$ReturnUdt$ = 1176
src$ = 1184
?ExtractFilePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z PROC ; EFS_Utils::ExtractFilePath

; 36   : {

$LN96:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 1152				; 00000480H

; 37   : 	string_path drive,dir;
; 38   : 	_splitpath	(src,drive,dir,0,0);

	mov	rcx, r8
	mov	rbx, rdx
	lea	r8, QWORD PTR dir$[rsp]
	lea	rdx, QWORD PTR drive$[rsp]
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], 0
	call	QWORD PTR __imp__splitpath

; 39   :     return xr_string(drive)+dir;

	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR drive$[rsp]
	lea	rdx, QWORD PTR drive$[rsp]
	mov	QWORD PTR $T342232[rsp+24], 15
	repne scasb
	mov	QWORD PTR $T342232[rsp+16], 0
	mov	BYTE PTR $T342232[rsp], 0
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR $T342232[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	or	rcx, -1
	xor	eax, eax
	lea	rdi, QWORD PTR dir$[rsp]
	lea	rdx, QWORD PTR dir$[rsp]
	repne scasb
	not	rcx
	lea	r8, QWORD PTR [rcx-1]
	lea	rcx, QWORD PTR $T342232[rsp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::append
	mov	QWORD PTR [rbx+24], 15
	mov	QWORD PTR [rbx+16], 0
	mov	rcx, rbx
	mov	rdx, rax
	mov	BYTE PTR [rbx], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,xalloc<char> >::assign
	cmp	QWORD PTR $T342232[rsp+24], 16
	jb	SHORT $LN95@ExtractFil
	mov	rax, QWORD PTR $T342232[rsp]
	mov	QWORD PTR $T342503[rsp], rax
	test	rax, rax
	je	SHORT $LN95@ExtractFil
	lea	rcx, QWORD PTR $T342503[rsp]
	call	??$xr_free@D@@YAXAEAPEAD@Z		; xr_free<char>
$LN95@ExtractFil:
	mov	rax, rbx

; 40   : }

	mov	rbx, QWORD PTR [rsp+1168]
	add	rsp, 1152				; 00000480H
	pop	rdi
	ret	0
?ExtractFilePath@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD@Z ENDP ; EFS_Utils::ExtractFilePath
PUBLIC	?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBV23@PEBD@Z ; EFS_Utils::ChangeFileExt
pdata	SEGMENT
$pdata$?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBV23@PEBD@Z DD imagerel $LN9
	DD	imagerel $LN9+33
	DD	imagerel $unwind$?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBV23@PEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBV23@PEBD@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
src$ = 64
ext$ = 72
?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBV23@PEBD@Z PROC ; EFS_Utils::ChangeFileExt

; 64   : {

$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H

; 65   : 	return ChangeFileExt(src.c_str(),ext);

	cmp	QWORD PTR [r8+24], 16
	mov	rbx, rdx
	jb	SHORT $LN7@ChangeFile@2
	mov	r8, QWORD PTR [r8]
$LN7@ChangeFile@2:
	call	?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@PEBD0@Z ; EFS_Utils::ChangeFileExt
	mov	rax, rbx

; 66   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?ChangeFileExt@EFS_Utils@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$xalloc@D@@@std@@AEBV23@PEBD@Z ENDP ; EFS_Utils::ChangeFileExt
END
