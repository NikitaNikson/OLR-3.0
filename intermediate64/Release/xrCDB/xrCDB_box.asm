; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ ; Opcode::AABBNoLeafTree::GetNodes
PUBLIC	?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ ; Opcode::OPCODE_Model::GetTree
PUBLIC	?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<1,1>::_init
PUBLIC	?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<1,1>::_box
PUBLIC	?_tri@?$box_collider@$00$00@@QEAA_NXZ		; box_collider<1,1>::_tri
PUBLIC	?_prim@?$box_collider@$00$00@@QEAAXK@Z		; box_collider<1,1>::_prim
PUBLIC	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab
PUBLIC	??0?$box_collider@$00$00@@QEAA@XZ		; box_collider<1,1>::box_collider<1,1>
PUBLIC	??1?$box_collider@$00$00@@QEAA@XZ		; box_collider<1,1>::~box_collider<1,1>
PUBLIC	?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<1,0>::_init
PUBLIC	?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<1,0>::_box
PUBLIC	?_tri@?$box_collider@$00$0A@@@QEAA_NXZ		; box_collider<1,0>::_tri
PUBLIC	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z		; box_collider<1,0>::_prim
PUBLIC	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab
PUBLIC	??0?$box_collider@$00$0A@@@QEAA@XZ		; box_collider<1,0>::box_collider<1,0>
PUBLIC	??1?$box_collider@$00$0A@@@QEAA@XZ		; box_collider<1,0>::~box_collider<1,0>
PUBLIC	?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<0,1>::_init
PUBLIC	?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<0,1>::_box
PUBLIC	?_tri@?$box_collider@$0A@$00@@QEAA_NXZ		; box_collider<0,1>::_tri
PUBLIC	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z		; box_collider<0,1>::_prim
PUBLIC	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab
PUBLIC	??0?$box_collider@$0A@$00@@QEAA@XZ		; box_collider<0,1>::box_collider<0,1>
PUBLIC	??1?$box_collider@$0A@$00@@QEAA@XZ		; box_collider<0,1>::~box_collider<0,1>
PUBLIC	?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z		; _vector3<float>::add
PUBLIC	?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<0,0>::_init
PUBLIC	?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ		; Opcode::AABBNoLeafNode::HasLeaf
PUBLIC	?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ	; Opcode::AABBNoLeafNode::HasLeaf2
PUBLIC	?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ	; Opcode::AABBNoLeafNode::GetPos
PUBLIC	?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ	; Opcode::AABBNoLeafNode::GetNeg
PUBLIC	?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ	; Opcode::AABBNoLeafNode::GetPrimitive
PUBLIC	?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ	; Opcode::AABBNoLeafNode::GetPrimitive2
PUBLIC	?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<0,0>::_box
PUBLIC	??GicePoint@IceMaths@@QEBA?AV01@XZ		; IceMaths::icePoint::operator-
PUBLIC	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z	; IceMaths::icePoint::operator-
PUBLIC	??0icePoint@IceMaths@@QEAA@MMM@Z		; IceMaths::icePoint::icePoint
PUBLIC	??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z	; IceMaths::icePoint::operator^
PUBLIC	??UicePoint@IceMaths@@QEBAMAEBV01@@Z		; IceMaths::icePoint::operator|
PUBLIC	??BicePoint@IceMaths@@QEBAPEBMXZ		; IceMaths::icePoint::operator float const * __ptr64
PUBLIC	??BicePoint@IceMaths@@QEAAPEAMXZ		; IceMaths::icePoint::operator float * __ptr64
PUBLIC	?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z ; planeBoxOverlap
PUBLIC	?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ		; box_collider<0,0>::_tri
PUBLIC	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z	; box_collider<0,0>::_prim
PUBLIC	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
PUBLIC	??0icePoint@IceMaths@@QEAA@XZ			; IceMaths::icePoint::icePoint
PUBLIC	??0?$box_collider@$0A@$0A@@@QEAA@XZ		; box_collider<0,0>::box_collider<0,0>
PUBLIC	??1icePoint@IceMaths@@QEAA@XZ			; IceMaths::icePoint::~icePoint
PUBLIC	??1?$box_collider@$0A@$0A@@@QEAA@XZ		; box_collider<0,0>::~box_collider<0,0>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??0icePoint@IceMaths@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0icePoint@IceMaths@@QEAA@XZ PROC			; IceMaths::icePoint::icePoint, COMDAT

; 42   : 		inline_					Point()														{}

	mov	rax, rcx
	ret	0
??0icePoint@IceMaths@@QEAA@XZ ENDP			; IceMaths::icePoint::icePoint
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1icePoint@IceMaths@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1icePoint@IceMaths@@QEAA@XZ PROC			; IceMaths::icePoint::~icePoint, COMDAT

; 52   : 		inline_					~Point()													{}

	ret	0
??1icePoint@IceMaths@@QEAA@XZ ENDP			; IceMaths::icePoint::~icePoint
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??BicePoint@IceMaths@@QEBAPEBMXZ
_TEXT	SEGMENT
this$ = 8
??BicePoint@IceMaths@@QEBAPEBMXZ PROC			; IceMaths::icePoint::operator float const * __ptr64, COMDAT

; 490  : 		inline_					operator	const	float*() const	{ return &x; }

	mov	rax, rcx
	ret	0
??BicePoint@IceMaths@@QEBAPEBMXZ ENDP			; IceMaths::icePoint::operator float const * __ptr64
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??BicePoint@IceMaths@@QEAAPEAMXZ
_TEXT	SEGMENT
this$ = 8
??BicePoint@IceMaths@@QEAAPEAMXZ PROC			; IceMaths::icePoint::operator float * __ptr64, COMDAT

; 491  : 		inline_					operator			float*()		{ return &x; }

	mov	rax, rcx
	ret	0
??BicePoint@IceMaths@@QEAAPEAMXZ ENDP			; IceMaths::icePoint::operator float * __ptr64
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??UicePoint@IceMaths@@QEBAMAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
p$ = 16
??UicePoint@IceMaths@@QEBAMAEBV01@@Z PROC		; IceMaths::icePoint::operator|, COMDAT

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	xmm0, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR [rdx+8]
	mulss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm1, DWORD PTR [rcx]
	mulss	xmm2, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	ret	0
??UicePoint@IceMaths@@QEBAMAEBV01@@Z ENDP		; IceMaths::icePoint::operator|
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_model.h
_TEXT	ENDS
;	COMDAT ?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ
_TEXT	SEGMENT
this$ = 8
?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ PROC ; Opcode::OPCODE_Model::GetTree, COMDAT

; 64   : 		inline_	const	AABBOptimizedTree*	GetTree()		const	{ return mTree;					}

	mov	rax, QWORD PTR [rcx+8]
	ret	0
?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ ENDP ; Opcode::OPCODE_Model::GetTree
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
_TEXT	ENDS
;	COMDAT ?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ
_TEXT	SEGMENT
this$ = 8
?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ PROC ; Opcode::AABBNoLeafTree::GetNodes, COMDAT

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	rax, QWORD PTR [rcx+16]
	ret	0
?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ ENDP ; Opcode::AABBNoLeafTree::GetNodes
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
_TEXT	ENDS
;	COMDAT ??0icePoint@IceMaths@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
_x$ = 16
_y$ = 24
_z$ = 32
??0icePoint@IceMaths@@QEAA@MMM@Z PROC			; IceMaths::icePoint::icePoint, COMDAT

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	mov	rax, rcx
	ret	0
??0icePoint@IceMaths@@QEAA@MMM@Z ENDP			; IceMaths::icePoint::icePoint
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
_TEXT	ENDS
;	COMDAT ?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ PROC		; Opcode::AABBNoLeafNode::HasLeaf, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	eax, DWORD PTR [rcx+24]
	and	eax, 1
	ret	0
?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ ENDP		; Opcode::AABBNoLeafNode::HasLeaf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ PROC	; Opcode::AABBNoLeafNode::GetPrimitive, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+24]
	shr	rax, 1
	ret	0
?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ ENDP	; Opcode::AABBNoLeafNode::GetPrimitive
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ
_TEXT	SEGMENT
this$ = 8
?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ PROC	; Opcode::AABBNoLeafNode::GetPos, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+24]
	ret	0
?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ ENDP	; Opcode::AABBNoLeafNode::GetPos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ PROC		; Opcode::AABBNoLeafNode::HasLeaf2, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	eax, DWORD PTR [rcx+32]
	and	eax, 1
	ret	0
?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ ENDP		; Opcode::AABBNoLeafNode::HasLeaf2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ PROC	; Opcode::AABBNoLeafNode::GetPrimitive2, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+32]
	shr	rax, 1
	ret	0
?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ ENDP	; Opcode::AABBNoLeafNode::GetPrimitive2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ
_TEXT	SEGMENT
this$ = 8
?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ PROC	; Opcode::AABBNoLeafNode::GetNeg, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+32]
	ret	0
?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ ENDP	; Opcode::AABBNoLeafNode::GetNeg
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
_TEXT	ENDS
;	COMDAT ??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
p$ = 24
??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z PROC		; IceMaths::icePoint::operator-, COMDAT

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	mov	rax, rdx
	subss	xmm0, DWORD PTR [r8]
	subss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rdx], xmm0
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rdx+4], xmm1
	subss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rdx+8], xmm0
	ret	0
??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ENDP		; IceMaths::icePoint::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
p$ = 24
??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z PROC		; IceMaths::icePoint::operator^, COMDAT

; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movss	xmm2, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	xmm4, DWORD PTR [rcx]
	mov	rax, rdx
	mulss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [r8+4]
	movss	xmm3, DWORD PTR [r8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm4, DWORD PTR [r8+4]
	movss	DWORD PTR [rdx], xmm1
	mulss	xmm0, DWORD PTR [r8+8]
	movaps	xmm1, xmm3
	mulss	xmm3, DWORD PTR [rcx+4]
	mulss	xmm1, xmm2
	subss	xmm1, xmm0
	subss	xmm4, xmm3
	movss	DWORD PTR [rdx+4], xmm1
	movss	DWORD PTR [rdx+8], xmm4

; 400  : 								}

	ret	0
??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ENDP		; IceMaths::icePoint::operator^
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??GicePoint@IceMaths@@QEBA?AV01@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??GicePoint@IceMaths@@QEBA?AV01@XZ PROC			; IceMaths::icePoint::operator-, COMDAT

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm2, DWORD PTR __mask@@NegFloat@
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+8]
	mov	rax, rdx
	xorps	xmm0, xmm2
	xorps	xmm1, xmm2
	movss	DWORD PTR [rdx], xmm0
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rdx+8], xmm1
	xorps	xmm0, xmm2
	movss	DWORD PTR [rdx+4], xmm0
	ret	0
??GicePoint@IceMaths@@QEBA?AV01@XZ ENDP			; IceMaths::icePoint::operator-
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
_TEXT	ENDS
;	COMDAT ?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<0,0>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box
$LN9@box:
	xor	al, al

; 114  : 	};

	ret	0
$LN6@box:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm4
	comiss	xmm2, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm5
	comiss	xmm1, DWORD PTR [rcx+32]
	jb	SHORT $LN9@box

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<0,0>::_box
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<0,1>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box@2
$LN9@box@2:
	xor	al, al

; 114  : 	};

	ret	0
$LN6@box@2:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box@2

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box@2

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box@2

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm4
	comiss	xmm2, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box@2

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm5
	comiss	xmm1, DWORD PTR [rcx+32]
	jb	SHORT $LN9@box@2

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<0,1>::_box
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<1,0>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box@3
$LN9@box@3:
	xor	al, al

; 114  : 	};

	ret	0
$LN6@box@3:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box@3

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box@3

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box@3

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm4
	comiss	xmm2, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box@3

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm5
	comiss	xmm1, DWORD PTR [rcx+32]
	jb	SHORT $LN9@box@3

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<1,0>::_box
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<1,1>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box@4
$LN9@box@4:
	xor	al, al

; 114  : 	};

	ret	0
$LN6@box@4:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box@4

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box@4

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box@4

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm4
	comiss	xmm2, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box@4

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm5
	comiss	xmm1, DWORD PTR [rcx+32]
	jb	SHORT $LN9@box@4

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<1,1>::_box
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
v$ = 24
?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z PROC		; _vector3<float>::add, COMDAT

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	addss	xmm0, DWORD PTR [r8]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	addss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	addss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z ENDP		; _vector3<float>::add
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN56
	DD	imagerel $LN56+43
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN56+43
	DD	imagerel $LN56+219
	DD	imagerel $chain$2$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN56+219
	DD	imagerel $LN56+296
	DD	imagerel $chain$3$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 040021H
	DD	02a800H
	DD	048800H
	DD	imagerel $LN56
	DD	imagerel $LN56+43
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 065d21H
	DD	02a85dH
	DD	04882fH
	DD	01b806H
	DD	imagerel $LN56
	DD	imagerel $LN56+43
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 092501H
	DD	0c825H
	DD	039820H
	DD	05781aH
	DD	066815H
	DD	0e204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
_TEXT	SEGMENT
normal$ = 128
d$ = 136
maxbox$ = 144
?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z PROC	; planeBoxOverlap, COMDAT

; 20   : {

$LN56:
	sub	rsp, 120				; 00000078H

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm3, DWORD PTR [rcx]
	movss	xmm0, DWORD PTR __mask@@NegFloat@
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	movaps	XMMWORD PTR [rsp+48], xmm9
	movaps	XMMWORD PTR [rsp], xmm12
	xorps	xmm6, xmm6
	comiss	xmm3, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm11
	movaps	xmm12, xmm1
	jbe	SHORT $LN4@planeBoxOv
	movss	xmm4, DWORD PTR [r8]
	movaps	xmm5, xmm4
	xorps	xmm5, xmm0

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN6@planeBoxOv
$LN4@planeBoxOv:
	movss	xmm5, DWORD PTR [r8]
	movaps	xmm4, xmm5
	xorps	xmm4, xmm0
$LN6@planeBoxOv:

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm7, DWORD PTR [rcx+4]
	movaps	XMMWORD PTR [rsp+64], xmm8
	comiss	xmm7, xmm6
	jbe	SHORT $LN51@planeBoxOv
	movss	xmm8, DWORD PTR [r8+4]
	movaps	xmm1, xmm8
	xorps	xmm1, xmm0

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN52@planeBoxOv
$LN51@planeBoxOv:
	movss	xmm1, DWORD PTR [r8+4]
	movaps	xmm8, xmm1
	xorps	xmm8, xmm0
$LN52@planeBoxOv:

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm9, DWORD PTR [rcx+8]
	movaps	XMMWORD PTR [rsp+32], xmm10
	comiss	xmm9, xmm6
	jbe	SHORT $LN54@planeBoxOv
	movss	xmm10, DWORD PTR [r8+8]
	movaps	xmm11, xmm10
	xorps	xmm11, xmm0

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN55@planeBoxOv
$LN54@planeBoxOv:
	movss	xmm11, DWORD PTR [r8+8]
	movaps	xmm10, xmm11
	xorps	xmm10, xmm0
$LN55@planeBoxOv:

; 26   : 	}
; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movaps	xmm2, xmm3
	movaps	xmm0, xmm7
	mulss	xmm2, xmm5
	mulss	xmm0, xmm1
	movaps	xmm1, xmm9
	addss	xmm2, xmm0
	mulss	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [rsp+16]
	addss	xmm2, xmm1
	addss	xmm2, xmm12
	comiss	xmm2, xmm6
	ja	SHORT $LN1@planeBoxOv

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	mulss	xmm3, xmm4
	mulss	xmm7, xmm8
	mulss	xmm9, xmm10
	addss	xmm3, xmm7
	addss	xmm3, xmm9
	addss	xmm3, xmm12
	comiss	xmm3, xmm6
	jb	SHORT $LN1@planeBoxOv
	mov	al, 1
	jmp	SHORT $LN8@planeBoxOv
$LN1@planeBoxOv:

; 29   : 
; 30   : 	return false;

	xor	al, al
$LN8@planeBoxOv:
	movaps	xmm10, XMMWORD PTR [rsp+32]
	movaps	xmm8, XMMWORD PTR [rsp+64]

; 31   : }

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	movaps	xmm9, XMMWORD PTR [rsp+48]
	movaps	xmm12, XMMWORD PTR [rsp]
	add	rsp, 120				; 00000078H
	ret	0
?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z ENDP	; planeBoxOverlap
PUBLIC	__real@00000000
;	COMDAT __real@00000000
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_bitwise.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN15
	DD	imagerel $LN15+230
	DD	imagerel $unwind$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T114138 = 0
$T114137 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<0,0>::_init, COMDAT

; 96   : 	{

$LN15:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx

; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T114137[rsp], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	movss	DWORD PTR $T114137[rsp+4], xmm1
	mov	eax, DWORD PTR $T114137[rsp]
	mov	DWORD PTR [rcx+48], eax
	mov	eax, DWORD PTR $T114137[rsp+4]
	mov	DWORD PTR [rcx+52], eax
	movss	DWORD PTR $T114137[rsp+8], xmm0
	mov	eax, DWORD PTR $T114137[rsp+8]
	mov	DWORD PTR [rcx+56], eax

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T114138[rsp], xmm0
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T114138[rsp+4], xmm1
	mov	eax, DWORD PTR $T114138[rsp]
	mov	DWORD PTR [r10+60], eax
	mov	eax, DWORD PTR $T114138[rsp+4]
	mov	DWORD PTR [r10+64], eax
	movss	DWORD PTR $T114138[rsp+8], xmm0
	mov	eax, DWORD PTR $T114138[rsp+8]
	mov	DWORD PTR [r10+68], eax

; 102  : 		b_min.sub	(C,E);

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 103  : 		b_max.add	(C,E);

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<0,0>::_init
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN15
	DD	imagerel $LN15+230
	DD	imagerel $unwind$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T114181 = 0
$T114180 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<0,1>::_init, COMDAT

; 96   : 	{

$LN15:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx

; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T114180[rsp], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	movss	DWORD PTR $T114180[rsp+4], xmm1
	mov	eax, DWORD PTR $T114180[rsp]
	mov	DWORD PTR [rcx+48], eax
	mov	eax, DWORD PTR $T114180[rsp+4]
	mov	DWORD PTR [rcx+52], eax
	movss	DWORD PTR $T114180[rsp+8], xmm0
	mov	eax, DWORD PTR $T114180[rsp+8]
	mov	DWORD PTR [rcx+56], eax

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T114181[rsp], xmm0
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T114181[rsp+4], xmm1
	mov	eax, DWORD PTR $T114181[rsp]
	mov	DWORD PTR [r10+60], eax
	mov	eax, DWORD PTR $T114181[rsp+4]
	mov	DWORD PTR [r10+64], eax
	movss	DWORD PTR $T114181[rsp+8], xmm0
	mov	eax, DWORD PTR $T114181[rsp+8]
	mov	DWORD PTR [r10+68], eax

; 102  : 		b_min.sub	(C,E);

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 103  : 		b_max.add	(C,E);

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<0,1>::_init
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN15
	DD	imagerel $LN15+230
	DD	imagerel $unwind$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T114224 = 0
$T114223 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<1,0>::_init, COMDAT

; 96   : 	{

$LN15:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx

; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T114223[rsp], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	movss	DWORD PTR $T114223[rsp+4], xmm1
	mov	eax, DWORD PTR $T114223[rsp]
	mov	DWORD PTR [rcx+48], eax
	mov	eax, DWORD PTR $T114223[rsp+4]
	mov	DWORD PTR [rcx+52], eax
	movss	DWORD PTR $T114223[rsp+8], xmm0
	mov	eax, DWORD PTR $T114223[rsp+8]
	mov	DWORD PTR [rcx+56], eax

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T114224[rsp], xmm0
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T114224[rsp+4], xmm1
	mov	eax, DWORD PTR $T114224[rsp]
	mov	DWORD PTR [r10+60], eax
	mov	eax, DWORD PTR $T114224[rsp+4]
	mov	DWORD PTR [r10+64], eax
	movss	DWORD PTR $T114224[rsp+8], xmm0
	mov	eax, DWORD PTR $T114224[rsp+8]
	mov	DWORD PTR [r10+68], eax

; 102  : 		b_min.sub	(C,E);

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 103  : 		b_max.add	(C,E);

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<1,0>::_init
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN15
	DD	imagerel $LN15+230
	DD	imagerel $unwind$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T114267 = 0
$T114266 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<1,1>::_init, COMDAT

; 96   : 	{

$LN15:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx

; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
	movss	xmm0, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T114266[rsp], xmm0
	movss	xmm0, DWORD PTR [rdx+8]
	movss	DWORD PTR $T114266[rsp+4], xmm1
	mov	eax, DWORD PTR $T114266[rsp]
	mov	DWORD PTR [rcx+48], eax
	mov	eax, DWORD PTR $T114266[rsp+4]
	mov	DWORD PTR [rcx+52], eax
	movss	DWORD PTR $T114266[rsp+8], xmm0
	mov	eax, DWORD PTR $T114266[rsp+8]
	mov	DWORD PTR [rcx+56], eax

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T114267[rsp], xmm0
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T114267[rsp+4], xmm1
	mov	eax, DWORD PTR $T114267[rsp]
	mov	DWORD PTR [r10+60], eax
	mov	eax, DWORD PTR $T114267[rsp+4]
	mov	DWORD PTR [r10+64], eax
	movss	DWORD PTR $T114267[rsp+8], xmm0
	mov	eax, DWORD PTR $T114267[rsp+8]
	mov	DWORD PTR [r10+68], eax

; 102  : 		b_min.sub	(C,E);

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 103  : 		b_max.add	(C,E);

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<1,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$box_collider@$0A@$0A@@@QEAA@XZ
_TEXT	SEGMENT
??1?$box_collider@$0A@$0A@@@QEAA@XZ PROC		; box_collider<0,0>::~box_collider<0,0>, COMDAT
	ret	0
??1?$box_collider@$0A@$0A@@@QEAA@XZ ENDP		; box_collider<0,0>::~box_collider<0,0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$box_collider@$0A@$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$0A@$0A@@@QEAA@XZ PROC		; box_collider<0,0>::box_collider<0,0>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$0A@$0A@@@QEAA@XZ ENDP		; box_collider<0,0>::box_collider<0,0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$box_collider@$0A@$00@@QEAA@XZ
_TEXT	SEGMENT
??1?$box_collider@$0A@$00@@QEAA@XZ PROC			; box_collider<0,1>::~box_collider<0,1>, COMDAT
	ret	0
??1?$box_collider@$0A@$00@@QEAA@XZ ENDP			; box_collider<0,1>::~box_collider<0,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$box_collider@$0A@$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$0A@$00@@QEAA@XZ PROC			; box_collider<0,1>::box_collider<0,1>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$0A@$00@@QEAA@XZ ENDP			; box_collider<0,1>::box_collider<0,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$box_collider@$00$0A@@@QEAA@XZ
_TEXT	SEGMENT
??1?$box_collider@$00$0A@@@QEAA@XZ PROC			; box_collider<1,0>::~box_collider<1,0>, COMDAT
	ret	0
??1?$box_collider@$00$0A@@@QEAA@XZ ENDP			; box_collider<1,0>::~box_collider<1,0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$box_collider@$00$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$00$0A@@@QEAA@XZ PROC			; box_collider<1,0>::box_collider<1,0>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$00$0A@@@QEAA@XZ ENDP			; box_collider<1,0>::box_collider<1,0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$box_collider@$00$00@@QEAA@XZ
_TEXT	SEGMENT
??1?$box_collider@$00$00@@QEAA@XZ PROC			; box_collider<1,1>::~box_collider<1,1>, COMDAT
	ret	0
??1?$box_collider@$00$00@@QEAA@XZ ENDP			; box_collider<1,1>::~box_collider<1,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$box_collider@$00$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$00$00@@QEAA@XZ PROC			; box_collider<1,1>::box_collider<1,1>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$00$00@@QEAA@XZ ENDP			; box_collider<1,1>::box_collider<1,1>
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+139
	DD	imagerel $LN332+248
	DD	imagerel $chain$1$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+248
	DD	imagerel $LN332+685
	DD	imagerel $chain$4$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+685
	DD	imagerel $LN332+697
	DD	imagerel $chain$5$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+697
	DD	imagerel $LN332+721
	DD	imagerel $chain$6$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+721
	DD	imagerel $LN332+725
	DD	imagerel $chain$7$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+725
	DD	imagerel $LN332+729
	DD	imagerel $chain$8$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN332+729
	DD	imagerel $LN332+733
	DD	imagerel $chain$9$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 040021H
	DD	01c800H
	DD	03a800H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 0a0021H
	DD	0d800H
	DD	01c800H
	DD	02b800H
	DD	03a800H
	DD	049800H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN332+139
	DD	imagerel $LN332+248
	DD	imagerel $chain$1$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 061721H
	DD	0d817H
	DD	02b812H
	DD	049806H
	DD	imagerel $LN332+139
	DD	imagerel $LN332+248
	DD	imagerel $chain$1$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 040c21H
	DD	01c80cH
	DD	03a806H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 082101H
	DD	058821H
	DD	06781bH
	DD	076811H
	DD	0110107H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 144
?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ PROC		; box_collider<0,0>::_tri, COMDAT

; 116  : 	{

$LN332:
	sub	rsp, 136				; 00000088H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rsp+112], xmm6

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm6, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rsp+96], xmm7
	movaps	XMMWORD PTR [rsp+80], xmm8
	movss	xmm8, DWORD PTR [rcx+72]
	movss	xmm7, DWORD PTR [rcx+84]
	subss	xmm6, xmm0
	subss	xmm8, xmm0
	subss	xmm7, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm8
	movaps	xmm0, xmm8
	comiss	xmm7, xmm8
	jae	SHORT $LN329@tri@17
	movaps	xmm0, xmm7
$LN329@tri@17:
	jbe	SHORT $LN46@tri@17
	movaps	xmm1, xmm7
$LN46@tri@17:
	comiss	xmm6, xmm0
	jae	SHORT $LN45@tri@17
	movaps	xmm0, xmm6
$LN45@tri@17:
	comiss	xmm6, xmm1
	jbe	SHORT $LN44@tri@17
	movaps	xmm1, xmm6
$LN44@tri@17:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm2, DWORD PTR [rcx+60]
	comiss	xmm0, xmm2
	ja	$LN42@tri@17
	movss	xmm4, DWORD PTR __mask@@NegFloat@
	xorps	xmm2, xmm4
	comiss	xmm1, xmm2
	jb	$LN42@tri@17

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;
; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm5, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+48], xmm10
	movaps	XMMWORD PTR [rsp+16], xmm12
	movss	xmm12, DWORD PTR [rcx+76]
	movss	xmm10, DWORD PTR [rcx+88]
	subss	xmm5, xmm0
	subss	xmm12, xmm0
	subss	xmm10, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm2, xmm12
	movaps	xmm1, xmm12
	comiss	xmm10, xmm12
	jae	SHORT $LN330@tri@17
	movaps	xmm1, xmm10
$LN330@tri@17:
	jbe	SHORT $LN40@tri@17
	movaps	xmm2, xmm10
$LN40@tri@17:
	comiss	xmm5, xmm1
	jae	SHORT $LN39@tri@17
	movaps	xmm1, xmm5
$LN39@tri@17:
	comiss	xmm5, xmm2
	jbe	SHORT $LN38@tri@17
	movaps	xmm2, xmm5
$LN38@tri@17:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN36@tri@17
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN36@tri@17

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+64], xmm9

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm9, DWORD PTR [rcx+104]
	movaps	XMMWORD PTR [rsp+32], xmm11
	movaps	XMMWORD PTR [rsp], xmm13
	movss	xmm13, DWORD PTR [rcx+80]
	movss	xmm11, DWORD PTR [rcx+92]
	subss	xmm9, xmm0
	subss	xmm13, xmm0
	subss	xmm11, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm2, xmm13
	movaps	xmm1, xmm13
	comiss	xmm11, xmm13
	jae	SHORT $LN331@tri@17
	movaps	xmm1, xmm11
$LN331@tri@17:
	jbe	SHORT $LN34@tri@17
	movaps	xmm2, xmm11
$LN34@tri@17:
	comiss	xmm9, xmm1
	jae	SHORT $LN33@tri@17
	movaps	xmm1, xmm9
$LN33@tri@17:
	comiss	xmm9, xmm2
	jbe	SHORT $LN32@tri@17
	movaps	xmm2, xmm9
$LN32@tri@17:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN30@tri@17
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN30@tri@17

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;

	subss	xmm9, xmm11
	subss	xmm5, xmm10
	movaps	xmm1, xmm11
	movaps	xmm2, xmm10
	movaps	xmm3, xmm7

; 150  : 		const Point normal = e0 ^ e1;

	movaps	xmm11, xmm9
	movaps	xmm0, xmm5
	subss	xmm1, xmm13
	subss	xmm3, xmm8
	subss	xmm6, xmm7
	movaps	xmm10, xmm6
	mulss	xmm0, xmm1
	mulss	xmm9, xmm3
	mulss	xmm5, xmm3
	subss	xmm2, xmm12
	mulss	xmm10, xmm1
	mulss	xmm11, xmm2
	mulss	xmm6, xmm2
	subss	xmm11, xmm0
	subss	xmm10, xmm9
	subss	xmm5, xmm6

; 151  : 		const float d = -normal|v0;

	movaps	xmm1, xmm11
	movaps	xmm9, xmm10
	movaps	xmm0, xmm5
	xorps	xmm9, xmm4
	xorps	xmm1, xmm4
	xorps	xmm0, xmm4
	mulss	xmm9, xmm12
	mulss	xmm1, xmm8
	mulss	xmm0, xmm13

; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;

	xorps	xmm8, xmm8
	comiss	xmm11, xmm8
	addss	xmm9, xmm1
	addss	xmm9, xmm0
	jbe	SHORT $LN91@tri@17
	movss	xmm2, DWORD PTR [rcx+60]
	movaps	xmm3, xmm2
	xorps	xmm3, xmm4
	jmp	SHORT $LN93@tri@17
$LN91@tri@17:
	movss	xmm3, DWORD PTR [rcx+60]
	movaps	xmm2, xmm3
	xorps	xmm2, xmm4
$LN93@tri@17:
	comiss	xmm10, xmm8
	jbe	SHORT $LN318@tri@17
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm4
	jmp	SHORT $LN319@tri@17
$LN318@tri@17:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm4
$LN319@tri@17:
	comiss	xmm5, xmm8
	jbe	SHORT $LN321@tri@17
	movss	xmm6, DWORD PTR [rcx+68]
	movaps	xmm7, xmm6
	xorps	xmm7, xmm4
	jmp	SHORT $LN322@tri@17
$LN321@tri@17:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm6, xmm7
	xorps	xmm6, xmm4
$LN322@tri@17:
	mulss	xmm1, xmm10
	mulss	xmm3, xmm11
	mulss	xmm7, xmm5
	addss	xmm1, xmm3
	addss	xmm1, xmm7
	addss	xmm1, xmm9
	comiss	xmm1, xmm8
	ja	SHORT $LN30@tri@17
	mulss	xmm0, xmm10
	mulss	xmm2, xmm11
	mulss	xmm6, xmm5
	addss	xmm0, xmm2
	addss	xmm0, xmm6
	addss	xmm0, xmm9
	comiss	xmm0, xmm8
	jb	SHORT $LN30@tri@17

; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN328@tri@17:
	movaps	xmm9, XMMWORD PTR [rsp+64]
	movaps	xmm11, XMMWORD PTR [rsp+32]
	movaps	xmm13, XMMWORD PTR [rsp]
$LN325@tri@17:
	movaps	xmm10, XMMWORD PTR [rsp+48]
	movaps	xmm12, XMMWORD PTR [rsp+16]
$LN48@tri@17:

; 188  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	movaps	xmm8, XMMWORD PTR [rsp+80]
	add	rsp, 136				; 00000088H
	ret	0
$LN30@tri@17:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	xor	al, al
	jmp	SHORT $LN328@tri@17
$LN36@tri@17:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	xor	al, al
	jmp	SHORT $LN325@tri@17
$LN42@tri@17:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	xor	al, al
	jmp	SHORT $LN48@tri@17
?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ ENDP		; box_collider<0,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+139
	DD	imagerel $LN332+248
	DD	imagerel $chain$1$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+248
	DD	imagerel $LN332+685
	DD	imagerel $chain$4$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+685
	DD	imagerel $LN332+697
	DD	imagerel $chain$5$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+697
	DD	imagerel $LN332+721
	DD	imagerel $chain$6$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+721
	DD	imagerel $LN332+725
	DD	imagerel $chain$7$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+725
	DD	imagerel $LN332+729
	DD	imagerel $chain$8$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN332+729
	DD	imagerel $LN332+733
	DD	imagerel $chain$9$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 040021H
	DD	01c800H
	DD	03a800H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 0a0021H
	DD	0d800H
	DD	01c800H
	DD	02b800H
	DD	03a800H
	DD	049800H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN332+139
	DD	imagerel $LN332+248
	DD	imagerel $chain$1$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 061721H
	DD	0d817H
	DD	02b812H
	DD	049806H
	DD	imagerel $LN332+139
	DD	imagerel $LN332+248
	DD	imagerel $chain$1$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 040c21H
	DD	01c80cH
	DD	03a806H
	DD	imagerel $LN332
	DD	imagerel $LN332+139
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 082101H
	DD	058821H
	DD	06781bH
	DD	076811H
	DD	0110107H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 144
?_tri@?$box_collider@$0A@$00@@QEAA_NXZ PROC		; box_collider<0,1>::_tri, COMDAT

; 116  : 	{

$LN332:
	sub	rsp, 136				; 00000088H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rsp+112], xmm6

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm6, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rsp+96], xmm7
	movaps	XMMWORD PTR [rsp+80], xmm8
	movss	xmm8, DWORD PTR [rcx+72]
	movss	xmm7, DWORD PTR [rcx+84]
	subss	xmm6, xmm0
	subss	xmm8, xmm0
	subss	xmm7, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm8
	movaps	xmm0, xmm8
	comiss	xmm7, xmm8
	jae	SHORT $LN329@tri@18
	movaps	xmm0, xmm7
$LN329@tri@18:
	jbe	SHORT $LN46@tri@18
	movaps	xmm1, xmm7
$LN46@tri@18:
	comiss	xmm6, xmm0
	jae	SHORT $LN45@tri@18
	movaps	xmm0, xmm6
$LN45@tri@18:
	comiss	xmm6, xmm1
	jbe	SHORT $LN44@tri@18
	movaps	xmm1, xmm6
$LN44@tri@18:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm2, DWORD PTR [rcx+60]
	comiss	xmm0, xmm2
	ja	$LN42@tri@18
	movss	xmm4, DWORD PTR __mask@@NegFloat@
	xorps	xmm2, xmm4
	comiss	xmm1, xmm2
	jb	$LN42@tri@18

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;
; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm5, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+48], xmm10
	movaps	XMMWORD PTR [rsp+16], xmm12
	movss	xmm12, DWORD PTR [rcx+76]
	movss	xmm10, DWORD PTR [rcx+88]
	subss	xmm5, xmm0
	subss	xmm12, xmm0
	subss	xmm10, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm2, xmm12
	movaps	xmm1, xmm12
	comiss	xmm10, xmm12
	jae	SHORT $LN330@tri@18
	movaps	xmm1, xmm10
$LN330@tri@18:
	jbe	SHORT $LN40@tri@18
	movaps	xmm2, xmm10
$LN40@tri@18:
	comiss	xmm5, xmm1
	jae	SHORT $LN39@tri@18
	movaps	xmm1, xmm5
$LN39@tri@18:
	comiss	xmm5, xmm2
	jbe	SHORT $LN38@tri@18
	movaps	xmm2, xmm5
$LN38@tri@18:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN36@tri@18
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN36@tri@18

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+64], xmm9

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm9, DWORD PTR [rcx+104]
	movaps	XMMWORD PTR [rsp+32], xmm11
	movaps	XMMWORD PTR [rsp], xmm13
	movss	xmm13, DWORD PTR [rcx+80]
	movss	xmm11, DWORD PTR [rcx+92]
	subss	xmm9, xmm0
	subss	xmm13, xmm0
	subss	xmm11, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm2, xmm13
	movaps	xmm1, xmm13
	comiss	xmm11, xmm13
	jae	SHORT $LN331@tri@18
	movaps	xmm1, xmm11
$LN331@tri@18:
	jbe	SHORT $LN34@tri@18
	movaps	xmm2, xmm11
$LN34@tri@18:
	comiss	xmm9, xmm1
	jae	SHORT $LN33@tri@18
	movaps	xmm1, xmm9
$LN33@tri@18:
	comiss	xmm9, xmm2
	jbe	SHORT $LN32@tri@18
	movaps	xmm2, xmm9
$LN32@tri@18:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN30@tri@18
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN30@tri@18

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;

	subss	xmm9, xmm11
	subss	xmm5, xmm10
	movaps	xmm1, xmm11
	movaps	xmm2, xmm10
	movaps	xmm3, xmm7

; 150  : 		const Point normal = e0 ^ e1;

	movaps	xmm11, xmm9
	movaps	xmm0, xmm5
	subss	xmm1, xmm13
	subss	xmm3, xmm8
	subss	xmm6, xmm7
	movaps	xmm10, xmm6
	mulss	xmm0, xmm1
	mulss	xmm9, xmm3
	mulss	xmm5, xmm3
	subss	xmm2, xmm12
	mulss	xmm10, xmm1
	mulss	xmm11, xmm2
	mulss	xmm6, xmm2
	subss	xmm11, xmm0
	subss	xmm10, xmm9
	subss	xmm5, xmm6

; 151  : 		const float d = -normal|v0;

	movaps	xmm1, xmm11
	movaps	xmm9, xmm10
	movaps	xmm0, xmm5
	xorps	xmm9, xmm4
	xorps	xmm1, xmm4
	xorps	xmm0, xmm4
	mulss	xmm9, xmm12
	mulss	xmm1, xmm8
	mulss	xmm0, xmm13

; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;

	xorps	xmm8, xmm8
	comiss	xmm11, xmm8
	addss	xmm9, xmm1
	addss	xmm9, xmm0
	jbe	SHORT $LN91@tri@18
	movss	xmm2, DWORD PTR [rcx+60]
	movaps	xmm3, xmm2
	xorps	xmm3, xmm4
	jmp	SHORT $LN93@tri@18
$LN91@tri@18:
	movss	xmm3, DWORD PTR [rcx+60]
	movaps	xmm2, xmm3
	xorps	xmm2, xmm4
$LN93@tri@18:
	comiss	xmm10, xmm8
	jbe	SHORT $LN318@tri@18
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm4
	jmp	SHORT $LN319@tri@18
$LN318@tri@18:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm4
$LN319@tri@18:
	comiss	xmm5, xmm8
	jbe	SHORT $LN321@tri@18
	movss	xmm6, DWORD PTR [rcx+68]
	movaps	xmm7, xmm6
	xorps	xmm7, xmm4
	jmp	SHORT $LN322@tri@18
$LN321@tri@18:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm6, xmm7
	xorps	xmm6, xmm4
$LN322@tri@18:
	mulss	xmm1, xmm10
	mulss	xmm3, xmm11
	mulss	xmm7, xmm5
	addss	xmm1, xmm3
	addss	xmm1, xmm7
	addss	xmm1, xmm9
	comiss	xmm1, xmm8
	ja	SHORT $LN30@tri@18
	mulss	xmm0, xmm10
	mulss	xmm2, xmm11
	mulss	xmm6, xmm5
	addss	xmm0, xmm2
	addss	xmm0, xmm6
	addss	xmm0, xmm9
	comiss	xmm0, xmm8
	jb	SHORT $LN30@tri@18

; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN328@tri@18:
	movaps	xmm9, XMMWORD PTR [rsp+64]
	movaps	xmm11, XMMWORD PTR [rsp+32]
	movaps	xmm13, XMMWORD PTR [rsp]
$LN325@tri@18:
	movaps	xmm10, XMMWORD PTR [rsp+48]
	movaps	xmm12, XMMWORD PTR [rsp+16]
$LN48@tri@18:

; 188  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	movaps	xmm8, XMMWORD PTR [rsp+80]
	add	rsp, 136				; 00000088H
	ret	0
$LN30@tri@18:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	xor	al, al
	jmp	SHORT $LN328@tri@18
$LN36@tri@18:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	xor	al, al
	jmp	SHORT $LN325@tri@18
$LN42@tri@18:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	xor	al, al
	jmp	SHORT $LN48@tri@18
?_tri@?$box_collider@$0A@$00@@QEAA_NXZ ENDP		; box_collider<0,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+175
	DD	imagerel $LN334+295
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+295
	DD	imagerel $LN334+455
	DD	imagerel $chain$4$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+455
	DD	imagerel $LN334+2233
	DD	imagerel $chain$5$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2233
	DD	imagerel $LN334+2259
	DD	imagerel $chain$6$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2259
	DD	imagerel $LN334+2271
	DD	imagerel $chain$7$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2271
	DD	imagerel $LN334+2306
	DD	imagerel $chain$8$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2306
	DD	imagerel $LN334+2310
	DD	imagerel $chain$9$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2310
	DD	imagerel $LN334+2314
	DD	imagerel $chain$10$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2314
	DD	imagerel $LN334+2318
	DD	imagerel $chain$11$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN334+2318
	DD	imagerel $LN334+2322
	DD	imagerel $chain$12$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 040021H
	DD	03f800H
	DD	04e800H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 0a0021H
	DD	03f800H
	DD	04e800H
	DD	099800H
	DD	0a8800H
	DD	0b7800H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 0c0021H
	DD	03f800H
	DD	04e800H
	DD	099800H
	DD	0a8800H
	DD	0b7800H
	DD	0c6800H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN334+175
	DD	imagerel $LN334+295
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN334+295
	DD	imagerel $LN334+455
	DD	imagerel $chain$4$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 020821H
	DD	0c6808H
	DD	imagerel $LN334+295
	DD	imagerel $LN334+455
	DD	imagerel $chain$4$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 061f21H
	DD	09981fH
	DD	0a8816H
	DD	0b7808H
	DD	imagerel $LN334+175
	DD	imagerel $LN334+295
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 040c21H
	DD	03f80cH
	DD	04e806H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 0a2c01H
	DD	05d82cH
	DD	06c826H
	DD	07b820H
	DD	08a81aH
	DD	01b0107H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
_TEXT	SEGMENT
vmax$1$ = 0
fex0$1$ = 0
e1$3$ = 4
v0$2$ = 8
e1$2$ = 12
e0$3$ = 16
normal$3$ = 20
v1$3$ = 24
vmin$2$ = 28
vmin$1$ = 32
tv1282 = 36
normal$2$ = 224
e2$3$ = 224
fez1$1$ = 224
max$2$ = 224
max$1$ = 224
this$ = 224
fez2$1$ = 232
fey1$1$ = 232
fez0$1$ = 232
d$1$ = 232
normal$1$ = 240
fey2$1$ = 240
fex1$1$ = 240
fey0$1$ = 240
e0$2$ = 248
?_tri@?$box_collider@$00$0A@@@QEAA_NXZ PROC		; box_collider<1,0>::_tri, COMDAT

; 116  : 	{

$LN334:
	sub	rsp, 216				; 000000d8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm1, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rsp+128], xmm10
	movaps	XMMWORD PTR [rsp+112], xmm11
	movaps	XMMWORD PTR [rsp+96], xmm12
	movaps	XMMWORD PTR [rsp+80], xmm13
	movss	xmm13, DWORD PTR [rcx+72]
	movss	xmm10, DWORD PTR [rcx+84]
	movss	DWORD PTR tv1282[rsp], xmm1
	movaps	xmm12, xmm1
	subss	xmm13, xmm0
	subss	xmm10, xmm0
	subss	xmm12, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm13
	movaps	xmm0, xmm13
	comiss	xmm10, xmm13
	jae	SHORT $LN330@tri@19
	movaps	xmm0, xmm10
$LN330@tri@19:
	jbe	SHORT $LN46@tri@19
	movaps	xmm1, xmm10
$LN46@tri@19:
	comiss	xmm12, xmm0
	jae	SHORT $LN45@tri@19
	movaps	xmm0, xmm12
$LN45@tri@19:
	comiss	xmm12, xmm1
	jbe	SHORT $LN44@tri@19
	movaps	xmm1, xmm12
$LN44@tri@19:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm11, DWORD PTR [rcx+60]
	comiss	xmm0, xmm11
	ja	$LN42@tri@19
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	movaps	xmm0, xmm11
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN42@tri@19

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm5, DWORD PTR [rcx+76]
	movaps	XMMWORD PTR [rsp+64], xmm14
	movaps	XMMWORD PTR [rsp+48], xmm15

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm15, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm14, DWORD PTR [rcx+100]
	subss	xmm5, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm1, xmm5
	subss	xmm15, xmm0
	subss	xmm14, xmm0
	movss	DWORD PTR v0$2$[rsp], xmm5
	movaps	xmm0, xmm5
	comiss	xmm15, xmm5
	jae	SHORT $LN331@tri@19
	movaps	xmm0, xmm15
$LN331@tri@19:
	jbe	SHORT $LN40@tri@19
	movaps	xmm1, xmm15
$LN40@tri@19:
	comiss	xmm14, xmm0
	jae	SHORT $LN39@tri@19
	movaps	xmm0, xmm14
$LN39@tri@19:
	comiss	xmm14, xmm1
	jbe	SHORT $LN38@tri@19
	movaps	xmm1, xmm14
$LN38@tri@19:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	comiss	xmm0, xmm2
	ja	$LN36@tri@19
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN36@tri@19

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+176], xmm7

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm7, DWORD PTR [rcx+104]
	movaps	XMMWORD PTR [rsp+160], xmm8
	movaps	XMMWORD PTR [rsp+144], xmm9
	movss	xmm9, DWORD PTR [rcx+80]
	movss	xmm8, DWORD PTR [rcx+92]
	subss	xmm7, xmm0
	subss	xmm9, xmm0
	subss	xmm8, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm1, xmm9
	movaps	xmm0, xmm9
	comiss	xmm8, xmm9
	movss	DWORD PTR v1$3$[rsp], xmm8
	jae	SHORT $LN332@tri@19
	movaps	xmm0, xmm8
$LN332@tri@19:
	jbe	SHORT $LN34@tri@19
	movaps	xmm1, xmm8
$LN34@tri@19:
	comiss	xmm7, xmm0
	jae	SHORT $LN33@tri@19
	movaps	xmm0, xmm7
$LN33@tri@19:
	comiss	xmm7, xmm1
	jbe	SHORT $LN32@tri@19
	movaps	xmm1, xmm7
$LN32@tri@19:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	comiss	xmm0, xmm4
	ja	$LN30@tri@19
	movaps	xmm0, xmm4
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN30@tri@19

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;

	movaps	xmm1, xmm8

; 149  : 		const Point e1 = v2 - v1;

	movaps	xmm8, xmm14
	movaps	xmm0, xmm10
	subss	xmm0, xmm13
	subss	xmm1, xmm9
	subss	xmm8, xmm15
	movaps	XMMWORD PTR [rsp+192], xmm6
	movaps	xmm6, xmm15
	movss	DWORD PTR e0$3$[rsp], xmm0
	subss	xmm6, xmm5
	movss	DWORD PTR e0$2$[rsp], xmm1
	movaps	xmm0, xmm12
	subss	xmm0, xmm10
	movss	DWORD PTR e1$3$[rsp], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, DWORD PTR v1$3$[rsp]
	movss	DWORD PTR e1$2$[rsp], xmm0

; 150  : 		const Point normal = e0 ^ e1;

	movaps	xmm5, xmm0
	movaps	xmm0, xmm8
	mulss	xmm0, xmm1
	mulss	xmm5, xmm6
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm0, xmm1
	movss	DWORD PTR normal$1$[rsp], xmm5

; 151  : 		const float d = -normal|v0;

	movss	xmm1, DWORD PTR normal$1$[rsp]
	movss	DWORD PTR normal$2$[rsp], xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR e0$3$[rsp]
	xorps	xmm1, xmm3
	movss	xmm5, DWORD PTR normal$2$[rsp]
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm1, xmm13
	mulss	xmm0, xmm6
	movss	DWORD PTR normal$2$[rsp], xmm5
	movaps	xmm5, xmm8
	mulss	xmm5, DWORD PTR e0$3$[rsp]
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR normal$2$[rsp]
	xorps	xmm0, xmm3
	movss	DWORD PTR d$1$[rsp], xmm0
	movss	DWORD PTR normal$3$[rsp], xmm5
	movaps	xmm0, xmm5
	xorps	xmm0, xmm3
	movss	xmm3, DWORD PTR d$1$[rsp]
	mulss	xmm0, xmm9
	mulss	xmm3, DWORD PTR v0$2$[rsp]
	movss	xmm5, xmm3

; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;

	movss	xmm3, DWORD PTR __mask@@NegFloat@
	addss	xmm5, xmm1
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR normal$1$[rsp]
	movss	DWORD PTR d$1$[rsp], xmm5
	xorps	xmm5, xmm5
	comiss	xmm0, xmm5
	movss	xmm0, xmm11
	jbe	SHORT $LN91@tri@19
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3
	movss	DWORD PTR vmin$1$[rsp], xmm1
	jmp	SHORT $LN333@tri@19
$LN91@tri@19:
	movss	DWORD PTR vmin$1$[rsp], xmm0
	xorps	xmm0, xmm3
$LN333@tri@19:
	movss	DWORD PTR vmax$1$[rsp], xmm0
	movss	xmm0, DWORD PTR normal$2$[rsp]
	comiss	xmm0, xmm5
	jbe	SHORT $LN318@tri@19
	movss	xmm0, xmm2
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3
	jmp	SHORT $LN319@tri@19
$LN318@tri@19:
	movss	xmm1, xmm2
	movaps	xmm0, xmm1
	xorps	xmm0, xmm3
$LN319@tri@19:
	movss	xmm3, DWORD PTR normal$3$[rsp]
	comiss	xmm3, xmm5
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	movss	xmm5, xmm4
	jbe	SHORT $LN321@tri@19
	movaps	xmm11, xmm5
	xorps	xmm11, xmm3
	movss	DWORD PTR vmin$2$[rsp], xmm11
	movss	xmm11, DWORD PTR [rcx+60]
	jmp	SHORT $LN322@tri@19
$LN321@tri@19:
	movss	DWORD PTR vmin$2$[rsp], xmm4
	xorps	xmm5, xmm3
$LN322@tri@19:
	mulss	xmm1, DWORD PTR normal$2$[rsp]
	movss	xmm3, DWORD PTR vmin$1$[rsp]
	mulss	xmm3, DWORD PTR normal$1$[rsp]
	addss	xmm1, xmm3
	movss	xmm3, DWORD PTR vmin$2$[rsp]
	mulss	xmm3, DWORD PTR normal$3$[rsp]
	addss	xmm1, xmm3
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, DWORD PTR __real@00000000
	ja	$LN323@tri@19
	mulss	xmm0, DWORD PTR normal$2$[rsp]
	movss	xmm1, DWORD PTR vmax$1$[rsp]
	mulss	xmm5, DWORD PTR normal$3$[rsp]
	mulss	xmm1, DWORD PTR normal$1$[rsp]
	addss	xmm0, xmm1
	addss	xmm0, xmm5
	addss	xmm0, DWORD PTR d$1$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN323@tri@19

; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);

	movaps	xmm1, xmm6

; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm6
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	mulss	xmm0, xmm9
	movss	DWORD PTR fey0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$2$[rsp]
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	movss	DWORD PTR fez0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$2$[rsp]
	movaps	xmm5, xmm1
	mulss	xmm1, xmm14
	mulss	xmm5, DWORD PTR v0$2$[rsp]
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm7
	subss	xmm1, xmm0
	comiss	xmm5, xmm1
	movss	DWORD PTR max$1$[rsp], xmm1
	jbe	SHORT $LN27@tri@19
	movaps	xmm0, xmm1
	movaps	xmm1, xmm5
	movaps	xmm5, xmm0
	movss	DWORD PTR max$1$[rsp], xmm1
$LN27@tri@19:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@19
	movss	xmm0, DWORD PTR max$1$[rsp]
	xorps	xmm1, xmm3
	comiss	xmm0, xmm1
	jb	$LN323@tri@19

; 168  : 			const float fex0 = _abs(e0.x);

	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm0, xmm1

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm5, xmm1
	mulss	xmm1, xmm7
	andps	xmm0, DWORD PTR __mask@@AbsFloat@
	mulss	xmm5, xmm9
	movss	DWORD PTR fex0$1$[rsp], xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, xmm13
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, xmm12
	subss	xmm1, xmm0
	comiss	xmm5, xmm1
	movss	DWORD PTR max$2$[rsp], xmm1
	jbe	SHORT $LN24@tri@19
	movaps	xmm0, xmm1
	movaps	xmm1, xmm5
	movaps	xmm5, xmm0
	movss	DWORD PTR max$2$[rsp], xmm1
$LN24@tri@19:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm11
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@19
	movss	xmm0, DWORD PTR max$2$[rsp]
	xorps	xmm1, xmm3
	comiss	xmm0, xmm1
	jb	$LN323@tri@19

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm5, xmm6
	mulss	xmm6, xmm12
	mulss	xmm5, xmm10
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm1, xmm14
	subss	xmm5, xmm0
	subss	xmm6, xmm1
	comiss	xmm5, xmm6
	jbe	SHORT $LN21@tri@19
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN21@tri@19:
	movaps	xmm1, xmm11
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fex0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@19
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN323@tri@19

; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);

	movss	xmm6, DWORD PTR e1$2$[rsp]
	movaps	xmm1, xmm8

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm8
	movaps	xmm5, xmm6
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	mulss	xmm0, xmm9
	movss	DWORD PTR fey1$1$[rsp], xmm1
	movaps	xmm1, xmm6
	mulss	xmm5, DWORD PTR v0$2$[rsp]
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	mulss	xmm6, xmm14
	subss	xmm5, xmm0
	movaps	xmm0, xmm8
	movss	DWORD PTR fez1$1$[rsp], xmm1
	mulss	xmm0, xmm7
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN18@tri@19
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN18@tri@19:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@19
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN323@tri@19

; 175  : 			const float fex1 = _abs(e1.x);

	movss	xmm1, DWORD PTR e1$3$[rsp]
	movaps	xmm0, xmm1

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm6, xmm1
	movaps	xmm5, xmm1
	andps	xmm0, DWORD PTR __mask@@AbsFloat@
	mulss	xmm6, xmm9
	mulss	xmm5, xmm7
	movss	DWORD PTR fex1$1$[rsp], xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, xmm13
	subss	xmm6, xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, xmm12
	subss	xmm5, xmm0
	comiss	xmm6, xmm5
	jbe	SHORT $LN15@tri@19
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN15@tri@19:
	movss	xmm7, DWORD PTR fex1$1$[rsp]
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm6, xmm1
	ja	$LN323@tri@19
	xorps	xmm1, xmm3
	comiss	xmm5, xmm1
	jb	$LN323@tri@19

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movss	xmm1, DWORD PTR e1$3$[rsp]
	movss	xmm6, DWORD PTR v0$2$[rsp]
	movaps	xmm5, xmm8
	mulss	xmm8, xmm10
	mulss	xmm5, xmm13
	movaps	xmm0, xmm1
	mulss	xmm0, xmm6
	mulss	xmm1, xmm15
	subss	xmm5, xmm0
	subss	xmm8, xmm1
	comiss	xmm5, xmm8
	jbe	SHORT $LN12@tri@19
	movaps	xmm0, xmm8
	movaps	xmm8, xmm5
	movaps	xmm5, xmm0
$LN12@tri@19:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@19
	xorps	xmm1, xmm3
	comiss	xmm8, xmm1
	jb	$LN323@tri@19

; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];

	movss	xmm1, DWORD PTR [rcx+76]
	movss	xmm7, DWORD PTR [rcx+80]
	movss	xmm0, DWORD PTR [rcx+72]
	subss	xmm0, DWORD PTR tv1282[rsp]
	subss	xmm1, DWORD PTR [rcx+100]
	subss	xmm7, DWORD PTR [rcx+104]

; 180  : 			const float fey2 = _abs(e2.y);

	movaps	xmm5, xmm1

; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm8, xmm7
	andps	xmm5, DWORD PTR __mask@@AbsFloat@
	mulss	xmm8, xmm6
	movaps	xmm6, xmm7
	movss	DWORD PTR e2$3$[rsp], xmm0
	movss	DWORD PTR fey2$1$[rsp], xmm5
	mulss	xmm6, xmm15
	movaps	xmm0, xmm1
	movaps	xmm5, xmm7
	andps	xmm5, DWORD PTR __mask@@AbsFloat@
	mulss	xmm0, xmm9
	subss	xmm8, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR fez2$1$[rsp], xmm5
	mulss	xmm0, DWORD PTR v1$3$[rsp]
	subss	xmm6, xmm0
	comiss	xmm8, xmm6
	jbe	SHORT $LN9@tri@19
	movaps	xmm0, xmm6
	movaps	xmm6, xmm8
	movaps	xmm8, xmm0
$LN9@tri@19:
	movaps	xmm5, xmm2
	movaps	xmm0, xmm4
	mulss	xmm5, DWORD PTR fez2$1$[rsp]
	mulss	xmm0, DWORD PTR fey2$1$[rsp]
	addss	xmm5, xmm0
	comiss	xmm8, xmm5
	ja	$LN323@tri@19
	xorps	xmm5, xmm3
	comiss	xmm6, xmm5
	jb	$LN323@tri@19

; 183  : 			const float fex2 = _abs(e2.x);

	movss	xmm0, DWORD PTR e2$3$[rsp]

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm6, xmm0
	movaps	xmm8, xmm0
	movaps	xmm0, xmm7
	mulss	xmm7, xmm10
	andps	xmm8, DWORD PTR __mask@@AbsFloat@
	mulss	xmm6, xmm9
	mulss	xmm0, xmm13
	movss	xmm9, DWORD PTR e2$3$[rsp]
	movaps	xmm5, xmm9
	subss	xmm6, xmm0
	mulss	xmm5, DWORD PTR v1$3$[rsp]
	subss	xmm5, xmm7
	comiss	xmm6, xmm5
	jbe	SHORT $LN6@tri@19
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN6@tri@19:
	movaps	xmm0, xmm11
	mulss	xmm4, xmm8
	mulss	xmm0, DWORD PTR fez2$1$[rsp]
	addss	xmm4, xmm0
	comiss	xmm6, xmm4
	ja	$LN323@tri@19
	xorps	xmm4, xmm3
	comiss	xmm5, xmm4
	jb	$LN323@tri@19

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm4, xmm1
	movaps	xmm0, xmm9
	mulss	xmm1, xmm12
	mulss	xmm4, xmm10
	mulss	xmm0, xmm15
	mulss	xmm9, xmm14
	subss	xmm4, xmm0
	subss	xmm1, xmm9
	comiss	xmm4, xmm1
	jbe	SHORT $LN3@tri@19
	movaps	xmm0, xmm1
	movaps	xmm1, xmm4
	movaps	xmm4, xmm0
$LN3@tri@19:
	mulss	xmm11, DWORD PTR fey2$1$[rsp]
	mulss	xmm2, xmm8
	addss	xmm2, xmm11
	comiss	xmm4, xmm2
	ja	SHORT $LN323@tri@19
	xorps	xmm2, xmm3
	comiss	xmm1, xmm2
	jb	SHORT $LN323@tri@19

; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN329@tri@19:
	movaps	xmm6, XMMWORD PTR [rsp+192]
$LN328@tri@19:
	movaps	xmm9, XMMWORD PTR [rsp+144]
	movaps	xmm8, XMMWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [rsp+176]
$LN325@tri@19:
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm15, XMMWORD PTR [rsp+48]
$LN48@tri@19:

; 188  : 	}

	movaps	xmm10, XMMWORD PTR [rsp+128]
	movaps	xmm11, XMMWORD PTR [rsp+112]
	movaps	xmm12, XMMWORD PTR [rsp+96]
	movaps	xmm13, XMMWORD PTR [rsp+80]
	add	rsp, 216				; 000000d8H
	ret	0
$LN323@tri@19:

; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;

	xor	al, al
	jmp	SHORT $LN329@tri@19
$LN30@tri@19:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	xor	al, al
	jmp	SHORT $LN328@tri@19
$LN36@tri@19:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	xor	al, al
	jmp	SHORT $LN325@tri@19
$LN42@tri@19:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	xor	al, al
	jmp	SHORT $LN48@tri@19
?_tri@?$box_collider@$00$0A@@@QEAA_NXZ ENDP		; box_collider<1,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+175
	DD	imagerel $LN334+295
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+295
	DD	imagerel $LN334+455
	DD	imagerel $chain$4$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+455
	DD	imagerel $LN334+2233
	DD	imagerel $chain$5$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2233
	DD	imagerel $LN334+2259
	DD	imagerel $chain$6$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2259
	DD	imagerel $LN334+2271
	DD	imagerel $chain$7$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2271
	DD	imagerel $LN334+2306
	DD	imagerel $chain$8$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2306
	DD	imagerel $LN334+2310
	DD	imagerel $chain$9$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2310
	DD	imagerel $LN334+2314
	DD	imagerel $chain$10$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2314
	DD	imagerel $LN334+2318
	DD	imagerel $chain$11$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN334+2318
	DD	imagerel $LN334+2322
	DD	imagerel $chain$12$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 040021H
	DD	03f800H
	DD	04e800H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 0a0021H
	DD	03f800H
	DD	04e800H
	DD	099800H
	DD	0a8800H
	DD	0b7800H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 0c0021H
	DD	03f800H
	DD	04e800H
	DD	099800H
	DD	0a8800H
	DD	0b7800H
	DD	0c6800H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN334+175
	DD	imagerel $LN334+295
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN334+295
	DD	imagerel $LN334+455
	DD	imagerel $chain$4$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 020821H
	DD	0c6808H
	DD	imagerel $LN334+295
	DD	imagerel $LN334+455
	DD	imagerel $chain$4$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 061f21H
	DD	09981fH
	DD	0a8816H
	DD	0b7808H
	DD	imagerel $LN334+175
	DD	imagerel $LN334+295
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 040c21H
	DD	03f80cH
	DD	04e806H
	DD	imagerel $LN334
	DD	imagerel $LN334+175
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 0a2c01H
	DD	05d82cH
	DD	06c826H
	DD	07b820H
	DD	08a81aH
	DD	01b0107H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_tri@?$box_collider@$00$00@@QEAA_NXZ
_TEXT	SEGMENT
vmax$1$ = 0
fex0$1$ = 0
e1$3$ = 4
v0$2$ = 8
e1$2$ = 12
e0$3$ = 16
normal$3$ = 20
v1$3$ = 24
vmin$2$ = 28
vmin$1$ = 32
tv1282 = 36
normal$2$ = 224
e2$3$ = 224
fez1$1$ = 224
max$2$ = 224
max$1$ = 224
this$ = 224
fez2$1$ = 232
fey1$1$ = 232
fez0$1$ = 232
d$1$ = 232
normal$1$ = 240
fey2$1$ = 240
fex1$1$ = 240
fey0$1$ = 240
e0$2$ = 248
?_tri@?$box_collider@$00$00@@QEAA_NXZ PROC		; box_collider<1,1>::_tri, COMDAT

; 116  : 	{

$LN334:
	sub	rsp, 216				; 000000d8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm1, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rsp+128], xmm10
	movaps	XMMWORD PTR [rsp+112], xmm11
	movaps	XMMWORD PTR [rsp+96], xmm12
	movaps	XMMWORD PTR [rsp+80], xmm13
	movss	xmm13, DWORD PTR [rcx+72]
	movss	xmm10, DWORD PTR [rcx+84]
	movss	DWORD PTR tv1282[rsp], xmm1
	movaps	xmm12, xmm1
	subss	xmm13, xmm0
	subss	xmm10, xmm0
	subss	xmm12, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm13
	movaps	xmm0, xmm13
	comiss	xmm10, xmm13
	jae	SHORT $LN330@tri@20
	movaps	xmm0, xmm10
$LN330@tri@20:
	jbe	SHORT $LN46@tri@20
	movaps	xmm1, xmm10
$LN46@tri@20:
	comiss	xmm12, xmm0
	jae	SHORT $LN45@tri@20
	movaps	xmm0, xmm12
$LN45@tri@20:
	comiss	xmm12, xmm1
	jbe	SHORT $LN44@tri@20
	movaps	xmm1, xmm12
$LN44@tri@20:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm11, DWORD PTR [rcx+60]
	comiss	xmm0, xmm11
	ja	$LN42@tri@20
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	movaps	xmm0, xmm11
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN42@tri@20

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm5, DWORD PTR [rcx+76]
	movaps	XMMWORD PTR [rsp+64], xmm14
	movaps	XMMWORD PTR [rsp+48], xmm15

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm15, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm14, DWORD PTR [rcx+100]
	subss	xmm5, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm1, xmm5
	subss	xmm15, xmm0
	subss	xmm14, xmm0
	movss	DWORD PTR v0$2$[rsp], xmm5
	movaps	xmm0, xmm5
	comiss	xmm15, xmm5
	jae	SHORT $LN331@tri@20
	movaps	xmm0, xmm15
$LN331@tri@20:
	jbe	SHORT $LN40@tri@20
	movaps	xmm1, xmm15
$LN40@tri@20:
	comiss	xmm14, xmm0
	jae	SHORT $LN39@tri@20
	movaps	xmm0, xmm14
$LN39@tri@20:
	comiss	xmm14, xmm1
	jbe	SHORT $LN38@tri@20
	movaps	xmm1, xmm14
$LN38@tri@20:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	comiss	xmm0, xmm2
	ja	$LN36@tri@20
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN36@tri@20

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+176], xmm7

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm7, DWORD PTR [rcx+104]
	movaps	XMMWORD PTR [rsp+160], xmm8
	movaps	XMMWORD PTR [rsp+144], xmm9
	movss	xmm9, DWORD PTR [rcx+80]
	movss	xmm8, DWORD PTR [rcx+92]
	subss	xmm7, xmm0
	subss	xmm9, xmm0
	subss	xmm8, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm1, xmm9
	movaps	xmm0, xmm9
	comiss	xmm8, xmm9
	movss	DWORD PTR v1$3$[rsp], xmm8
	jae	SHORT $LN332@tri@20
	movaps	xmm0, xmm8
$LN332@tri@20:
	jbe	SHORT $LN34@tri@20
	movaps	xmm1, xmm8
$LN34@tri@20:
	comiss	xmm7, xmm0
	jae	SHORT $LN33@tri@20
	movaps	xmm0, xmm7
$LN33@tri@20:
	comiss	xmm7, xmm1
	jbe	SHORT $LN32@tri@20
	movaps	xmm1, xmm7
$LN32@tri@20:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	comiss	xmm0, xmm4
	ja	$LN30@tri@20
	movaps	xmm0, xmm4
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN30@tri@20

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;

	movaps	xmm1, xmm8

; 149  : 		const Point e1 = v2 - v1;

	movaps	xmm8, xmm14
	movaps	xmm0, xmm10
	subss	xmm0, xmm13
	subss	xmm1, xmm9
	subss	xmm8, xmm15
	movaps	XMMWORD PTR [rsp+192], xmm6
	movaps	xmm6, xmm15
	movss	DWORD PTR e0$3$[rsp], xmm0
	subss	xmm6, xmm5
	movss	DWORD PTR e0$2$[rsp], xmm1
	movaps	xmm0, xmm12
	subss	xmm0, xmm10
	movss	DWORD PTR e1$3$[rsp], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, DWORD PTR v1$3$[rsp]
	movss	DWORD PTR e1$2$[rsp], xmm0

; 150  : 		const Point normal = e0 ^ e1;

	movaps	xmm5, xmm0
	movaps	xmm0, xmm8
	mulss	xmm0, xmm1
	mulss	xmm5, xmm6
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm0, xmm1
	movss	DWORD PTR normal$1$[rsp], xmm5

; 151  : 		const float d = -normal|v0;

	movss	xmm1, DWORD PTR normal$1$[rsp]
	movss	DWORD PTR normal$2$[rsp], xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR e0$3$[rsp]
	xorps	xmm1, xmm3
	movss	xmm5, DWORD PTR normal$2$[rsp]
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm1, xmm13
	mulss	xmm0, xmm6
	movss	DWORD PTR normal$2$[rsp], xmm5
	movaps	xmm5, xmm8
	mulss	xmm5, DWORD PTR e0$3$[rsp]
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR normal$2$[rsp]
	xorps	xmm0, xmm3
	movss	DWORD PTR d$1$[rsp], xmm0
	movss	DWORD PTR normal$3$[rsp], xmm5
	movaps	xmm0, xmm5
	xorps	xmm0, xmm3
	movss	xmm3, DWORD PTR d$1$[rsp]
	mulss	xmm0, xmm9
	mulss	xmm3, DWORD PTR v0$2$[rsp]
	movss	xmm5, xmm3

; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;

	movss	xmm3, DWORD PTR __mask@@NegFloat@
	addss	xmm5, xmm1
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR normal$1$[rsp]
	movss	DWORD PTR d$1$[rsp], xmm5
	xorps	xmm5, xmm5
	comiss	xmm0, xmm5
	movss	xmm0, xmm11
	jbe	SHORT $LN91@tri@20
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3
	movss	DWORD PTR vmin$1$[rsp], xmm1
	jmp	SHORT $LN333@tri@20
$LN91@tri@20:
	movss	DWORD PTR vmin$1$[rsp], xmm0
	xorps	xmm0, xmm3
$LN333@tri@20:
	movss	DWORD PTR vmax$1$[rsp], xmm0
	movss	xmm0, DWORD PTR normal$2$[rsp]
	comiss	xmm0, xmm5
	jbe	SHORT $LN318@tri@20
	movss	xmm0, xmm2
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3
	jmp	SHORT $LN319@tri@20
$LN318@tri@20:
	movss	xmm1, xmm2
	movaps	xmm0, xmm1
	xorps	xmm0, xmm3
$LN319@tri@20:
	movss	xmm3, DWORD PTR normal$3$[rsp]
	comiss	xmm3, xmm5
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	movss	xmm5, xmm4
	jbe	SHORT $LN321@tri@20
	movaps	xmm11, xmm5
	xorps	xmm11, xmm3
	movss	DWORD PTR vmin$2$[rsp], xmm11
	movss	xmm11, DWORD PTR [rcx+60]
	jmp	SHORT $LN322@tri@20
$LN321@tri@20:
	movss	DWORD PTR vmin$2$[rsp], xmm4
	xorps	xmm5, xmm3
$LN322@tri@20:
	mulss	xmm1, DWORD PTR normal$2$[rsp]
	movss	xmm3, DWORD PTR vmin$1$[rsp]
	mulss	xmm3, DWORD PTR normal$1$[rsp]
	addss	xmm1, xmm3
	movss	xmm3, DWORD PTR vmin$2$[rsp]
	mulss	xmm3, DWORD PTR normal$3$[rsp]
	addss	xmm1, xmm3
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, DWORD PTR __real@00000000
	ja	$LN323@tri@20
	mulss	xmm0, DWORD PTR normal$2$[rsp]
	movss	xmm1, DWORD PTR vmax$1$[rsp]
	mulss	xmm5, DWORD PTR normal$3$[rsp]
	mulss	xmm1, DWORD PTR normal$1$[rsp]
	addss	xmm0, xmm1
	addss	xmm0, xmm5
	addss	xmm0, DWORD PTR d$1$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN323@tri@20

; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);

	movaps	xmm1, xmm6

; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm6
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	mulss	xmm0, xmm9
	movss	DWORD PTR fey0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$2$[rsp]
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	movss	DWORD PTR fez0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$2$[rsp]
	movaps	xmm5, xmm1
	mulss	xmm1, xmm14
	mulss	xmm5, DWORD PTR v0$2$[rsp]
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm7
	subss	xmm1, xmm0
	comiss	xmm5, xmm1
	movss	DWORD PTR max$1$[rsp], xmm1
	jbe	SHORT $LN27@tri@20
	movaps	xmm0, xmm1
	movaps	xmm1, xmm5
	movaps	xmm5, xmm0
	movss	DWORD PTR max$1$[rsp], xmm1
$LN27@tri@20:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@20
	movss	xmm0, DWORD PTR max$1$[rsp]
	xorps	xmm1, xmm3
	comiss	xmm0, xmm1
	jb	$LN323@tri@20

; 168  : 			const float fex0 = _abs(e0.x);

	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm0, xmm1

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm5, xmm1
	mulss	xmm1, xmm7
	andps	xmm0, DWORD PTR __mask@@AbsFloat@
	mulss	xmm5, xmm9
	movss	DWORD PTR fex0$1$[rsp], xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, xmm13
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, xmm12
	subss	xmm1, xmm0
	comiss	xmm5, xmm1
	movss	DWORD PTR max$2$[rsp], xmm1
	jbe	SHORT $LN24@tri@20
	movaps	xmm0, xmm1
	movaps	xmm1, xmm5
	movaps	xmm5, xmm0
	movss	DWORD PTR max$2$[rsp], xmm1
$LN24@tri@20:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm11
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@20
	movss	xmm0, DWORD PTR max$2$[rsp]
	xorps	xmm1, xmm3
	comiss	xmm0, xmm1
	jb	$LN323@tri@20

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm5, xmm6
	mulss	xmm6, xmm12
	mulss	xmm5, xmm10
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm1, xmm14
	subss	xmm5, xmm0
	subss	xmm6, xmm1
	comiss	xmm5, xmm6
	jbe	SHORT $LN21@tri@20
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN21@tri@20:
	movaps	xmm1, xmm11
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fex0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@20
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN323@tri@20

; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);

	movss	xmm6, DWORD PTR e1$2$[rsp]
	movaps	xmm1, xmm8

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm8
	movaps	xmm5, xmm6
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	mulss	xmm0, xmm9
	movss	DWORD PTR fey1$1$[rsp], xmm1
	movaps	xmm1, xmm6
	mulss	xmm5, DWORD PTR v0$2$[rsp]
	andps	xmm1, DWORD PTR __mask@@AbsFloat@
	mulss	xmm6, xmm14
	subss	xmm5, xmm0
	movaps	xmm0, xmm8
	movss	DWORD PTR fez1$1$[rsp], xmm1
	mulss	xmm0, xmm7
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN18@tri@20
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN18@tri@20:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@20
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN323@tri@20

; 175  : 			const float fex1 = _abs(e1.x);

	movss	xmm1, DWORD PTR e1$3$[rsp]
	movaps	xmm0, xmm1

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm6, xmm1
	movaps	xmm5, xmm1
	andps	xmm0, DWORD PTR __mask@@AbsFloat@
	mulss	xmm6, xmm9
	mulss	xmm5, xmm7
	movss	DWORD PTR fex1$1$[rsp], xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, xmm13
	subss	xmm6, xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, xmm12
	subss	xmm5, xmm0
	comiss	xmm6, xmm5
	jbe	SHORT $LN15@tri@20
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN15@tri@20:
	movss	xmm7, DWORD PTR fex1$1$[rsp]
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm6, xmm1
	ja	$LN323@tri@20
	xorps	xmm1, xmm3
	comiss	xmm5, xmm1
	jb	$LN323@tri@20

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movss	xmm1, DWORD PTR e1$3$[rsp]
	movss	xmm6, DWORD PTR v0$2$[rsp]
	movaps	xmm5, xmm8
	mulss	xmm8, xmm10
	mulss	xmm5, xmm13
	movaps	xmm0, xmm1
	mulss	xmm0, xmm6
	mulss	xmm1, xmm15
	subss	xmm5, xmm0
	subss	xmm8, xmm1
	comiss	xmm5, xmm8
	jbe	SHORT $LN12@tri@20
	movaps	xmm0, xmm8
	movaps	xmm8, xmm5
	movaps	xmm5, xmm0
$LN12@tri@20:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN323@tri@20
	xorps	xmm1, xmm3
	comiss	xmm8, xmm1
	jb	$LN323@tri@20

; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];

	movss	xmm1, DWORD PTR [rcx+76]
	movss	xmm7, DWORD PTR [rcx+80]
	movss	xmm0, DWORD PTR [rcx+72]
	subss	xmm0, DWORD PTR tv1282[rsp]
	subss	xmm1, DWORD PTR [rcx+100]
	subss	xmm7, DWORD PTR [rcx+104]

; 180  : 			const float fey2 = _abs(e2.y);

	movaps	xmm5, xmm1

; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm8, xmm7
	andps	xmm5, DWORD PTR __mask@@AbsFloat@
	mulss	xmm8, xmm6
	movaps	xmm6, xmm7
	movss	DWORD PTR e2$3$[rsp], xmm0
	movss	DWORD PTR fey2$1$[rsp], xmm5
	mulss	xmm6, xmm15
	movaps	xmm0, xmm1
	movaps	xmm5, xmm7
	andps	xmm5, DWORD PTR __mask@@AbsFloat@
	mulss	xmm0, xmm9
	subss	xmm8, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR fez2$1$[rsp], xmm5
	mulss	xmm0, DWORD PTR v1$3$[rsp]
	subss	xmm6, xmm0
	comiss	xmm8, xmm6
	jbe	SHORT $LN9@tri@20
	movaps	xmm0, xmm6
	movaps	xmm6, xmm8
	movaps	xmm8, xmm0
$LN9@tri@20:
	movaps	xmm5, xmm2
	movaps	xmm0, xmm4
	mulss	xmm5, DWORD PTR fez2$1$[rsp]
	mulss	xmm0, DWORD PTR fey2$1$[rsp]
	addss	xmm5, xmm0
	comiss	xmm8, xmm5
	ja	$LN323@tri@20
	xorps	xmm5, xmm3
	comiss	xmm6, xmm5
	jb	$LN323@tri@20

; 183  : 			const float fex2 = _abs(e2.x);

	movss	xmm0, DWORD PTR e2$3$[rsp]

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm6, xmm0
	movaps	xmm8, xmm0
	movaps	xmm0, xmm7
	mulss	xmm7, xmm10
	andps	xmm8, DWORD PTR __mask@@AbsFloat@
	mulss	xmm6, xmm9
	mulss	xmm0, xmm13
	movss	xmm9, DWORD PTR e2$3$[rsp]
	movaps	xmm5, xmm9
	subss	xmm6, xmm0
	mulss	xmm5, DWORD PTR v1$3$[rsp]
	subss	xmm5, xmm7
	comiss	xmm6, xmm5
	jbe	SHORT $LN6@tri@20
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN6@tri@20:
	movaps	xmm0, xmm11
	mulss	xmm4, xmm8
	mulss	xmm0, DWORD PTR fez2$1$[rsp]
	addss	xmm4, xmm0
	comiss	xmm6, xmm4
	ja	$LN323@tri@20
	xorps	xmm4, xmm3
	comiss	xmm5, xmm4
	jb	$LN323@tri@20

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm4, xmm1
	movaps	xmm0, xmm9
	mulss	xmm1, xmm12
	mulss	xmm4, xmm10
	mulss	xmm0, xmm15
	mulss	xmm9, xmm14
	subss	xmm4, xmm0
	subss	xmm1, xmm9
	comiss	xmm4, xmm1
	jbe	SHORT $LN3@tri@20
	movaps	xmm0, xmm1
	movaps	xmm1, xmm4
	movaps	xmm4, xmm0
$LN3@tri@20:
	mulss	xmm11, DWORD PTR fey2$1$[rsp]
	mulss	xmm2, xmm8
	addss	xmm2, xmm11
	comiss	xmm4, xmm2
	ja	SHORT $LN323@tri@20
	xorps	xmm2, xmm3
	comiss	xmm1, xmm2
	jb	SHORT $LN323@tri@20

; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN329@tri@20:
	movaps	xmm6, XMMWORD PTR [rsp+192]
$LN328@tri@20:
	movaps	xmm9, XMMWORD PTR [rsp+144]
	movaps	xmm8, XMMWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [rsp+176]
$LN325@tri@20:
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm15, XMMWORD PTR [rsp+48]
$LN48@tri@20:

; 188  : 	}

	movaps	xmm10, XMMWORD PTR [rsp+128]
	movaps	xmm11, XMMWORD PTR [rsp+112]
	movaps	xmm12, XMMWORD PTR [rsp+96]
	movaps	xmm13, XMMWORD PTR [rsp+80]
	add	rsp, 216				; 000000d8H
	ret	0
$LN323@tri@20:

; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;

	xor	al, al
	jmp	SHORT $LN329@tri@20
$LN30@tri@20:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	xor	al, al
	jmp	SHORT $LN328@tri@20
$LN36@tri@20:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	xor	al, al
	jmp	SHORT $LN325@tri@20
$LN42@tri@20:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	xor	al, al
	jmp	SHORT $LN48@tri@20
?_tri@?$box_collider@$00$00@@QEAA_NXZ ENDP		; box_collider<1,1>::_tri
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336
	DD	imagerel $LN336+291
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336+291
	DD	imagerel $LN336+403
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336+403
	DD	imagerel $LN336+521
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336+521
	DD	imagerel $LN336+887
	DD	imagerel $chain$4$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336+887
	DD	imagerel $LN336+903
	DD	imagerel $chain$5$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336+903
	DD	imagerel $LN336+918
	DD	imagerel $chain$6$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN336+918
	DD	imagerel $LN336+973
	DD	imagerel $chain$7$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN336
	DD	imagerel $LN336+291
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+291
	DD	imagerel $LN336+403
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+403
	DD	imagerel $LN336+521
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 020621H
	DD	03d806H
	DD	imagerel $LN336+403
	DD	imagerel $LN336+521
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 041521H
	DD	097815H
	DD	0a6808H
	DD	imagerel $LN336+291
	DD	imagerel $LN336+403
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 040f21H
	DD	06a80fH
	DD	088809H
	DD	imagerel $LN336
	DD	imagerel $LN336+291
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 0154901H
	DD	02e849H
	DD	04c843H
	DD	05b83aH
	DD	079834H
	DD	01d7421H
	DD	01c6421H
	DD	01b5421H
	DD	01a3421H
	DD	0160121H
	DD	0d018e01aH
	DD	0c016H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 208
prim$ = 216
?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z PROC		; box_collider<0,0>::_prim, COMDAT

; 190  : 	{

$LN336:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 176				; 000000b0H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rbx, QWORD PTR [rcx+16]
	mov	r13, QWORD PTR [rcx+8]

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;
; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;
; 195  : 		if (!_tri())			return;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rsp+112], xmm9
	movaps	XMMWORD PTR [rsp+80], xmm11
	mov	r14d, edx
	movaps	XMMWORD PTR [rsp+64], xmm12
	movaps	XMMWORD PTR [rsp+32], xmm14
	lea	r12, QWORD PTR [r14+r14*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rdi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rdi*4]
	mov	DWORD PTR [rcx+72], eax
	mov	eax, DWORD PTR [rbx+rdi*4+4]
	movss	xmm14, DWORD PTR [rcx+72]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rbx+rdi*4+8]
	subss	xmm14, xmm0
	mov	DWORD PTR [rcx+80], eax
	mov	eax, DWORD PTR [r13+r12*8+4]
	movaps	xmm2, xmm14
	movaps	xmm1, xmm14
	lea	rsi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rsi*4]
	mov	DWORD PTR [rcx+84], eax
	mov	eax, DWORD PTR [rbx+rsi*4+4]
	movss	xmm12, DWORD PTR [rcx+84]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbx+rsi*4+8]
	subss	xmm12, xmm0
	comiss	xmm12, xmm14
	mov	DWORD PTR [rcx+92], eax
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	rbp, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rbp*4]
	mov	DWORD PTR [rcx+96], eax
	mov	eax, DWORD PTR [rbx+rbp*4+4]
	movss	xmm11, DWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+100], eax
	subss	xmm11, xmm0
	movss	xmm9, DWORD PTR [rbx+rbp*4+8]
	movss	DWORD PTR [rcx+104], xmm9
	jae	SHORT $LN333@prim@19
	movaps	xmm1, xmm12
$LN333@prim@19:
	jbe	SHORT $LN49@prim@19
	movaps	xmm2, xmm12
$LN49@prim@19:
	comiss	xmm11, xmm1
	jae	SHORT $LN48@prim@19
	movaps	xmm1, xmm11
$LN48@prim@19:
	comiss	xmm11, xmm2
	jbe	SHORT $LN47@prim@19
	movaps	xmm2, xmm11
$LN47@prim@19:
	movss	xmm0, DWORD PTR [rcx+60]
	comiss	xmm1, xmm0
	ja	$LN2@prim@19
	movss	xmm4, DWORD PTR __mask@@NegFloat@
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN2@prim@19
	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm5, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+128], xmm8
	movaps	XMMWORD PTR [rsp+96], xmm10
	movss	xmm10, DWORD PTR [rcx+76]
	movss	xmm8, DWORD PTR [rcx+88]
	subss	xmm5, xmm0
	subss	xmm10, xmm0
	subss	xmm8, xmm0
	movaps	xmm2, xmm10
	movaps	xmm1, xmm10
	comiss	xmm8, xmm10
	jae	SHORT $LN334@prim@19
	movaps	xmm1, xmm8
$LN334@prim@19:
	jbe	SHORT $LN43@prim@19
	movaps	xmm2, xmm8
$LN43@prim@19:
	comiss	xmm5, xmm1
	jae	SHORT $LN42@prim@19
	movaps	xmm1, xmm5
$LN42@prim@19:
	comiss	xmm5, xmm2
	jbe	SHORT $LN41@prim@19
	movaps	xmm2, xmm5
$LN41@prim@19:
	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN329@prim@19
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN329@prim@19
	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+160], xmm6
	movss	xmm6, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+144], xmm7
	movss	xmm7, DWORD PTR [rcx+80]
	subss	xmm6, xmm0
	subss	xmm9, xmm0
	subss	xmm7, xmm0
	comiss	xmm6, xmm7
	movaps	xmm2, xmm7
	movaps	xmm1, xmm7
	jae	SHORT $LN335@prim@19
	movaps	xmm1, xmm6
$LN335@prim@19:
	jbe	SHORT $LN37@prim@19
	movaps	xmm2, xmm6
$LN37@prim@19:
	comiss	xmm9, xmm1
	jae	SHORT $LN36@prim@19
	movaps	xmm1, xmm9
$LN36@prim@19:
	comiss	xmm9, xmm2
	jbe	SHORT $LN35@prim@19
	movaps	xmm2, xmm9
$LN35@prim@19:
	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN331@prim@19
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN331@prim@19
	subss	xmm9, xmm6
	subss	xmm5, xmm8
	movaps	xmm3, xmm12
	movaps	XMMWORD PTR [rsp+48], xmm13
	movaps	xmm2, xmm8
	movaps	xmm1, xmm6
	xorps	xmm8, xmm8
	subss	xmm1, xmm7
	subss	xmm11, xmm12
	movaps	xmm13, xmm9
	movaps	xmm0, xmm5
	movaps	xmm12, xmm11
	mulss	xmm0, xmm1
	subss	xmm3, xmm14
	subss	xmm2, xmm10
	mulss	xmm12, xmm1
	mulss	xmm9, xmm3
	mulss	xmm13, xmm2
	mulss	xmm5, xmm3
	subss	xmm13, xmm0
	subss	xmm12, xmm9
	movaps	xmm1, xmm13
	movaps	xmm9, xmm12
	comiss	xmm13, xmm8
	xorps	xmm9, xmm4
	mulss	xmm11, xmm2
	subss	xmm5, xmm11
	mulss	xmm9, xmm10
	xorps	xmm1, xmm4
	movaps	xmm0, xmm5
	mulss	xmm1, xmm14
	xorps	xmm0, xmm4
	addss	xmm9, xmm1
	mulss	xmm0, xmm7
	addss	xmm9, xmm0
	jbe	SHORT $LN94@prim@19
	movss	xmm0, DWORD PTR [rcx+60]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm4
	jmp	SHORT $LN96@prim@19
$LN94@prim@19:
	movss	xmm1, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm4
$LN96@prim@19:
	comiss	xmm12, xmm8
	jbe	SHORT $LN321@prim@19
	movss	xmm2, DWORD PTR [rcx+64]
	movaps	xmm6, xmm2
	xorps	xmm6, xmm4
	jmp	SHORT $LN322@prim@19
$LN321@prim@19:
	movss	xmm6, DWORD PTR [rcx+64]
	movaps	xmm2, xmm6
	xorps	xmm2, xmm4
$LN322@prim@19:
	comiss	xmm5, xmm8
	jbe	SHORT $LN324@prim@19
	movss	xmm3, DWORD PTR [rcx+68]
	movaps	xmm7, xmm3
	xorps	xmm7, xmm4
	jmp	SHORT $LN325@prim@19
$LN324@prim@19:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm3, xmm7
	xorps	xmm3, xmm4
$LN325@prim@19:
	mulss	xmm1, xmm13
	mulss	xmm6, xmm12
	mulss	xmm7, xmm5
	addss	xmm1, xmm6
	addss	xmm1, xmm7
	addss	xmm1, xmm9
	comiss	xmm1, xmm8
	ja	SHORT $LN332@prim@19
	mulss	xmm0, xmm13
	mulss	xmm2, xmm12
	mulss	xmm3, xmm5
	addss	xmm0, xmm2
	addss	xmm0, xmm3
	addss	xmm0, xmm9
	comiss	xmm0, xmm8
	jb	SHORT $LN332@prim@19

; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 197  : 		R.id		= prim;

	mov	DWORD PTR [rax+48], r14d

; 198  : 		R.verts[0]	= v0;

	mov	rcx, QWORD PTR [rbx+rdi*4]
	mov	QWORD PTR [rax], rcx
	mov	ecx, DWORD PTR [rbx+rdi*4+8]
	mov	DWORD PTR [rax+8], ecx

; 199  : 		R.verts[1]	= v1;

	mov	rcx, QWORD PTR [rbx+rsi*4]
	mov	QWORD PTR [rax+12], rcx
	mov	ecx, DWORD PTR [rbx+rsi*4+8]
	mov	DWORD PTR [rax+20], ecx

; 200  : 		R.verts[2]	= v2;

	mov	rax, QWORD PTR [rbx+rbp*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rbx+rbp*4+8]
	mov	DWORD PTR [r11+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [r11+40], rax
$LN332@prim@19:
	movaps	xmm13, XMMWORD PTR [rsp+48]
$LN331@prim@19:
	movaps	xmm7, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+160]
$LN329@prim@19:
	movaps	xmm8, XMMWORD PTR [rsp+128]
	movaps	xmm10, XMMWORD PTR [rsp+96]
$LN2@prim@19:

; 202  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+32]
	lea	r11, QWORD PTR [rsp+176]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	ret	0
?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ENDP		; box_collider<0,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336
	DD	imagerel $LN336+291
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336+291
	DD	imagerel $LN336+403
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336+403
	DD	imagerel $LN336+521
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336+521
	DD	imagerel $LN336+887
	DD	imagerel $chain$4$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336+887
	DD	imagerel $LN336+903
	DD	imagerel $chain$5$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336+903
	DD	imagerel $LN336+918
	DD	imagerel $chain$6$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN336+918
	DD	imagerel $LN336+973
	DD	imagerel $chain$7$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN336
	DD	imagerel $LN336+291
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+291
	DD	imagerel $LN336+403
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+403
	DD	imagerel $LN336+521
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 020621H
	DD	03d806H
	DD	imagerel $LN336+403
	DD	imagerel $LN336+521
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 041521H
	DD	097815H
	DD	0a6808H
	DD	imagerel $LN336+291
	DD	imagerel $LN336+403
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 040f21H
	DD	06a80fH
	DD	088809H
	DD	imagerel $LN336
	DD	imagerel $LN336+291
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 0154901H
	DD	02e849H
	DD	04c843H
	DD	05b83aH
	DD	079834H
	DD	01d7421H
	DD	01c6421H
	DD	01b5421H
	DD	01a3421H
	DD	0160121H
	DD	0d018e01aH
	DD	0c016H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 208
prim$ = 216
?_prim@?$box_collider@$0A@$00@@QEAAXK@Z PROC		; box_collider<0,1>::_prim, COMDAT

; 190  : 	{

$LN336:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 176				; 000000b0H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rbx, QWORD PTR [rcx+16]
	mov	r13, QWORD PTR [rcx+8]

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;
; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;
; 195  : 		if (!_tri())			return;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rsp+112], xmm9
	movaps	XMMWORD PTR [rsp+80], xmm11
	mov	r14d, edx
	movaps	XMMWORD PTR [rsp+64], xmm12
	movaps	XMMWORD PTR [rsp+32], xmm14
	lea	r12, QWORD PTR [r14+r14*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rdi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rdi*4]
	mov	DWORD PTR [rcx+72], eax
	mov	eax, DWORD PTR [rbx+rdi*4+4]
	movss	xmm14, DWORD PTR [rcx+72]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rbx+rdi*4+8]
	subss	xmm14, xmm0
	mov	DWORD PTR [rcx+80], eax
	mov	eax, DWORD PTR [r13+r12*8+4]
	movaps	xmm2, xmm14
	movaps	xmm1, xmm14
	lea	rsi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rsi*4]
	mov	DWORD PTR [rcx+84], eax
	mov	eax, DWORD PTR [rbx+rsi*4+4]
	movss	xmm12, DWORD PTR [rcx+84]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbx+rsi*4+8]
	subss	xmm12, xmm0
	comiss	xmm12, xmm14
	mov	DWORD PTR [rcx+92], eax
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	rbp, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rbp*4]
	mov	DWORD PTR [rcx+96], eax
	mov	eax, DWORD PTR [rbx+rbp*4+4]
	movss	xmm11, DWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+100], eax
	subss	xmm11, xmm0
	movss	xmm9, DWORD PTR [rbx+rbp*4+8]
	movss	DWORD PTR [rcx+104], xmm9
	jae	SHORT $LN333@prim@20
	movaps	xmm1, xmm12
$LN333@prim@20:
	jbe	SHORT $LN49@prim@20
	movaps	xmm2, xmm12
$LN49@prim@20:
	comiss	xmm11, xmm1
	jae	SHORT $LN48@prim@20
	movaps	xmm1, xmm11
$LN48@prim@20:
	comiss	xmm11, xmm2
	jbe	SHORT $LN47@prim@20
	movaps	xmm2, xmm11
$LN47@prim@20:
	movss	xmm0, DWORD PTR [rcx+60]
	comiss	xmm1, xmm0
	ja	$LN2@prim@20
	movss	xmm4, DWORD PTR __mask@@NegFloat@
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN2@prim@20
	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm5, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+128], xmm8
	movaps	XMMWORD PTR [rsp+96], xmm10
	movss	xmm10, DWORD PTR [rcx+76]
	movss	xmm8, DWORD PTR [rcx+88]
	subss	xmm5, xmm0
	subss	xmm10, xmm0
	subss	xmm8, xmm0
	movaps	xmm2, xmm10
	movaps	xmm1, xmm10
	comiss	xmm8, xmm10
	jae	SHORT $LN334@prim@20
	movaps	xmm1, xmm8
$LN334@prim@20:
	jbe	SHORT $LN43@prim@20
	movaps	xmm2, xmm8
$LN43@prim@20:
	comiss	xmm5, xmm1
	jae	SHORT $LN42@prim@20
	movaps	xmm1, xmm5
$LN42@prim@20:
	comiss	xmm5, xmm2
	jbe	SHORT $LN41@prim@20
	movaps	xmm2, xmm5
$LN41@prim@20:
	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN329@prim@20
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN329@prim@20
	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+160], xmm6
	movss	xmm6, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+144], xmm7
	movss	xmm7, DWORD PTR [rcx+80]
	subss	xmm6, xmm0
	subss	xmm9, xmm0
	subss	xmm7, xmm0
	comiss	xmm6, xmm7
	movaps	xmm2, xmm7
	movaps	xmm1, xmm7
	jae	SHORT $LN335@prim@20
	movaps	xmm1, xmm6
$LN335@prim@20:
	jbe	SHORT $LN37@prim@20
	movaps	xmm2, xmm6
$LN37@prim@20:
	comiss	xmm9, xmm1
	jae	SHORT $LN36@prim@20
	movaps	xmm1, xmm9
$LN36@prim@20:
	comiss	xmm9, xmm2
	jbe	SHORT $LN35@prim@20
	movaps	xmm2, xmm9
$LN35@prim@20:
	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN331@prim@20
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN331@prim@20
	subss	xmm9, xmm6
	subss	xmm5, xmm8
	movaps	xmm3, xmm12
	movaps	XMMWORD PTR [rsp+48], xmm13
	movaps	xmm2, xmm8
	movaps	xmm1, xmm6
	xorps	xmm8, xmm8
	subss	xmm1, xmm7
	subss	xmm11, xmm12
	movaps	xmm13, xmm9
	movaps	xmm0, xmm5
	movaps	xmm12, xmm11
	mulss	xmm0, xmm1
	subss	xmm3, xmm14
	subss	xmm2, xmm10
	mulss	xmm12, xmm1
	mulss	xmm9, xmm3
	mulss	xmm13, xmm2
	mulss	xmm5, xmm3
	subss	xmm13, xmm0
	subss	xmm12, xmm9
	movaps	xmm1, xmm13
	movaps	xmm9, xmm12
	comiss	xmm13, xmm8
	xorps	xmm9, xmm4
	mulss	xmm11, xmm2
	subss	xmm5, xmm11
	mulss	xmm9, xmm10
	xorps	xmm1, xmm4
	movaps	xmm0, xmm5
	mulss	xmm1, xmm14
	xorps	xmm0, xmm4
	addss	xmm9, xmm1
	mulss	xmm0, xmm7
	addss	xmm9, xmm0
	jbe	SHORT $LN94@prim@20
	movss	xmm0, DWORD PTR [rcx+60]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm4
	jmp	SHORT $LN96@prim@20
$LN94@prim@20:
	movss	xmm1, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm4
$LN96@prim@20:
	comiss	xmm12, xmm8
	jbe	SHORT $LN321@prim@20
	movss	xmm2, DWORD PTR [rcx+64]
	movaps	xmm6, xmm2
	xorps	xmm6, xmm4
	jmp	SHORT $LN322@prim@20
$LN321@prim@20:
	movss	xmm6, DWORD PTR [rcx+64]
	movaps	xmm2, xmm6
	xorps	xmm2, xmm4
$LN322@prim@20:
	comiss	xmm5, xmm8
	jbe	SHORT $LN324@prim@20
	movss	xmm3, DWORD PTR [rcx+68]
	movaps	xmm7, xmm3
	xorps	xmm7, xmm4
	jmp	SHORT $LN325@prim@20
$LN324@prim@20:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm3, xmm7
	xorps	xmm3, xmm4
$LN325@prim@20:
	mulss	xmm1, xmm13
	mulss	xmm6, xmm12
	mulss	xmm7, xmm5
	addss	xmm1, xmm6
	addss	xmm1, xmm7
	addss	xmm1, xmm9
	comiss	xmm1, xmm8
	ja	SHORT $LN332@prim@20
	mulss	xmm0, xmm13
	mulss	xmm2, xmm12
	mulss	xmm3, xmm5
	addss	xmm0, xmm2
	addss	xmm0, xmm3
	addss	xmm0, xmm9
	comiss	xmm0, xmm8
	jb	SHORT $LN332@prim@20

; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 197  : 		R.id		= prim;

	mov	DWORD PTR [rax+48], r14d

; 198  : 		R.verts[0]	= v0;

	mov	rcx, QWORD PTR [rbx+rdi*4]
	mov	QWORD PTR [rax], rcx
	mov	ecx, DWORD PTR [rbx+rdi*4+8]
	mov	DWORD PTR [rax+8], ecx

; 199  : 		R.verts[1]	= v1;

	mov	rcx, QWORD PTR [rbx+rsi*4]
	mov	QWORD PTR [rax+12], rcx
	mov	ecx, DWORD PTR [rbx+rsi*4+8]
	mov	DWORD PTR [rax+20], ecx

; 200  : 		R.verts[2]	= v2;

	mov	rax, QWORD PTR [rbx+rbp*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rbx+rbp*4+8]
	mov	DWORD PTR [r11+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [r11+40], rax
$LN332@prim@20:
	movaps	xmm13, XMMWORD PTR [rsp+48]
$LN331@prim@20:
	movaps	xmm7, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+160]
$LN329@prim@20:
	movaps	xmm8, XMMWORD PTR [rsp+128]
	movaps	xmm10, XMMWORD PTR [rsp+96]
$LN2@prim@20:

; 202  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+32]
	lea	r11, QWORD PTR [rsp+176]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	ret	0
?_prim@?$box_collider@$0A@$00@@QEAAXK@Z ENDP		; box_collider<0,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336
	DD	imagerel $LN336+302
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336+302
	DD	imagerel $LN336+425
	DD	imagerel $chain$1$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336+425
	DD	imagerel $LN336+550
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336+550
	DD	imagerel $LN336+2266
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336+2266
	DD	imagerel $LN336+2284
	DD	imagerel $chain$5$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336+2284
	DD	imagerel $LN336+2299
	DD	imagerel $chain$6$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN336+2299
	DD	imagerel $LN336+2347
	DD	imagerel $chain$7$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN336
	DD	imagerel $LN336+302
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+302
	DD	imagerel $LN336+425
	DD	imagerel $chain$1$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+425
	DD	imagerel $LN336+550
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 020621H
	DD	07d806H
	DD	imagerel $LN336+425
	DD	imagerel $LN336+550
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 041821H
	DD	0aa818H
	DD	0c8809H
	DD	imagerel $LN336+302
	DD	imagerel $LN336+425
	DD	imagerel $chain$1$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 040f21H
	DD	05f80fH
	DD	08c809H
	DD	imagerel $LN336
	DD	imagerel $LN336+302
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 0133f01H
	DD	06e83fH
	DD	09b839H
	DD	0b982eH
	DD	0d7829H
	DD	0e6825H
	DD	01e0114H
	DD	0d00be00dH
	DD	07007c009H
	DD	050056006H
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
fey0$1$ = 32
d$1$ = 32
e1$2$ = 36
v1$1$ = 40
e1$3$ = 44
e0$2$ = 48
e0$3$ = 52
v1$3$ = 56
normal$3$ = 60
v0$2$ = 64
normal$1$ = 304
fey2$1$ = 304
fey1$1$ = 304
fez0$1$ = 304
this$ = 304
v0$1$ = 312
prim$ = 312
normal$2$ = 320
fez2$1$ = 320
fez1$1$ = 320
fex0$1$ = 320
v2$1$ = 328
?_prim@?$box_collider@$00$0A@@@QEAAXK@Z PROC		; box_collider<1,0>::_prim, COMDAT

; 190  : 	{

$LN336:
	mov	rax, rsp
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 240				; 000000f0H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rbx, QWORD PTR [rcx+16]
	mov	r13, QWORD PTR [rcx+8]

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;
; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;
; 195  : 		if (!_tri())			return;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rax-72], xmm6
	movaps	XMMWORD PTR [rax-88], xmm7
	movaps	XMMWORD PTR [rax-120], xmm9
	mov	r14d, edx
	movaps	XMMWORD PTR [rax-152], xmm11
	movaps	XMMWORD PTR [rsp+96], xmm14
	lea	r12, QWORD PTR [r14+r14*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rdi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rdi*4]
	mov	DWORD PTR [rcx+72], eax
	mov	eax, DWORD PTR [rbx+rdi*4+4]
	movss	xmm6, DWORD PTR [rcx+72]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rbx+rdi*4+8]
	subss	xmm6, xmm0
	movss	DWORD PTR v0$1$[rsp], xmm6
	mov	DWORD PTR [rcx+80], eax
	mov	eax, DWORD PTR [r13+r12*8+4]
	movaps	xmm1, xmm6
	lea	rsi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rsi*4]
	mov	DWORD PTR [rcx+84], eax
	mov	eax, DWORD PTR [rbx+rsi*4+4]
	movss	xmm14, DWORD PTR [rcx+84]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbx+rsi*4+8]
	subss	xmm14, xmm0
	comiss	xmm14, xmm6
	movss	DWORD PTR v1$1$[rsp], xmm14
	mov	DWORD PTR [rcx+92], eax
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	rbp, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rbp*4]
	mov	DWORD PTR [rcx+96], eax
	mov	eax, DWORD PTR [rbx+rbp*4+4]
	movss	xmm7, DWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+100], eax
	subss	xmm7, xmm0
	movaps	xmm0, xmm6
	movss	xmm9, DWORD PTR [rbx+rbp*4+8]
	movss	DWORD PTR v2$1$[rsp], xmm7
	movss	DWORD PTR [rcx+104], xmm9
	jae	SHORT $LN333@prim@21
	movaps	xmm0, xmm14
$LN333@prim@21:
	jbe	SHORT $LN49@prim@21
	movaps	xmm1, xmm14
$LN49@prim@21:
	comiss	xmm7, xmm0
	jae	SHORT $LN48@prim@21
	movaps	xmm0, xmm7
$LN48@prim@21:
	comiss	xmm7, xmm1
	jbe	SHORT $LN47@prim@21
	movaps	xmm1, xmm7
$LN47@prim@21:
	movss	xmm11, DWORD PTR [rcx+60]
	comiss	xmm0, xmm11
	ja	$LN2@prim@21
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	movaps	xmm0, xmm11
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN2@prim@21
	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm5, DWORD PTR [rcx+76]
	movaps	XMMWORD PTR [rsp+128], xmm12
	movaps	XMMWORD PTR [rsp+80], xmm15
	movss	xmm15, DWORD PTR [rcx+88]
	movss	xmm12, DWORD PTR [rcx+100]
	subss	xmm5, xmm0
	movaps	xmm1, xmm5
	subss	xmm15, xmm0
	subss	xmm12, xmm0
	movss	DWORD PTR v0$2$[rsp], xmm5
	movaps	xmm0, xmm5
	comiss	xmm15, xmm5
	jae	SHORT $LN334@prim@21
	movaps	xmm0, xmm15
$LN334@prim@21:
	jbe	SHORT $LN43@prim@21
	movaps	xmm1, xmm15
$LN43@prim@21:
	comiss	xmm12, xmm0
	jae	SHORT $LN42@prim@21
	movaps	xmm0, xmm12
$LN42@prim@21:
	comiss	xmm12, xmm1
	jbe	SHORT $LN41@prim@21
	movaps	xmm1, xmm12
$LN41@prim@21:
	movss	xmm2, DWORD PTR [rcx+64]
	comiss	xmm0, xmm2
	ja	$LN329@prim@21
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN329@prim@21
	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+192], xmm8
	movss	xmm8, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+160], xmm10
	movss	xmm10, DWORD PTR [rcx+80]
	subss	xmm8, xmm0
	subss	xmm9, xmm0
	subss	xmm10, xmm0
	movss	DWORD PTR v1$3$[rsp], xmm8
	comiss	xmm8, xmm10
	movaps	xmm1, xmm10
	movaps	xmm0, xmm10
	jae	SHORT $LN335@prim@21
	movaps	xmm0, xmm8
$LN335@prim@21:
	jbe	SHORT $LN37@prim@21
	movaps	xmm1, xmm8
$LN37@prim@21:
	comiss	xmm9, xmm0
	jae	SHORT $LN36@prim@21
	movaps	xmm0, xmm9
$LN36@prim@21:
	comiss	xmm9, xmm1
	jbe	SHORT $LN35@prim@21
	movaps	xmm1, xmm9
$LN35@prim@21:
	movss	xmm4, DWORD PTR [rcx+68]
	comiss	xmm0, xmm4
	ja	$LN331@prim@21
	movaps	xmm0, xmm4
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN331@prim@21
	movaps	XMMWORD PTR [rsp+112], xmm13
	movaps	xmm1, xmm8
	movaps	xmm13, xmm14
	subss	xmm13, xmm6
	subss	xmm1, xmm10
	movaps	xmm0, xmm7
	movaps	xmm7, xmm12
	movaps	xmm6, xmm15
	subss	xmm0, xmm14
	movss	DWORD PTR e0$2$[rsp], xmm1
	subss	xmm6, xmm5
	movaps	xmm14, xmm9
	movss	DWORD PTR e1$3$[rsp], xmm0
	subss	xmm14, xmm8
	movss	DWORD PTR e0$3$[rsp], xmm13
	movaps	xmm8, xmm14
	subss	xmm7, xmm15
	movss	DWORD PTR e1$2$[rsp], xmm14
	mulss	xmm8, xmm6
	movaps	xmm0, xmm7
	mulss	xmm0, xmm1
	subss	xmm8, xmm0
	movss	DWORD PTR normal$1$[rsp], xmm8
	movss	xmm8, DWORD PTR e1$3$[rsp]
	movaps	xmm0, xmm8
	mulss	xmm0, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm13
	movss	DWORD PTR normal$2$[rsp], xmm0
	movaps	xmm0, xmm14
	movss	xmm14, DWORD PTR normal$2$[rsp]
	mulss	xmm0, xmm13
	subss	xmm14, xmm0
	movaps	xmm0, xmm8
	movss	DWORD PTR normal$2$[rsp], xmm14
	mulss	xmm0, xmm6
	subss	xmm1, xmm0
	movaps	xmm13, xmm14
	xorps	xmm13, xmm3
	mulss	xmm13, xmm5
	xorps	xmm5, xmm5
	movss	DWORD PTR normal$3$[rsp], xmm1
	movss	xmm1, DWORD PTR normal$1$[rsp]
	xorps	xmm1, xmm3
	mulss	xmm1, DWORD PTR v0$1$[rsp]
	movss	xmm8, DWORD PTR normal$3$[rsp]
	addss	xmm13, xmm1
	movaps	xmm0, xmm8
	xorps	xmm0, xmm3
	mulss	xmm0, xmm10
	addss	xmm13, xmm0
	movss	xmm0, DWORD PTR normal$1$[rsp]
	comiss	xmm0, xmm5
	movss	DWORD PTR d$1$[rsp], xmm13
	jbe	SHORT $LN94@prim@21
	movss	xmm0, xmm11
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3
	jmp	SHORT $LN96@prim@21
$LN94@prim@21:
	movss	xmm1, xmm11
	movaps	xmm0, xmm1
	xorps	xmm0, xmm3
$LN96@prim@21:
	comiss	xmm14, xmm5
	jbe	SHORT $LN321@prim@21
	movss	xmm13, xmm2
	movaps	xmm14, xmm13
	xorps	xmm14, xmm3
	jmp	SHORT $LN322@prim@21
$LN321@prim@21:
	movss	xmm14, xmm2
	movaps	xmm13, xmm14
	xorps	xmm13, xmm3
$LN322@prim@21:
	comiss	xmm8, xmm5
	jbe	SHORT $LN324@prim@21
	movss	xmm5, xmm4
	movaps	xmm8, xmm5
	xorps	xmm8, xmm3
	jmp	SHORT $LN325@prim@21
$LN324@prim@21:
	movss	xmm8, xmm4
	movaps	xmm5, xmm8
	xorps	xmm5, xmm3
$LN325@prim@21:
	mulss	xmm1, DWORD PTR normal$1$[rsp]
	mulss	xmm14, DWORD PTR normal$2$[rsp]
	addss	xmm1, xmm14
	movss	xmm14, DWORD PTR normal$3$[rsp]
	mulss	xmm8, xmm14
	addss	xmm1, xmm8
	xorps	xmm8, xmm8
	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, xmm8
	ja	$LN332@prim@21
	mulss	xmm0, DWORD PTR normal$1$[rsp]
	mulss	xmm13, DWORD PTR normal$2$[rsp]
	mulss	xmm5, xmm14
	addss	xmm0, xmm13
	addss	xmm0, xmm5
	addss	xmm0, DWORD PTR d$1$[rsp]
	comiss	xmm0, xmm8
	jb	$LN332@prim@21
	movss	xmm8, DWORD PTR e0$2$[rsp]
	movss	xmm14, DWORD PTR __mask@@AbsFloat@
	movss	xmm13, DWORD PTR v0$2$[rsp]
	movaps	xmm0, xmm6
	movaps	xmm5, xmm8
	andps	xmm0, xmm14
	mulss	xmm5, xmm13
	movss	DWORD PTR fey0$1$[rsp], xmm0
	movaps	xmm0, xmm8
	mulss	xmm8, xmm12
	andps	xmm0, xmm14
	movss	DWORD PTR fez0$1$[rsp], xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm10
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm9
	subss	xmm8, xmm0
	comiss	xmm5, xmm8
	jbe	SHORT $LN30@prim@21
	movaps	xmm0, xmm8
	movaps	xmm8, xmm5
	movaps	xmm5, xmm0
$LN30@prim@21:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@21
	xorps	xmm1, xmm3
	comiss	xmm8, xmm1
	jb	$LN332@prim@21
	movss	xmm8, DWORD PTR e0$3$[rsp]
	movss	xmm1, DWORD PTR e0$2$[rsp]
	movaps	xmm0, xmm8
	movaps	xmm5, xmm8
	mulss	xmm8, xmm9
	andps	xmm0, xmm14
	mulss	xmm5, xmm10
	movss	DWORD PTR fex0$1$[rsp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	mulss	xmm1, DWORD PTR v2$1$[rsp]
	subss	xmm5, xmm0
	subss	xmm8, xmm1
	comiss	xmm5, xmm8
	jbe	SHORT $LN27@prim@21
	movaps	xmm0, xmm8
	movaps	xmm8, xmm5
	movaps	xmm5, xmm0
$LN27@prim@21:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm11
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@21
	xorps	xmm1, xmm3
	comiss	xmm8, xmm1
	jb	$LN332@prim@21
	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm5, xmm6
	mulss	xmm6, DWORD PTR v2$1$[rsp]
	mulss	xmm5, DWORD PTR v1$1$[rsp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm1, xmm12
	subss	xmm5, xmm0
	subss	xmm6, xmm1
	comiss	xmm5, xmm6
	jbe	SHORT $LN24@prim@21
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN24@prim@21:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm11
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@21
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN332@prim@21
	movss	xmm1, DWORD PTR e1$2$[rsp]
	movaps	xmm0, xmm7
	andps	xmm0, xmm14
	movaps	xmm5, xmm1
	mulss	xmm5, xmm13
	movaps	xmm6, xmm1
	movaps	xmm8, xmm1
	movss	DWORD PTR fey1$1$[rsp], xmm0
	mulss	xmm6, xmm12
	movaps	xmm0, xmm7
	mulss	xmm0, xmm10
	andps	xmm8, xmm14
	movss	DWORD PTR fez1$1$[rsp], xmm8
	subss	xmm5, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm9
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN21@prim@21
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN21@prim@21:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, xmm8
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@21
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN332@prim@21
	movss	xmm1, DWORD PTR e1$3$[rsp]
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	movaps	xmm5, xmm1
	movaps	xmm6, xmm1
	movaps	xmm8, xmm1
	mulss	xmm5, xmm10
	mulss	xmm6, xmm9
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v2$1$[rsp]
	andps	xmm8, xmm14
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN18@prim@21
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN18@prim@21:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	mulss	xmm1, xmm8
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@21
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN332@prim@21
	movss	xmm1, DWORD PTR e1$3$[rsp]
	movaps	xmm5, xmm7
	mulss	xmm7, DWORD PTR v1$1$[rsp]
	mulss	xmm5, DWORD PTR v0$1$[rsp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm13
	mulss	xmm1, xmm15
	subss	xmm5, xmm0
	subss	xmm7, xmm1
	comiss	xmm5, xmm7
	jbe	SHORT $LN15@prim@21
	movaps	xmm0, xmm7
	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN15@prim@21:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	mulss	xmm1, xmm8
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@21
	xorps	xmm1, xmm3
	comiss	xmm7, xmm1
	jb	$LN332@prim@21
	movss	xmm1, DWORD PTR [rcx+76]
	movss	xmm8, DWORD PTR [rcx+80]
	movss	xmm7, DWORD PTR [rcx+72]
	subss	xmm1, DWORD PTR [rcx+100]
	subss	xmm8, DWORD PTR [rcx+104]
	subss	xmm7, DWORD PTR [rcx+96]
	movaps	xmm0, xmm1
	movaps	xmm6, xmm8
	movaps	xmm9, xmm8
	andps	xmm0, xmm14
	mulss	xmm6, xmm13
	mulss	xmm9, xmm15
	movss	DWORD PTR fey2$1$[rsp], xmm0
	movaps	xmm0, xmm8
	andps	xmm0, xmm14
	movss	DWORD PTR fez2$1$[rsp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm10
	subss	xmm6, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR v1$3$[rsp]
	subss	xmm9, xmm0
	comiss	xmm6, xmm9
	jbe	SHORT $LN12@prim@21
	movaps	xmm0, xmm9
	movaps	xmm9, xmm6
	movaps	xmm6, xmm0
$LN12@prim@21:
	movss	xmm13, DWORD PTR fez2$1$[rsp]
	movaps	xmm5, xmm4
	movaps	xmm0, xmm2
	mulss	xmm5, DWORD PTR fey2$1$[rsp]
	mulss	xmm0, xmm13
	addss	xmm5, xmm0
	comiss	xmm6, xmm5
	ja	$LN332@prim@21
	xorps	xmm5, xmm3
	comiss	xmm9, xmm5
	jb	$LN332@prim@21
	movaps	xmm0, xmm8
	movaps	xmm6, xmm7
	movaps	xmm5, xmm7
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	mulss	xmm5, DWORD PTR v1$3$[rsp]
	mulss	xmm6, xmm10
	movss	xmm10, DWORD PTR v1$1$[rsp]
	movaps	xmm9, xmm7
	subss	xmm6, xmm0
	mulss	xmm8, xmm10
	andps	xmm9, xmm14
	subss	xmm5, xmm8
	comiss	xmm6, xmm5
	jbe	SHORT $LN9@prim@21
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN9@prim@21:
	movaps	xmm0, xmm11
	mulss	xmm4, xmm9
	mulss	xmm0, xmm13
	addss	xmm4, xmm0
	comiss	xmm6, xmm4
	ja	$LN332@prim@21
	xorps	xmm4, xmm3
	comiss	xmm5, xmm4
	jb	$LN332@prim@21
	movaps	xmm4, xmm1
	mulss	xmm1, DWORD PTR v2$1$[rsp]
	movaps	xmm0, xmm7
	mulss	xmm4, xmm10
	mulss	xmm0, xmm15
	mulss	xmm7, xmm12
	subss	xmm4, xmm0
	subss	xmm1, xmm7
	comiss	xmm4, xmm1
	jbe	SHORT $LN6@prim@21
	movaps	xmm0, xmm1
	movaps	xmm1, xmm4
	movaps	xmm4, xmm0
$LN6@prim@21:
	mulss	xmm11, DWORD PTR fey2$1$[rsp]
	mulss	xmm2, xmm9
	addss	xmm2, xmm11
	comiss	xmm4, xmm2
	ja	SHORT $LN332@prim@21
	xorps	xmm2, xmm3
	comiss	xmm1, xmm2
	jb	SHORT $LN332@prim@21

; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 197  : 		R.id		= prim;

	mov	DWORD PTR [rax+48], r14d

; 198  : 		R.verts[0]	= v0;

	mov	rcx, QWORD PTR [rbx+rdi*4]
	mov	QWORD PTR [rax], rcx
	mov	ecx, DWORD PTR [rbx+rdi*4+8]
	mov	DWORD PTR [rax+8], ecx

; 199  : 		R.verts[1]	= v1;

	mov	rcx, QWORD PTR [rbx+rsi*4]
	mov	QWORD PTR [rax+12], rcx
	mov	ecx, DWORD PTR [rbx+rsi*4+8]
	mov	DWORD PTR [rax+20], ecx

; 200  : 		R.verts[2]	= v2;

	mov	rax, QWORD PTR [rbx+rbp*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rbx+rbp*4+8]
	mov	DWORD PTR [r11+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [r11+40], rax
$LN332@prim@21:
	movaps	xmm13, XMMWORD PTR [rsp+112]
$LN331@prim@21:
	movaps	xmm10, XMMWORD PTR [rsp+160]
	movaps	xmm8, XMMWORD PTR [rsp+192]
$LN329@prim@21:
	movaps	xmm12, XMMWORD PTR [rsp+128]
	movaps	xmm15, XMMWORD PTR [rsp+80]
$LN2@prim@21:

; 202  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+240]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?_prim@?$box_collider@$00$0A@@@QEAAXK@Z ENDP		; box_collider<1,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336
	DD	imagerel $LN336+302
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336+302
	DD	imagerel $LN336+425
	DD	imagerel $chain$1$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336+425
	DD	imagerel $LN336+550
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336+550
	DD	imagerel $LN336+2266
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336+2266
	DD	imagerel $LN336+2284
	DD	imagerel $chain$5$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336+2284
	DD	imagerel $LN336+2299
	DD	imagerel $chain$6$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN336+2299
	DD	imagerel $LN336+2347
	DD	imagerel $chain$7$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN336
	DD	imagerel $LN336+302
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+302
	DD	imagerel $LN336+425
	DD	imagerel $chain$1$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN336+425
	DD	imagerel $LN336+550
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 020621H
	DD	07d806H
	DD	imagerel $LN336+425
	DD	imagerel $LN336+550
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 041821H
	DD	0aa818H
	DD	0c8809H
	DD	imagerel $LN336+302
	DD	imagerel $LN336+425
	DD	imagerel $chain$1$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 040f21H
	DD	05f80fH
	DD	08c809H
	DD	imagerel $LN336
	DD	imagerel $LN336+302
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 0133f01H
	DD	06e83fH
	DD	09b839H
	DD	0b982eH
	DD	0d7829H
	DD	0e6825H
	DD	01e0114H
	DD	0d00be00dH
	DD	07007c009H
	DD	050056006H
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_prim@?$box_collider@$00$00@@QEAAXK@Z
_TEXT	SEGMENT
fey0$1$ = 32
d$1$ = 32
e1$2$ = 36
v1$1$ = 40
e1$3$ = 44
e0$2$ = 48
e0$3$ = 52
v1$3$ = 56
normal$3$ = 60
v0$2$ = 64
normal$1$ = 304
fey2$1$ = 304
fey1$1$ = 304
fez0$1$ = 304
this$ = 304
v0$1$ = 312
prim$ = 312
normal$2$ = 320
fez2$1$ = 320
fez1$1$ = 320
fex0$1$ = 320
v2$1$ = 328
?_prim@?$box_collider@$00$00@@QEAAXK@Z PROC		; box_collider<1,1>::_prim, COMDAT

; 190  : 	{

$LN336:
	mov	rax, rsp
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 240				; 000000f0H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rbx, QWORD PTR [rcx+16]
	mov	r13, QWORD PTR [rcx+8]

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;
; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;
; 195  : 		if (!_tri())			return;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rax-72], xmm6
	movaps	XMMWORD PTR [rax-88], xmm7
	movaps	XMMWORD PTR [rax-120], xmm9
	mov	r14d, edx
	movaps	XMMWORD PTR [rax-152], xmm11
	movaps	XMMWORD PTR [rsp+96], xmm14
	lea	r12, QWORD PTR [r14+r14*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rdi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rdi*4]
	mov	DWORD PTR [rcx+72], eax
	mov	eax, DWORD PTR [rbx+rdi*4+4]
	movss	xmm6, DWORD PTR [rcx+72]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rbx+rdi*4+8]
	subss	xmm6, xmm0
	movss	DWORD PTR v0$1$[rsp], xmm6
	mov	DWORD PTR [rcx+80], eax
	mov	eax, DWORD PTR [r13+r12*8+4]
	movaps	xmm1, xmm6
	lea	rsi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rsi*4]
	mov	DWORD PTR [rcx+84], eax
	mov	eax, DWORD PTR [rbx+rsi*4+4]
	movss	xmm14, DWORD PTR [rcx+84]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbx+rsi*4+8]
	subss	xmm14, xmm0
	comiss	xmm14, xmm6
	movss	DWORD PTR v1$1$[rsp], xmm14
	mov	DWORD PTR [rcx+92], eax
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	rbp, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rbx+rbp*4]
	mov	DWORD PTR [rcx+96], eax
	mov	eax, DWORD PTR [rbx+rbp*4+4]
	movss	xmm7, DWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+100], eax
	subss	xmm7, xmm0
	movaps	xmm0, xmm6
	movss	xmm9, DWORD PTR [rbx+rbp*4+8]
	movss	DWORD PTR v2$1$[rsp], xmm7
	movss	DWORD PTR [rcx+104], xmm9
	jae	SHORT $LN333@prim@22
	movaps	xmm0, xmm14
$LN333@prim@22:
	jbe	SHORT $LN49@prim@22
	movaps	xmm1, xmm14
$LN49@prim@22:
	comiss	xmm7, xmm0
	jae	SHORT $LN48@prim@22
	movaps	xmm0, xmm7
$LN48@prim@22:
	comiss	xmm7, xmm1
	jbe	SHORT $LN47@prim@22
	movaps	xmm1, xmm7
$LN47@prim@22:
	movss	xmm11, DWORD PTR [rcx+60]
	comiss	xmm0, xmm11
	ja	$LN2@prim@22
	movss	xmm3, DWORD PTR __mask@@NegFloat@
	movaps	xmm0, xmm11
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN2@prim@22
	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm5, DWORD PTR [rcx+76]
	movaps	XMMWORD PTR [rsp+128], xmm12
	movaps	XMMWORD PTR [rsp+80], xmm15
	movss	xmm15, DWORD PTR [rcx+88]
	movss	xmm12, DWORD PTR [rcx+100]
	subss	xmm5, xmm0
	movaps	xmm1, xmm5
	subss	xmm15, xmm0
	subss	xmm12, xmm0
	movss	DWORD PTR v0$2$[rsp], xmm5
	movaps	xmm0, xmm5
	comiss	xmm15, xmm5
	jae	SHORT $LN334@prim@22
	movaps	xmm0, xmm15
$LN334@prim@22:
	jbe	SHORT $LN43@prim@22
	movaps	xmm1, xmm15
$LN43@prim@22:
	comiss	xmm12, xmm0
	jae	SHORT $LN42@prim@22
	movaps	xmm0, xmm12
$LN42@prim@22:
	comiss	xmm12, xmm1
	jbe	SHORT $LN41@prim@22
	movaps	xmm1, xmm12
$LN41@prim@22:
	movss	xmm2, DWORD PTR [rcx+64]
	comiss	xmm0, xmm2
	ja	$LN329@prim@22
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN329@prim@22
	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+192], xmm8
	movss	xmm8, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+160], xmm10
	movss	xmm10, DWORD PTR [rcx+80]
	subss	xmm8, xmm0
	subss	xmm9, xmm0
	subss	xmm10, xmm0
	movss	DWORD PTR v1$3$[rsp], xmm8
	comiss	xmm8, xmm10
	movaps	xmm1, xmm10
	movaps	xmm0, xmm10
	jae	SHORT $LN335@prim@22
	movaps	xmm0, xmm8
$LN335@prim@22:
	jbe	SHORT $LN37@prim@22
	movaps	xmm1, xmm8
$LN37@prim@22:
	comiss	xmm9, xmm0
	jae	SHORT $LN36@prim@22
	movaps	xmm0, xmm9
$LN36@prim@22:
	comiss	xmm9, xmm1
	jbe	SHORT $LN35@prim@22
	movaps	xmm1, xmm9
$LN35@prim@22:
	movss	xmm4, DWORD PTR [rcx+68]
	comiss	xmm0, xmm4
	ja	$LN331@prim@22
	movaps	xmm0, xmm4
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN331@prim@22
	movaps	XMMWORD PTR [rsp+112], xmm13
	movaps	xmm1, xmm8
	movaps	xmm13, xmm14
	subss	xmm13, xmm6
	subss	xmm1, xmm10
	movaps	xmm0, xmm7
	movaps	xmm7, xmm12
	movaps	xmm6, xmm15
	subss	xmm0, xmm14
	movss	DWORD PTR e0$2$[rsp], xmm1
	subss	xmm6, xmm5
	movaps	xmm14, xmm9
	movss	DWORD PTR e1$3$[rsp], xmm0
	subss	xmm14, xmm8
	movss	DWORD PTR e0$3$[rsp], xmm13
	movaps	xmm8, xmm14
	subss	xmm7, xmm15
	movss	DWORD PTR e1$2$[rsp], xmm14
	mulss	xmm8, xmm6
	movaps	xmm0, xmm7
	mulss	xmm0, xmm1
	subss	xmm8, xmm0
	movss	DWORD PTR normal$1$[rsp], xmm8
	movss	xmm8, DWORD PTR e1$3$[rsp]
	movaps	xmm0, xmm8
	mulss	xmm0, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm13
	movss	DWORD PTR normal$2$[rsp], xmm0
	movaps	xmm0, xmm14
	movss	xmm14, DWORD PTR normal$2$[rsp]
	mulss	xmm0, xmm13
	subss	xmm14, xmm0
	movaps	xmm0, xmm8
	movss	DWORD PTR normal$2$[rsp], xmm14
	mulss	xmm0, xmm6
	subss	xmm1, xmm0
	movaps	xmm13, xmm14
	xorps	xmm13, xmm3
	mulss	xmm13, xmm5
	xorps	xmm5, xmm5
	movss	DWORD PTR normal$3$[rsp], xmm1
	movss	xmm1, DWORD PTR normal$1$[rsp]
	xorps	xmm1, xmm3
	mulss	xmm1, DWORD PTR v0$1$[rsp]
	movss	xmm8, DWORD PTR normal$3$[rsp]
	addss	xmm13, xmm1
	movaps	xmm0, xmm8
	xorps	xmm0, xmm3
	mulss	xmm0, xmm10
	addss	xmm13, xmm0
	movss	xmm0, DWORD PTR normal$1$[rsp]
	comiss	xmm0, xmm5
	movss	DWORD PTR d$1$[rsp], xmm13
	jbe	SHORT $LN94@prim@22
	movss	xmm0, xmm11
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3
	jmp	SHORT $LN96@prim@22
$LN94@prim@22:
	movss	xmm1, xmm11
	movaps	xmm0, xmm1
	xorps	xmm0, xmm3
$LN96@prim@22:
	comiss	xmm14, xmm5
	jbe	SHORT $LN321@prim@22
	movss	xmm13, xmm2
	movaps	xmm14, xmm13
	xorps	xmm14, xmm3
	jmp	SHORT $LN322@prim@22
$LN321@prim@22:
	movss	xmm14, xmm2
	movaps	xmm13, xmm14
	xorps	xmm13, xmm3
$LN322@prim@22:
	comiss	xmm8, xmm5
	jbe	SHORT $LN324@prim@22
	movss	xmm5, xmm4
	movaps	xmm8, xmm5
	xorps	xmm8, xmm3
	jmp	SHORT $LN325@prim@22
$LN324@prim@22:
	movss	xmm8, xmm4
	movaps	xmm5, xmm8
	xorps	xmm5, xmm3
$LN325@prim@22:
	mulss	xmm1, DWORD PTR normal$1$[rsp]
	mulss	xmm14, DWORD PTR normal$2$[rsp]
	addss	xmm1, xmm14
	movss	xmm14, DWORD PTR normal$3$[rsp]
	mulss	xmm8, xmm14
	addss	xmm1, xmm8
	xorps	xmm8, xmm8
	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, xmm8
	ja	$LN332@prim@22
	mulss	xmm0, DWORD PTR normal$1$[rsp]
	mulss	xmm13, DWORD PTR normal$2$[rsp]
	mulss	xmm5, xmm14
	addss	xmm0, xmm13
	addss	xmm0, xmm5
	addss	xmm0, DWORD PTR d$1$[rsp]
	comiss	xmm0, xmm8
	jb	$LN332@prim@22
	movss	xmm8, DWORD PTR e0$2$[rsp]
	movss	xmm14, DWORD PTR __mask@@AbsFloat@
	movss	xmm13, DWORD PTR v0$2$[rsp]
	movaps	xmm0, xmm6
	movaps	xmm5, xmm8
	andps	xmm0, xmm14
	mulss	xmm5, xmm13
	movss	DWORD PTR fey0$1$[rsp], xmm0
	movaps	xmm0, xmm8
	mulss	xmm8, xmm12
	andps	xmm0, xmm14
	movss	DWORD PTR fez0$1$[rsp], xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm10
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm9
	subss	xmm8, xmm0
	comiss	xmm5, xmm8
	jbe	SHORT $LN30@prim@22
	movaps	xmm0, xmm8
	movaps	xmm8, xmm5
	movaps	xmm5, xmm0
$LN30@prim@22:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@22
	xorps	xmm1, xmm3
	comiss	xmm8, xmm1
	jb	$LN332@prim@22
	movss	xmm8, DWORD PTR e0$3$[rsp]
	movss	xmm1, DWORD PTR e0$2$[rsp]
	movaps	xmm0, xmm8
	movaps	xmm5, xmm8
	mulss	xmm8, xmm9
	andps	xmm0, xmm14
	mulss	xmm5, xmm10
	movss	DWORD PTR fex0$1$[rsp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	mulss	xmm1, DWORD PTR v2$1$[rsp]
	subss	xmm5, xmm0
	subss	xmm8, xmm1
	comiss	xmm5, xmm8
	jbe	SHORT $LN27@prim@22
	movaps	xmm0, xmm8
	movaps	xmm8, xmm5
	movaps	xmm5, xmm0
$LN27@prim@22:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm11
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@22
	xorps	xmm1, xmm3
	comiss	xmm8, xmm1
	jb	$LN332@prim@22
	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm5, xmm6
	mulss	xmm6, DWORD PTR v2$1$[rsp]
	mulss	xmm5, DWORD PTR v1$1$[rsp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm1, xmm12
	subss	xmm5, xmm0
	subss	xmm6, xmm1
	comiss	xmm5, xmm6
	jbe	SHORT $LN24@prim@22
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN24@prim@22:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm11
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@22
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN332@prim@22
	movss	xmm1, DWORD PTR e1$2$[rsp]
	movaps	xmm0, xmm7
	andps	xmm0, xmm14
	movaps	xmm5, xmm1
	mulss	xmm5, xmm13
	movaps	xmm6, xmm1
	movaps	xmm8, xmm1
	movss	DWORD PTR fey1$1$[rsp], xmm0
	mulss	xmm6, xmm12
	movaps	xmm0, xmm7
	mulss	xmm0, xmm10
	andps	xmm8, xmm14
	movss	DWORD PTR fez1$1$[rsp], xmm8
	subss	xmm5, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm9
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN21@prim@22
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN21@prim@22:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, xmm8
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@22
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN332@prim@22
	movss	xmm1, DWORD PTR e1$3$[rsp]
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	movaps	xmm5, xmm1
	movaps	xmm6, xmm1
	movaps	xmm8, xmm1
	mulss	xmm5, xmm10
	mulss	xmm6, xmm9
	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v2$1$[rsp]
	andps	xmm8, xmm14
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN18@prim@22
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN18@prim@22:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	mulss	xmm1, xmm8
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@22
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN332@prim@22
	movss	xmm1, DWORD PTR e1$3$[rsp]
	movaps	xmm5, xmm7
	mulss	xmm7, DWORD PTR v1$1$[rsp]
	mulss	xmm5, DWORD PTR v0$1$[rsp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm13
	mulss	xmm1, xmm15
	subss	xmm5, xmm0
	subss	xmm7, xmm1
	comiss	xmm5, xmm7
	jbe	SHORT $LN15@prim@22
	movaps	xmm0, xmm7
	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN15@prim@22:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	mulss	xmm1, xmm8
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN332@prim@22
	xorps	xmm1, xmm3
	comiss	xmm7, xmm1
	jb	$LN332@prim@22
	movss	xmm1, DWORD PTR [rcx+76]
	movss	xmm8, DWORD PTR [rcx+80]
	movss	xmm7, DWORD PTR [rcx+72]
	subss	xmm1, DWORD PTR [rcx+100]
	subss	xmm8, DWORD PTR [rcx+104]
	subss	xmm7, DWORD PTR [rcx+96]
	movaps	xmm0, xmm1
	movaps	xmm6, xmm8
	movaps	xmm9, xmm8
	andps	xmm0, xmm14
	mulss	xmm6, xmm13
	mulss	xmm9, xmm15
	movss	DWORD PTR fey2$1$[rsp], xmm0
	movaps	xmm0, xmm8
	andps	xmm0, xmm14
	movss	DWORD PTR fez2$1$[rsp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm10
	subss	xmm6, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR v1$3$[rsp]
	subss	xmm9, xmm0
	comiss	xmm6, xmm9
	jbe	SHORT $LN12@prim@22
	movaps	xmm0, xmm9
	movaps	xmm9, xmm6
	movaps	xmm6, xmm0
$LN12@prim@22:
	movss	xmm13, DWORD PTR fez2$1$[rsp]
	movaps	xmm5, xmm4
	movaps	xmm0, xmm2
	mulss	xmm5, DWORD PTR fey2$1$[rsp]
	mulss	xmm0, xmm13
	addss	xmm5, xmm0
	comiss	xmm6, xmm5
	ja	$LN332@prim@22
	xorps	xmm5, xmm3
	comiss	xmm9, xmm5
	jb	$LN332@prim@22
	movaps	xmm0, xmm8
	movaps	xmm6, xmm7
	movaps	xmm5, xmm7
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	mulss	xmm5, DWORD PTR v1$3$[rsp]
	mulss	xmm6, xmm10
	movss	xmm10, DWORD PTR v1$1$[rsp]
	movaps	xmm9, xmm7
	subss	xmm6, xmm0
	mulss	xmm8, xmm10
	andps	xmm9, xmm14
	subss	xmm5, xmm8
	comiss	xmm6, xmm5
	jbe	SHORT $LN9@prim@22
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN9@prim@22:
	movaps	xmm0, xmm11
	mulss	xmm4, xmm9
	mulss	xmm0, xmm13
	addss	xmm4, xmm0
	comiss	xmm6, xmm4
	ja	$LN332@prim@22
	xorps	xmm4, xmm3
	comiss	xmm5, xmm4
	jb	$LN332@prim@22
	movaps	xmm4, xmm1
	mulss	xmm1, DWORD PTR v2$1$[rsp]
	movaps	xmm0, xmm7
	mulss	xmm4, xmm10
	mulss	xmm0, xmm15
	mulss	xmm7, xmm12
	subss	xmm4, xmm0
	subss	xmm1, xmm7
	comiss	xmm4, xmm1
	jbe	SHORT $LN6@prim@22
	movaps	xmm0, xmm1
	movaps	xmm1, xmm4
	movaps	xmm4, xmm0
$LN6@prim@22:
	mulss	xmm11, DWORD PTR fey2$1$[rsp]
	mulss	xmm2, xmm9
	addss	xmm2, xmm11
	comiss	xmm4, xmm2
	ja	SHORT $LN332@prim@22
	xorps	xmm2, xmm3
	comiss	xmm1, xmm2
	jb	SHORT $LN332@prim@22

; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 197  : 		R.id		= prim;

	mov	DWORD PTR [rax+48], r14d

; 198  : 		R.verts[0]	= v0;

	mov	rcx, QWORD PTR [rbx+rdi*4]
	mov	QWORD PTR [rax], rcx
	mov	ecx, DWORD PTR [rbx+rdi*4+8]
	mov	DWORD PTR [rax+8], ecx

; 199  : 		R.verts[1]	= v1;

	mov	rcx, QWORD PTR [rbx+rsi*4]
	mov	QWORD PTR [rax+12], rcx
	mov	ecx, DWORD PTR [rbx+rsi*4+8]
	mov	DWORD PTR [rax+20], ecx

; 200  : 		R.verts[2]	= v2;

	mov	rax, QWORD PTR [rbx+rbp*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rbx+rbp*4+8]
	mov	DWORD PTR [r11+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [r11+40], rax
$LN332@prim@22:
	movaps	xmm13, XMMWORD PTR [rsp+112]
$LN331@prim@22:
	movaps	xmm10, XMMWORD PTR [rsp+160]
	movaps	xmm8, XMMWORD PTR [rsp+192]
$LN329@prim@22:
	movaps	xmm12, XMMWORD PTR [rsp+128]
	movaps	xmm15, XMMWORD PTR [rsp+80]
$LN2@prim@22:

; 202  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+96]
	lea	r11, QWORD PTR [rsp+240]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?_prim@?$box_collider@$00$00@@QEAAXK@Z ENDP		; box_collider<1,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN41
	DD	imagerel $LN41+207
	DD	imagerel $unwind$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<0,0>::_stab, COMDAT

; 204  : 	{

$LN41:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL29@stab@21:

; 205  : 		// Actual box-box test
; 206  : 		if (!_box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents))	return;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab@21
	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	SHORT $LN1@stab@21
	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab@21
	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab@21
	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab@21
	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab@21

; 207  : 		
; 208  : 		// 1st chield
; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@21
	shr	rdx, 1
	call	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ; box_collider<0,0>::_prim
	jmp	SHORT $LN4@stab@21
$LN5@stab@21:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
$LN4@stab@21:

; 211  : 		
; 212  : 		// Early exit for "only first"
; 213  : 		if (bFirst && dest->r_count())												return;
; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	SHORT $LN33@stab@21

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL29@stab@21
$LN33@stab@21:

; 211  : 		
; 212  : 		// Early exit for "only first"
; 213  : 		if (bFirst && dest->r_count())												return;
; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ; box_collider<0,0>::_prim
$LN1@stab@21:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<0,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN48
	DD	imagerel $LN48+230
	DD	imagerel $unwind$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<0,1>::_stab, COMDAT

; 204  : 	{

$LN48:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL35@stab@22:

; 205  : 		// Actual box-box test
; 206  : 		if (!_box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents))	return;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab@22
	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	$LN1@stab@22
	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab@22
	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab@22
	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab@22
	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab@22

; 207  : 		
; 208  : 		// 1st chield
; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@22
	shr	rdx, 1
	call	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z	; box_collider<0,1>::_prim
	jmp	SHORT $LN4@stab@22
$LN5@stab@22:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab
$LN4@stab@22:

; 211  : 		
; 212  : 		// Early exit for "only first"
; 213  : 		if (bFirst && dest->r_count())												return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	SHORT $LN1@stab@22

; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	SHORT $LN40@stab@22

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL35@stab@22
$LN40@stab@22:

; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z	; box_collider<0,1>::_prim
$LN1@stab@22:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<0,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN41
	DD	imagerel $LN41+207
	DD	imagerel $unwind$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<1,0>::_stab, COMDAT

; 204  : 	{

$LN41:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL29@stab@23:

; 205  : 		// Actual box-box test
; 206  : 		if (!_box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents))	return;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab@23
	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	SHORT $LN1@stab@23
	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab@23
	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab@23
	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab@23
	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab@23

; 207  : 		
; 208  : 		// 1st chield
; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@23
	shr	rdx, 1
	call	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z	; box_collider<1,0>::_prim
	jmp	SHORT $LN4@stab@23
$LN5@stab@23:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab
$LN4@stab@23:

; 211  : 		
; 212  : 		// Early exit for "only first"
; 213  : 		if (bFirst && dest->r_count())												return;
; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	SHORT $LN33@stab@23

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL29@stab@23
$LN33@stab@23:

; 211  : 		
; 212  : 		// Early exit for "only first"
; 213  : 		if (bFirst && dest->r_count())												return;
; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z	; box_collider<1,0>::_prim
$LN1@stab@23:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<1,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN48
	DD	imagerel $LN48+230
	DD	imagerel $unwind$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
xdata	ENDS
;	COMDAT ?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<1,1>::_stab, COMDAT

; 204  : 	{

$LN48:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL35@stab@24:

; 205  : 		// Actual box-box test
; 206  : 		if (!_box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents))	return;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab@24
	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	$LN1@stab@24
	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab@24
	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab@24
	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab@24
	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab@24

; 207  : 		
; 208  : 		// 1st chield
; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@24
	shr	rdx, 1
	call	?_prim@?$box_collider@$00$00@@QEAAXK@Z	; box_collider<1,1>::_prim
	jmp	SHORT $LN4@stab@24
$LN5@stab@24:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab
$LN4@stab@24:

; 211  : 		
; 212  : 		// Early exit for "only first"
; 213  : 		if (bFirst && dest->r_count())												return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	SHORT $LN1@stab@24

; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	SHORT $LN40@stab@24

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL35@stab@24
$LN40@stab@24:

; 214  : 		
; 215  : 		// 2nd chield
; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$box_collider@$00$00@@QEAAXK@Z	; box_collider<1,1>::_prim
$LN1@stab@24:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<1,1>::_stab
_TEXT	ENDS
PUBLIC	?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z ; CDB::COLLIDER::box_query
pdata	SEGMENT
$pdata$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN74
	DD	imagerel $LN74+396
	DD	imagerel $unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 0d5401H
	DD	0a6854H
	DD	01c7420H
	DD	01b6420H
	DD	01a3420H
	DD	0160120H
	DD	0c012d014H
	DD	05010H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T171705 = 32
$T171704 = 32
BC$95501 = 48
this$ = 208
m_def$ = 216
b_center$ = 224
b_dim$ = 232
?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z PROC ; CDB::COLLIDER::box_query

; 222  : {

$LN74:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	push	r12
	push	r13
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 176				; 000000b0H

; 223  : 	m_def->syncronize		();

	cmp	DWORD PTR [rdx+16], 0
	mov	rsi, r9
	mov	r12, r8
	mov	rbx, rdx
	mov	rdi, rcx
	je	SHORT $LN9@box_query
	mov	rcx, rdx
	call	QWORD PTR __imp_?Enter@xrCriticalSection@@QEAAXXZ
	mov	rcx, rbx
	call	QWORD PTR __imp_?Leave@xrCriticalSection@@QEAAXXZ
$LN9@box_query:

; 224  : 
; 225  : 	// Get nodes
; 226  : 	const AABBNoLeafTree* T = (const AABBNoLeafTree*)m_def->tree->GetTree();
; 227  : 	const AABBNoLeafNode* N = T->GetNodes();

	mov	rax, QWORD PTR [rbx+8]

; 228  : 	r_clear					();

	lea	rcx, QWORD PTR [rdi+16]
	movaps	XMMWORD PTR [rsp+160], xmm6
	mov	r8, QWORD PTR [rax+8]
	mov	r13, QWORD PTR [r8+16]
	call	?clear_not_free@?$xr_vector@URESULT@CDB@@V?$xalloc@URESULT@CDB@@@@@@QEAAXXZ ; xr_vector<CDB::RESULT,xalloc<CDB::RESULT> >::clear_not_free

; 234  : 		{
; 235  : 			box_collider<true,true> BC;
; 236  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);

	movss	xmm6, DWORD PTR [r12]
	movss	xmm0, DWORD PTR [r12+4]
	movss	xmm5, DWORD PTR [rsi]
	movss	xmm1, DWORD PTR [r12+8]
	mov	rax, QWORD PTR [rbx+40]
	mov	r11d, DWORD PTR [rdi+4]
	mov	QWORD PTR BC$95501[rbp-105], rdi
	movss	xmm3, DWORD PTR [r12+4]
	movss	xmm4, DWORD PTR [rsi+4]
	movss	xmm2, DWORD PTR [rsi+8]
	mov	QWORD PTR BC$95501[rbp-89], rax
	mov	rax, QWORD PTR [rbx+24]

; 237  : 			BC._stab	(N);

	mov	rdx, r13
	movss	DWORD PTR $T171704[rbp-101], xmm0
	movss	xmm0, DWORD PTR [rsi+4]
	movss	DWORD PTR $T171704[rbp-97], xmm1
	mov	QWORD PTR BC$95501[rbp-97], rax
	lea	rcx, QWORD PTR BC$95501[rbp-105]
	movss	xmm1, DWORD PTR [rsi+8]
	movss	DWORD PTR $T171704[rbp-105], xmm6
	mov	eax, DWORD PTR $T171704[rbp-105]
	mov	DWORD PTR BC$95501[rbp-57], eax
	mov	eax, DWORD PTR $T171704[rbp-101]
	movss	DWORD PTR $T171705[rbp-105], xmm5
	movss	DWORD PTR $T171705[rbp-101], xmm0
	mov	DWORD PTR BC$95501[rbp-53], eax
	mov	eax, DWORD PTR $T171704[rbp-97]
	movaps	xmm0, xmm6
	subss	xmm0, xmm5
	addss	xmm5, xmm6
	movss	DWORD PTR BC$95501[rbp-81], xmm0
	mov	DWORD PTR BC$95501[rbp-49], eax
	mov	eax, DWORD PTR $T171705[rbp-105]
	movss	DWORD PTR $T171705[rbp-97], xmm1
	movss	xmm1, DWORD PTR [r12+8]
	movss	DWORD PTR BC$95501[rbp-69], xmm5
	movaps	xmm0, xmm3
	mov	DWORD PTR BC$95501[rbp-45], eax
	mov	eax, DWORD PTR $T171705[rbp-101]
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	mov	DWORD PTR BC$95501[rbp-41], eax
	mov	eax, DWORD PTR $T171705[rbp-97]
	movss	DWORD PTR BC$95501[rbp-77], xmm0
	movss	DWORD PTR BC$95501[rbp-65], xmm4
	movaps	xmm0, xmm1
	mov	DWORD PTR BC$95501[rbp-37], eax
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR BC$95501[rbp-61], xmm2
	movss	DWORD PTR BC$95501[rbp-73], xmm0
	test	r11b, 8
	je	SHORT $LN6@box_query

; 229  : 	
; 230  : 	// Binary dispatcher
; 231  : 	if (box_mode&OPT_FULL_TEST) 
; 232  : 	{
; 233  : 		if (box_mode&OPT_ONLYFIRST)

	test	r11b, 2
	je	SHORT $LN5@box_query

; 237  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab

; 238  : 		} else {

	jmp	SHORT $LN1@box_query
$LN5@box_query:

; 239  : 			box_collider<true,false> BC;
; 240  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 241  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab

; 242  : 		}
; 243  : 	} else {

	jmp	SHORT $LN1@box_query
$LN6@box_query:

; 244  : 		if (box_mode&OPT_ONLYFIRST)

	test	r11b, 2
	je	SHORT $LN2@box_query

; 245  : 		{
; 246  : 			box_collider<false,true> BC;
; 247  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 248  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab

; 249  : 		} else {

	jmp	SHORT $LN1@box_query
$LN2@box_query:

; 250  : 			box_collider<false,false> BC;
; 251  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 252  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
$LN1@box_query:
	movaps	xmm6, XMMWORD PTR [rsp+160]

; 253  : 		}
; 254  : 	}
; 255  : }

	lea	r11, QWORD PTR [rsp+176]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+40]
	mov	rdi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z ENDP ; CDB::COLLIDER::box_query
END
