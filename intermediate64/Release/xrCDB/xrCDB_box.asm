; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??0icePoint@IceMaths@@QEAA@XZ			; IceMaths::icePoint::icePoint
PUBLIC	??1icePoint@IceMaths@@QEAA@XZ			; IceMaths::icePoint::~icePoint
PUBLIC	??BicePoint@IceMaths@@QEBAPEBMXZ		; IceMaths::icePoint::operator float const * __ptr64
PUBLIC	??BicePoint@IceMaths@@QEAAPEAMXZ		; IceMaths::icePoint::operator float * __ptr64
PUBLIC	??UicePoint@IceMaths@@QEBAMAEBV01@@Z		; IceMaths::icePoint::operator|
PUBLIC	?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ ; Opcode::OPCODE_Model::GetTree
PUBLIC	?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ ; Opcode::AABBNoLeafTree::GetNodes
PUBLIC	??0icePoint@IceMaths@@QEAA@MMM@Z		; IceMaths::icePoint::icePoint
PUBLIC	?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ		; Opcode::AABBNoLeafNode::HasLeaf
PUBLIC	?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ	; Opcode::AABBNoLeafNode::GetPrimitive
PUBLIC	?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ	; Opcode::AABBNoLeafNode::GetPos
PUBLIC	?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ	; Opcode::AABBNoLeafNode::HasLeaf2
PUBLIC	?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ	; Opcode::AABBNoLeafNode::GetPrimitive2
PUBLIC	?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ	; Opcode::AABBNoLeafNode::GetNeg
PUBLIC	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z	; IceMaths::icePoint::operator-
PUBLIC	??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z	; IceMaths::icePoint::operator^
PUBLIC	??GicePoint@IceMaths@@QEBA?AV01@XZ		; IceMaths::icePoint::operator-
PUBLIC	?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ		; box_collider<0,0>::_tri
PUBLIC	?_tri@?$box_collider@$0A@$00@@QEAA_NXZ		; box_collider<0,1>::_tri
PUBLIC	?_tri@?$box_collider@$00$0A@@@QEAA_NXZ		; box_collider<1,0>::_tri
PUBLIC	?_tri@?$box_collider@$00$00@@QEAA_NXZ		; box_collider<1,1>::_tri
PUBLIC	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z	; box_collider<0,0>::_prim
PUBLIC	?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<0,0>::_box
PUBLIC	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z		; box_collider<0,1>::_prim
PUBLIC	?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<0,1>::_box
PUBLIC	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z		; box_collider<1,0>::_prim
PUBLIC	?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<1,0>::_box
PUBLIC	?_prim@?$box_collider@$00$00@@QEAAXK@Z		; box_collider<1,1>::_prim
PUBLIC	?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<1,1>::_box
PUBLIC	?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z		; _vector3<float>::add
PUBLIC	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
PUBLIC	?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<0,0>::_init
PUBLIC	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab
PUBLIC	?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<0,1>::_init
PUBLIC	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab
PUBLIC	?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<1,0>::_init
PUBLIC	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab
PUBLIC	?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<1,1>::_init
PUBLIC	??1?$box_collider@$0A@$0A@@@QEAA@XZ		; box_collider<0,0>::~box_collider<0,0>
PUBLIC	??0?$box_collider@$0A@$0A@@@QEAA@XZ		; box_collider<0,0>::box_collider<0,0>
PUBLIC	??1?$box_collider@$0A@$00@@QEAA@XZ		; box_collider<0,1>::~box_collider<0,1>
PUBLIC	??0?$box_collider@$0A@$00@@QEAA@XZ		; box_collider<0,1>::box_collider<0,1>
PUBLIC	??1?$box_collider@$00$0A@@@QEAA@XZ		; box_collider<1,0>::~box_collider<1,0>
PUBLIC	??0?$box_collider@$00$0A@@@QEAA@XZ		; box_collider<1,0>::box_collider<1,0>
PUBLIC	??1?$box_collider@$00$00@@QEAA@XZ		; box_collider<1,1>::~box_collider<1,1>
PUBLIC	??0?$box_collider@$00$00@@QEAA@XZ		; box_collider<1,1>::box_collider<1,1>
PUBLIC	?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z ; CDB::COLLIDER::box_query
PUBLIC	?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z ; planeBoxOverlap
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN343+390
	DD	imagerel $LN343+682
	DD	imagerel $chain$5$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN343+682
	DD	imagerel $LN343+739
	DD	imagerel $chain$6$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN343+739
	DD	imagerel $LN343+743
	DD	imagerel $chain$7$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN343+743
	DD	imagerel $LN343+747
	DD	imagerel $chain$8$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN343+390
	DD	imagerel $LN343+682
	DD	imagerel $chain$5$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN343+682
	DD	imagerel $LN343+739
	DD	imagerel $chain$6$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN343+739
	DD	imagerel $LN343+743
	DD	imagerel $chain$7$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN343+743
	DD	imagerel $LN343+747
	DD	imagerel $chain$8$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN345+419
	DD	imagerel $LN345+2275
	DD	imagerel $chain$5$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN345+2275
	DD	imagerel $LN345+2342
	DD	imagerel $chain$6$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN345+2342
	DD	imagerel $LN345+2346
	DD	imagerel $chain$7$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN345+2346
	DD	imagerel $LN345+2350
	DD	imagerel $chain$8$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN345+419
	DD	imagerel $LN345+2275
	DD	imagerel $chain$5$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN345+2275
	DD	imagerel $LN345+2342
	DD	imagerel $chain$6$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN345+2342
	DD	imagerel $LN345+2346
	DD	imagerel $chain$7$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN345+2346
	DD	imagerel $LN345+2350
	DD	imagerel $chain$8$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN337
	DD	imagerel $LN337+302
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN337+302
	DD	imagerel $LN337+411
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN337+411
	DD	imagerel $LN337+913
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN337+913
	DD	imagerel $LN337+925
	DD	imagerel $chain$4$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN337+925
	DD	imagerel $LN337+978
	DD	imagerel $chain$5$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN337
	DD	imagerel $LN337+302
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN337+302
	DD	imagerel $LN337+411
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN337+411
	DD	imagerel $LN337+913
	DD	imagerel $chain$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN337+913
	DD	imagerel $LN337+925
	DD	imagerel $chain$4$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN337+925
	DD	imagerel $LN337+978
	DD	imagerel $chain$5$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340
	DD	imagerel $LN340+293
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340+293
	DD	imagerel $LN340+433
	DD	imagerel $chain$2$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340+433
	DD	imagerel $LN340+543
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340+543
	DD	imagerel $LN340+2101
	DD	imagerel $chain$6$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340+2101
	DD	imagerel $LN340+2116
	DD	imagerel $chain$7$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340+2116
	DD	imagerel $LN340+2140
	DD	imagerel $chain$8$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN340+2140
	DD	imagerel $LN340+2182
	DD	imagerel $chain$9$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340
	DD	imagerel $LN340+293
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340+293
	DD	imagerel $LN340+433
	DD	imagerel $chain$2$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340+433
	DD	imagerel $LN340+543
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340+543
	DD	imagerel $LN340+2101
	DD	imagerel $chain$6$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340+2101
	DD	imagerel $LN340+2116
	DD	imagerel $chain$7$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340+2116
	DD	imagerel $LN340+2140
	DD	imagerel $chain$8$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN340+2140
	DD	imagerel $LN340+2182
	DD	imagerel $chain$9$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN44
	DD	imagerel $LN44+207
	DD	imagerel $unwind$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN16
	DD	imagerel $LN16+197
	DD	imagerel $unwind$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN51
	DD	imagerel $LN51+230
	DD	imagerel $unwind$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN16
	DD	imagerel $LN16+197
	DD	imagerel $unwind$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN44
	DD	imagerel $LN44+207
	DD	imagerel $unwind$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN16
	DD	imagerel $LN16+197
	DD	imagerel $unwind$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN51
	DD	imagerel $LN51+230
	DD	imagerel $unwind$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN16
	DD	imagerel $LN16+197
	DD	imagerel $unwind$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN178
	DD	imagerel $LN178+397
	DD	imagerel $unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN60
	DD	imagerel $LN60+44
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN60+44
	DD	imagerel $LN60+219
	DD	imagerel $chain$2$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN60+219
	DD	imagerel $LN60+297
	DD	imagerel $chain$3$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 040021H
	DD	039800H
	DD	057800H
	DD	imagerel $LN60
	DD	imagerel $LN60+44
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 065b21H
	DD	03985bH
	DD	05782fH
	DD	01b806H
	DD	imagerel $LN60
	DD	imagerel $LN60+44
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 092601H
	DD	0c826H
	DD	02a821H
	DD	04881bH
	DD	066815H
	DD	0e204H
xdata	ENDS
xdata	SEGMENT
$unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 0f6701H
	DD	0a7867H
	DD	0b685fH
	DD	01de421H
	DD	01c7421H
	DD	01b6421H
	DD	01a3421H
	DD	0180121H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061501H
	DD	026815H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN340
	DD	imagerel $LN340+293
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN340+293
	DD	imagerel $LN340+433
	DD	imagerel $chain$2$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN340+433
	DD	imagerel $LN340+543
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 042321H
	DD	0aa823H
	DD	0b9809H
	DD	imagerel $LN340+433
	DD	imagerel $LN340+543
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 040f21H
	DD	05f80fH
	DD	0c8809H
	DD	imagerel $LN340+293
	DD	imagerel $LN340+433
	DD	imagerel $chain$2$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 061e21H
	DD	07d81eH
	DD	08c818H
	DD	09b809H
	DD	imagerel $LN340
	DD	imagerel $LN340+293
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 0103101H
	DD	06e831H
	DD	0d7829H
	DD	0e6825H
	DD	01f0119H
	DD	0e010f012H
	DD	0c00cd00eH
	DD	06009700aH
	DD	030075008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN340
	DD	imagerel $LN340+293
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN340+293
	DD	imagerel $LN340+433
	DD	imagerel $chain$2$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN340+433
	DD	imagerel $LN340+543
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 042321H
	DD	0aa823H
	DD	0b9809H
	DD	imagerel $LN340+433
	DD	imagerel $LN340+543
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 040f21H
	DD	05f80fH
	DD	0c8809H
	DD	imagerel $LN340+293
	DD	imagerel $LN340+433
	DD	imagerel $chain$2$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 061e21H
	DD	07d81eH
	DD	08c818H
	DD	09b809H
	DD	imagerel $LN340
	DD	imagerel $LN340+293
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 0103101H
	DD	06e831H
	DD	0d7829H
	DD	0e6825H
	DD	01f0119H
	DD	0e010f012H
	DD	0c00cd00eH
	DD	06009700aH
	DD	030075008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN337
	DD	imagerel $LN337+302
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN337+302
	DD	imagerel $LN337+411
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 041521H
	DD	087815H
	DD	096808H
	DD	imagerel $LN337+302
	DD	imagerel $LN337+411
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 040c21H
	DD	05a80cH
	DD	069806H
	DD	imagerel $LN337
	DD	imagerel $LN337+302
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 0154501H
	DD	02d845H
	DD	03c83dH
	DD	04b837H
	DD	078831H
	DD	01d6423H
	DD	01c5423H
	DD	01a3423H
	DD	0140123H
	DD	0e01af01cH
	DD	0c016d018H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN337
	DD	imagerel $LN337+302
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN337+302
	DD	imagerel $LN337+411
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 041521H
	DD	087815H
	DD	096808H
	DD	imagerel $LN337+302
	DD	imagerel $LN337+411
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 040c21H
	DD	05a80cH
	DD	069806H
	DD	imagerel $LN337
	DD	imagerel $LN337+302
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 0154501H
	DD	02d845H
	DD	03c83dH
	DD	04b837H
	DD	078831H
	DD	01d6423H
	DD	01c5423H
	DD	01a3423H
	DD	0140123H
	DD	0e01af01cH
	DD	0c016d018H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 020021H
	DD	0c6800H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 020821H
	DD	0c6808H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 0149d01H
	DD	03f89dH
	DD	04e897H
	DD	05d891H
	DD	0a8887H
	DD	0b787eH
	DD	06c829H
	DD	07b824H
	DD	08a81fH
	DD	099814H
	DD	01b010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 020021H
	DD	0c6800H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 020821H
	DD	0c6808H
	DD	imagerel $LN345
	DD	imagerel $LN345+419
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 0149d01H
	DD	03f89dH
	DD	04e897H
	DD	05d891H
	DD	0a8887H
	DD	0b787eH
	DD	06c829H
	DD	07b824H
	DD	08a81fH
	DD	099814H
	DD	01b010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 020021H
	DD	0e800H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 020521H
	DD	0e805H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 0128801H
	DD	01d888H
	DD	02c882H
	DD	03b87cH
	DD	04a873H
	DD	06886dH
	DD	059824H
	DD	07781eH
	DD	086814H
	DD	0130107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 020021H
	DD	0e800H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 020521H
	DD	0e805H
	DD	imagerel $LN343
	DD	imagerel $LN343+390
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 0128801H
	DD	01d888H
	DD	02c882H
	DD	03b87cH
	DD	04a873H
	DD	06886dH
	DD	059824H
	DD	07781eH
	DD	086814H
	DD	0130107H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
_TEXT	SEGMENT
normal$ = 128
d$ = 136
maxbox$ = 144
?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z PROC	; planeBoxOverlap, COMDAT

; 20   : {

$LN60:
	sub	rsp, 120				; 00000078H

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm3, DWORD PTR [rcx]
	movss	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+64], xmm8
	movaps	XMMWORD PTR [rsp+32], xmm10
	movaps	XMMWORD PTR [rsp], xmm12
	xorps	xmm6, xmm6
	comiss	xmm3, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm11
	movaps	xmm12, xmm1
	jbe	SHORT $LN4@planeBoxOv
	movss	xmm4, DWORD PTR [r8]
	movaps	xmm5, xmm4
	xorps	xmm5, xmm0

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN6@planeBoxOv
$LN4@planeBoxOv:
	movss	xmm5, DWORD PTR [r8]
	movaps	xmm4, xmm5
	xorps	xmm4, xmm0
$LN6@planeBoxOv:

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm8, DWORD PTR [rcx+4]
	movaps	XMMWORD PTR [rsp+80], xmm7
	comiss	xmm8, xmm6
	jbe	SHORT $LN54@planeBoxOv
	movss	xmm7, DWORD PTR [r8+4]
	movaps	xmm1, xmm7
	xorps	xmm1, xmm0

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN55@planeBoxOv
$LN54@planeBoxOv:
	movss	xmm1, DWORD PTR [r8+4]
	movaps	xmm7, xmm1
	xorps	xmm7, xmm0
$LN55@planeBoxOv:

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm10, DWORD PTR [rcx+8]
	movaps	XMMWORD PTR [rsp+48], xmm9
	comiss	xmm10, xmm6
	jbe	SHORT $LN57@planeBoxOv
	movss	xmm9, DWORD PTR [r8+8]
	movaps	xmm11, xmm9
	xorps	xmm11, xmm0

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN58@planeBoxOv
$LN57@planeBoxOv:
	movss	xmm11, DWORD PTR [r8+8]
	movaps	xmm9, xmm11
	xorps	xmm9, xmm0
$LN58@planeBoxOv:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm2, xmm3
	movaps	xmm0, xmm8
	mulss	xmm2, xmm5
	mulss	xmm0, xmm1
	movaps	xmm1, xmm10
	addss	xmm2, xmm0
	mulss	xmm1, xmm11
	movaps	xmm11, XMMWORD PTR [rsp+16]
	addss	xmm2, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm2, xmm12
	comiss	xmm2, xmm6
	ja	SHORT $LN1@planeBoxOv
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm3, xmm4
	mulss	xmm8, xmm7
	mulss	xmm10, xmm9
	addss	xmm3, xmm8
	addss	xmm3, xmm10
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm3, xmm12
	comiss	xmm3, xmm6
	jb	SHORT $LN1@planeBoxOv
	mov	al, 1
	jmp	SHORT $LN11@planeBoxOv
$LN1@planeBoxOv:

; 29   : 
; 30   : 	return false;

	xor	al, al
$LN11@planeBoxOv:
	movaps	xmm9, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+80]

; 31   : }

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm8, XMMWORD PTR [rsp+64]
	movaps	xmm10, XMMWORD PTR [rsp+32]
	movaps	xmm12, XMMWORD PTR [rsp]
	add	rsp, 120				; 00000078H
	ret	0
?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z ENDP	; planeBoxOverlap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
BC$5 = 48
BC$6 = 48
this$ = 208
m_def$ = 216
b_center$ = 224
b_dim$ = 232
?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z PROC ; CDB::COLLIDER::box_query

; 222  : {

$LN178:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	rbp
	lea	rbp, QWORD PTR [rsp-87]
	sub	rsp, 192				; 000000c0H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h

; 101  : 			if (S_READY!=status)

	cmp	DWORD PTR [rdx+16], 0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 222  : {

	mov	rsi, r9
	mov	r14, r8
	mov	rbx, rdx
	mov	rdi, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h

; 101  : 			if (S_READY!=status)

	je	SHORT $LN9@box_query

; 102  : 			{
; 103  : 				Log						("! WARNING: syncronized CDB::query");
; 104  : 				xrCriticalSection*	C	= (xrCriticalSection*) &cs;
; 105  : 				C->Enter				();

	mov	rcx, rdx
	call	QWORD PTR __imp_?Enter@xrCriticalSection@@QEAAXXZ

; 106  : 				C->Leave				();

	mov	rcx, rbx
	call	QWORD PTR __imp_?Leave@xrCriticalSection@@QEAAXXZ
$LN9@box_query:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm5, DWORD PTR [r14]
	movss	xmm2, DWORD PTR [rsi]
	movss	xmm3, DWORD PTR [rsi+4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	rax, QWORD PTR [rbx+8]
	movaps	XMMWORD PTR [rsp+176], xmm6
	movaps	XMMWORD PTR [rsp+160], xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 97   : 		dest		= CL;

	mov	QWORD PTR BC$6[rbp-105], rdi

; 234  : 		{
; 235  : 			box_collider<true,true> BC;
; 236  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 237  : 			BC._stab	(N);

	lea	rcx, QWORD PTR BC$6[rbp-105]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	r8, QWORD PTR [rax+8]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

	mov	rax, QWORD PTR [rdi+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm6, DWORD PTR [r14+4]
	movss	xmm7, DWORD PTR [r14+8]
	movss	xmm4, DWORD PTR [rsi+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	rdx, QWORD PTR [r8+16]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

	mov	QWORD PTR [rdi+24], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 231  : 	if (box_mode&OPT_FULL_TEST) 

	mov	eax, DWORD PTR [rdi+4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm0, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm1, xmm3
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T3[rbp-97], xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	unpcklps xmm0, xmm6
	movsdx	QWORD PTR BC$6[rbp-57], xmm0

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm0, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	DWORD PTR BC$6[rbp-77], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	unpcklps xmm0, xmm3
	movsdx	QWORD PTR BC$6[rbp-45], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	addss	xmm3, xmm6

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movaps	xmm0, xmm5
	subss	xmm0, xmm2

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	addss	xmm2, xmm5
	movss	DWORD PTR BC$6[rbp-65], xmm3

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	DWORD PTR BC$6[rbp-81], xmm0

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	DWORD PTR BC$6[rbp-69], xmm2

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movaps	xmm0, xmm7
	subss	xmm0, xmm4
	movss	DWORD PTR BC$6[rbp-73], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 231  : 	if (box_mode&OPT_FULL_TEST) 

	test	al, 8
	je	SHORT $LN6@box_query

; 232  : 	{
; 233  : 		if (box_mode&OPT_ONLYFIRST)

	test	al, 2

; 98   : 		verts		= V;

	mov	rax, QWORD PTR [rbx+40]
	mov	QWORD PTR BC$6[rbp-89], rax

; 99   : 		tris		= T;

	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR BC$6[rbp-97], rax

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	eax, DWORD PTR $T3[rbp-97]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T4[rbp-97], xmm4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	DWORD PTR BC$6[rbp-49], eax

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	eax, DWORD PTR $T4[rbp-97]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	addss	xmm4, xmm7
	movss	DWORD PTR BC$6[rbp-61], xmm4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	DWORD PTR BC$6[rbp-37], eax

; 232  : 	{
; 233  : 		if (box_mode&OPT_ONLYFIRST)

	je	SHORT $LN5@box_query

; 234  : 		{
; 235  : 			box_collider<true,true> BC;
; 236  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 237  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab

; 238  : 		} else {

	jmp	SHORT $LN1@box_query
$LN5@box_query:

; 239  : 			box_collider<true,false> BC;
; 240  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 241  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab

; 242  : 		}
; 243  : 	} else {

	jmp	SHORT $LN1@box_query
$LN6@box_query:

; 244  : 		if (box_mode&OPT_ONLYFIRST)

	test	al, 2

; 98   : 		verts		= V;

	mov	rax, QWORD PTR [rbx+40]
	mov	QWORD PTR BC$5[rbp-89], rax

; 99   : 		tris		= T;

	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR BC$5[rbp-97], rax

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	eax, DWORD PTR $T2[rbp-97]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rbp-97], xmm4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	DWORD PTR BC$5[rbp-49], eax

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	eax, DWORD PTR $T1[rbp-97]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	addss	xmm4, xmm7
	movss	DWORD PTR BC$5[rbp-61], xmm4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	DWORD PTR BC$5[rbp-37], eax

; 244  : 		if (box_mode&OPT_ONLYFIRST)

	je	SHORT $LN2@box_query

; 245  : 		{
; 246  : 			box_collider<false,true> BC;
; 247  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 248  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab

; 249  : 		} else {

	jmp	SHORT $LN1@box_query
$LN2@box_query:

; 250  : 			box_collider<false,false> BC;
; 251  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 252  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
$LN1@box_query:
	movaps	xmm7, XMMWORD PTR [rsp+160]
	movaps	xmm6, XMMWORD PTR [rsp+176]

; 253  : 		}
; 254  : 	}
; 255  : }

	lea	r11, QWORD PTR [rsp+192]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rdi, QWORD PTR [r11+32]
	mov	r14, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z ENDP ; CDB::COLLIDER::box_query
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$00$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$00$00@@QEAA@XZ PROC			; box_collider<1,1>::box_collider<1,1>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$00$00@@QEAA@XZ ENDP			; box_collider<1,1>::box_collider<1,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$00$00@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$box_collider@$00$00@@QEAA@XZ PROC			; box_collider<1,1>::~box_collider<1,1>, COMDAT
	ret	0
??1?$box_collider@$00$00@@QEAA@XZ ENDP			; box_collider<1,1>::~box_collider<1,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$00$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$00$0A@@@QEAA@XZ PROC			; box_collider<1,0>::box_collider<1,0>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$00$0A@@@QEAA@XZ ENDP			; box_collider<1,0>::box_collider<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$00$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$box_collider@$00$0A@@@QEAA@XZ PROC			; box_collider<1,0>::~box_collider<1,0>, COMDAT
	ret	0
??1?$box_collider@$00$0A@@@QEAA@XZ ENDP			; box_collider<1,0>::~box_collider<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$0A@$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$0A@$00@@QEAA@XZ PROC			; box_collider<0,1>::box_collider<0,1>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$0A@$00@@QEAA@XZ ENDP			; box_collider<0,1>::box_collider<0,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$0A@$00@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$box_collider@$0A@$00@@QEAA@XZ PROC			; box_collider<0,1>::~box_collider<0,1>, COMDAT
	ret	0
??1?$box_collider@$0A@$00@@QEAA@XZ ENDP			; box_collider<0,1>::~box_collider<0,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$0A@$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$0A@$0A@@@QEAA@XZ PROC		; box_collider<0,0>::box_collider<0,0>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$0A@$0A@@@QEAA@XZ ENDP		; box_collider<0,0>::box_collider<0,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$0A@$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$box_collider@$0A@$0A@@@QEAA@XZ PROC		; box_collider<0,0>::~box_collider<0,0>, COMDAT
	ret	0
??1?$box_collider@$0A@$0A@@@QEAA@XZ ENDP		; box_collider<0,0>::~box_collider<0,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<1,1>::_init, COMDAT

; 96   : 	{

$LN16:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm0, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T2[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T2[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rcx+48], xmm0
	mov	DWORD PTR [rcx+56], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T1[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm0, DWORD PTR [rcx]
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [r10+60], xmm0
	mov	DWORD PTR [r10+68], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<1,1>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<1,1>::_stab, COMDAT

; 204  : 	{

$LN51:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL35@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [rbx]
	movss	xmm4, DWORD PTR [rbx+12]
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm2, DWORD PTR [rbx+4]
	movss	xmm5, DWORD PTR [rbx+16]
	movaps	xmm0, xmm2
	subss	xmm0, xmm5
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	$LN1@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+20]
	movaps	xmm0, xmm1
	subss	xmm0, xmm6
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+24]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN5@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$00$00@@QEAAXK@Z	; box_collider<1,1>::_prim

; 210  : 		else					_stab	(node->GetPos());

	jmp	SHORT $LN4@stab
$LN5@stab:
	call	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab
$LN4@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h

; 186  : 		ICF int			r_count			()	{	return rd.size();			};

	mov	rax, QWORD PTR [rdi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 213  : 		if (bFirst && dest->r_count())												return;

	test	ecx, ecx
	jne	SHORT $LN1@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN40@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL35@stab
$LN40@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$00$00@@QEAAXK@Z	; box_collider<1,1>::_prim
$LN1@stab:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<1,1>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<1,0>::_init, COMDAT

; 96   : 	{

$LN16:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm0, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T2[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T2[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rcx+48], xmm0
	mov	DWORD PTR [rcx+56], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T1[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm0, DWORD PTR [rcx]
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [r10+60], xmm0
	mov	DWORD PTR [r10+68], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<1,0>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<1,0>::_stab, COMDAT

; 204  : 	{

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL29@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [rbx]
	movss	xmm4, DWORD PTR [rbx+12]
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm2, DWORD PTR [rbx+4]
	movss	xmm5, DWORD PTR [rbx+16]
	movaps	xmm0, xmm2
	subss	xmm0, xmm5
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	SHORT $LN1@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+20]
	movaps	xmm0, xmm1
	subss	xmm0, xmm6
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+24]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN5@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z	; box_collider<1,0>::_prim

; 210  : 		else					_stab	(node->GetPos());

	jmp	SHORT $LN4@stab
$LN5@stab:
	call	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab
$LN4@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN33@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL29@stab
$LN33@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z	; box_collider<1,0>::_prim
$LN1@stab:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<1,0>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<0,1>::_init, COMDAT

; 96   : 	{

$LN16:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm0, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T2[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T2[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rcx+48], xmm0
	mov	DWORD PTR [rcx+56], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T1[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm0, DWORD PTR [rcx]
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [r10+60], xmm0
	mov	DWORD PTR [r10+68], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<0,1>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<0,1>::_stab, COMDAT

; 204  : 	{

$LN51:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL35@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [rbx]
	movss	xmm4, DWORD PTR [rbx+12]
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm2, DWORD PTR [rbx+4]
	movss	xmm5, DWORD PTR [rbx+16]
	movaps	xmm0, xmm2
	subss	xmm0, xmm5
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	$LN1@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+20]
	movaps	xmm0, xmm1
	subss	xmm0, xmm6
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+24]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN5@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z	; box_collider<0,1>::_prim

; 210  : 		else					_stab	(node->GetPos());

	jmp	SHORT $LN4@stab
$LN5@stab:
	call	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab
$LN4@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h

; 186  : 		ICF int			r_count			()	{	return rd.size();			};

	mov	rax, QWORD PTR [rdi]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 213  : 		if (bFirst && dest->r_count())												return;

	test	ecx, ecx
	jne	SHORT $LN1@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN40@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL35@stab
$LN40@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z	; box_collider<0,1>::_prim
$LN1@stab:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<0,1>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<0,0>::_init, COMDAT

; 96   : 	{

$LN16:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
	mov	r10, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm0, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	DWORD PTR $T2[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm0, DWORD PTR [rdx]
	mov	eax, DWORD PTR $T2[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rcx+48], xmm0
	mov	DWORD PTR [rcx+56], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR $T1[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm0, DWORD PTR [rcx]
	mov	eax, DWORD PTR $T1[rsp+8]
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [r10+60], xmm0
	mov	DWORD PTR [r10+68], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<0,0>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<0,0>::_stab, COMDAT

; 204  : 	{

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	mov	rdi, rcx
	movaps	XMMWORD PTR [rsp+32], xmm6
	npad	11
$LL29@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [rbx]
	movss	xmm4, DWORD PTR [rbx+12]
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN1@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm2, DWORD PTR [rbx+4]
	movss	xmm5, DWORD PTR [rbx+16]
	movaps	xmm0, xmm2
	subss	xmm0, xmm5
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	SHORT $LN1@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm6, DWORD PTR [rbx+20]
	movaps	xmm0, xmm1
	subss	xmm0, xmm6
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN1@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, xmm4
	comiss	xmm3, DWORD PTR [rdi+24]
	jb	SHORT $LN1@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rdi+28]
	jb	SHORT $LN1@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm1, xmm6
	comiss	xmm1, DWORD PTR [rdi+32]
	jb	SHORT $LN1@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+24]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN5@stab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ; box_collider<0,0>::_prim

; 210  : 		else					_stab	(node->GetPos());

	jmp	SHORT $LN4@stab
$LN5@stab:
	call	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
$LN4@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN33@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL29@stab
$LN33@stab:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ; box_collider<0,0>::_prim
$LN1@stab:
	movaps	xmm6, XMMWORD PTR [rsp+32]

; 218  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<0,0>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
;	COMDAT ?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
v$ = 24
?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z PROC		; _vector3<float>::add, COMDAT

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm0, DWORD PTR [rdx]
	mov	rax, rcx
	addss	xmm0, DWORD PTR [r8]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	addss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	addss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
?add@?$_vector3@M@@QEAAAEAU1@AEBU1@0@Z ENDP		; _vector3<float>::add
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<1,1>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box
$LN9@box:
	xor	al, al

; 113  : 		return true;
; 114  : 	};

	ret	0
$LN6@box:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm1, xmm4
	comiss	xmm1, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rcx+32]
	setae	al

; 113  : 		return true;
; 114  : 	};

	ret	0
?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<1,1>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_prim@?$box_collider@$00$00@@QEAAXK@Z
_TEXT	SEGMENT
e1$2$ = 32
e0$2$ = 36
v1$1$ = 40
e0$3$ = 44
normal$2$ = 48
e1$3$ = 52
normal$3$ = 56
d$1$ = 60
v1$3$ = 64
v0$1$ = 320
this$ = 320
prim$ = 328
v2$1$ = 336
normal$1$ = 344
?_prim@?$box_collider@$00$00@@QEAAXK@Z PROC		; box_collider<1,1>::_prim, COMDAT

; 190  : 	{

$LN340:
	mov	rax, rsp
	mov	DWORD PTR [rax+16], edx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 248				; 000000f8H

; 191  : 		TRI&	T	= tris[prim];

	mov	r13, QWORD PTR [rcx+8]

; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rax-88], xmm6
	movaps	XMMWORD PTR [rax-104], xmm7
	mov	eax, edx
	movaps	XMMWORD PTR [rsp+96], xmm14
	lea	r12, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rbx, QWORD PTR [rax+rax*2]
	movss	xmm14, DWORD PTR [rdi+rbx*4]
	movss	DWORD PTR [rcx+72], xmm14
	mov	eax, DWORD PTR [rdi+rbx*4+4]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rcx+80], eax

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [r13+r12*8+4]
	mov	rbp, QWORD PTR [rcx+16]
	lea	rsi, QWORD PTR [rax+rax*2]
	movss	xmm6, DWORD PTR [rbp+rsi*4]
	movss	DWORD PTR [rcx+84], xmm6
	mov	eax, DWORD PTR [rbp+rsi*4+4]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rcx+92], eax

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	r15, QWORD PTR [rcx+16]
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm4, DWORD PTR [r15+r14*4]
	movss	DWORD PTR [rcx+96], xmm4
	mov	eax, DWORD PTR [r15+r14*4+4]
	mov	DWORD PTR [rcx+100], eax
	movss	xmm7, DWORD PTR [r15+r14*4+8]
	movss	DWORD PTR [rcx+104], xmm7

; 29   : 
; 30   : 	return false;
; 31   : }
; 32   : 
; 33   : //! TO BE DOCUMENTED
; 34   : #define AXISTEST_X01(a, b, fa, fb)							\
; 35   : 	min = a*v0.y - b*v0.z;									\
; 36   : 	max = a*v2.y - b*v2.z;									\
; 37   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 38   : 	rad = fa * extents.y + fb * extents.z;					\
; 39   : 	if(min>rad || max<-rad) return false;
; 40   : 
; 41   : //! TO BE DOCUMENTED
; 42   : #define AXISTEST_X2(a, b, fa, fb)							\
; 43   : 	min = a*v0.y - b*v0.z;									\
; 44   : 	max = a*v1.y - b*v1.z;									\
; 45   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 46   : 	rad = fa * extents.y + fb * extents.z;					\
; 47   : 	if(min>rad || max<-rad) return false;
; 48   : 
; 49   : //! TO BE DOCUMENTED
; 50   : #define AXISTEST_Y02(a, b, fa, fb)							\
; 51   : 	min = b*v0.z - a*v0.x;									\
; 52   : 	max = b*v2.z - a*v2.x;									\
; 53   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 54   : 	rad = fa * extents.x + fb * extents.z;					\
; 55   : 	if(min>rad || max<-rad) return false;
; 56   : 
; 57   : //! TO BE DOCUMENTED
; 58   : #define AXISTEST_Y1(a, b, fa, fb)							\
; 59   : 	min = b*v0.z - a*v0.x;									\
; 60   : 	max = b*v1.z - a*v1.x;									\
; 61   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 62   : 	rad = fa * extents.x + fb * extents.z;					\
; 63   : 	if(min>rad || max<-rad) return false;
; 64   : 
; 65   : //! TO BE DOCUMENTED
; 66   : #define AXISTEST_Z12(a, b, fa, fb)							\
; 67   : 	min = a*v1.x - b*v1.y;									\
; 68   : 	max = a*v2.x - b*v2.y;									\
; 69   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 70   : 	rad = fa * extents.x + fb * extents.y;					\
; 71   : 	if(min>rad || max<-rad) return false;
; 72   : 
; 73   : //! TO BE DOCUMENTED
; 74   : #define AXISTEST_Z0(a, b, fa, fb)							\
; 75   : 	min = a*v0.x - b*v0.y;									\
; 76   : 	max = a*v1.x - b*v1.y;									\
; 77   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 78   : 	rad = fa * extents.x + fb * extents.y;					\
; 79   : 	if(min>rad || max<-rad) return false;
; 80   : 
; 81   : 
; 82   : template <bool bClass3, bool bFirst>
; 83   : class box_collider
; 84   : {
; 85   : public:
; 86   : 	COLLIDER*		dest;
; 87   : 	TRI*			tris;
; 88   : 	Fvector*		verts;
; 89   : 	
; 90   : 	Fvector			b_min, b_max;
; 91   : 	Point			center, extents;
; 92   : 
; 93   : 	Point			mLeafVerts	[3];
; 94   : 	
; 95   : 	IC void			_init		(COLLIDER* CL, Fvector* V, TRI* T, const Fvector& C, const Fvector& E)
; 96   : 	{
; 97   : 		dest		= CL;
; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);
; 101  : 		extents		= Point(E.x,E.y,E.z);
; 102  : 		b_min.sub	(C,E);
; 103  : 		b_max.add	(C,E);
; 104  : 	}
; 105  : 	ICF	bool		_box		(const Fvector& C, const Fvector& E)
; 106  : 	{
; 107  : 		if( b_max.x < C.x-E.x )	return false;
; 108  : 		if( b_max.y < C.y-E.y )	return false;
; 109  : 		if( b_max.z < C.z-E.z )	return false;
; 110  : 		if( b_min.x > C.x+E.x )	return false;
; 111  : 		if( b_min.y > C.y+E.y )	return false;
; 112  : 		if( b_min.z > C.z+E.z )	return false;
; 113  : 		return true;
; 114  : 	};
; 115  : 	ICF	bool		_tri		()
; 116  : 	{
; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	subss	xmm14, xmm0

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	subss	xmm6, xmm0

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	subss	xmm4, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm14
	movaps	xmm0, xmm14
	comiss	xmm6, xmm14
	movss	DWORD PTR v0$1$[rsp], xmm14
	movss	DWORD PTR v1$1$[rsp], xmm6
	movss	DWORD PTR v2$1$[rsp], xmm4
	jae	SHORT $LN336@prim
	movaps	xmm0, xmm6
$LN336@prim:
	jbe	SHORT $LN49@prim
	movaps	xmm1, xmm6
$LN49@prim:
	comiss	xmm4, xmm0
	jae	SHORT $LN48@prim
	movaps	xmm0, xmm4
$LN48@prim:
	comiss	xmm4, xmm1
	jbe	SHORT $LN47@prim
	movaps	xmm1, xmm4
$LN47@prim:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm2, DWORD PTR [rcx+60]
	comiss	xmm0, xmm2
	ja	$LN2@prim
	movss	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN2@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movaps	XMMWORD PTR [rsp+144], xmm11

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm11, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+128], xmm12
	movaps	XMMWORD PTR [rsp+112], xmm13

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm13, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm12, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	subss	xmm11, xmm0
	subss	xmm13, xmm0
	subss	xmm12, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm1, xmm13
	movaps	xmm0, xmm13
	comiss	xmm12, xmm13
	jae	SHORT $LN337@prim
	movaps	xmm0, xmm12
$LN337@prim:
	jbe	SHORT $LN43@prim
	movaps	xmm1, xmm12
$LN43@prim:
	comiss	xmm11, xmm0
	jae	SHORT $LN42@prim
	movaps	xmm0, xmm11
$LN42@prim:
	comiss	xmm11, xmm1
	jbe	SHORT $LN41@prim
	movaps	xmm1, xmm11
$LN41@prim:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	comiss	xmm0, xmm2
	ja	$LN331@prim
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN331@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm5, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+192], xmm8
	movaps	XMMWORD PTR [rsp+80], xmm15

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm8, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	subss	xmm5, xmm0

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	subss	xmm7, xmm0
	subss	xmm8, xmm0
	movss	DWORD PTR v1$3$[rsp], xmm5

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	comiss	xmm5, xmm8
	movaps	xmm1, xmm8
	movaps	xmm0, xmm8
	jae	SHORT $LN338@prim
	movaps	xmm0, xmm5
$LN338@prim:
	jbe	SHORT $LN37@prim
	movaps	xmm1, xmm5
$LN37@prim:
	comiss	xmm7, xmm0
	jae	SHORT $LN36@prim
	movaps	xmm0, xmm7
$LN36@prim:
	comiss	xmm7, xmm1
	jbe	SHORT $LN35@prim
	movaps	xmm1, xmm7
$LN35@prim:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm15, DWORD PTR [rcx+68]
	comiss	xmm0, xmm15
	ja	$LN333@prim
	movaps	xmm0, xmm15
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN333@prim
	movaps	XMMWORD PTR [rsp+176], xmm9
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm1, xmm5
	movaps	xmm9, xmm6
	subss	xmm9, xmm14
	subss	xmm1, xmm8
	movaps	XMMWORD PTR [rsp+160], xmm10
	movaps	xmm10, xmm4
	movaps	xmm4, xmm11
	subss	xmm10, xmm6
	movss	DWORD PTR e0$3$[rsp], xmm9
	subss	xmm4, xmm12
	movaps	xmm6, xmm7

; 399  : 									x * p.y - y * p.x );

	movaps	xmm0, xmm4

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm2, xmm12
	subss	xmm6, xmm5
	subss	xmm2, xmm13
	movss	DWORD PTR e0$2$[rsp], xmm1

; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, xmm1
	movaps	xmm5, xmm6
	mulss	xmm5, xmm2
	subss	xmm5, xmm0

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	DWORD PTR e1$2$[rsp], xmm6
	movss	DWORD PTR e1$3$[rsp], xmm10

; 399  : 									x * p.y - y * p.x );

	movaps	xmm0, xmm6
	movaps	xmm6, xmm4
	mulss	xmm0, xmm9
	mulss	xmm6, xmm9
	movss	DWORD PTR normal$1$[rsp], xmm5
	movaps	xmm5, xmm10
	mulss	xmm5, xmm1
	subss	xmm5, xmm0
	movaps	xmm0, xmm10

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm10, DWORD PTR normal$1$[rsp]

; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, xmm2

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm1, xmm10
	xorps	xmm1, xmm3

; 399  : 									x * p.y - y * p.x );

	subss	xmm6, xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm9, xmm5

; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$2$[rsp], xmm5

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm9, xmm3

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm14
	xorps	xmm14, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm10, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$3$[rsp], xmm6

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm0, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm9, xmm13

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm0, xmm3

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm8
	addss	xmm9, xmm1
	addss	xmm9, xmm0
	movss	DWORD PTR d$1$[rsp], xmm9
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN94@prim
	movss	xmm9, DWORD PTR [rcx+60]
	movaps	xmm10, xmm9
	xorps	xmm10, xmm3

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN96@prim
$LN94@prim:
	movss	xmm10, DWORD PTR [rcx+60]
	movaps	xmm9, xmm10
	xorps	xmm9, xmm3
$LN96@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm5, xmm14
	jbe	SHORT $LN322@prim
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN323@prim
$LN322@prim:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm3
$LN323@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm6, xmm14
	jbe	SHORT $LN325@prim
	movss	xmm5, xmm15
	movaps	xmm6, xmm5
	xorps	xmm6, xmm3

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN326@prim
$LN325@prim:
	movss	xmm6, xmm15
	movaps	xmm5, xmm6
	xorps	xmm5, xmm3
$LN326@prim:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR normal$2$[rsp]
	mulss	xmm10, DWORD PTR normal$1$[rsp]
	addss	xmm1, xmm10
	movss	xmm10, DWORD PTR normal$3$[rsp]
	mulss	xmm6, xmm10
	addss	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm6, DWORD PTR d$1$[rsp]
	addss	xmm1, xmm6
	comiss	xmm1, xmm14
	ja	$LN335@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR normal$2$[rsp]
	mulss	xmm9, DWORD PTR normal$1$[rsp]
	mulss	xmm5, xmm10
	addss	xmm0, xmm9
	addss	xmm0, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, xmm6
	comiss	xmm0, xmm14
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR e0$2$[rsp]
	movss	xmm14, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm10, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm5, xmm1
	movaps	xmm6, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm9, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm10, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm5, xmm13
	mulss	xmm6, xmm11
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm9, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm5, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm7
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN30@prim
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN30@prim:
	movaps	xmm0, xmm9
	movaps	xmm1, xmm10
	mulss	xmm0, DWORD PTR [rcx+64]
	mulss	xmm1, xmm15
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm6, DWORD PTR e0$3$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	movaps	xmm5, xmm6
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm5, xmm8
	mulss	xmm6, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, DWORD PTR v2$1$[rsp]
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN27@prim
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN27@prim:
	mulss	xmm9, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	addss	xmm0, xmm9
	comiss	xmm5, xmm0
	ja	$LN335@prim
	xorps	xmm0, xmm3
	comiss	xmm6, xmm0
	jb	$LN335@prim

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm6, DWORD PTR e0$3$[rsp]
	movaps	xmm5, xmm2
	mulss	xmm2, DWORD PTR v2$1$[rsp]
	mulss	xmm5, DWORD PTR v1$1$[rsp]
	movaps	xmm0, xmm6
	mulss	xmm0, xmm12
	mulss	xmm6, xmm11
	subss	xmm5, xmm0
	subss	xmm2, xmm6
	comiss	xmm5, xmm2
	jbe	SHORT $LN24@prim
	movaps	xmm0, xmm2
	movaps	xmm2, xmm5
	movaps	xmm5, xmm0
$LN24@prim:
	mulss	xmm1, DWORD PTR [rcx+64]
	mulss	xmm10, DWORD PTR [rcx+60]
	addss	xmm1, xmm10
	comiss	xmm5, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm2, xmm1
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR e1$2$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm9, xmm4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm2, xmm1
	movaps	xmm5, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm6, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm9, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm2, xmm13
	mulss	xmm5, xmm11
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm6, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	subss	xmm2, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm7
	subss	xmm5, xmm0
	comiss	xmm2, xmm5
	jbe	SHORT $LN21@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm2
	movaps	xmm2, xmm0
$LN21@prim:
	movss	xmm10, DWORD PTR [rcx+64]
	movaps	xmm1, xmm9
	movaps	xmm0, xmm6
	mulss	xmm1, xmm15
	mulss	xmm0, xmm10
	addss	xmm1, xmm0
	comiss	xmm2, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm5, xmm1
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm5, DWORD PTR e1$3$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	movaps	xmm2, xmm5
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm2, xmm8
	mulss	xmm5, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v2$1$[rsp]
	subss	xmm5, xmm0
	comiss	xmm2, xmm5
	jbe	SHORT $LN18@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm2
	movaps	xmm2, xmm0
$LN18@prim:
	movss	xmm7, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm6, xmm7
	addss	xmm0, xmm6
	comiss	xmm2, xmm0
	ja	$LN335@prim
	xorps	xmm0, xmm3
	comiss	xmm5, xmm0
	jb	$LN335@prim

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movss	xmm5, DWORD PTR e1$3$[rsp]
	movaps	xmm2, xmm4
	mulss	xmm4, DWORD PTR v1$1$[rsp]
	mulss	xmm2, DWORD PTR v0$1$[rsp]
	movaps	xmm0, xmm5
	mulss	xmm0, xmm13
	mulss	xmm5, xmm12
	subss	xmm2, xmm0
	subss	xmm4, xmm5
	comiss	xmm2, xmm4
	jbe	SHORT $LN15@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm2
	movaps	xmm2, xmm0
$LN15@prim:
	mulss	xmm1, xmm10
	mulss	xmm9, xmm7
	addss	xmm1, xmm9
	comiss	xmm2, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm4, xmm1
	jb	$LN335@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm2, DWORD PTR [rcx+76]
	movss	xmm7, DWORD PTR [rcx+80]
	movss	xmm6, DWORD PTR [rcx+72]
	subss	xmm2, DWORD PTR [rcx+100]
	subss	xmm7, DWORD PTR [rcx+104]
	subss	xmm6, DWORD PTR [rcx+96]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm2
	movaps	xmm4, xmm7
	movaps	xmm5, xmm7
	mulss	xmm0, xmm8
	mulss	xmm4, xmm13
	mulss	xmm5, xmm12
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm9, xmm2
	movaps	xmm10, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movss	xmm13, DWORD PTR v1$3$[rsp]
	subss	xmm4, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm9, xmm14
	andps	xmm10, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	subss	xmm5, xmm0
	comiss	xmm4, xmm5
	jbe	SHORT $LN12@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm4
	movaps	xmm4, xmm0
$LN12@prim:
	movaps	xmm0, xmm10
	movaps	xmm1, xmm9
	mulss	xmm0, DWORD PTR [rcx+64]
	mulss	xmm1, xmm15
	addss	xmm1, xmm0
	comiss	xmm4, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm5, xmm1
	jb	$LN335@prim

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm0, xmm7
	movaps	xmm5, xmm6
	movaps	xmm4, xmm6
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	mulss	xmm5, xmm8
	movss	xmm8, DWORD PTR v1$1$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	subss	xmm5, xmm0
	mulss	xmm7, xmm8
	mulss	xmm4, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	subss	xmm4, xmm7
	comiss	xmm5, xmm4
	jbe	SHORT $LN9@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm5
	movaps	xmm5, xmm0
$LN9@prim:
	movss	xmm7, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm10, xmm7
	addss	xmm0, xmm10
	comiss	xmm5, xmm0
	ja	$LN335@prim
	xorps	xmm0, xmm3
	comiss	xmm4, xmm0
	jb	$LN335@prim

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm4, xmm2
	mulss	xmm2, DWORD PTR v2$1$[rsp]
	movaps	xmm0, xmm6
	mulss	xmm4, xmm8
	mulss	xmm0, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm0
	subss	xmm2, xmm6
	comiss	xmm4, xmm2
	jbe	SHORT $LN6@prim
	movaps	xmm0, xmm2
	movaps	xmm2, xmm4
	movaps	xmm4, xmm0
$LN6@prim:
	mulss	xmm1, DWORD PTR [rcx+64]
	mulss	xmm9, xmm7
	addss	xmm1, xmm9
	comiss	xmm4, xmm1
	ja	SHORT $LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm2, xmm1
	jb	SHORT $LN335@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	eax, DWORD PTR prim$[rsp]
	mov	DWORD PTR [rdx+48], eax

; 198  : 		R.verts[0]	= v0;

	movsdx	xmm0, QWORD PTR [rdi+rbx*4]
	movsdx	QWORD PTR [rdx], xmm0
	mov	ecx, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rdx+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsdx	xmm0, QWORD PTR [rbp+rsi*4]
	movsdx	QWORD PTR [rdx+12], xmm0
	mov	ecx, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rdx+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsdx	xmm0, QWORD PTR [r15+r14*4]
	movsdx	QWORD PTR [rdx+24], xmm0
	mov	eax, DWORD PTR [r15+r14*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [rdx+40], rax
$LN335@prim:
	movaps	xmm9, XMMWORD PTR [rsp+176]
	movaps	xmm10, XMMWORD PTR [rsp+160]
$LN333@prim:
	movaps	xmm8, XMMWORD PTR [rsp+192]
	movaps	xmm15, XMMWORD PTR [rsp+80]
$LN331@prim:
	movaps	xmm11, XMMWORD PTR [rsp+144]
	movaps	xmm12, XMMWORD PTR [rsp+128]
	movaps	xmm13, XMMWORD PTR [rsp+112]
$LN2@prim:

; 202  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+224]
	movaps	xmm7, XMMWORD PTR [rsp+208]
	movaps	xmm14, XMMWORD PTR [rsp+96]
	add	rsp, 248				; 000000f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?_prim@?$box_collider@$00$00@@QEAAXK@Z ENDP		; box_collider<1,1>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<1,0>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box
$LN9@box:
	xor	al, al

; 113  : 		return true;
; 114  : 	};

	ret	0
$LN6@box:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm1, xmm4
	comiss	xmm1, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rcx+32]
	setae	al

; 113  : 		return true;
; 114  : 	};

	ret	0
?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<1,0>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
e1$2$ = 32
e0$2$ = 36
v1$1$ = 40
e0$3$ = 44
normal$2$ = 48
e1$3$ = 52
normal$3$ = 56
d$1$ = 60
v1$3$ = 64
v0$1$ = 320
this$ = 320
prim$ = 328
v2$1$ = 336
normal$1$ = 344
?_prim@?$box_collider@$00$0A@@@QEAAXK@Z PROC		; box_collider<1,0>::_prim, COMDAT

; 190  : 	{

$LN340:
	mov	rax, rsp
	mov	DWORD PTR [rax+16], edx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 248				; 000000f8H

; 191  : 		TRI&	T	= tris[prim];

	mov	r13, QWORD PTR [rcx+8]

; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rax-88], xmm6
	movaps	XMMWORD PTR [rax-104], xmm7
	mov	eax, edx
	movaps	XMMWORD PTR [rsp+96], xmm14
	lea	r12, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rbx, QWORD PTR [rax+rax*2]
	movss	xmm14, DWORD PTR [rdi+rbx*4]
	movss	DWORD PTR [rcx+72], xmm14
	mov	eax, DWORD PTR [rdi+rbx*4+4]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rcx+80], eax

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [r13+r12*8+4]
	mov	rbp, QWORD PTR [rcx+16]
	lea	rsi, QWORD PTR [rax+rax*2]
	movss	xmm6, DWORD PTR [rbp+rsi*4]
	movss	DWORD PTR [rcx+84], xmm6
	mov	eax, DWORD PTR [rbp+rsi*4+4]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rcx+92], eax

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	r15, QWORD PTR [rcx+16]
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm4, DWORD PTR [r15+r14*4]
	movss	DWORD PTR [rcx+96], xmm4
	mov	eax, DWORD PTR [r15+r14*4+4]
	mov	DWORD PTR [rcx+100], eax
	movss	xmm7, DWORD PTR [r15+r14*4+8]
	movss	DWORD PTR [rcx+104], xmm7

; 29   : 
; 30   : 	return false;
; 31   : }
; 32   : 
; 33   : //! TO BE DOCUMENTED
; 34   : #define AXISTEST_X01(a, b, fa, fb)							\
; 35   : 	min = a*v0.y - b*v0.z;									\
; 36   : 	max = a*v2.y - b*v2.z;									\
; 37   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 38   : 	rad = fa * extents.y + fb * extents.z;					\
; 39   : 	if(min>rad || max<-rad) return false;
; 40   : 
; 41   : //! TO BE DOCUMENTED
; 42   : #define AXISTEST_X2(a, b, fa, fb)							\
; 43   : 	min = a*v0.y - b*v0.z;									\
; 44   : 	max = a*v1.y - b*v1.z;									\
; 45   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 46   : 	rad = fa * extents.y + fb * extents.z;					\
; 47   : 	if(min>rad || max<-rad) return false;
; 48   : 
; 49   : //! TO BE DOCUMENTED
; 50   : #define AXISTEST_Y02(a, b, fa, fb)							\
; 51   : 	min = b*v0.z - a*v0.x;									\
; 52   : 	max = b*v2.z - a*v2.x;									\
; 53   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 54   : 	rad = fa * extents.x + fb * extents.z;					\
; 55   : 	if(min>rad || max<-rad) return false;
; 56   : 
; 57   : //! TO BE DOCUMENTED
; 58   : #define AXISTEST_Y1(a, b, fa, fb)							\
; 59   : 	min = b*v0.z - a*v0.x;									\
; 60   : 	max = b*v1.z - a*v1.x;									\
; 61   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 62   : 	rad = fa * extents.x + fb * extents.z;					\
; 63   : 	if(min>rad || max<-rad) return false;
; 64   : 
; 65   : //! TO BE DOCUMENTED
; 66   : #define AXISTEST_Z12(a, b, fa, fb)							\
; 67   : 	min = a*v1.x - b*v1.y;									\
; 68   : 	max = a*v2.x - b*v2.y;									\
; 69   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 70   : 	rad = fa * extents.x + fb * extents.y;					\
; 71   : 	if(min>rad || max<-rad) return false;
; 72   : 
; 73   : //! TO BE DOCUMENTED
; 74   : #define AXISTEST_Z0(a, b, fa, fb)							\
; 75   : 	min = a*v0.x - b*v0.y;									\
; 76   : 	max = a*v1.x - b*v1.y;									\
; 77   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 78   : 	rad = fa * extents.x + fb * extents.y;					\
; 79   : 	if(min>rad || max<-rad) return false;
; 80   : 
; 81   : 
; 82   : template <bool bClass3, bool bFirst>
; 83   : class box_collider
; 84   : {
; 85   : public:
; 86   : 	COLLIDER*		dest;
; 87   : 	TRI*			tris;
; 88   : 	Fvector*		verts;
; 89   : 	
; 90   : 	Fvector			b_min, b_max;
; 91   : 	Point			center, extents;
; 92   : 
; 93   : 	Point			mLeafVerts	[3];
; 94   : 	
; 95   : 	IC void			_init		(COLLIDER* CL, Fvector* V, TRI* T, const Fvector& C, const Fvector& E)
; 96   : 	{
; 97   : 		dest		= CL;
; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);
; 101  : 		extents		= Point(E.x,E.y,E.z);
; 102  : 		b_min.sub	(C,E);
; 103  : 		b_max.add	(C,E);
; 104  : 	}
; 105  : 	ICF	bool		_box		(const Fvector& C, const Fvector& E)
; 106  : 	{
; 107  : 		if( b_max.x < C.x-E.x )	return false;
; 108  : 		if( b_max.y < C.y-E.y )	return false;
; 109  : 		if( b_max.z < C.z-E.z )	return false;
; 110  : 		if( b_min.x > C.x+E.x )	return false;
; 111  : 		if( b_min.y > C.y+E.y )	return false;
; 112  : 		if( b_min.z > C.z+E.z )	return false;
; 113  : 		return true;
; 114  : 	};
; 115  : 	ICF	bool		_tri		()
; 116  : 	{
; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	subss	xmm14, xmm0

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	subss	xmm6, xmm0

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	subss	xmm4, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm14
	movaps	xmm0, xmm14
	comiss	xmm6, xmm14
	movss	DWORD PTR v0$1$[rsp], xmm14
	movss	DWORD PTR v1$1$[rsp], xmm6
	movss	DWORD PTR v2$1$[rsp], xmm4
	jae	SHORT $LN336@prim
	movaps	xmm0, xmm6
$LN336@prim:
	jbe	SHORT $LN49@prim
	movaps	xmm1, xmm6
$LN49@prim:
	comiss	xmm4, xmm0
	jae	SHORT $LN48@prim
	movaps	xmm0, xmm4
$LN48@prim:
	comiss	xmm4, xmm1
	jbe	SHORT $LN47@prim
	movaps	xmm1, xmm4
$LN47@prim:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm2, DWORD PTR [rcx+60]
	comiss	xmm0, xmm2
	ja	$LN2@prim
	movss	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN2@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movaps	XMMWORD PTR [rsp+144], xmm11

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm11, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+128], xmm12
	movaps	XMMWORD PTR [rsp+112], xmm13

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm13, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm12, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	subss	xmm11, xmm0
	subss	xmm13, xmm0
	subss	xmm12, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm1, xmm13
	movaps	xmm0, xmm13
	comiss	xmm12, xmm13
	jae	SHORT $LN337@prim
	movaps	xmm0, xmm12
$LN337@prim:
	jbe	SHORT $LN43@prim
	movaps	xmm1, xmm12
$LN43@prim:
	comiss	xmm11, xmm0
	jae	SHORT $LN42@prim
	movaps	xmm0, xmm11
$LN42@prim:
	comiss	xmm11, xmm1
	jbe	SHORT $LN41@prim
	movaps	xmm1, xmm11
$LN41@prim:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	comiss	xmm0, xmm2
	ja	$LN331@prim
	movaps	xmm0, xmm2
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN331@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm5, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+192], xmm8
	movaps	XMMWORD PTR [rsp+80], xmm15

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm8, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	subss	xmm5, xmm0

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	subss	xmm7, xmm0
	subss	xmm8, xmm0
	movss	DWORD PTR v1$3$[rsp], xmm5

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	comiss	xmm5, xmm8
	movaps	xmm1, xmm8
	movaps	xmm0, xmm8
	jae	SHORT $LN338@prim
	movaps	xmm0, xmm5
$LN338@prim:
	jbe	SHORT $LN37@prim
	movaps	xmm1, xmm5
$LN37@prim:
	comiss	xmm7, xmm0
	jae	SHORT $LN36@prim
	movaps	xmm0, xmm7
$LN36@prim:
	comiss	xmm7, xmm1
	jbe	SHORT $LN35@prim
	movaps	xmm1, xmm7
$LN35@prim:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm15, DWORD PTR [rcx+68]
	comiss	xmm0, xmm15
	ja	$LN333@prim
	movaps	xmm0, xmm15
	xorps	xmm0, xmm3
	comiss	xmm1, xmm0
	jb	$LN333@prim
	movaps	XMMWORD PTR [rsp+176], xmm9
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm1, xmm5
	movaps	xmm9, xmm6
	subss	xmm9, xmm14
	subss	xmm1, xmm8
	movaps	XMMWORD PTR [rsp+160], xmm10
	movaps	xmm10, xmm4
	movaps	xmm4, xmm11
	subss	xmm10, xmm6
	movss	DWORD PTR e0$3$[rsp], xmm9
	subss	xmm4, xmm12
	movaps	xmm6, xmm7

; 399  : 									x * p.y - y * p.x );

	movaps	xmm0, xmm4

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm2, xmm12
	subss	xmm6, xmm5
	subss	xmm2, xmm13
	movss	DWORD PTR e0$2$[rsp], xmm1

; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, xmm1
	movaps	xmm5, xmm6
	mulss	xmm5, xmm2
	subss	xmm5, xmm0

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	DWORD PTR e1$2$[rsp], xmm6
	movss	DWORD PTR e1$3$[rsp], xmm10

; 399  : 									x * p.y - y * p.x );

	movaps	xmm0, xmm6
	movaps	xmm6, xmm4
	mulss	xmm0, xmm9
	mulss	xmm6, xmm9
	movss	DWORD PTR normal$1$[rsp], xmm5
	movaps	xmm5, xmm10
	mulss	xmm5, xmm1
	subss	xmm5, xmm0
	movaps	xmm0, xmm10

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm10, DWORD PTR normal$1$[rsp]

; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, xmm2

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm1, xmm10
	xorps	xmm1, xmm3

; 399  : 									x * p.y - y * p.x );

	subss	xmm6, xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm9, xmm5

; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$2$[rsp], xmm5

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm9, xmm3

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm14
	xorps	xmm14, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm10, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$3$[rsp], xmm6

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm0, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm9, xmm13

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm0, xmm3

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm8
	addss	xmm9, xmm1
	addss	xmm9, xmm0
	movss	DWORD PTR d$1$[rsp], xmm9
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN94@prim
	movss	xmm9, DWORD PTR [rcx+60]
	movaps	xmm10, xmm9
	xorps	xmm10, xmm3

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN96@prim
$LN94@prim:
	movss	xmm10, DWORD PTR [rcx+60]
	movaps	xmm9, xmm10
	xorps	xmm9, xmm3
$LN96@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm5, xmm14
	jbe	SHORT $LN322@prim
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm3

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN323@prim
$LN322@prim:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm3
$LN323@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm6, xmm14
	jbe	SHORT $LN325@prim
	movss	xmm5, xmm15
	movaps	xmm6, xmm5
	xorps	xmm6, xmm3

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN326@prim
$LN325@prim:
	movss	xmm6, xmm15
	movaps	xmm5, xmm6
	xorps	xmm5, xmm3
$LN326@prim:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR normal$2$[rsp]
	mulss	xmm10, DWORD PTR normal$1$[rsp]
	addss	xmm1, xmm10
	movss	xmm10, DWORD PTR normal$3$[rsp]
	mulss	xmm6, xmm10
	addss	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm6, DWORD PTR d$1$[rsp]
	addss	xmm1, xmm6
	comiss	xmm1, xmm14
	ja	$LN335@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR normal$2$[rsp]
	mulss	xmm9, DWORD PTR normal$1$[rsp]
	mulss	xmm5, xmm10
	addss	xmm0, xmm9
	addss	xmm0, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, xmm6
	comiss	xmm0, xmm14
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR e0$2$[rsp]
	movss	xmm14, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm10, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm5, xmm1
	movaps	xmm6, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm9, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm10, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm5, xmm13
	mulss	xmm6, xmm11
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm9, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm5, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm7
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN30@prim
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN30@prim:
	movaps	xmm0, xmm9
	movaps	xmm1, xmm10
	mulss	xmm0, DWORD PTR [rcx+64]
	mulss	xmm1, xmm15
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm6, xmm1
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm6, DWORD PTR e0$3$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	movaps	xmm5, xmm6
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm5, xmm8
	mulss	xmm6, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	subss	xmm5, xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, DWORD PTR v2$1$[rsp]
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN27@prim
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN27@prim:
	mulss	xmm9, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	addss	xmm0, xmm9
	comiss	xmm5, xmm0
	ja	$LN335@prim
	xorps	xmm0, xmm3
	comiss	xmm6, xmm0
	jb	$LN335@prim

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm6, DWORD PTR e0$3$[rsp]
	movaps	xmm5, xmm2
	mulss	xmm2, DWORD PTR v2$1$[rsp]
	mulss	xmm5, DWORD PTR v1$1$[rsp]
	movaps	xmm0, xmm6
	mulss	xmm0, xmm12
	mulss	xmm6, xmm11
	subss	xmm5, xmm0
	subss	xmm2, xmm6
	comiss	xmm5, xmm2
	jbe	SHORT $LN24@prim
	movaps	xmm0, xmm2
	movaps	xmm2, xmm5
	movaps	xmm5, xmm0
$LN24@prim:
	mulss	xmm1, DWORD PTR [rcx+64]
	mulss	xmm10, DWORD PTR [rcx+60]
	addss	xmm1, xmm10
	comiss	xmm5, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm2, xmm1
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR e1$2$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm4
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm9, xmm4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm2, xmm1
	movaps	xmm5, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm6, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm9, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm2, xmm13
	mulss	xmm5, xmm11
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm6, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	subss	xmm2, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm7
	subss	xmm5, xmm0
	comiss	xmm2, xmm5
	jbe	SHORT $LN21@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm2
	movaps	xmm2, xmm0
$LN21@prim:
	movss	xmm10, DWORD PTR [rcx+64]
	movaps	xmm1, xmm9
	movaps	xmm0, xmm6
	mulss	xmm1, xmm15
	mulss	xmm0, xmm10
	addss	xmm1, xmm0
	comiss	xmm2, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm5, xmm1
	jb	$LN335@prim
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm5, DWORD PTR e1$3$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	movaps	xmm2, xmm5
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm2, xmm8
	mulss	xmm5, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR e1$2$[rsp]
	mulss	xmm0, DWORD PTR v2$1$[rsp]
	subss	xmm5, xmm0
	comiss	xmm2, xmm5
	jbe	SHORT $LN18@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm2
	movaps	xmm2, xmm0
$LN18@prim:
	movss	xmm7, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm6, xmm7
	addss	xmm0, xmm6
	comiss	xmm2, xmm0
	ja	$LN335@prim
	xorps	xmm0, xmm3
	comiss	xmm5, xmm0
	jb	$LN335@prim

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movss	xmm5, DWORD PTR e1$3$[rsp]
	movaps	xmm2, xmm4
	mulss	xmm4, DWORD PTR v1$1$[rsp]
	mulss	xmm2, DWORD PTR v0$1$[rsp]
	movaps	xmm0, xmm5
	mulss	xmm0, xmm13
	mulss	xmm5, xmm12
	subss	xmm2, xmm0
	subss	xmm4, xmm5
	comiss	xmm2, xmm4
	jbe	SHORT $LN15@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm2
	movaps	xmm2, xmm0
$LN15@prim:
	mulss	xmm1, xmm10
	mulss	xmm9, xmm7
	addss	xmm1, xmm9
	comiss	xmm2, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm4, xmm1
	jb	$LN335@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm2, DWORD PTR [rcx+76]
	movss	xmm7, DWORD PTR [rcx+80]
	movss	xmm6, DWORD PTR [rcx+72]
	subss	xmm2, DWORD PTR [rcx+100]
	subss	xmm7, DWORD PTR [rcx+104]
	subss	xmm6, DWORD PTR [rcx+96]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm2
	movaps	xmm4, xmm7
	movaps	xmm5, xmm7
	mulss	xmm0, xmm8
	mulss	xmm4, xmm13
	mulss	xmm5, xmm12
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm9, xmm2
	movaps	xmm10, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movss	xmm13, DWORD PTR v1$3$[rsp]
	subss	xmm4, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm9, xmm14
	andps	xmm10, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	subss	xmm5, xmm0
	comiss	xmm4, xmm5
	jbe	SHORT $LN12@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm4
	movaps	xmm4, xmm0
$LN12@prim:
	movaps	xmm0, xmm10
	movaps	xmm1, xmm9
	mulss	xmm0, DWORD PTR [rcx+64]
	mulss	xmm1, xmm15
	addss	xmm1, xmm0
	comiss	xmm4, xmm1
	ja	$LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm5, xmm1
	jb	$LN335@prim

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm0, xmm7
	movaps	xmm5, xmm6
	movaps	xmm4, xmm6
	mulss	xmm0, DWORD PTR v0$1$[rsp]
	mulss	xmm5, xmm8
	movss	xmm8, DWORD PTR v1$1$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	subss	xmm5, xmm0
	mulss	xmm7, xmm8
	mulss	xmm4, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	subss	xmm4, xmm7
	comiss	xmm5, xmm4
	jbe	SHORT $LN9@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm5
	movaps	xmm5, xmm0
$LN9@prim:
	movss	xmm7, DWORD PTR [rcx+60]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm15
	mulss	xmm10, xmm7
	addss	xmm0, xmm10
	comiss	xmm5, xmm0
	ja	$LN335@prim
	xorps	xmm0, xmm3
	comiss	xmm4, xmm0
	jb	$LN335@prim

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm4, xmm2
	mulss	xmm2, DWORD PTR v2$1$[rsp]
	movaps	xmm0, xmm6
	mulss	xmm4, xmm8
	mulss	xmm0, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm0
	subss	xmm2, xmm6
	comiss	xmm4, xmm2
	jbe	SHORT $LN6@prim
	movaps	xmm0, xmm2
	movaps	xmm2, xmm4
	movaps	xmm4, xmm0
$LN6@prim:
	mulss	xmm1, DWORD PTR [rcx+64]
	mulss	xmm9, xmm7
	addss	xmm1, xmm9
	comiss	xmm4, xmm1
	ja	SHORT $LN335@prim
	xorps	xmm1, xmm3
	comiss	xmm2, xmm1
	jb	SHORT $LN335@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	eax, DWORD PTR prim$[rsp]
	mov	DWORD PTR [rdx+48], eax

; 198  : 		R.verts[0]	= v0;

	movsdx	xmm0, QWORD PTR [rdi+rbx*4]
	movsdx	QWORD PTR [rdx], xmm0
	mov	ecx, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rdx+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsdx	xmm0, QWORD PTR [rbp+rsi*4]
	movsdx	QWORD PTR [rdx+12], xmm0
	mov	ecx, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rdx+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsdx	xmm0, QWORD PTR [r15+r14*4]
	movsdx	QWORD PTR [rdx+24], xmm0
	mov	eax, DWORD PTR [r15+r14*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [rdx+40], rax
$LN335@prim:
	movaps	xmm9, XMMWORD PTR [rsp+176]
	movaps	xmm10, XMMWORD PTR [rsp+160]
$LN333@prim:
	movaps	xmm8, XMMWORD PTR [rsp+192]
	movaps	xmm15, XMMWORD PTR [rsp+80]
$LN331@prim:
	movaps	xmm11, XMMWORD PTR [rsp+144]
	movaps	xmm12, XMMWORD PTR [rsp+128]
	movaps	xmm13, XMMWORD PTR [rsp+112]
$LN2@prim:

; 202  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+224]
	movaps	xmm7, XMMWORD PTR [rsp+208]
	movaps	xmm14, XMMWORD PTR [rsp+96]
	add	rsp, 248				; 000000f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?_prim@?$box_collider@$00$0A@@@QEAAXK@Z ENDP		; box_collider<1,0>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<0,1>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box
$LN9@box:
	xor	al, al

; 113  : 		return true;
; 114  : 	};

	ret	0
$LN6@box:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm1, xmm4
	comiss	xmm1, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rcx+32]
	setae	al

; 113  : 		return true;
; 114  : 	};

	ret	0
?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<0,1>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 208
prim$ = 216
?_prim@?$box_collider@$0A@$00@@QEAAXK@Z PROC		; box_collider<0,1>::_prim, COMDAT

; 190  : 	{

$LN337:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	DWORD PTR [rsp+16], edx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 160				; 000000a0H

; 191  : 		TRI&	T	= tris[prim];

	mov	r13, QWORD PTR [rcx+8]

; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rsp+112], xmm8
	movaps	XMMWORD PTR [rsp+64], xmm11
	movaps	XMMWORD PTR [rsp+48], xmm12
	mov	eax, edx
	movaps	XMMWORD PTR [rsp+32], xmm13
	lea	r12, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rbx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [rdi+rbx*4]
	movss	DWORD PTR [rcx+72], xmm13
	mov	eax, DWORD PTR [rdi+rbx*4+4]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rcx+80], eax

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [r13+r12*8+4]
	mov	rbp, QWORD PTR [rcx+16]
	lea	rsi, QWORD PTR [rax+rax*2]
	movss	xmm12, DWORD PTR [rbp+rsi*4]
	movss	DWORD PTR [rcx+84], xmm12
	mov	eax, DWORD PTR [rbp+rsi*4+4]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rcx+92], eax

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	r15, QWORD PTR [rcx+16]
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm11, DWORD PTR [r15+r14*4]
	movss	DWORD PTR [rcx+96], xmm11
	mov	eax, DWORD PTR [r15+r14*4+4]
	mov	DWORD PTR [rcx+100], eax
	movss	xmm8, DWORD PTR [r15+r14*4+8]
	movss	DWORD PTR [rcx+104], xmm8

; 29   : 
; 30   : 	return false;
; 31   : }
; 32   : 
; 33   : //! TO BE DOCUMENTED
; 34   : #define AXISTEST_X01(a, b, fa, fb)							\
; 35   : 	min = a*v0.y - b*v0.z;									\
; 36   : 	max = a*v2.y - b*v2.z;									\
; 37   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 38   : 	rad = fa * extents.y + fb * extents.z;					\
; 39   : 	if(min>rad || max<-rad) return false;
; 40   : 
; 41   : //! TO BE DOCUMENTED
; 42   : #define AXISTEST_X2(a, b, fa, fb)							\
; 43   : 	min = a*v0.y - b*v0.z;									\
; 44   : 	max = a*v1.y - b*v1.z;									\
; 45   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 46   : 	rad = fa * extents.y + fb * extents.z;					\
; 47   : 	if(min>rad || max<-rad) return false;
; 48   : 
; 49   : //! TO BE DOCUMENTED
; 50   : #define AXISTEST_Y02(a, b, fa, fb)							\
; 51   : 	min = b*v0.z - a*v0.x;									\
; 52   : 	max = b*v2.z - a*v2.x;									\
; 53   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 54   : 	rad = fa * extents.x + fb * extents.z;					\
; 55   : 	if(min>rad || max<-rad) return false;
; 56   : 
; 57   : //! TO BE DOCUMENTED
; 58   : #define AXISTEST_Y1(a, b, fa, fb)							\
; 59   : 	min = b*v0.z - a*v0.x;									\
; 60   : 	max = b*v1.z - a*v1.x;									\
; 61   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 62   : 	rad = fa * extents.x + fb * extents.z;					\
; 63   : 	if(min>rad || max<-rad) return false;
; 64   : 
; 65   : //! TO BE DOCUMENTED
; 66   : #define AXISTEST_Z12(a, b, fa, fb)							\
; 67   : 	min = a*v1.x - b*v1.y;									\
; 68   : 	max = a*v2.x - b*v2.y;									\
; 69   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 70   : 	rad = fa * extents.x + fb * extents.y;					\
; 71   : 	if(min>rad || max<-rad) return false;
; 72   : 
; 73   : //! TO BE DOCUMENTED
; 74   : #define AXISTEST_Z0(a, b, fa, fb)							\
; 75   : 	min = a*v0.x - b*v0.y;									\
; 76   : 	max = a*v1.x - b*v1.y;									\
; 77   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 78   : 	rad = fa * extents.x + fb * extents.y;					\
; 79   : 	if(min>rad || max<-rad) return false;
; 80   : 
; 81   : 
; 82   : template <bool bClass3, bool bFirst>
; 83   : class box_collider
; 84   : {
; 85   : public:
; 86   : 	COLLIDER*		dest;
; 87   : 	TRI*			tris;
; 88   : 	Fvector*		verts;
; 89   : 	
; 90   : 	Fvector			b_min, b_max;
; 91   : 	Point			center, extents;
; 92   : 
; 93   : 	Point			mLeafVerts	[3];
; 94   : 	
; 95   : 	IC void			_init		(COLLIDER* CL, Fvector* V, TRI* T, const Fvector& C, const Fvector& E)
; 96   : 	{
; 97   : 		dest		= CL;
; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);
; 101  : 		extents		= Point(E.x,E.y,E.z);
; 102  : 		b_min.sub	(C,E);
; 103  : 		b_max.add	(C,E);
; 104  : 	}
; 105  : 	ICF	bool		_box		(const Fvector& C, const Fvector& E)
; 106  : 	{
; 107  : 		if( b_max.x < C.x-E.x )	return false;
; 108  : 		if( b_max.y < C.y-E.y )	return false;
; 109  : 		if( b_max.z < C.z-E.z )	return false;
; 110  : 		if( b_min.x > C.x+E.x )	return false;
; 111  : 		if( b_min.y > C.y+E.y )	return false;
; 112  : 		if( b_min.z > C.z+E.z )	return false;
; 113  : 		return true;
; 114  : 	};
; 115  : 	ICF	bool		_tri		()
; 116  : 	{
; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	subss	xmm13, xmm0

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	subss	xmm12, xmm0

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	subss	xmm11, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm2, xmm13
	movaps	xmm1, xmm13
	comiss	xmm12, xmm13
	jae	SHORT $LN333@prim
	movaps	xmm1, xmm12
$LN333@prim:
	jbe	SHORT $LN49@prim
	movaps	xmm2, xmm12
$LN49@prim:
	comiss	xmm11, xmm1
	jae	SHORT $LN48@prim
	movaps	xmm1, xmm11
$LN48@prim:
	comiss	xmm11, xmm2
	jbe	SHORT $LN47@prim
	movaps	xmm2, xmm11
$LN47@prim:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm0, DWORD PTR [rcx+60]
	comiss	xmm1, xmm0
	ja	$LN2@prim
	movss	xmm4, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN2@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm5, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+96], xmm9
	movaps	XMMWORD PTR [rsp+80], xmm10

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm10, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm9, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	subss	xmm5, xmm0
	subss	xmm10, xmm0
	subss	xmm9, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm2, xmm10
	movaps	xmm1, xmm10
	comiss	xmm9, xmm10
	jae	SHORT $LN334@prim
	movaps	xmm1, xmm9
$LN334@prim:
	jbe	SHORT $LN43@prim
	movaps	xmm2, xmm9
$LN43@prim:
	comiss	xmm5, xmm1
	jae	SHORT $LN42@prim
	movaps	xmm1, xmm5
$LN42@prim:
	comiss	xmm5, xmm2
	jbe	SHORT $LN41@prim
	movaps	xmm2, xmm5
$LN41@prim:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN330@prim
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN330@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+144], xmm6

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm6, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+128], xmm7

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm7, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	subss	xmm6, xmm0

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	subss	xmm8, xmm0
	subss	xmm7, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	comiss	xmm6, xmm7
	movaps	xmm2, xmm7
	movaps	xmm1, xmm7
	jae	SHORT $LN335@prim
	movaps	xmm1, xmm6
$LN335@prim:
	jbe	SHORT $LN37@prim
	movaps	xmm2, xmm6
$LN37@prim:
	comiss	xmm8, xmm1
	jae	SHORT $LN36@prim
	movaps	xmm1, xmm8
$LN36@prim:
	comiss	xmm8, xmm2
	jbe	SHORT $LN35@prim
	movaps	xmm2, xmm8
$LN35@prim:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN332@prim
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN332@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm11, xmm12
	subss	xmm5, xmm9
	movaps	xmm3, xmm12
	movaps	xmm2, xmm9
	movaps	xmm1, xmm6

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm9, xmm11
	movaps	xmm0, xmm5

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm1, xmm7
	subss	xmm8, xmm6
	subss	xmm3, xmm13

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm12, xmm8
	mulss	xmm0, xmm1
	mulss	xmm9, xmm1
	mulss	xmm8, xmm3

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm2, xmm10

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	subss	xmm9, xmm8
	mulss	xmm11, xmm2
	mulss	xmm12, xmm2
	mulss	xmm5, xmm3
	subss	xmm5, xmm11
	subss	xmm12, xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm11, xmm9
	movaps	xmm1, xmm12
	movaps	xmm0, xmm5
	xorps	xmm11, xmm4
	xorps	xmm1, xmm4
	xorps	xmm0, xmm4

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm11, xmm10
	mulss	xmm1, xmm13
	mulss	xmm0, xmm7
	addss	xmm11, xmm1
	addss	xmm11, xmm0
	xorps	xmm8, xmm8
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm12, xmm8
	jbe	SHORT $LN94@prim
	movss	xmm2, DWORD PTR [rcx+60]
	movaps	xmm6, xmm2
	xorps	xmm6, xmm4

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN96@prim
$LN94@prim:
	movss	xmm6, DWORD PTR [rcx+60]
	movaps	xmm2, xmm6
	xorps	xmm2, xmm4
$LN96@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm9, xmm8
	jbe	SHORT $LN322@prim
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm4

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN323@prim
$LN322@prim:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm4
$LN323@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm5, xmm8
	jbe	SHORT $LN325@prim
	movss	xmm3, DWORD PTR [rcx+68]
	movaps	xmm7, xmm3
	xorps	xmm7, xmm4

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN326@prim
$LN325@prim:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm3, xmm7
	xorps	xmm3, xmm4
$LN326@prim:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm9
	mulss	xmm6, xmm12
	mulss	xmm7, xmm5
	addss	xmm1, xmm6
	addss	xmm1, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm11
	comiss	xmm1, xmm8
	ja	SHORT $LN332@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm9
	mulss	xmm2, xmm12
	mulss	xmm3, xmm5
	addss	xmm0, xmm2
	addss	xmm0, xmm3
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, xmm11
	comiss	xmm0, xmm8
	jb	SHORT $LN332@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	eax, DWORD PTR prim$[rsp]
	mov	DWORD PTR [rdx+48], eax

; 198  : 		R.verts[0]	= v0;

	movsdx	xmm0, QWORD PTR [rdi+rbx*4]
	movsdx	QWORD PTR [rdx], xmm0
	mov	ecx, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rdx+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsdx	xmm0, QWORD PTR [rbp+rsi*4]
	movsdx	QWORD PTR [rdx+12], xmm0
	mov	ecx, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rdx+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsdx	xmm0, QWORD PTR [r15+r14*4]
	movsdx	QWORD PTR [rdx+24], xmm0
	mov	eax, DWORD PTR [r15+r14*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [rdx+40], rax
$LN332@prim:
	movaps	xmm7, XMMWORD PTR [rsp+128]
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN330@prim:
	movaps	xmm9, XMMWORD PTR [rsp+96]
	movaps	xmm10, XMMWORD PTR [rsp+80]
$LN2@prim:

; 202  : 	}

	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?_prim@?$box_collider@$0A@$00@@QEAAXK@Z ENDP		; box_collider<0,1>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<0,0>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	jbe	SHORT $LN6@box
$LN9@box:
	xor	al, al

; 113  : 		return true;
; 114  : 	};

	ret	0
$LN6@box:

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	comiss	xmm3, DWORD PTR [rcx+24]
	jb	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	addss	xmm1, xmm4
	comiss	xmm1, DWORD PTR [rcx+28]
	jb	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	addss	xmm2, xmm5
	comiss	xmm2, DWORD PTR [rcx+32]
	setae	al

; 113  : 		return true;
; 114  : 	};

	ret	0
?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<0,0>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 208
prim$ = 216
?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z PROC		; box_collider<0,0>::_prim, COMDAT

; 190  : 	{

$LN337:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	DWORD PTR [rsp+16], edx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 160				; 000000a0H

; 191  : 		TRI&	T	= tris[prim];

	mov	r13, QWORD PTR [rcx+8]

; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rsp+112], xmm8
	movaps	XMMWORD PTR [rsp+64], xmm11
	movaps	XMMWORD PTR [rsp+48], xmm12
	mov	eax, edx
	movaps	XMMWORD PTR [rsp+32], xmm13
	lea	r12, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r13+r12*8]
	lea	rbx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [rdi+rbx*4]
	movss	DWORD PTR [rcx+72], xmm13
	mov	eax, DWORD PTR [rdi+rbx*4+4]
	mov	DWORD PTR [rcx+76], eax
	mov	eax, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rcx+80], eax

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [r13+r12*8+4]
	mov	rbp, QWORD PTR [rcx+16]
	lea	rsi, QWORD PTR [rax+rax*2]
	movss	xmm12, DWORD PTR [rbp+rsi*4]
	movss	DWORD PTR [rcx+84], xmm12
	mov	eax, DWORD PTR [rbp+rsi*4+4]
	mov	DWORD PTR [rcx+88], eax
	mov	eax, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rcx+92], eax

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	r15, QWORD PTR [rcx+16]
	mov	eax, DWORD PTR [r13+r12*8+8]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm11, DWORD PTR [r15+r14*4]
	movss	DWORD PTR [rcx+96], xmm11
	mov	eax, DWORD PTR [r15+r14*4+4]
	mov	DWORD PTR [rcx+100], eax
	movss	xmm8, DWORD PTR [r15+r14*4+8]
	movss	DWORD PTR [rcx+104], xmm8

; 29   : 
; 30   : 	return false;
; 31   : }
; 32   : 
; 33   : //! TO BE DOCUMENTED
; 34   : #define AXISTEST_X01(a, b, fa, fb)							\
; 35   : 	min = a*v0.y - b*v0.z;									\
; 36   : 	max = a*v2.y - b*v2.z;									\
; 37   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 38   : 	rad = fa * extents.y + fb * extents.z;					\
; 39   : 	if(min>rad || max<-rad) return false;
; 40   : 
; 41   : //! TO BE DOCUMENTED
; 42   : #define AXISTEST_X2(a, b, fa, fb)							\
; 43   : 	min = a*v0.y - b*v0.z;									\
; 44   : 	max = a*v1.y - b*v1.z;									\
; 45   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 46   : 	rad = fa * extents.y + fb * extents.z;					\
; 47   : 	if(min>rad || max<-rad) return false;
; 48   : 
; 49   : //! TO BE DOCUMENTED
; 50   : #define AXISTEST_Y02(a, b, fa, fb)							\
; 51   : 	min = b*v0.z - a*v0.x;									\
; 52   : 	max = b*v2.z - a*v2.x;									\
; 53   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 54   : 	rad = fa * extents.x + fb * extents.z;					\
; 55   : 	if(min>rad || max<-rad) return false;
; 56   : 
; 57   : //! TO BE DOCUMENTED
; 58   : #define AXISTEST_Y1(a, b, fa, fb)							\
; 59   : 	min = b*v0.z - a*v0.x;									\
; 60   : 	max = b*v1.z - a*v1.x;									\
; 61   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 62   : 	rad = fa * extents.x + fb * extents.z;					\
; 63   : 	if(min>rad || max<-rad) return false;
; 64   : 
; 65   : //! TO BE DOCUMENTED
; 66   : #define AXISTEST_Z12(a, b, fa, fb)							\
; 67   : 	min = a*v1.x - b*v1.y;									\
; 68   : 	max = a*v2.x - b*v2.y;									\
; 69   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 70   : 	rad = fa * extents.x + fb * extents.y;					\
; 71   : 	if(min>rad || max<-rad) return false;
; 72   : 
; 73   : //! TO BE DOCUMENTED
; 74   : #define AXISTEST_Z0(a, b, fa, fb)							\
; 75   : 	min = a*v0.x - b*v0.y;									\
; 76   : 	max = a*v1.x - b*v1.y;									\
; 77   : 	if(min>max) {const float tmp=max; max=min; min=tmp;	}	\
; 78   : 	rad = fa * extents.x + fb * extents.y;					\
; 79   : 	if(min>rad || max<-rad) return false;
; 80   : 
; 81   : 
; 82   : template <bool bClass3, bool bFirst>
; 83   : class box_collider
; 84   : {
; 85   : public:
; 86   : 	COLLIDER*		dest;
; 87   : 	TRI*			tris;
; 88   : 	Fvector*		verts;
; 89   : 	
; 90   : 	Fvector			b_min, b_max;
; 91   : 	Point			center, extents;
; 92   : 
; 93   : 	Point			mLeafVerts	[3];
; 94   : 	
; 95   : 	IC void			_init		(COLLIDER* CL, Fvector* V, TRI* T, const Fvector& C, const Fvector& E)
; 96   : 	{
; 97   : 		dest		= CL;
; 98   : 		verts		= V;
; 99   : 		tris		= T;
; 100  : 		center		= Point(C.x,C.y,C.z);
; 101  : 		extents		= Point(E.x,E.y,E.z);
; 102  : 		b_min.sub	(C,E);
; 103  : 		b_max.add	(C,E);
; 104  : 	}
; 105  : 	ICF	bool		_box		(const Fvector& C, const Fvector& E)
; 106  : 	{
; 107  : 		if( b_max.x < C.x-E.x )	return false;
; 108  : 		if( b_max.y < C.y-E.y )	return false;
; 109  : 		if( b_max.z < C.z-E.z )	return false;
; 110  : 		if( b_min.x > C.x+E.x )	return false;
; 111  : 		if( b_min.y > C.y+E.y )	return false;
; 112  : 		if( b_min.z > C.z+E.z )	return false;
; 113  : 		return true;
; 114  : 	};
; 115  : 	ICF	bool		_tri		()
; 116  : 	{
; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	subss	xmm13, xmm0

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	subss	xmm12, xmm0

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	subss	xmm11, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm2, xmm13
	movaps	xmm1, xmm13
	comiss	xmm12, xmm13
	jae	SHORT $LN333@prim
	movaps	xmm1, xmm12
$LN333@prim:
	jbe	SHORT $LN49@prim
	movaps	xmm2, xmm12
$LN49@prim:
	comiss	xmm11, xmm1
	jae	SHORT $LN48@prim
	movaps	xmm1, xmm11
$LN48@prim:
	comiss	xmm11, xmm2
	jbe	SHORT $LN47@prim
	movaps	xmm2, xmm11
$LN47@prim:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm0, DWORD PTR [rcx+60]
	comiss	xmm1, xmm0
	ja	$LN2@prim
	movss	xmm4, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN2@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm5, DWORD PTR [rcx+100]
	movaps	XMMWORD PTR [rsp+96], xmm9
	movaps	XMMWORD PTR [rsp+80], xmm10

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm10, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm9, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	subss	xmm5, xmm0
	subss	xmm10, xmm0
	subss	xmm9, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm2, xmm10
	movaps	xmm1, xmm10
	comiss	xmm9, xmm10
	jae	SHORT $LN334@prim
	movaps	xmm1, xmm9
$LN334@prim:
	jbe	SHORT $LN43@prim
	movaps	xmm2, xmm9
$LN43@prim:
	comiss	xmm5, xmm1
	jae	SHORT $LN42@prim
	movaps	xmm1, xmm5
$LN42@prim:
	comiss	xmm5, xmm2
	jbe	SHORT $LN41@prim
	movaps	xmm2, xmm5
$LN41@prim:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN330@prim
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN330@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movaps	XMMWORD PTR [rsp+144], xmm6

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm6, DWORD PTR [rcx+92]
	movaps	XMMWORD PTR [rsp+128], xmm7

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm7, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	subss	xmm6, xmm0

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	subss	xmm8, xmm0
	subss	xmm7, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	comiss	xmm6, xmm7
	movaps	xmm2, xmm7
	movaps	xmm1, xmm7
	jae	SHORT $LN335@prim
	movaps	xmm1, xmm6
$LN335@prim:
	jbe	SHORT $LN37@prim
	movaps	xmm2, xmm6
$LN37@prim:
	comiss	xmm8, xmm1
	jae	SHORT $LN36@prim
	movaps	xmm1, xmm8
$LN36@prim:
	comiss	xmm8, xmm2
	jbe	SHORT $LN35@prim
	movaps	xmm2, xmm8
$LN35@prim:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN332@prim
	xorps	xmm0, xmm4
	comiss	xmm2, xmm0
	jb	$LN332@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm11, xmm12
	subss	xmm5, xmm9
	movaps	xmm3, xmm12
	movaps	xmm2, xmm9
	movaps	xmm1, xmm6

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm9, xmm11
	movaps	xmm0, xmm5

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm1, xmm7
	subss	xmm8, xmm6
	subss	xmm3, xmm13

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm12, xmm8
	mulss	xmm0, xmm1
	mulss	xmm9, xmm1
	mulss	xmm8, xmm3

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm2, xmm10

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	subss	xmm9, xmm8
	mulss	xmm11, xmm2
	mulss	xmm12, xmm2
	mulss	xmm5, xmm3
	subss	xmm5, xmm11
	subss	xmm12, xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm11, xmm9
	movaps	xmm1, xmm12
	movaps	xmm0, xmm5
	xorps	xmm11, xmm4
	xorps	xmm1, xmm4
	xorps	xmm0, xmm4

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm11, xmm10
	mulss	xmm1, xmm13
	mulss	xmm0, xmm7
	addss	xmm11, xmm1
	addss	xmm11, xmm0
	xorps	xmm8, xmm8
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm12, xmm8
	jbe	SHORT $LN94@prim
	movss	xmm2, DWORD PTR [rcx+60]
	movaps	xmm6, xmm2
	xorps	xmm6, xmm4

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN96@prim
$LN94@prim:
	movss	xmm6, DWORD PTR [rcx+60]
	movaps	xmm2, xmm6
	xorps	xmm2, xmm4
$LN96@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm9, xmm8
	jbe	SHORT $LN322@prim
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm4

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN323@prim
$LN322@prim:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm4
$LN323@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm5, xmm8
	jbe	SHORT $LN325@prim
	movss	xmm3, DWORD PTR [rcx+68]
	movaps	xmm7, xmm3
	xorps	xmm7, xmm4

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN326@prim
$LN325@prim:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm3, xmm7
	xorps	xmm3, xmm4
$LN326@prim:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm9
	mulss	xmm6, xmm12
	mulss	xmm7, xmm5
	addss	xmm1, xmm6
	addss	xmm1, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm11
	comiss	xmm1, xmm8
	ja	SHORT $LN332@prim
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm9
	mulss	xmm2, xmm12
	mulss	xmm3, xmm5
	addss	xmm0, xmm2
	addss	xmm0, xmm3
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, xmm11
	comiss	xmm0, xmm8
	jb	SHORT $LN332@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	eax, DWORD PTR prim$[rsp]
	mov	DWORD PTR [rdx+48], eax

; 198  : 		R.verts[0]	= v0;

	movsdx	xmm0, QWORD PTR [rdi+rbx*4]
	movsdx	QWORD PTR [rdx], xmm0
	mov	ecx, DWORD PTR [rdi+rbx*4+8]
	mov	DWORD PTR [rdx+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsdx	xmm0, QWORD PTR [rbp+rsi*4]
	movsdx	QWORD PTR [rdx+12], xmm0
	mov	ecx, DWORD PTR [rbp+rsi*4+8]
	mov	DWORD PTR [rdx+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsdx	xmm0, QWORD PTR [r15+r14*4]
	movsdx	QWORD PTR [rdx+24], xmm0
	mov	eax, DWORD PTR [r15+r14*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	rax, QWORD PTR [r13+r12*8+16]
	mov	QWORD PTR [rdx+40], rax
$LN332@prim:
	movaps	xmm7, XMMWORD PTR [rsp+128]
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN330@prim:
	movaps	xmm9, XMMWORD PTR [rsp+96]
	movaps	xmm10, XMMWORD PTR [rsp+80]
$LN2@prim:

; 202  : 	}

	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ENDP		; box_collider<0,0>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_tri@?$box_collider@$00$00@@QEAA_NXZ
_TEXT	SEGMENT
vmax$3$ = 0
fex0$1$ = 0
vmax$1$ = 4
fey0$1$ = 4
e1$3$ = 8
normal$1$ = 12
e1$2$ = 16
e0$3$ = 20
normal$3$ = 24
vmin$3$ = 28
vmin$1$ = 32
v1$3$ = 36
fex2$1$ = 224
min$7$ = 224
v0$2$ = 224
this$ = 224
normal$2$ = 232
fez2$1$ = 232
fez1$1$ = 232
min$2$ = 232
min$1$ = 232
fey2$1$ = 240
fey1$1$ = 240
fez0$1$ = 240
d$1$ = 240
fex1$1$ = 248
e0$2$ = 248
?_tri@?$box_collider@$00$00@@QEAA_NXZ PROC		; box_collider<1,1>::_tri, COMDAT

; 116  : 	{

$LN345:
	mov	rax, rsp
	sub	rsp, 216				; 000000d8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rax-72], xmm9

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	movss	xmm9, DWORD PTR [rcx+84]
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movss	xmm12, DWORD PTR [rcx+72]

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm10, DWORD PTR [rcx+96]
	subss	xmm9, xmm0
	subss	xmm12, xmm0
	subss	xmm10, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm12
	movaps	xmm0, xmm12
	comiss	xmm9, xmm12
	jae	SHORT $LN339@tri
	movaps	xmm0, xmm9
$LN339@tri:
	jbe	SHORT $LN46@tri
	movaps	xmm1, xmm9
$LN46@tri:
	comiss	xmm10, xmm0
	jae	SHORT $LN45@tri
	movaps	xmm0, xmm10
$LN45@tri:
	comiss	xmm10, xmm1
	jbe	SHORT $LN44@tri
	movaps	xmm1, xmm10
$LN44@tri:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm11, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rsp+176], xmm7
	movaps	XMMWORD PTR [rsp+160], xmm8
	comiss	xmm0, xmm11
	movaps	XMMWORD PTR [rsp+80], xmm13
	movaps	XMMWORD PTR [rsp+64], xmm14
	movaps	XMMWORD PTR [rsp+48], xmm15
	ja	$LN30@tri
	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm0, xmm11
	xorps	xmm0, xmm2
	comiss	xmm1, xmm0
	jb	$LN30@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm13, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm14, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm15, DWORD PTR [rcx+100]
	subss	xmm13, xmm0
	subss	xmm14, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm1, xmm13
	comiss	xmm14, xmm13
	subss	xmm15, xmm0
	movss	DWORD PTR v0$2$[rsp], xmm13
	movaps	xmm0, xmm13
	jae	SHORT $LN340@tri
	movaps	xmm0, xmm14
$LN340@tri:
	jbe	SHORT $LN40@tri
	movaps	xmm1, xmm14
$LN40@tri:
	comiss	xmm15, xmm0
	jae	SHORT $LN39@tri
	movaps	xmm0, xmm15
$LN39@tri:
	comiss	xmm15, xmm1
	jbe	SHORT $LN38@tri
	movaps	xmm1, xmm15
$LN38@tri:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm3, DWORD PTR [rcx+64]
	comiss	xmm0, xmm3
	ja	$LN30@tri
	movaps	xmm0, xmm3
	xorps	xmm0, xmm2
	comiss	xmm1, xmm0
	jb	$LN30@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movss	xmm8, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm1, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm7, DWORD PTR [rcx+104]
	subss	xmm8, xmm0
	subss	xmm1, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm5, xmm8
	comiss	xmm1, xmm8
	subss	xmm7, xmm0
	movss	DWORD PTR v1$3$[rsp], xmm1
	movaps	xmm0, xmm8
	jae	SHORT $LN341@tri
	movaps	xmm0, xmm1
$LN341@tri:
	jbe	SHORT $LN34@tri
	movaps	xmm5, xmm1
$LN34@tri:
	comiss	xmm7, xmm0
	jae	SHORT $LN33@tri
	movaps	xmm0, xmm7
$LN33@tri:
	comiss	xmm7, xmm5
	jbe	SHORT $LN32@tri
	movaps	xmm5, xmm7
$LN32@tri:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	comiss	xmm0, xmm4
	ja	$LN30@tri
	movaps	xmm0, xmm4
	xorps	xmm0, xmm2
	comiss	xmm5, xmm0
	jb	$LN30@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm0, xmm9
	movaps	XMMWORD PTR [rsp+192], xmm6
	movaps	xmm6, xmm15
	subss	xmm0, xmm12
	subss	xmm6, xmm14
	movaps	xmm5, xmm14
	movss	DWORD PTR e0$3$[rsp], xmm0
	subss	xmm5, xmm13
	movaps	xmm0, xmm1
	subss	xmm0, xmm8
	movss	DWORD PTR e0$2$[rsp], xmm0
	movaps	xmm0, xmm10
	subss	xmm0, xmm9
	movss	DWORD PTR e1$3$[rsp], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, xmm1
	movss	DWORD PTR e1$2$[rsp], xmm0

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm13, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm13, xmm5
	subss	xmm13, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm0, DWORD PTR e0$2$[rsp]
	movss	DWORD PTR normal$1$[rsp], xmm13

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm1, DWORD PTR normal$1$[rsp]

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$2$[rsp], xmm0
	movss	xmm13, DWORD PTR normal$2$[rsp]
	movss	xmm0, DWORD PTR e1$2$[rsp]

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm1, xmm2

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm12

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, DWORD PTR e0$3$[rsp]
	subss	xmm13, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm0, xmm5
	movss	DWORD PTR normal$2$[rsp], xmm13
	movaps	xmm13, xmm6
	mulss	xmm13, DWORD PTR e0$3$[rsp]
	subss	xmm13, xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm0, DWORD PTR normal$2$[rsp]
	xorps	xmm0, xmm2
	movss	DWORD PTR d$1$[rsp], xmm0

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$3$[rsp], xmm13

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm0, xmm13
	xorps	xmm0, xmm2

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	xmm2, DWORD PTR d$1$[rsp]
	mulss	xmm0, xmm8
	mulss	xmm2, DWORD PTR v0$2$[rsp]
	movss	xmm13, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm13, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm1, DWORD PTR normal$1$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm13, xmm0
	xorps	xmm0, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm1, xmm0
	movss	xmm0, xmm11
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	DWORD PTR d$1$[rsp], xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN104@tri
	movaps	xmm1, xmm0
	xorps	xmm1, xmm2
	movss	DWORD PTR vmin$3$[rsp], xmm1

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN342@tri
$LN104@tri:
	movss	DWORD PTR vmin$3$[rsp], xmm0
	xorps	xmm0, xmm2
$LN342@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm1, DWORD PTR normal$2$[rsp]

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR vmax$3$[rsp], xmm0
	xorps	xmm0, xmm0

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm1, xmm0
	jbe	SHORT $LN332@tri
	movaps	xmm1, xmm3
	movss	xmm0, xmm3
	xorps	xmm1, xmm2

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN333@tri
$LN332@tri:
	movaps	xmm0, xmm3
	movss	xmm1, xmm3
	xorps	xmm0, xmm2
$LN333@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm13, DWORD PTR normal$3$[rsp]
	comiss	xmm13, DWORD PTR __real@00000000
	movss	xmm13, xmm4
	xorps	xmm13, xmm2
	jbe	SHORT $LN335@tri
	movss	DWORD PTR vmax$1$[rsp], xmm4
	movss	DWORD PTR vmin$1$[rsp], xmm13

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN343@tri
$LN335@tri:
	movss	DWORD PTR vmin$1$[rsp], xmm4
	movss	DWORD PTR vmax$1$[rsp], xmm13
$LN343@tri:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR normal$2$[rsp]
	movss	xmm2, DWORD PTR vmin$3$[rsp]
	movss	xmm13, DWORD PTR v0$2$[rsp]
	mulss	xmm2, DWORD PTR normal$1$[rsp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR vmin$1$[rsp]
	mulss	xmm2, DWORD PTR normal$3$[rsp]
	addss	xmm1, xmm2
	xorps	xmm2, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, xmm2
	ja	$LN10@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR normal$2$[rsp]
	movss	xmm1, DWORD PTR vmax$3$[rsp]
	mulss	xmm1, DWORD PTR normal$1$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR vmax$1$[rsp]
	mulss	xmm1, DWORD PTR normal$3$[rsp]
	addss	xmm0, xmm1
	xorps	xmm1, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, DWORD PTR d$1$[rsp]
	comiss	xmm0, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm5
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fey0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$2$[rsp]
	movaps	xmm2, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm1, xmm13
	movss	xmm13, DWORD PTR e0$2$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm2, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm1, xmm0
	movaps	xmm0, xmm5
	movss	DWORD PTR min$1$[rsp], xmm1
	mulss	xmm0, xmm7
	mulss	xmm13, xmm15
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fez0$1$[rsp], xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm13, xmm0
	comiss	xmm1, xmm13
	jbe	SHORT $LN27@tri
	movaps	xmm0, xmm13
	movaps	xmm13, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR min$1$[rsp], xmm1
$LN27@tri:
	movaps	xmm0, xmm3
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR min$1$[rsp]
	comiss	xmm0, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm13, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm13, DWORD PTR e0$3$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movss	xmm0, DWORD PTR e0$2$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm0, xmm12
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fex0$1$[rsp], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm1, xmm13
	mulss	xmm13, xmm7
	mulss	xmm1, xmm8
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, xmm10
	subss	xmm13, xmm0
	movss	DWORD PTR min$2$[rsp], xmm1
	comiss	xmm1, xmm13
	jbe	SHORT $LN24@tri
	movaps	xmm0, xmm13
	movaps	xmm13, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR min$2$[rsp], xmm1
$LN24@tri:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR min$2$[rsp]
	comiss	xmm0, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm13, xmm1
	jb	$LN10@tri

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm13, xmm5
	mulss	xmm5, xmm10
	mulss	xmm13, xmm9
	movaps	xmm0, xmm1
	mulss	xmm0, xmm14
	mulss	xmm1, xmm15
	subss	xmm13, xmm0
	subss	xmm5, xmm1
	comiss	xmm13, xmm5
	jbe	SHORT $LN21@tri
	movaps	xmm0, xmm5
	movaps	xmm5, xmm13
	movaps	xmm13, xmm0
$LN21@tri:
	movaps	xmm1, xmm11
	movaps	xmm0, xmm3
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fex0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm13, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm5, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm13, DWORD PTR e1$2$[rsp]
	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm6
	movaps	xmm5, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fey1$1$[rsp], xmm1
	movaps	xmm1, xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm5, DWORD PTR v0$2$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm13, xmm15
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fez1$1$[rsp], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm7
	subss	xmm13, xmm0
	comiss	xmm5, xmm13
	jbe	SHORT $LN18@tri
	movaps	xmm0, xmm13
	movaps	xmm13, xmm5
	movaps	xmm5, xmm0
$LN18@tri:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm3
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm13, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm5, DWORD PTR e1$3$[rsp]
	movaps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm13, xmm5
	mulss	xmm5, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm13, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fex1$1$[rsp], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movss	xmm1, DWORD PTR e1$2$[rsp]
	movaps	xmm0, xmm1
	mulss	xmm1, xmm10
	mulss	xmm0, xmm12
	subss	xmm5, xmm1
	subss	xmm13, xmm0
	comiss	xmm13, xmm5
	jbe	SHORT $LN15@tri
	movaps	xmm0, xmm5
	movaps	xmm5, xmm13
	movaps	xmm13, xmm0
$LN15@tri:
	movss	xmm7, DWORD PTR fex1$1$[rsp]
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm13, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm5, xmm1
	jb	$LN10@tri

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movss	xmm1, DWORD PTR e1$3$[rsp]
	movaps	xmm5, xmm6
	mulss	xmm6, xmm9
	mulss	xmm5, xmm12
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR v0$2$[rsp]
	mulss	xmm1, xmm14
	subss	xmm6, xmm1
	subss	xmm5, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN12@tri
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN12@tri:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm6, xmm1
	jb	$LN10@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm1, DWORD PTR [rcx+76]
	movss	xmm13, DWORD PTR [rcx+80]
	movss	xmm7, DWORD PTR [rcx+72]
	subss	xmm1, DWORD PTR [rcx+100]
	subss	xmm13, DWORD PTR [rcx+104]
	subss	xmm7, DWORD PTR [rcx+96]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm5, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm1
	movaps	xmm6, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	mulss	xmm0, xmm8
	mulss	xmm6, xmm14
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fey2$1$[rsp], xmm5
	movaps	xmm5, xmm13
	andps	xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fez2$1$[rsp], xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm5, xmm13
	mulss	xmm5, DWORD PTR v0$2$[rsp]
	subss	xmm5, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR min$7$[rsp], xmm5
	mulss	xmm0, DWORD PTR v1$3$[rsp]
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN9@tri
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
	movss	DWORD PTR min$7$[rsp], xmm5
$LN9@tri:
	movaps	xmm0, xmm4
	movaps	xmm5, xmm3
	mulss	xmm0, DWORD PTR fey2$1$[rsp]
	mulss	xmm5, DWORD PTR fez2$1$[rsp]
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR min$7$[rsp]
	comiss	xmm0, xmm5
	ja	$LN10@tri
	xorps	xmm5, xmm2
	comiss	xmm6, xmm5
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm5, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm0, xmm13
	movaps	xmm6, xmm7
	mulss	xmm13, xmm9
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	mulss	xmm6, xmm8
	mulss	xmm0, xmm12
	subss	xmm6, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fex2$1$[rsp], xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm5, xmm7
	mulss	xmm5, DWORD PTR v1$3$[rsp]
	subss	xmm5, xmm13
	comiss	xmm6, xmm5
	jbe	SHORT $LN6@tri
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN6@tri:
	movss	xmm8, DWORD PTR fex2$1$[rsp]
	movaps	xmm0, xmm11
	mulss	xmm0, DWORD PTR fez2$1$[rsp]
	mulss	xmm4, xmm8
	addss	xmm4, xmm0
	comiss	xmm6, xmm4
	ja	$LN10@tri
	xorps	xmm4, xmm2
	comiss	xmm5, xmm4
	jb	$LN10@tri

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm4, xmm1
	movaps	xmm0, xmm7
	mulss	xmm1, xmm10
	mulss	xmm4, xmm9
	mulss	xmm0, xmm14
	mulss	xmm7, xmm15
	subss	xmm4, xmm0
	subss	xmm1, xmm7
	comiss	xmm4, xmm1
	jbe	SHORT $LN3@tri
	movaps	xmm0, xmm1
	movaps	xmm1, xmm4
	movaps	xmm4, xmm0
$LN3@tri:
	mulss	xmm11, DWORD PTR fey2$1$[rsp]
	mulss	xmm3, xmm8
	addss	xmm3, xmm11
	comiss	xmm4, xmm3
	ja	SHORT $LN10@tri
	xorps	xmm3, xmm2
	comiss	xmm1, xmm3
	jb	SHORT $LN10@tri

; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN338@tri:
	movaps	xmm6, XMMWORD PTR [rsp+192]
$LN62@tri:
	movaps	xmm15, XMMWORD PTR [rsp+48]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm13, XMMWORD PTR [rsp+80]

; 188  : 	}

	lea	r11, QWORD PTR [rsp+216]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm12, XMMWORD PTR [r11-120]
	movaps	xmm8, XMMWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [rsp+176]
	mov	rsp, r11
	ret	0
$LN10@tri:

; 186  : 		}
; 187  : 		return true;

	xor	al, al
	jmp	SHORT $LN338@tri
$LN30@tri:
	xor	al, al
	jmp	SHORT $LN62@tri
?_tri@?$box_collider@$00$00@@QEAA_NXZ ENDP		; box_collider<1,1>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
_TEXT	SEGMENT
vmax$3$ = 0
fex0$1$ = 0
vmax$1$ = 4
fey0$1$ = 4
e1$3$ = 8
normal$1$ = 12
e1$2$ = 16
e0$3$ = 20
normal$3$ = 24
vmin$3$ = 28
vmin$1$ = 32
v1$3$ = 36
fex2$1$ = 224
min$7$ = 224
v0$2$ = 224
this$ = 224
normal$2$ = 232
fez2$1$ = 232
fez1$1$ = 232
min$2$ = 232
min$1$ = 232
fey2$1$ = 240
fey1$1$ = 240
fez0$1$ = 240
d$1$ = 240
fex1$1$ = 248
e0$2$ = 248
?_tri@?$box_collider@$00$0A@@@QEAA_NXZ PROC		; box_collider<1,0>::_tri, COMDAT

; 116  : 	{

$LN345:
	mov	rax, rsp
	sub	rsp, 216				; 000000d8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rax-72], xmm9

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	movss	xmm9, DWORD PTR [rcx+84]
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movss	xmm12, DWORD PTR [rcx+72]

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm10, DWORD PTR [rcx+96]
	subss	xmm9, xmm0
	subss	xmm12, xmm0
	subss	xmm10, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm12
	movaps	xmm0, xmm12
	comiss	xmm9, xmm12
	jae	SHORT $LN339@tri
	movaps	xmm0, xmm9
$LN339@tri:
	jbe	SHORT $LN46@tri
	movaps	xmm1, xmm9
$LN46@tri:
	comiss	xmm10, xmm0
	jae	SHORT $LN45@tri
	movaps	xmm0, xmm10
$LN45@tri:
	comiss	xmm10, xmm1
	jbe	SHORT $LN44@tri
	movaps	xmm1, xmm10
$LN44@tri:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm11, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rsp+176], xmm7
	movaps	XMMWORD PTR [rsp+160], xmm8
	comiss	xmm0, xmm11
	movaps	XMMWORD PTR [rsp+80], xmm13
	movaps	XMMWORD PTR [rsp+64], xmm14
	movaps	XMMWORD PTR [rsp+48], xmm15
	ja	$LN30@tri
	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm0, xmm11
	xorps	xmm0, xmm2
	comiss	xmm1, xmm0
	jb	$LN30@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm13, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm14, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm15, DWORD PTR [rcx+100]
	subss	xmm13, xmm0
	subss	xmm14, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm1, xmm13
	comiss	xmm14, xmm13
	subss	xmm15, xmm0
	movss	DWORD PTR v0$2$[rsp], xmm13
	movaps	xmm0, xmm13
	jae	SHORT $LN340@tri
	movaps	xmm0, xmm14
$LN340@tri:
	jbe	SHORT $LN40@tri
	movaps	xmm1, xmm14
$LN40@tri:
	comiss	xmm15, xmm0
	jae	SHORT $LN39@tri
	movaps	xmm0, xmm15
$LN39@tri:
	comiss	xmm15, xmm1
	jbe	SHORT $LN38@tri
	movaps	xmm1, xmm15
$LN38@tri:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm3, DWORD PTR [rcx+64]
	comiss	xmm0, xmm3
	ja	$LN30@tri
	movaps	xmm0, xmm3
	xorps	xmm0, xmm2
	comiss	xmm1, xmm0
	jb	$LN30@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movss	xmm8, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm1, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm7, DWORD PTR [rcx+104]
	subss	xmm8, xmm0
	subss	xmm1, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm5, xmm8
	comiss	xmm1, xmm8
	subss	xmm7, xmm0
	movss	DWORD PTR v1$3$[rsp], xmm1
	movaps	xmm0, xmm8
	jae	SHORT $LN341@tri
	movaps	xmm0, xmm1
$LN341@tri:
	jbe	SHORT $LN34@tri
	movaps	xmm5, xmm1
$LN34@tri:
	comiss	xmm7, xmm0
	jae	SHORT $LN33@tri
	movaps	xmm0, xmm7
$LN33@tri:
	comiss	xmm7, xmm5
	jbe	SHORT $LN32@tri
	movaps	xmm5, xmm7
$LN32@tri:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	comiss	xmm0, xmm4
	ja	$LN30@tri
	movaps	xmm0, xmm4
	xorps	xmm0, xmm2
	comiss	xmm5, xmm0
	jb	$LN30@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm0, xmm9
	movaps	XMMWORD PTR [rsp+192], xmm6
	movaps	xmm6, xmm15
	subss	xmm0, xmm12
	subss	xmm6, xmm14
	movaps	xmm5, xmm14
	movss	DWORD PTR e0$3$[rsp], xmm0
	subss	xmm5, xmm13
	movaps	xmm0, xmm1
	subss	xmm0, xmm8
	movss	DWORD PTR e0$2$[rsp], xmm0
	movaps	xmm0, xmm10
	subss	xmm0, xmm9
	movss	DWORD PTR e1$3$[rsp], xmm0
	movaps	xmm0, xmm7
	subss	xmm0, xmm1
	movss	DWORD PTR e1$2$[rsp], xmm0

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm13, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm13, xmm5
	subss	xmm13, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm0, DWORD PTR e0$2$[rsp]
	movss	DWORD PTR normal$1$[rsp], xmm13

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm1, DWORD PTR normal$1$[rsp]

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$2$[rsp], xmm0
	movss	xmm13, DWORD PTR normal$2$[rsp]
	movss	xmm0, DWORD PTR e1$2$[rsp]

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm1, xmm2

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm12

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, DWORD PTR e0$3$[rsp]
	subss	xmm13, xmm0
	movss	xmm0, DWORD PTR e1$3$[rsp]
	mulss	xmm0, xmm5
	movss	DWORD PTR normal$2$[rsp], xmm13
	movaps	xmm13, xmm6
	mulss	xmm13, DWORD PTR e0$3$[rsp]
	subss	xmm13, xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm0, DWORD PTR normal$2$[rsp]
	xorps	xmm0, xmm2
	movss	DWORD PTR d$1$[rsp], xmm0

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movss	DWORD PTR normal$3$[rsp], xmm13

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm0, xmm13
	xorps	xmm0, xmm2

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	xmm2, DWORD PTR d$1$[rsp]
	mulss	xmm0, xmm8
	mulss	xmm2, DWORD PTR v0$2$[rsp]
	movss	xmm13, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm13, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm1, DWORD PTR normal$1$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm13, xmm0
	xorps	xmm0, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm1, xmm0
	movss	xmm0, xmm11
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	DWORD PTR d$1$[rsp], xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN104@tri
	movaps	xmm1, xmm0
	xorps	xmm1, xmm2
	movss	DWORD PTR vmin$3$[rsp], xmm1

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN342@tri
$LN104@tri:
	movss	DWORD PTR vmin$3$[rsp], xmm0
	xorps	xmm0, xmm2
$LN342@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm1, DWORD PTR normal$2$[rsp]

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR vmax$3$[rsp], xmm0
	xorps	xmm0, xmm0

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm1, xmm0
	jbe	SHORT $LN332@tri
	movaps	xmm1, xmm3
	movss	xmm0, xmm3
	xorps	xmm1, xmm2

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN333@tri
$LN332@tri:
	movaps	xmm0, xmm3
	movss	xmm1, xmm3
	xorps	xmm0, xmm2
$LN333@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm13, DWORD PTR normal$3$[rsp]
	comiss	xmm13, DWORD PTR __real@00000000
	movss	xmm13, xmm4
	xorps	xmm13, xmm2
	jbe	SHORT $LN335@tri
	movss	DWORD PTR vmax$1$[rsp], xmm4
	movss	DWORD PTR vmin$1$[rsp], xmm13

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN343@tri
$LN335@tri:
	movss	DWORD PTR vmin$1$[rsp], xmm4
	movss	DWORD PTR vmax$1$[rsp], xmm13
$LN343@tri:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR normal$2$[rsp]
	movss	xmm2, DWORD PTR vmin$3$[rsp]
	movss	xmm13, DWORD PTR v0$2$[rsp]
	mulss	xmm2, DWORD PTR normal$1$[rsp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR vmin$1$[rsp]
	mulss	xmm2, DWORD PTR normal$3$[rsp]
	addss	xmm1, xmm2
	xorps	xmm2, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, xmm2
	ja	$LN10@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR normal$2$[rsp]
	movss	xmm1, DWORD PTR vmax$3$[rsp]
	mulss	xmm1, DWORD PTR normal$1$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR vmax$1$[rsp]
	mulss	xmm1, DWORD PTR normal$3$[rsp]
	addss	xmm0, xmm1
	xorps	xmm1, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, DWORD PTR d$1$[rsp]
	comiss	xmm0, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm5
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fey0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$2$[rsp]
	movaps	xmm2, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm1, xmm13
	movss	xmm13, DWORD PTR e0$2$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm2, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm1, xmm0
	movaps	xmm0, xmm5
	movss	DWORD PTR min$1$[rsp], xmm1
	mulss	xmm0, xmm7
	mulss	xmm13, xmm15
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fez0$1$[rsp], xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm13, xmm0
	comiss	xmm1, xmm13
	jbe	SHORT $LN27@tri
	movaps	xmm0, xmm13
	movaps	xmm13, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR min$1$[rsp], xmm1
$LN27@tri:
	movaps	xmm0, xmm3
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR min$1$[rsp]
	comiss	xmm0, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm13, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm13, DWORD PTR e0$3$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movss	xmm0, DWORD PTR e0$2$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm1, xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm0, xmm12
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fex0$1$[rsp], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm1, xmm13
	mulss	xmm13, xmm7
	mulss	xmm1, xmm8
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR e0$2$[rsp]
	mulss	xmm0, xmm10
	subss	xmm13, xmm0
	movss	DWORD PTR min$2$[rsp], xmm1
	comiss	xmm1, xmm13
	jbe	SHORT $LN24@tri
	movaps	xmm0, xmm13
	movaps	xmm13, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR min$2$[rsp], xmm1
$LN24@tri:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR min$2$[rsp]
	comiss	xmm0, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm13, xmm1
	jb	$LN10@tri

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm1, DWORD PTR e0$3$[rsp]
	movaps	xmm13, xmm5
	mulss	xmm5, xmm10
	mulss	xmm13, xmm9
	movaps	xmm0, xmm1
	mulss	xmm0, xmm14
	mulss	xmm1, xmm15
	subss	xmm13, xmm0
	subss	xmm5, xmm1
	comiss	xmm13, xmm5
	jbe	SHORT $LN21@tri
	movaps	xmm0, xmm5
	movaps	xmm5, xmm13
	movaps	xmm13, xmm0
$LN21@tri:
	movaps	xmm1, xmm11
	movaps	xmm0, xmm3
	mulss	xmm1, DWORD PTR fey0$1$[rsp]
	mulss	xmm0, DWORD PTR fex0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm13, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm5, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm13, DWORD PTR e1$2$[rsp]
	movaps	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm6
	movaps	xmm5, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fey1$1$[rsp], xmm1
	movaps	xmm1, xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm5, DWORD PTR v0$2$[rsp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm13, xmm15
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fez1$1$[rsp], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm7
	subss	xmm13, xmm0
	comiss	xmm5, xmm13
	jbe	SHORT $LN18@tri
	movaps	xmm0, xmm13
	movaps	xmm13, xmm5
	movaps	xmm5, xmm0
$LN18@tri:
	movaps	xmm1, xmm4
	movaps	xmm0, xmm3
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm13, xmm1
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm5, DWORD PTR e1$3$[rsp]
	movaps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm13, xmm5
	mulss	xmm5, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm13, xmm8
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fex1$1$[rsp], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movss	xmm1, DWORD PTR e1$2$[rsp]
	movaps	xmm0, xmm1
	mulss	xmm1, xmm10
	mulss	xmm0, xmm12
	subss	xmm5, xmm1
	subss	xmm13, xmm0
	comiss	xmm13, xmm5
	jbe	SHORT $LN15@tri
	movaps	xmm0, xmm5
	movaps	xmm5, xmm13
	movaps	xmm13, xmm0
$LN15@tri:
	movss	xmm7, DWORD PTR fex1$1$[rsp]
	movaps	xmm0, xmm11
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm13, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm5, xmm1
	jb	$LN10@tri

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movss	xmm1, DWORD PTR e1$3$[rsp]
	movaps	xmm5, xmm6
	mulss	xmm6, xmm9
	mulss	xmm5, xmm12
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR v0$2$[rsp]
	mulss	xmm1, xmm14
	subss	xmm6, xmm1
	subss	xmm5, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN12@tri
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
$LN12@tri:
	movaps	xmm0, xmm11
	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	mulss	xmm1, xmm7
	addss	xmm1, xmm0
	comiss	xmm5, xmm1
	ja	$LN10@tri
	xorps	xmm1, xmm2
	comiss	xmm6, xmm1
	jb	$LN10@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm1, DWORD PTR [rcx+76]
	movss	xmm13, DWORD PTR [rcx+80]
	movss	xmm7, DWORD PTR [rcx+72]
	subss	xmm1, DWORD PTR [rcx+100]
	subss	xmm13, DWORD PTR [rcx+104]
	subss	xmm7, DWORD PTR [rcx+96]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm5, xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm1
	movaps	xmm6, xmm13
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	mulss	xmm0, xmm8
	mulss	xmm6, xmm14
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fey2$1$[rsp], xmm5
	movaps	xmm5, xmm13
	andps	xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fez2$1$[rsp], xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm5, xmm13
	mulss	xmm5, DWORD PTR v0$2$[rsp]
	subss	xmm5, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR min$7$[rsp], xmm5
	mulss	xmm0, DWORD PTR v1$3$[rsp]
	subss	xmm6, xmm0
	comiss	xmm5, xmm6
	jbe	SHORT $LN9@tri
	movaps	xmm0, xmm6
	movaps	xmm6, xmm5
	movaps	xmm5, xmm0
	movss	DWORD PTR min$7$[rsp], xmm5
$LN9@tri:
	movaps	xmm0, xmm4
	movaps	xmm5, xmm3
	mulss	xmm0, DWORD PTR fey2$1$[rsp]
	mulss	xmm5, DWORD PTR fez2$1$[rsp]
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR min$7$[rsp]
	comiss	xmm0, xmm5
	ja	$LN10@tri
	xorps	xmm5, xmm2
	comiss	xmm6, xmm5
	jb	$LN10@tri
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movaps	xmm5, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm0, xmm13
	movaps	xmm6, xmm7
	mulss	xmm13, xmm9
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andps	xmm5, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	mulss	xmm6, xmm8
	mulss	xmm0, xmm12
	subss	xmm6, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR fex2$1$[rsp], xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm5, xmm7
	mulss	xmm5, DWORD PTR v1$3$[rsp]
	subss	xmm5, xmm13
	comiss	xmm6, xmm5
	jbe	SHORT $LN6@tri
	movaps	xmm0, xmm5
	movaps	xmm5, xmm6
	movaps	xmm6, xmm0
$LN6@tri:
	movss	xmm8, DWORD PTR fex2$1$[rsp]
	movaps	xmm0, xmm11
	mulss	xmm0, DWORD PTR fez2$1$[rsp]
	mulss	xmm4, xmm8
	addss	xmm4, xmm0
	comiss	xmm6, xmm4
	ja	$LN10@tri
	xorps	xmm4, xmm2
	comiss	xmm5, xmm4
	jb	$LN10@tri

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm4, xmm1
	movaps	xmm0, xmm7
	mulss	xmm1, xmm10
	mulss	xmm4, xmm9
	mulss	xmm0, xmm14
	mulss	xmm7, xmm15
	subss	xmm4, xmm0
	subss	xmm1, xmm7
	comiss	xmm4, xmm1
	jbe	SHORT $LN3@tri
	movaps	xmm0, xmm1
	movaps	xmm1, xmm4
	movaps	xmm4, xmm0
$LN3@tri:
	mulss	xmm11, DWORD PTR fey2$1$[rsp]
	mulss	xmm3, xmm8
	addss	xmm3, xmm11
	comiss	xmm4, xmm3
	ja	SHORT $LN10@tri
	xorps	xmm3, xmm2
	comiss	xmm1, xmm3
	jb	SHORT $LN10@tri

; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN338@tri:
	movaps	xmm6, XMMWORD PTR [rsp+192]
$LN62@tri:
	movaps	xmm15, XMMWORD PTR [rsp+48]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm13, XMMWORD PTR [rsp+80]

; 188  : 	}

	lea	r11, QWORD PTR [rsp+216]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm12, XMMWORD PTR [r11-120]
	movaps	xmm8, XMMWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [rsp+176]
	mov	rsp, r11
	ret	0
$LN10@tri:

; 186  : 		}
; 187  : 		return true;

	xor	al, al
	jmp	SHORT $LN338@tri
$LN30@tri:
	xor	al, al
	jmp	SHORT $LN62@tri
?_tri@?$box_collider@$00$0A@@@QEAA_NXZ ENDP		; box_collider<1,0>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 160
?_tri@?$box_collider@$0A@$00@@QEAA_NXZ PROC		; box_collider<0,1>::_tri, COMDAT

; 116  : 	{

$LN343:
	sub	rsp, 152				; 00000098H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rsp+128], xmm6

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm6, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movaps	XMMWORD PTR [rsp+80], xmm9
	movss	xmm9, DWORD PTR [rcx+72]
	movss	xmm7, DWORD PTR [rcx+84]
	subss	xmm6, xmm0
	subss	xmm9, xmm0
	subss	xmm7, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm9
	movaps	xmm0, xmm9
	comiss	xmm7, xmm9
	jae	SHORT $LN339@tri
	movaps	xmm0, xmm7
$LN339@tri:
	jbe	SHORT $LN46@tri
	movaps	xmm1, xmm7
$LN46@tri:
	comiss	xmm6, xmm0
	jae	SHORT $LN45@tri
	movaps	xmm0, xmm6
$LN45@tri:
	comiss	xmm6, xmm1
	jbe	SHORT $LN44@tri
	movaps	xmm1, xmm6
$LN44@tri:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm2, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movaps	XMMWORD PTR [rsp+64], xmm10
	comiss	xmm0, xmm2
	movaps	XMMWORD PTR [rsp+48], xmm11
	movaps	XMMWORD PTR [rsp+32], xmm12
	movaps	XMMWORD PTR [rsp+16], xmm13
	ja	$LN30@tri
	movss	xmm5, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm2, xmm5
	comiss	xmm1, xmm2
	jb	$LN30@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm12, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm10, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm4, DWORD PTR [rcx+100]
	subss	xmm12, xmm0
	subss	xmm10, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm2, xmm12
	movaps	xmm1, xmm12
	comiss	xmm10, xmm12
	subss	xmm4, xmm0
	jae	SHORT $LN340@tri
	movaps	xmm1, xmm10
$LN340@tri:
	jbe	SHORT $LN40@tri
	movaps	xmm2, xmm10
$LN40@tri:
	comiss	xmm4, xmm1
	jae	SHORT $LN39@tri
	movaps	xmm1, xmm4
$LN39@tri:
	comiss	xmm4, xmm2
	jbe	SHORT $LN38@tri
	movaps	xmm2, xmm4
$LN38@tri:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN30@tri
	xorps	xmm0, xmm5
	comiss	xmm2, xmm0
	jb	$LN30@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movss	xmm13, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm11, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm8, DWORD PTR [rcx+104]
	subss	xmm13, xmm0
	subss	xmm11, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm2, xmm13
	movaps	xmm1, xmm13
	comiss	xmm11, xmm13
	subss	xmm8, xmm0
	jae	SHORT $LN341@tri
	movaps	xmm1, xmm11
$LN341@tri:
	jbe	SHORT $LN34@tri
	movaps	xmm2, xmm11
$LN34@tri:
	comiss	xmm8, xmm1
	jae	SHORT $LN33@tri
	movaps	xmm1, xmm8
$LN33@tri:
	comiss	xmm8, xmm2
	jbe	SHORT $LN32@tri
	movaps	xmm2, xmm8
$LN32@tri:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN30@tri
	xorps	xmm0, xmm5
	comiss	xmm2, xmm0
	jb	$LN30@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm8, xmm11
	movaps	xmm1, xmm11
	subss	xmm4, xmm10
	movaps	xmm2, xmm10
	movaps	XMMWORD PTR [rsp], xmm14
	movaps	xmm3, xmm7
	subss	xmm1, xmm13
	subss	xmm6, xmm7
	subss	xmm3, xmm9

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm14, xmm8
	movaps	xmm0, xmm4
	movaps	xmm10, xmm6
	mulss	xmm8, xmm3
	mulss	xmm4, xmm3
	mulss	xmm0, xmm1
	mulss	xmm10, xmm1

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm2, xmm12

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	subss	xmm10, xmm8
	mulss	xmm14, xmm2
	mulss	xmm6, xmm2
	xorps	xmm8, xmm8

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm11, xmm10

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	subss	xmm14, xmm0
	subss	xmm4, xmm6

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm11, xmm5
	movaps	xmm1, xmm14
	xorps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm14, xmm8
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm0, xmm4

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm11, xmm12
	mulss	xmm1, xmm9

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm0, xmm5

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm11, xmm1
	mulss	xmm0, xmm13
	addss	xmm11, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN104@tri
	movss	xmm2, DWORD PTR [rcx+60]
	movaps	xmm3, xmm2
	xorps	xmm3, xmm5

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN106@tri
$LN104@tri:
	movss	xmm3, DWORD PTR [rcx+60]
	movaps	xmm2, xmm3
	xorps	xmm2, xmm5
$LN106@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm10, xmm8
	jbe	SHORT $LN332@tri
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm5

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN333@tri
$LN332@tri:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm5
$LN333@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm4, xmm8
	jbe	SHORT $LN335@tri
	movss	xmm6, DWORD PTR [rcx+68]
	movaps	xmm7, xmm6
	xorps	xmm7, xmm5

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN336@tri
$LN335@tri:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm6, xmm7
	xorps	xmm6, xmm5
$LN336@tri:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm10
	mulss	xmm3, xmm14
	mulss	xmm7, xmm4
	addss	xmm1, xmm3
	addss	xmm1, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm11
	comiss	xmm1, xmm8
	ja	SHORT $LN337@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm10
	mulss	xmm2, xmm14
	mulss	xmm6, xmm4
	addss	xmm0, xmm2
	addss	xmm0, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, xmm11
	comiss	xmm0, xmm8
	jb	SHORT $LN337@tri

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;
; 150  : 		const Point normal = e0 ^ e1;
; 151  : 		const float d = -normal|v0;
; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;
; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN338@tri:
	movaps	xmm14, XMMWORD PTR [rsp]
$LN62@tri:
	movaps	xmm13, XMMWORD PTR [rsp+16]
	movaps	xmm12, XMMWORD PTR [rsp+32]
	movaps	xmm11, XMMWORD PTR [rsp+48]
	movaps	xmm10, XMMWORD PTR [rsp+64]
	movaps	xmm8, XMMWORD PTR [rsp+96]

; 188  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+128]
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm9, XMMWORD PTR [rsp+80]
	add	rsp, 152				; 00000098H
	ret	0
$LN337@tri:

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;
; 150  : 		const Point normal = e0 ^ e1;
; 151  : 		const float d = -normal|v0;
; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;
; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	xor	al, al
	jmp	SHORT $LN338@tri
$LN30@tri:
	xor	al, al
	jmp	SHORT $LN62@tri
?_tri@?$box_collider@$0A@$00@@QEAA_NXZ ENDP		; box_collider<0,1>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp
;	COMDAT ?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 160
?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ PROC		; box_collider<0,0>::_tri, COMDAT

; 116  : 	{

$LN343:
	sub	rsp, 152				; 00000098H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rsp+128], xmm6

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm6, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movaps	XMMWORD PTR [rsp+80], xmm9
	movss	xmm9, DWORD PTR [rcx+72]
	movss	xmm7, DWORD PTR [rcx+84]
	subss	xmm6, xmm0
	subss	xmm9, xmm0
	subss	xmm7, xmm0

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm9
	movaps	xmm0, xmm9
	comiss	xmm7, xmm9
	jae	SHORT $LN339@tri
	movaps	xmm0, xmm7
$LN339@tri:
	jbe	SHORT $LN46@tri
	movaps	xmm1, xmm7
$LN46@tri:
	comiss	xmm6, xmm0
	jae	SHORT $LN45@tri
	movaps	xmm0, xmm6
$LN45@tri:
	comiss	xmm6, xmm1
	jbe	SHORT $LN44@tri
	movaps	xmm1, xmm6
$LN44@tri:

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm2, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movaps	XMMWORD PTR [rsp+64], xmm10
	comiss	xmm0, xmm2
	movaps	XMMWORD PTR [rsp+48], xmm11
	movaps	XMMWORD PTR [rsp+32], xmm12
	movaps	XMMWORD PTR [rsp+16], xmm13
	ja	$LN30@tri
	movss	xmm5, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm2, xmm5
	comiss	xmm1, xmm2
	jb	$LN30@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]
	movss	xmm12, DWORD PTR [rcx+76]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm10, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm4, DWORD PTR [rcx+100]
	subss	xmm12, xmm0
	subss	xmm10, xmm0

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm2, xmm12
	movaps	xmm1, xmm12
	comiss	xmm10, xmm12
	subss	xmm4, xmm0
	jae	SHORT $LN340@tri
	movaps	xmm1, xmm10
$LN340@tri:
	jbe	SHORT $LN40@tri
	movaps	xmm2, xmm10
$LN40@tri:
	comiss	xmm4, xmm1
	jae	SHORT $LN39@tri
	movaps	xmm1, xmm4
$LN39@tri:
	comiss	xmm4, xmm2
	jbe	SHORT $LN38@tri
	movaps	xmm2, xmm4
$LN38@tri:

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm0, DWORD PTR [rcx+64]
	comiss	xmm1, xmm0
	ja	$LN30@tri
	xorps	xmm0, xmm5
	comiss	xmm2, xmm0
	jb	$LN30@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]
	movss	xmm13, DWORD PTR [rcx+80]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm11, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm8, DWORD PTR [rcx+104]
	subss	xmm13, xmm0
	subss	xmm11, xmm0

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm2, xmm13
	movaps	xmm1, xmm13
	comiss	xmm11, xmm13
	subss	xmm8, xmm0
	jae	SHORT $LN341@tri
	movaps	xmm1, xmm11
$LN341@tri:
	jbe	SHORT $LN34@tri
	movaps	xmm2, xmm11
$LN34@tri:
	comiss	xmm8, xmm1
	jae	SHORT $LN33@tri
	movaps	xmm1, xmm8
$LN33@tri:
	comiss	xmm8, xmm2
	jbe	SHORT $LN32@tri
	movaps	xmm2, xmm8
$LN32@tri:

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm0, DWORD PTR [rcx+68]
	comiss	xmm1, xmm0
	ja	$LN30@tri
	xorps	xmm0, xmm5
	comiss	xmm2, xmm0
	jb	$LN30@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm8, xmm11
	movaps	xmm1, xmm11
	subss	xmm4, xmm10
	movaps	xmm2, xmm10
	movaps	XMMWORD PTR [rsp], xmm14
	movaps	xmm3, xmm7
	subss	xmm1, xmm13
	subss	xmm6, xmm7
	subss	xmm3, xmm9

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movaps	xmm14, xmm8
	movaps	xmm0, xmm4
	movaps	xmm10, xmm6
	mulss	xmm8, xmm3
	mulss	xmm4, xmm3
	mulss	xmm0, xmm1
	mulss	xmm10, xmm1

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm2, xmm12

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	subss	xmm10, xmm8
	mulss	xmm14, xmm2
	mulss	xmm6, xmm2
	xorps	xmm8, xmm8

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm11, xmm10

; 393  : 		//! Operator for Point VecProd = Point ^ Point.
; 394  : 		ICF		Point			operator^(const Point& p)			const
; 395  : 								{
; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	subss	xmm14, xmm0
	subss	xmm4, xmm6

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm11, xmm5
	movaps	xmm1, xmm14
	xorps	xmm1, xmm5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm14, xmm8
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movaps	xmm0, xmm4

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm11, xmm12
	mulss	xmm1, xmm9

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm0, xmm5

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm11, xmm1
	mulss	xmm0, xmm13
	addss	xmm11, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN104@tri
	movss	xmm2, DWORD PTR [rcx+60]
	movaps	xmm3, xmm2
	xorps	xmm3, xmm5

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN106@tri
$LN104@tri:
	movss	xmm3, DWORD PTR [rcx+60]
	movaps	xmm2, xmm3
	xorps	xmm2, xmm5
$LN106@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm10, xmm8
	jbe	SHORT $LN332@tri
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm5

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN333@tri
$LN332@tri:
	movss	xmm1, DWORD PTR [rcx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm5
$LN333@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm4, xmm8
	jbe	SHORT $LN335@tri
	movss	xmm6, DWORD PTR [rcx+68]
	movaps	xmm7, xmm6
	xorps	xmm7, xmm5

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	jmp	SHORT $LN336@tri
$LN335@tri:
	movss	xmm7, DWORD PTR [rcx+68]
	movaps	xmm6, xmm7
	xorps	xmm6, xmm5
$LN336@tri:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm10
	mulss	xmm3, xmm14
	mulss	xmm7, xmm4
	addss	xmm1, xmm3
	addss	xmm1, xmm7
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm11
	comiss	xmm1, xmm8
	ja	SHORT $LN337@tri
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm10
	mulss	xmm2, xmm14
	mulss	xmm6, xmm4
	addss	xmm0, xmm2
	addss	xmm0, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm0, xmm11
	comiss	xmm0, xmm8
	jb	SHORT $LN337@tri

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;
; 150  : 		const Point normal = e0 ^ e1;
; 151  : 		const float d = -normal|v0;
; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;
; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN338@tri:
	movaps	xmm14, XMMWORD PTR [rsp]
$LN62@tri:
	movaps	xmm13, XMMWORD PTR [rsp+16]
	movaps	xmm12, XMMWORD PTR [rsp+32]
	movaps	xmm11, XMMWORD PTR [rsp+48]
	movaps	xmm10, XMMWORD PTR [rsp+64]
	movaps	xmm8, XMMWORD PTR [rsp+96]

; 188  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+128]
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm9, XMMWORD PTR [rsp+80]
	add	rsp, 152				; 00000098H
	ret	0
$LN337@tri:

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;
; 150  : 		const Point normal = e0 ^ e1;
; 151  : 		const float d = -normal|v0;
; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;
; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	xor	al, al
	jmp	SHORT $LN338@tri
$LN30@tri:
	xor	al, al
	jmp	SHORT $LN62@tri
?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ ENDP		; box_collider<0,0>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??GicePoint@IceMaths@@QEBA?AV01@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??GicePoint@IceMaths@@QEBA?AV01@XZ PROC			; IceMaths::icePoint::operator-, COMDAT

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+8]
	mov	rax, rdx
	xorps	xmm0, xmm2
	xorps	xmm1, xmm2

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx], xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	movss	xmm0, DWORD PTR [rcx+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx+8], xmm1

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	xorps	xmm0, xmm2

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx+4], xmm0

; 370  : 		inline_	Point			operator-()							const		{ return Point(-x, -y, -z);							}

	ret	0
??GicePoint@IceMaths@@QEBA?AV01@XZ ENDP			; IceMaths::icePoint::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
p$ = 24
??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z PROC		; IceMaths::icePoint::operator^, COMDAT

; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	movss	xmm2, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR [rcx+4]
	movss	xmm4, DWORD PTR [rcx]
	mov	rax, rdx
	mulss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [r8+4]
	movss	xmm3, DWORD PTR [r8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm4, DWORD PTR [r8+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx], xmm1

; 396  : 									return Point(
; 397  : 									y * p.z - z * p.y,
; 398  : 									z * p.x - x * p.z,
; 399  : 									x * p.y - y * p.x );

	mulss	xmm0, DWORD PTR [r8+8]
	movaps	xmm1, xmm3
	mulss	xmm3, DWORD PTR [rcx+4]
	mulss	xmm1, xmm2
	subss	xmm1, xmm0
	subss	xmm4, xmm3

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx+4], xmm1
	movss	DWORD PTR [rdx+8], xmm4

; 400  : 								}

	ret	0
??TicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ENDP		; IceMaths::icePoint::operator^
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
p$ = 24
??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z PROC		; IceMaths::icePoint::operator-, COMDAT

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	mov	rax, rdx
	subss	xmm0, DWORD PTR [r8]
	subss	xmm1, DWORD PTR [r8+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx], xmm0

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rcx+8]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx+4], xmm1

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm0, DWORD PTR [r8+8]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rdx+8], xmm0

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	ret	0
??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ENDP		; IceMaths::icePoint::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ
_TEXT	SEGMENT
this$ = 8
?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ PROC	; Opcode::AABBNoLeafNode::GetNeg, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+32]
	ret	0
?GetNeg@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ ENDP	; Opcode::AABBNoLeafNode::GetNeg
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ PROC	; Opcode::AABBNoLeafNode::GetPrimitive2, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+32]
	shr	rax, 1
	ret	0
?GetPrimitive2@AABBNoLeafNode@Opcode@@QEBAIXZ ENDP	; Opcode::AABBNoLeafNode::GetPrimitive2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ PROC		; Opcode::AABBNoLeafNode::HasLeaf2, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	eax, DWORD PTR [rcx+32]
	and	eax, 1
	ret	0
?HasLeaf2@AABBNoLeafNode@Opcode@@QEBAHXZ ENDP		; Opcode::AABBNoLeafNode::HasLeaf2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ
_TEXT	SEGMENT
this$ = 8
?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ PROC	; Opcode::AABBNoLeafNode::GetPos, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+24]
	ret	0
?GetPos@AABBNoLeafNode@Opcode@@QEBAPEBV12@XZ ENDP	; Opcode::AABBNoLeafNode::GetPos
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ PROC	; Opcode::AABBNoLeafNode::GetPrimitive, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rax, QWORD PTR [rcx+24]
	shr	rax, 1
	ret	0
?GetPrimitive@AABBNoLeafNode@Opcode@@QEBAIXZ ENDP	; Opcode::AABBNoLeafNode::GetPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ PROC		; Opcode::AABBNoLeafNode::HasLeaf, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	eax, DWORD PTR [rcx+24]
	and	eax, 1
	ret	0
?HasLeaf@AABBNoLeafNode@Opcode@@QEBAHXZ ENDP		; Opcode::AABBNoLeafNode::HasLeaf
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??0icePoint@IceMaths@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
_x$ = 16
_y$ = 24
_z$ = 32
??0icePoint@IceMaths@@QEAA@MMM@Z PROC			; IceMaths::icePoint::icePoint, COMDAT

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR [rcx], xmm1
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	mov	rax, rcx
	ret	0
??0icePoint@IceMaths@@QEAA@MMM@Z ENDP			; IceMaths::icePoint::icePoint
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ
_TEXT	SEGMENT
this$ = 8
?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ PROC ; Opcode::AABBNoLeafTree::GetNodes, COMDAT

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	rax, QWORD PTR [rcx+16]
	ret	0
?GetNodes@AABBNoLeafTree@Opcode@@QEBAPEBVAABBNoLeafNode@2@XZ ENDP ; Opcode::AABBNoLeafTree::GetNodes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_model.h
;	COMDAT ?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ
_TEXT	SEGMENT
this$ = 8
?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ PROC ; Opcode::OPCODE_Model::GetTree, COMDAT

; 64   : 		inline_	const	AABBOptimizedTree*	GetTree()		const	{ return mTree;					}

	mov	rax, QWORD PTR [rcx+8]
	ret	0
?GetTree@OPCODE_Model@Opcode@@QEBAPEBVAABBOptimizedTree@2@XZ ENDP ; Opcode::OPCODE_Model::GetTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??UicePoint@IceMaths@@QEBAMAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
p$ = 16
??UicePoint@IceMaths@@QEBAMAEBV01@@Z PROC		; IceMaths::icePoint::operator|, COMDAT

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	xmm0, DWORD PTR [rdx+4]
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR [rdx+8]
	mulss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm1, DWORD PTR [rcx]
	mulss	xmm2, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	ret	0
??UicePoint@IceMaths@@QEBAMAEBV01@@Z ENDP		; IceMaths::icePoint::operator|
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??BicePoint@IceMaths@@QEAAPEAMXZ
_TEXT	SEGMENT
this$ = 8
??BicePoint@IceMaths@@QEAAPEAMXZ PROC			; IceMaths::icePoint::operator float * __ptr64, COMDAT

; 491  : 		inline_					operator			float*()		{ return &x; }

	mov	rax, rcx
	ret	0
??BicePoint@IceMaths@@QEAAPEAMXZ ENDP			; IceMaths::icePoint::operator float * __ptr64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??BicePoint@IceMaths@@QEBAPEBMXZ
_TEXT	SEGMENT
this$ = 8
??BicePoint@IceMaths@@QEBAPEBMXZ PROC			; IceMaths::icePoint::operator float const * __ptr64, COMDAT

; 490  : 		inline_					operator	const	float*() const	{ return &x; }

	mov	rax, rcx
	ret	0
??BicePoint@IceMaths@@QEBAPEBMXZ ENDP			; IceMaths::icePoint::operator float const * __ptr64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??1icePoint@IceMaths@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1icePoint@IceMaths@@QEAA@XZ PROC			; IceMaths::icePoint::~icePoint, COMDAT

; 52   : 		inline_					~Point()													{}

	ret	0
??1icePoint@IceMaths@@QEAA@XZ ENDP			; IceMaths::icePoint::~icePoint
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
;	COMDAT ??0icePoint@IceMaths@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0icePoint@IceMaths@@QEAA@XZ PROC			; IceMaths::icePoint::icePoint, COMDAT

; 42   : 		inline_					Point()														{}

	mov	rax, rcx
	ret	0
??0icePoint@IceMaths@@QEAA@XZ ENDP			; IceMaths::icePoint::icePoint
_TEXT	ENDS
END
