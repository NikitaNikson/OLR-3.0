; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAPEAU?$_vector3@M@@XZ ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator-
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator-
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+=
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+
PUBLIC	??A?$xr_vector@IV?$xalloc@I@@@@QEAAAEAI_K@Z	; xr_vector<unsigned int,xalloc<unsigned int> >::operator[]
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-
PUBLIC	??$_Move@AEAG@std@@YA$$QEAGAEAG@Z		; std::_Move<unsigned short & __ptr64>
PUBLIC	??$swap@G@std@@YAXAEAG0@Z			; std::swap<unsigned short>
PUBLIC	??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Median<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$swap@Uedge@CDB@@@std@@YAXAEAUedge@CDB@@0@Z	; std::swap<CDB::edge>
PUBLIC	??$iter_swap@PEAUedge@CDB@@PEAU12@@std@@YAXPEAUedge@CDB@@0@Z ; std::iter_swap<CDB::edge * __ptr64,CDB::edge * __ptr64>
PUBLIC	??$forward@AEAPEAUedge@CDB@@@std@@YAAEAPEAUedge@CDB@@AEAPEAU12@@Z ; std::forward<CDB::edge * __ptr64 & __ptr64>
PUBLIC	??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$_Pair_base@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z ; std::_Pair_base<CDB::edge * __ptr64,CDB::edge * __ptr64>::_Pair_base<CDB::edge * __ptr64,CDB::edge * __ptr64><CDB::edge * __ptr64 & __ptr64,CDB::edge * __ptr64 & __ptr64>
PUBLIC	??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$pair@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z ; std::pair<CDB::edge * __ptr64,CDB::edge * __ptr64>::pair<CDB::edge * __ptr64,CDB::edge * __ptr64><CDB::edge * __ptr64 & __ptr64,CDB::edge * __ptr64 & __ptr64>
PUBLIC	??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z ; std::_Unguarded_partition<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z ; std::_Make_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
PUBLIC	??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::make_heap<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Unchecked@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z ; std::_Unchecked<CDB::edge * __ptr64>
PUBLIC	??$_Dist_type@PEAUedge@CDB@@@std@@YAPEA_JPEAUedge@CDB@@@Z ; std::_Dist_type<CDB::edge * __ptr64>
PUBLIC	??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ; std::_Push_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
PUBLIC	??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ; std::_Adjust_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
PUBLIC	??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z ; std::_Pop_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
PUBLIC	??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z ; std::_Pop_heap_0<CDB::edge * __ptr64,CDB::edge,CDB::sort_predicate>
PUBLIC	??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::_Pop_heap<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::_Sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Val_type@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z ; std::_Val_type<CDB::edge * __ptr64>
PUBLIC	??Rsort_predicate@CDB@@QEBA_NAEBUedge@1@0@Z	; CDB::sort_predicate::operator()
PUBLIC	??$_Move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z ; std::_Move<CDB::edge & __ptr64>
PUBLIC	??$_Ptr_cat@Uedge@CDB@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAUedge@CDB@@0@Z ; std::_Ptr_cat<CDB::edge,CDB::edge>
PUBLIC	??$move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z ; std::move<CDB::edge & __ptr64>
PUBLIC	??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<CDB::edge * __ptr64,CDB::edge * __ptr64>
PUBLIC	??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00@Z ; std::_Move_backward<CDB::edge * __ptr64,CDB::edge * __ptr64>
PUBLIC	??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z ; std::_Insertion_sort1<CDB::edge * __ptr64,CDB::sort_predicate,CDB::edge>
PUBLIC	??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::_Insertion_sort<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>
PUBLIC	??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::sort<CDB::edge * __ptr64,CDB::sort_predicate>
PUBLIC	??$_Iter_cat@I@std@@YA?AU_Int_iterator_tag@0@AEBI@Z ; std::_Iter_cat<unsigned int>
PUBLIC	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>
PUBLIC	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>
PUBLIC	??$_Uninitialized_fill_n@PEAI_KIV?$xalloc@I@@@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@@Z ; std::_Uninitialized_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int> >
PUBLIC	?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Ufill
PUBLIC	??$addressof@I@std@@YAPEAIAEAI@Z		; std::addressof<unsigned int>
PUBLIC	??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z		; std::_Unchecked<unsigned int * __ptr64>
PUBLIC	??$_Fill@PEAII@std@@YAXPEAI0AEBI@Z		; std::_Fill<unsigned int * __ptr64,unsigned int>
PUBLIC	??$fill@PEAII@std@@YAXPEAI0AEBI@Z		; std::fill<unsigned int * __ptr64,unsigned int>
PUBLIC	??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z	; std::_Copy_backward<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n
PUBLIC	?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::insert
PUBLIC	?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign_n
PUBLIC	??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign<unsigned int>
PUBLIC	??$assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXII@Z ; std::vector<unsigned int,xalloc<unsigned int> >::assign<unsigned int>
PUBLIC	??Z?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-=
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-
PUBLIC	?back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAAEAVTRI@CDB@@XZ ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::back
PUBLIC	?empty@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEBA_NXZ ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::empty
PUBLIC	?pop_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXXZ ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::pop_back
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_const_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+=
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+
PUBLIC	??A?$xr_vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@@QEAAAEAVTRI@CDB@@_K@Z ; xr_vector<CDB::TRI,xalloc<CDB::TRI> >::operator[]
PUBLIC	?similar@CDB@@YAHAEAVTRI@1@0@Z			; CDB::similar
PUBLIC	??0?$xalloc@I@@QEAA@XZ				; xalloc<unsigned int>::xalloc<unsigned int>
PUBLIC	??0?$xalloc@I@@QEAA@AEBV0@@Z			; xalloc<unsigned int>::xalloc<unsigned int>
PUBLIC	??0?$_Vector_val@IV?$xalloc@I@@@std@@QEAA@V?$xalloc@I@@@Z ; std::_Vector_val<unsigned int,xalloc<unsigned int> >::_Vector_val<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$vector@IV?$xalloc@I@@@std@@QEAA@XZ		; std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$xr_vector@IV?$xalloc@I@@@@QEAA@XZ		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??0non_copyable@CDB@@QEAA@XZ			; CDB::non_copyable::non_copyable
PUBLIC	?_Inside@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_NPEBVTRI@CDB@@@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Inside
PUBLIC	??$_Val_type@PEAVTRI@CDB@@@std@@YAPEAVTRI@CDB@@PEAV12@@Z ; std::_Val_type<CDB::TRI * __ptr64>
PUBLIC	??$forward@VTRI@CDB@@@std@@YA$$QEAVTRI@CDB@@AEAV12@@Z ; std::forward<CDB::TRI>
PUBLIC	??$_Cons_val@V?$xalloc@VTRI@CDB@@@@VTRI@CDB@@V23@@std@@YAXAEAV?$xalloc@VTRI@CDB@@@@PEAVTRI@CDB@@$$QEAV23@@Z ; std::_Cons_val<xalloc<CDB::TRI>,CDB::TRI,CDB::TRI>
PUBLIC	??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>
PUBLIC	??$_Uninitialized_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@@Z ; std::_Uninitialized_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI> >
PUBLIC	??$_Umove@PEAVTRI@CDB@@@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAPEAVTRI@CDB@@PEAV23@00@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Umove<CDB::TRI * __ptr64>
PUBLIC	?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve
PUBLIC	?_Grow_to@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_K_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Grow_to
PUBLIC	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
PUBLIC	?_Orphan_range@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBAXPEAVTRI@CDB@@0@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Orphan_range
PUBLIC	??$addressof@$$CBVTRI@CDB@@@std@@YAPEBVTRI@CDB@@AEBV12@@Z ; std::addressof<CDB::TRI const >
PUBLIC	?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::push_back
PUBLIC	?iFloor@@YAHM@Z					; iFloor
PUBLIC	?_Inside@?$vector@IV?$xalloc@I@@@std@@IEBA_NPEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Inside
PUBLIC	?allocate@?$xalloc@I@@QEBAPEAI_KPEBX@Z		; xalloc<unsigned int>::allocate
PUBLIC	??$_Val_type@PEAI@std@@YAPEAIPEAI@Z		; std::_Val_type<unsigned int * __ptr64>
PUBLIC	??$forward@I@std@@YA$$QEAIAEAI@Z		; std::forward<unsigned int>
PUBLIC	??$_Cons_val@V?$xalloc@I@@II@std@@YAXAEAV?$xalloc@I@@PEAI$$QEAI@Z ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int>
PUBLIC	??$_Destroy@I@std@@YAXPEAI@Z			; std::_Destroy<unsigned int>
PUBLIC	?destroy@?$xalloc@I@@QEAAXPEAI@Z		; xalloc<unsigned int>::destroy
PUBLIC	??$_Dest_val@V?$xalloc@I@@I@std@@YAXAEAV?$xalloc@I@@PEAI@Z ; std::_Dest_val<xalloc<unsigned int>,unsigned int>
PUBLIC	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
PUBLIC	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
PUBLIC	??$_Uninitialized_move@PEAIPEAIV?$xalloc@I@@@std@@YAPEAIPEAI00AEAV?$xalloc@I@@@Z ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int> >
PUBLIC	??$_Umove@PEAI@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI00@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Umove<unsigned int * __ptr64>
PUBLIC	?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z	; std::vector<unsigned int,xalloc<unsigned int> >::reserve
PUBLIC	?size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ	; std::vector<unsigned int,xalloc<unsigned int> >::size
PUBLIC	?capacity@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ	; std::vector<unsigned int,xalloc<unsigned int> >::capacity
PUBLIC	?max_size@?$xalloc@I@@QEBA_KXZ			; xalloc<unsigned int>::max_size
PUBLIC	?max_size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ	; std::vector<unsigned int,xalloc<unsigned int> >::max_size
PUBLIC	?_Grow_to@?$vector@IV?$xalloc@I@@@std@@IEBA_K_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Grow_to
PUBLIC	?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ	; std::vector<unsigned int,xalloc<unsigned int> >::_Xlen
PUBLIC	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
PUBLIC	?_Orphan_range@?$vector@IV?$xalloc@I@@@std@@IEBAXPEAI0@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Orphan_range
PUBLIC	??$addressof@$$CBI@std@@YAPEBIAEBI@Z		; std::addressof<unsigned int const >
PUBLIC	??$forward@AEAI@std@@YAAEAIAEAI@Z		; std::forward<unsigned int & __ptr64>
PUBLIC	??$_Cons_val@V?$xalloc@I@@IAEAI@std@@YAXAEAV?$xalloc@I@@PEAIAEAI@Z ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int & __ptr64>
PUBLIC	??$_Construct@IAEBI@std@@YAXPEAIAEBI@Z		; std::_Construct<unsigned int,unsigned int const & __ptr64>
PUBLIC	?construct@?$xalloc@I@@QEAAXPEAIAEBI@Z		; xalloc<unsigned int>::construct
PUBLIC	??$forward@AEBI@std@@YAAEBIAEBI@Z		; std::forward<unsigned int const & __ptr64>
PUBLIC	??$_Cons_val@V?$xalloc@I@@IAEBI@std@@YAXAEAV?$xalloc@I@@PEAIAEBI@Z ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int const & __ptr64>
PUBLIC	?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::push_back
PUBLIC	?_Inside@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_NPEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Inside
PUBLIC	??$_Val_type@PEAU?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@PEAU1@@Z ; std::_Val_type<_vector3<float> * __ptr64>
PUBLIC	??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z ; std::forward<_vector3<float> >
PUBLIC	??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> >
PUBLIC	??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >
PUBLIC	??$_Uninitialized_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@@Z ; std::_Uninitialized_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> > >
PUBLIC	??$_Umove@PEAU?$_vector3@M@@@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAPEAU?$_vector3@M@@PEAU2@00@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Umove<_vector3<float> * __ptr64>
PUBLIC	?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve
PUBLIC	?_Grow_to@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_K_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Grow_to
PUBLIC	?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Reserve
PUBLIC	?_Orphan_range@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBAXPEAU?$_vector3@M@@0@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Orphan_range
PUBLIC	??$addressof@$$CBU?$_vector3@M@@@std@@YAPEBU?$_vector3@M@@AEBU1@@Z ; std::addressof<_vector3<float> const >
PUBLIC	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+=
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+
PUBLIC	??A?$xr_vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAAAEAU?$_vector3@M@@_K@Z ; xr_vector<_vector3<float>,xalloc<_vector3<float> > >::operator[]
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEBIXZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator*
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEAIXZ ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++
PUBLIC	??$clamp@I@@YAXAEAIAEBI1@Z			; clamp<unsigned int>
PUBLIC	?begin@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ ; std::vector<unsigned int,xalloc<unsigned int> >::begin
PUBLIC	?end@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ ; std::vector<unsigned int,xalloc<unsigned int> >::end
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >
PUBLIC	?_Make_iter@?$vector@IV?$xalloc@I@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Make_iter
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAXAEBV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Compat
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator!=
PUBLIC	??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z		; std::_Move<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z ; std::vector<unsigned int,xalloc<unsigned int> >::erase
PUBLIC	?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ	; std::vector<unsigned int,xalloc<unsigned int> >::clear
PUBLIC	?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ ; xr_vector<unsigned int,xalloc<unsigned int> >::clear_and_free
EXTRN	__imp_memmove:PROC
clpMX	DD	018H
clpMY	DD	010H
clpMZ	DD	018H
EPS_L	DD	03a83126fr			; 0.001
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
;	COMDAT ??0?$xalloc@I@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$xalloc@I@@QEAA@XZ PROC				; xalloc<unsigned int>::xalloc<unsigned int>, COMDAT

; 76   : 													xalloc			()										{	}

	mov	rax, rcx
	ret	0
??0?$xalloc@I@@QEAA@XZ ENDP				; xalloc<unsigned int>::xalloc<unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xalloc@I@@QEAA@AEBV0@@Z
_TEXT	SEGMENT
this$ = 8
??0?$xalloc@I@@QEAA@AEBV0@@Z PROC			; xalloc<unsigned int>::xalloc<unsigned int>, COMDAT

; 77   : 													xalloc			(const xalloc<T>&)						{	}

	mov	rax, rcx
	ret	0
??0?$xalloc@I@@QEAA@AEBV0@@Z ENDP			; xalloc<unsigned int>::xalloc<unsigned int>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_bitwise.h
_TEXT	ENDS
;	COMDAT ?iFloor@@YAHM@Z
_TEXT	SEGMENT
x$ = 8
?iFloor@@YAHM@Z PROC					; iFloor, COMDAT

; 83   :     int a			= *(const int*)(&x);
; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	edx, 158				; 0000009eH
	movss	DWORD PTR [rsp+8], xmm0
	mov	r9d, DWORD PTR x$[rsp]
	mov	eax, r9d

; 85   :     int r			= (((u32)(a) << 8) | (1U << 31)) >> exponent;

	mov	r8d, r9d
	sar	eax, 23
	or	r8d, -8388608				; ff800000H
	movzx	ecx, al
	shl	r8d, 8

; 86   :     exponent		+= 31-127;
; 87   :     {
; 88   :         int imask	=	(!(((( (1<<(exponent)))-1)>>8)&a));

	mov	eax, 1
	sub	edx, ecx
	mov	ecx, edx
	shr	r8d, cl
	lea	ecx, DWORD PTR [rdx-96]
	shl	eax, cl
	mov	ecx, 0
	dec	eax
	sar	eax, 8
	test	eax, r9d

; 89   :         exponent	-=	(31-127)+32;

	lea	eax, DWORD PTR [rdx-32]
	sete	cl

; 90   :         exponent	>>=	31;
; 91   :         a			>>=	31;

	sar	r9d, 31
	sar	eax, 31

; 92   :         r			-=	(imask&a);

	and	ecx, r9d
	sub	r8d, ecx

; 93   :         r			&=	exponent;

	and	eax, r8d

; 94   :         r			^=	a;

	xor	eax, r9d

; 95   :     }
; 96   :     return r;
; 97   : }

	ret	0
?iFloor@@YAHM@Z ENDP					; iFloor
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAXAEBV12@@Z
_TEXT	SEGMENT
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAXAEBV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Compat, COMDAT

; 253  : 		}

	ret	0
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAXAEBV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Compat
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?max_size@?$xalloc@I@@QEBA_KXZ
_TEXT	SEGMENT
?max_size@?$xalloc@I@@QEBA_KXZ PROC			; xalloc<unsigned int>::max_size, COMDAT

; 86   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	ret	0
?max_size@?$xalloc@I@@QEBA_KXZ ENDP			; xalloc<unsigned int>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ PROC	; std::vector<unsigned int,xalloc<unsigned int> >::size, COMDAT

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	rax, QWORD PTR [rcx+8]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 2

; 880  : 		}

	ret	0
?size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+=, COMDAT

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

	lea	rax, QWORD PTR [rdx*4]
	add	QWORD PTR [rcx], rax

; 169  : 		return (*this);

	mov	rax, rcx

; 170  : 		}

	ret	0
??Y?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+=
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

$LN3:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2523 : 	ptrdiff_t _Count = _Last - _First;

	sub	rdx, rcx
	mov	rdi, r8
	sar	rdx, 2

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

	lea	rbx, QWORD PTR [rdx*4]
	mov	rdx, rcx
	mov	rcx, rdi
	mov	r8, rbx
	call	QWORD PTR __imp_memmove

; 2526 : 	return (_Dest + _Count);

	lea	rax, QWORD PTR [rbx+rdi]

; 2527 : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Move@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<unsigned int * __ptr64,unsigned int * __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z PROC ; std::move<CDB::edge & __ptr64>, COMDAT

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	rax, rcx

; 88   : 	}

	ret	0
??$move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z ENDP ; std::move<CDB::edge & __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@I@std@@YAXPEAI@Z
_TEXT	SEGMENT
??$_Destroy@I@std@@YAXPEAI@Z PROC			; std::_Destroy<unsigned int>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	ret	0
??$_Destroy@I@std@@YAXPEAI@Z ENDP			; std::_Destroy<unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@I@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@I@std@@YA$$QEAIAEAI@Z PROC			; std::forward<unsigned int>, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@I@std@@YA$$QEAIAEAI@Z ENDP			; std::forward<unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<CDB::edge * __ptr64,CDB::edge * __ptr64>, COMDAT

; 2618 : 	while (_First != _Last)

	cmp	rcx, rdx
	je	SHORT $LN9@Move_backw
	npad	11
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

	mov	rax, QWORD PTR [rdx-8]
	sub	rdx, 8
	sub	r8, 8
	mov	QWORD PTR [r8], rax
	cmp	rdx, rcx
	jne	SHORT $LL2@Move_backw
$LN9@Move_backw:

; 2620 : 	return (_Dest);

	mov	rax, r8

; 2621 : 	}

	ret	0
??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<CDB::edge * __ptr64,CDB::edge * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@Uedge@CDB@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAUedge@CDB@@0@Z
_TEXT	SEGMENT
_Cat$ = 8
??$_Ptr_cat@Uedge@CDB@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAUedge@CDB@@0@Z PROC ; std::_Ptr_cat<CDB::edge,CDB::edge>, COMDAT

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

	movzx	eax, BYTE PTR _Cat$[rsp]

; 519  : 	}

	ret	0
??$_Ptr_cat@Uedge@CDB@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAUedge@CDB@@0@Z ENDP ; std::_Ptr_cat<CDB::edge,CDB::edge>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?destroy@?$xalloc@I@@QEAAXPEAI@Z
_TEXT	SEGMENT
?destroy@?$xalloc@I@@QEAAXPEAI@Z PROC			; xalloc<unsigned int>::destroy, COMDAT

; 85   : 							void					destroy			(pointer p)								{	std::_Destroy(p);			}

	ret	0
?destroy@?$xalloc@I@@QEAAXPEAI@Z ENDP			; xalloc<unsigned int>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@VTRI@CDB@@@std@@YA$$QEAVTRI@CDB@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@VTRI@CDB@@@std@@YA$$QEAVTRI@CDB@@AEAV12@@Z PROC ; std::forward<CDB::TRI>, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@VTRI@CDB@@@std@@YA$$QEAVTRI@CDB@@AEAV12@@Z ENDP ; std::forward<CDB::TRI>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z PROC ; std::forward<_vector3<float> >, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@U?$_vector3@M@@@std@@YA$$QEAU?$_vector3@M@@AEAU1@@Z ENDP ; std::forward<_vector3<float> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Dest_val@V?$xalloc@I@@I@std@@YAXAEAV?$xalloc@I@@PEAI@Z
_TEXT	SEGMENT
??$_Dest_val@V?$xalloc@I@@I@std@@YAXAEAV?$xalloc@I@@PEAI@Z PROC ; std::_Dest_val<xalloc<unsigned int>,unsigned int>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

	ret	0
??$_Dest_val@V?$xalloc@I@@I@std@@YAXAEAV?$xalloc@I@@PEAI@Z ENDP ; std::_Dest_val<xalloc<unsigned int>,unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00@Z PROC ; std::_Move_backward<CDB::edge * __ptr64,CDB::edge * __ptr64>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

	mov	rax, r8

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

	cmp	rcx, rdx
	je	SHORT $LN13@Move_backw@2
	npad	8
$LL6@Move_backw@2:
	mov	r8, QWORD PTR [rdx-8]
	sub	rdx, 8
	sub	rax, 8
	mov	QWORD PTR [rax], r8
	cmp	rdx, rcx
	jne	SHORT $LL6@Move_backw@2
$LN13@Move_backw@2:

; 2641 : 	}

	fatret	0
??$_Move_backward@PEAUedge@CDB@@PEAU12@@std@@YAPEAUedge@CDB@@PEAU12@00@Z ENDP ; std::_Move_backward<CDB::edge * __ptr64,CDB::edge * __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$_Move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$_Move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z PROC ; std::_Move<CDB::edge & __ptr64>, COMDAT

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	rax, rcx

; 96   : 	}

	ret	0
??$_Move@AEAUedge@CDB@@@std@@YA$$QEAUedge@CDB@@AEAU12@@Z ENDP ; std::_Move<CDB::edge & __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$forward@AEAPEAUedge@CDB@@@std@@YAAEAPEAUedge@CDB@@AEAPEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAUedge@CDB@@@std@@YAAEAPEAUedge@CDB@@AEAPEAU12@@Z PROC ; std::forward<CDB::edge * __ptr64 & __ptr64>, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@AEAPEAUedge@CDB@@@std@@YAAEAPEAUedge@CDB@@AEAPEAU12@@Z ENDP ; std::forward<CDB::edge * __ptr64 & __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$swap@Uedge@CDB@@@std@@YAXAEAUedge@CDB@@0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$swap@Uedge@CDB@@@std@@YAXAEAUedge@CDB@@0@Z PROC	; std::swap<CDB::edge>, COMDAT

; 102  : 	_Ty _Tmp = _Move(_Left);
; 103  : 	_Left = _Move(_Right);

	mov	r8, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], r8

; 104  : 	_Right = _Move(_Tmp);

	mov	QWORD PTR [rdx], rax

; 105  : 	}

	ret	0
??$swap@Uedge@CDB@@@std@@YAXAEAUedge@CDB@@0@Z ENDP	; std::swap<CDB::edge>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_backward<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2448 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

$LN3:
	push	rbx
	sub	rsp, 32					; 00000020H

; 2449 : 	ptrdiff_t _Count = _Last - _First;

	sub	rdx, rcx
	mov	rbx, r8
	sar	rdx, 2

; 2450 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2451 : 		_Count * sizeof (*_First));

	lea	r8, QWORD PTR [rdx*4]
	mov	rdx, rcx
	sub	rbx, r8
	mov	rcx, rbx
	call	QWORD PTR __imp_memmove

; 2452 : 	return (_Dest - _Count);

	mov	rax, rbx

; 2453 : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward<unsigned int * __ptr64,unsigned int * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Fill@PEAII@std@@YAXPEAI0AEBI@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Val$ = 24
??$_Fill@PEAII@std@@YAXPEAI0AEBI@Z PROC			; std::_Fill<unsigned int * __ptr64,unsigned int>, COMDAT

; 2691 : 	for (; _First != _Last; ++_First)

	cmp	rcx, rdx
	je	SHORT $LN1@Fill
	npad	11
$LL3@Fill:

; 2692 : 		*_First = _Val;

	mov	eax, DWORD PTR [r8]
	add	rcx, 4
	mov	DWORD PTR [rcx-4], eax
	cmp	rcx, rdx
	jne	SHORT $LL3@Fill
$LN1@Fill:

; 2693 : 	}

	fatret	0
??$_Fill@PEAII@std@@YAXPEAI0AEBI@Z ENDP			; std::_Fill<unsigned int * __ptr64,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z PROC		; std::_Unchecked<unsigned int * __ptr64>, COMDAT

; 267  : 	return (_Src);

	mov	rax, rcx

; 268  : 	}

	ret	0
??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z ENDP		; std::_Unchecked<unsigned int * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Val_type@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z
_TEXT	SEGMENT
??$_Val_type@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z PROC ; std::_Val_type<CDB::edge * __ptr64>, COMDAT

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	ret	0
??$_Val_type@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z ENDP ; std::_Val_type<CDB::edge * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Dist_type@PEAUedge@CDB@@@std@@YAPEA_JPEAUedge@CDB@@@Z
_TEXT	SEGMENT
??$_Dist_type@PEAUedge@CDB@@@std@@YAPEA_JPEAUedge@CDB@@@Z PROC ; std::_Dist_type<CDB::edge * __ptr64>, COMDAT

; 850  : 	return (0);

	xor	eax, eax

; 851  : 	}

	ret	0
??$_Dist_type@PEAUedge@CDB@@@std@@YAPEA_JPEAUedge@CDB@@@Z ENDP ; std::_Dist_type<CDB::edge * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$iter_swap@PEAUedge@CDB@@PEAU12@@std@@YAXPEAUedge@CDB@@0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$iter_swap@PEAUedge@CDB@@PEAU12@@std@@YAXPEAUedge@CDB@@0@Z PROC ; std::iter_swap<CDB::edge * __ptr64,CDB::edge * __ptr64>, COMDAT

; 2134 : 	swap(*_Left, *_Right);

	mov	r8, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], r8
	mov	QWORD PTR [rdx], rax

; 2135 : 	}

	ret	0
??$iter_swap@PEAUedge@CDB@@PEAU12@@std@@YAXPEAUedge@CDB@@0@Z ENDP ; std::iter_swap<CDB::edge * __ptr64,CDB::edge * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$fill@PEAII@std@@YAXPEAI0AEBI@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Val$ = 24
??$fill@PEAII@std@@YAXPEAI0AEBI@Z PROC			; std::fill<unsigned int * __ptr64,unsigned int>, COMDAT

; 2714 : 	_DEBUG_RANGE(_First, _Last);
; 2715 : 	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);

	cmp	rcx, rdx
	je	SHORT $LN7@fill
	npad	11
$LL9@fill:
	mov	eax, DWORD PTR [r8]
	add	rcx, 4
	mov	DWORD PTR [rcx-4], eax
	cmp	rcx, rdx
	jne	SHORT $LL9@fill
$LN7@fill:

; 2716 : 	}

	fatret	0
??$fill@PEAII@std@@YAXPEAI0AEBI@Z ENDP			; std::fill<unsigned int * __ptr64,unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@I@std@@YAPEAIAEAI@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@I@std@@YAPEAIAEAI@Z PROC			; std::addressof<unsigned int>, COMDAT

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	rax, rcx

; 112  : 	}

	ret	0
??$addressof@I@std@@YAPEAIAEAI@Z ENDP			; std::addressof<unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PEAVTRI@CDB@@@std@@YAPEAVTRI@CDB@@PEAV12@@Z
_TEXT	SEGMENT
??$_Val_type@PEAVTRI@CDB@@@std@@YAPEAVTRI@CDB@@PEAV12@@Z PROC ; std::_Val_type<CDB::TRI * __ptr64>, COMDAT

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	ret	0
??$_Val_type@PEAVTRI@CDB@@@std@@YAPEAVTRI@CDB@@PEAV12@@Z ENDP ; std::_Val_type<CDB::TRI * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Val_type@PEAU?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@PEAU1@@Z
_TEXT	SEGMENT
??$_Val_type@PEAU?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@PEAU1@@Z PROC ; std::_Val_type<_vector3<float> * __ptr64>, COMDAT

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	ret	0
??$_Val_type@PEAU?$_vector3@M@@@std@@YAPEAU?$_vector3@M@@PEAU1@@Z ENDP ; std::_Val_type<_vector3<float> * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Val_type@PEAI@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
??$_Val_type@PEAI@std@@YAPEAIPEAI@Z PROC		; std::_Val_type<unsigned int * __ptr64>, COMDAT

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	ret	0
??$_Val_type@PEAI@std@@YAPEAIPEAI@Z ENDP		; std::_Val_type<unsigned int * __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AEBI@std@@YAAEBIAEBI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBI@std@@YAAEBIAEBI@Z PROC			; std::forward<unsigned int const & __ptr64>, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@AEBI@std@@YAAEBIAEBI@Z ENDP			; std::forward<unsigned int const & __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$forward@AEAI@std@@YAAEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAI@std@@YAAEAIAEAI@Z PROC			; std::forward<unsigned int & __ptr64>, COMDAT

; 79   : 	return ((_Ty&&)_Arg);

	mov	rax, rcx

; 80   : 	}

	ret	0
??$forward@AEAI@std@@YAAEAIAEAI@Z ENDP			; std::forward<unsigned int & __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@I@std@@YA?AU_Int_iterator_tag@0@AEBI@Z
_TEXT	SEGMENT
_Cat$ = 8
??$_Iter_cat@I@std@@YA?AU_Int_iterator_tag@0@AEBI@Z PROC ; std::_Iter_cat<unsigned int>, COMDAT

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	movzx	eax, BYTE PTR _Cat$[rsp]

; 479  : 	}

	ret	0
??$_Iter_cat@I@std@@YA?AU_Int_iterator_tag@0@AEBI@Z ENDP ; std::_Iter_cat<unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Unchecked@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z PROC ; std::_Unchecked<CDB::edge * __ptr64>, COMDAT

; 267  : 	return (_Src);

	mov	rax, rcx

; 268  : 	}

	ret	0
??$_Unchecked@PEAUedge@CDB@@@std@@YAPEAUedge@CDB@@PEAU12@@Z ENDP ; std::_Unchecked<CDB::edge * __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$_Move@AEAG@std@@YA$$QEAGAEAG@Z
_TEXT	SEGMENT
_Arg$ = 8
??$_Move@AEAG@std@@YA$$QEAGAEAG@Z PROC			; std::_Move<unsigned short & __ptr64>, COMDAT

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	rax, rcx

; 96   : 	}

	ret	0
??$_Move@AEAG@std@@YA$$QEAGAEAG@Z ENDP			; std::_Move<unsigned short & __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBVTRI@CDB@@@std@@YAPEBVTRI@CDB@@AEBV12@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBVTRI@CDB@@@std@@YAPEBVTRI@CDB@@AEBV12@@Z PROC ; std::addressof<CDB::TRI const >, COMDAT

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	rax, rcx

; 112  : 	}

	ret	0
??$addressof@$$CBVTRI@CDB@@@std@@YAPEBVTRI@CDB@@AEBV12@@Z ENDP ; std::addressof<CDB::TRI const >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBU?$_vector3@M@@@std@@YAPEBU?$_vector3@M@@AEBU1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBU?$_vector3@M@@@std@@YAPEBU?$_vector3@M@@AEBU1@@Z PROC ; std::addressof<_vector3<float> const >, COMDAT

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	rax, rcx

; 112  : 	}

	ret	0
??$addressof@$$CBU?$_vector3@M@@@std@@YAPEBU?$_vector3@M@@AEBU1@@Z ENDP ; std::addressof<_vector3<float> const >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBI@std@@YAPEBIAEBI@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBI@std@@YAPEBIAEBI@Z PROC		; std::addressof<unsigned int const >, COMDAT

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	rax, rcx

; 112  : 	}

	ret	0
??$addressof@$$CBI@std@@YAPEBIAEBI@Z ENDP		; std::addressof<unsigned int const >
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\vector.h
_TEXT	ENDS
;	COMDAT ??$clamp@I@@YAXAEAIAEBI1@Z
_TEXT	SEGMENT
val$ = 8
_high$ = 16
??$clamp@I@@YAXAEAIAEBI1@Z PROC				; clamp<unsigned int>, COMDAT

; 92   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [rcx], eax
	jbe	SHORT $LN1@clamp
	mov	DWORD PTR [rcx], eax
$LN1@clamp:

; 93   : };

	fatret	0
??$clamp@I@@YAXAEAIAEBI1@Z ENDP				; clamp<unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$swap@G@std@@YAXAEAG0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$swap@G@std@@YAXAEAG0@Z PROC				; std::swap<unsigned short>, COMDAT

; 102  : 	_Ty _Tmp = _Move(_Left);
; 103  : 	_Left = _Move(_Right);

	movzx	eax, WORD PTR [rdx]
	movzx	r8d, WORD PTR [rcx]
	mov	WORD PTR [rcx], ax

; 104  : 	_Right = _Move(_Tmp);

	mov	WORD PTR [rdx], r8w

; 105  : 	}

	ret	0
??$swap@G@std@@YAXAEAG0@Z ENDP				; std::swap<unsigned short>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+=, COMDAT

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

	lea	rax, QWORD PTR [rdx+rdx*2]
	shl	rax, 3
	add	QWORD PTR [rcx], rax

; 169  : 		return (*this);

	mov	rax, rcx

; 170  : 		}

	ret	0
??Y?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+=, COMDAT

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

	lea	rax, QWORD PTR [rdx+rdx*2]
	shl	rax, 2
	add	QWORD PTR [rcx], rax

; 169  : 		return (*this);

	mov	rax, rcx

; 170  : 		}

	ret	0
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+=, COMDAT

; 358  : 		*(_Mybase *)this += _Off;

	lea	rax, QWORD PTR [rdx+rdx*2]
	shl	rax, 3
	add	QWORD PTR [rcx], rax

; 359  : 		return (*this);

	mov	rax, rcx

; 360  : 		}

	ret	0
??Y?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+=, COMDAT

; 358  : 		*(_Mybase *)this += _Off;

	lea	rax, QWORD PTR [rdx+rdx*2]
	shl	rax, 2
	add	QWORD PTR [rcx], rax

; 359  : 		return (*this);

	mov	rax, rcx

; 360  : 		}

	ret	0
??Y?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++, COMDAT

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

	add	QWORD PTR [rcx], 4

; 111  : 		return (*this);

	mov	rax, rcx

; 112  : 		}

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
_Off$ = 24
??H?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+, COMDAT

; 364  : 		_Myiter _Tmp = *this;
; 365  : 		return (_Tmp += _Off);

	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR [r8+r8*2]
	lea	rcx, QWORD PTR [rax+r8*8]
	mov	rax, rdx
	mov	QWORD PTR [rdx], rcx

; 366  : 		}

	ret	0
??H?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator+
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >, COMDAT

; 40   : 		{	// construct with null pointer

	mov	QWORD PTR [rcx], 0

; 41   : 		}

	mov	rax, rcx
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
_Off$ = 24
??H?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+, COMDAT

; 364  : 		_Myiter _Tmp = *this;
; 365  : 		return (_Tmp += _Off);

	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR [r8+r8*2]
	lea	rcx, QWORD PTR [rax+r8*4]
	mov	rax, rdx
	mov	QWORD PTR [rdx], rcx

; 366  : 		}

	ret	0
??H?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator+
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBAXPEAVTRI@CDB@@0@Z
_TEXT	SEGMENT
?_Orphan_range@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBAXPEAVTRI@CDB@@0@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Orphan_range, COMDAT

; 1454 : 		}

	ret	0
?_Orphan_range@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBAXPEAVTRI@CDB@@0@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Orphan_range
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_NPEBVTRI@CDB@@@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?_Inside@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_NPEBVTRI@CDB@@@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Inside, COMDAT

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	cmp	rdx, QWORD PTR [rcx+8]
	jae	SHORT $LN3@Inside@2
	cmp	QWORD PTR [rcx], rdx
	ja	SHORT $LN3@Inside@2
	mov	al, 1

; 1287 : 		}

	ret	0
$LN3@Inside@2:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	xor	al, al

; 1287 : 		}

	ret	0
?_Inside@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_NPEBVTRI@CDB@@@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Inside
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?empty@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEBA_NXZ PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::empty, COMDAT

; 889  : 		return (this->_Myfirst == this->_Mylast);

	mov	rdx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx], rdx
	sete	al

; 890  : 		}

	ret	0
?empty@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEBA_NXZ ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEBIXZ
_TEXT	SEGMENT
this$ = 8
??D?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEBIXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator*, COMDAT

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

	mov	rax, QWORD PTR [rcx]

; 85   : 		}

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEBIXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++, COMDAT

; 332  : 		++*(_Mybase *)this;

	add	QWORD PTR [rcx], 4

; 333  : 		return (*this);

	mov	rax, rcx

; 334  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBAXPEAU?$_vector3@M@@0@Z
_TEXT	SEGMENT
?_Orphan_range@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBAXPEAU?$_vector3@M@@0@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Orphan_range, COMDAT

; 1454 : 		}

	ret	0
?_Orphan_range@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBAXPEAU?$_vector3@M@@0@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Orphan_range
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_NPEBU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?_Inside@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_NPEBU?$_vector3@M@@@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Inside, COMDAT

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	cmp	rdx, QWORD PTR [rcx+8]
	jae	SHORT $LN3@Inside@3
	cmp	QWORD PTR [rcx], rdx
	ja	SHORT $LN3@Inside@3
	mov	al, 1

; 1287 : 		}

	ret	0
$LN3@Inside@3:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	xor	al, al

; 1287 : 		}

	ret	0
?_Inside@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_NPEBU?$_vector3@M@@@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Inside
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@IV?$xalloc@I@@@std@@IEBAXPEAI0@Z
_TEXT	SEGMENT
?_Orphan_range@?$vector@IV?$xalloc@I@@@std@@IEBAXPEAI0@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Orphan_range, COMDAT

; 1454 : 		}

	ret	0
?_Orphan_range@?$vector@IV?$xalloc@I@@@std@@IEBAXPEAI0@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Orphan_range
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ PROC	; std::vector<unsigned int,xalloc<unsigned int> >::_Xlen, COMDAT

; 1426 : 		{	// report a length_error

$LN4:
	sub	rsp, 40					; 00000028H

; 1427 : 		_Xlength_error("vector<T> too long");

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN3@Xlen@2:
?_Xlen@?$vector@IV?$xalloc@I@@@std@@IEBAXXZ ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::_Xlen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@IV?$xalloc@I@@@std@@IEBA_NPEBI@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?_Inside@?$vector@IV?$xalloc@I@@@std@@IEBA_NPEBI@Z PROC	; std::vector<unsigned int,xalloc<unsigned int> >::_Inside, COMDAT

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	cmp	rdx, QWORD PTR [rcx+8]
	jae	SHORT $LN3@Inside@4
	cmp	QWORD PTR [rcx], rdx
	ja	SHORT $LN3@Inside@4
	mov	al, 1

; 1287 : 		}

	ret	0
$LN3@Inside@4:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	xor	al, al

; 1287 : 		}

	ret	0
?_Inside@?$vector@IV?$xalloc@I@@@std@@IEBA_NPEBI@Z ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::_Inside
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?capacity@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ PROC	; std::vector<unsigned int,xalloc<unsigned int> >::capacity, COMDAT

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	rax, QWORD PTR [rcx+16]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 2

; 778  : 		}

	ret	0
?capacity@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::capacity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >, COMDAT

; 298  : 	_Vector_iterator()

	mov	QWORD PTR [rcx], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

	mov	rax, rcx
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++, COMDAT

; 338  : 		_Myiter _Tmp = *this;

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 339  : 		++*this;

	add	rax, 4
	mov	QWORD PTR [rcx], rax

; 340  : 		return (_Tmp);

	mov	rax, rdx

; 341  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEAIXZ
_TEXT	SEGMENT
this$ = 8
??D?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEAIXZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator*, COMDAT

; 322  : 		return ((reference)**(_Mybase *)this);

	mov	rax, QWORD PTR [rcx]

; 323  : 		}

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBAAEAIXZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator*
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_collector.cpp
_TEXT	ENDS
;	COMDAT ?similar@CDB@@YAHAEAVTRI@1@0@Z
_TEXT	SEGMENT
T1$ = 8
T2$ = 16
?similar@CDB@@YAHAEAVTRI@1@0@Z PROC			; CDB::similar, COMDAT

; 261  :         if ((T1.verts[0]==T2.verts[0]) && (T1.verts[1]==T2.verts[1]) && (T1.verts[2]==T2.verts[2]) && (T1.dummy==T2.dummy)) return TRUE;

	mov	r8d, DWORD PTR [rcx]
	mov	r9d, DWORD PTR [rdx]
	cmp	r8d, r9d
	jne	SHORT $LN5@similar
	mov	eax, DWORD PTR [rdx+4]
	cmp	DWORD PTR [rcx+4], eax
	jne	SHORT $LN6@similar
	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+8], eax
	jne	SHORT $LN6@similar
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	jne	SHORT $LN6@similar
$LN12@similar:
	mov	eax, 1

; 268  :     }

	ret	0
$LN6@similar:

; 262  :         if ((T1.verts[0]==T2.verts[0]) && (T1.verts[2]==T2.verts[1]) && (T1.verts[1]==T2.verts[2]) && (T1.dummy==T2.dummy)) return TRUE;

	cmp	r8d, r9d
	jne	SHORT $LN5@similar
	mov	eax, DWORD PTR [rdx+4]
	cmp	DWORD PTR [rcx+8], eax
	jne	SHORT $LN5@similar
	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+4], eax
	jne	SHORT $LN5@similar
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	je	SHORT $LN12@similar
$LN5@similar:

; 263  :         if ((T1.verts[2]==T2.verts[0]) && (T1.verts[0]==T2.verts[1]) && (T1.verts[1]==T2.verts[2]) && (T1.dummy==T2.dummy)) return TRUE;

	mov	r10d, DWORD PTR [rcx+8]
	cmp	r10d, r9d
	jne	SHORT $LN3@similar
	cmp	r8d, DWORD PTR [rdx+4]
	jne	SHORT $LN4@similar
	mov	eax, DWORD PTR [rdx+8]
	cmp	DWORD PTR [rcx+4], eax
	jne	SHORT $LN4@similar
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	je	SHORT $LN12@similar
$LN4@similar:

; 264  :         if ((T1.verts[2]==T2.verts[0]) && (T1.verts[1]==T2.verts[1]) && (T1.verts[0]==T2.verts[2]) && (T1.dummy==T2.dummy)) return TRUE;

	cmp	r10d, r9d
	jne	SHORT $LN3@similar
	mov	eax, DWORD PTR [rdx+4]
	cmp	DWORD PTR [rcx+4], eax
	jne	SHORT $LN3@similar
	cmp	r8d, DWORD PTR [rdx+8]
	jne	SHORT $LN3@similar
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	je	SHORT $LN12@similar
$LN3@similar:

; 265  :         if ((T1.verts[1]==T2.verts[0]) && (T1.verts[0]==T2.verts[1]) && (T1.verts[2]==T2.verts[2]) && (T1.dummy==T2.dummy)) return TRUE;

	mov	r11d, DWORD PTR [rcx+4]
	cmp	r11d, r9d
	jne	SHORT $LN1@similar
	cmp	r8d, DWORD PTR [rdx+4]
	jne	SHORT $LN2@similar
	cmp	r10d, DWORD PTR [rdx+8]
	jne	SHORT $LN2@similar
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	je	$LN12@similar
$LN2@similar:

; 266  :         if ((T1.verts[1]==T2.verts[0]) && (T1.verts[2]==T2.verts[1]) && (T1.verts[0]==T2.verts[2]) && (T1.dummy==T2.dummy)) return TRUE;

	cmp	r11d, r9d
	jne	SHORT $LN1@similar
	cmp	r10d, DWORD PTR [rdx+4]
	jne	SHORT $LN1@similar
	cmp	r8d, DWORD PTR [rdx+8]
	jne	SHORT $LN1@similar
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	je	$LN12@similar
$LN1@similar:

; 267  :         return FALSE;

	xor	eax, eax

; 268  :     }

	ret	0
?similar@CDB@@YAHAEAVTRI@1@0@Z ENDP			; CDB::similar
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Rsort_predicate@CDB@@QEBA_NAEBUedge@1@0@Z
_TEXT	SEGMENT
edge0$ = 8
edge1$ = 16
??Rsort_predicate@CDB@@QEBA_NAEBUedge@1@0@Z PROC	; CDB::sort_predicate::operator(), COMDAT

; 102  : 			if (edge0.vertex_id0 < edge1.vertex_id0)
; 103  : 				return				(true);
; 104  : 
; 105  : 			if (edge1.vertex_id0 < edge0.vertex_id0)

	movzx	eax, WORD PTR [rcx+4]
	mov	r8, rdx
	mov	rdx, rcx
	cmp	WORD PTR [r8+4], ax
	jae	SHORT $LN3@operator
$LN12@operator:

; 106  : 				return				(false);

	xor	al, al

; 115  : 		}

	ret	0
$LN3@operator:

; 107  : 
; 108  : 			if (edge0.vertex_id1 < edge1.vertex_id1)

	movzx	eax, WORD PTR [rcx+6]
	movzx	ecx, WORD PTR [r8+6]
	cmp	cx, ax
	jbe	SHORT $LN11@operator

; 109  : 				return				(true);

	mov	al, 1

; 115  : 		}

	ret	0
$LN11@operator:

; 110  : 
; 111  : 			if (edge1.vertex_id1 < edge0.vertex_id1)
; 112  : 				return				(false);

	jb	SHORT $LN12@operator

; 113  : 
; 114  : 			return					(edge0.face_id < edge1.face_id);

	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [r8]
	xor	eax, eax
	and	edx, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	edx, ecx
	setb	al

; 115  : 		}

	ret	0
??Rsort_predicate@CDB@@QEBA_NAEBUedge@1@0@Z ENDP	; CDB::sort_predicate::operator()
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb.h
_TEXT	ENDS
;	COMDAT ??0non_copyable@CDB@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0non_copyable@CDB@@QEAA@XZ PROC			; CDB::non_copyable::non_copyable, COMDAT

; 219  : 						non_copyable	() {}

	mov	rax, rcx
	ret	0
??0non_copyable@CDB@@QEAA@XZ ENDP			; CDB::non_copyable::non_copyable
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@IV?$xalloc@I@@@std@@QEAA@V?$xalloc@I@@@Z
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@IV?$xalloc@I@@@std@@QEAA@V?$xalloc@I@@@Z PROC ; std::_Vector_val<unsigned int,xalloc<unsigned int> >::_Vector_val<unsigned int,xalloc<unsigned int> >, COMDAT

; 427  : 		_Myfirst = 0;

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 428  : 		_Mylast = 0;

	mov	QWORD PTR [rcx+8], rax

; 429  : 		_Myend = 0;

	mov	QWORD PTR [rcx+16], rax

; 430  : 		}

	mov	rax, rcx
	ret	0
??0?$_Vector_val@IV?$xalloc@I@@@std@@QEAA@V?$xalloc@I@@@Z ENDP ; std::_Vector_val<unsigned int,xalloc<unsigned int> >::_Vector_val<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
_Parg$ = 16
??0?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >, COMDAT

; 45   : 		{	// construct with pointer _Parg

	mov	QWORD PTR [rcx], rdx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

	mov	rax, rcx
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator==, COMDAT

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rdx
	sete	al

; 204  : 		}

	ret	0
??8?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ
_TEXT	SEGMENT
?max_size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ PROC	; std::vector<unsigned int,xalloc<unsigned int> >::max_size, COMDAT

; 884  : 		return (this->_Alval.max_size());

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 885  : 		}

	ret	0
?max_size@?$vector@IV?$xalloc@I@@@std@@QEBA_KXZ ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+=, COMDAT

; 358  : 		*(_Mybase *)this += _Off;

	lea	rax, QWORD PTR [rdx*4]
	add	QWORD PTR [rcx], rax

; 359  : 		return (*this);

	mov	rax, rcx

; 360  : 		}

	ret	0
??Y?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+=
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN7
	DD	imagerel $LN7+58
	DD	imagerel $unwind$??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC		; std::_Move<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

	sub	rdx, rcx
	mov	rdi, r8
	sar	rdx, 2
	lea	rbx, QWORD PTR [rdx*4]
	mov	rdx, rcx
	mov	rcx, rdi
	mov	r8, rbx
	call	QWORD PTR __imp_memmove
	lea	rax, QWORD PTR [rbx+rdi]

; 2536 : 	}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Move@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP		; std::_Move<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z DD imagerel $LN22
	DD	imagerel $LN22+155
	DD	imagerel $unwind$??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 8
_Hole$ = 16
_Top$ = 24
_Val$ = 32
_Pred$ = 40
??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z PROC ; std::_Push_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	mov	rbx, r8
	mov	r8, rdx

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	lea	rax, QWORD PTR [rdx-1]
	cdq
	mov	r10, rcx
	sub	rax, rdx
	sar	rax, 1
	mov	r11, rax

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

	cmp	rbx, r8
	jge	SHORT $LN21@Push_heap
	npad	14
$LL3@Push_heap:
	movzx	ecx, WORD PTR [r10+r11*8+4]
	movzx	edx, WORD PTR [r9+4]
	cmp	dx, cx
	ja	SHORT $LN18@Push_heap
	jb	SHORT $LN21@Push_heap
	movzx	eax, WORD PTR [r10+r11*8+6]
	movzx	ecx, WORD PTR [r9+6]
	cmp	cx, ax
	ja	SHORT $LN18@Push_heap
	jb	SHORT $LN21@Push_heap
	mov	ecx, DWORD PTR [r9]
	mov	eax, DWORD PTR [r10+r11*8]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	je	SHORT $LN21@Push_heap
$LN18@Push_heap:

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

	mov	rax, QWORD PTR [r10+r11*8]
	mov	QWORD PTR [r10+r8*8], rax
	lea	rax, QWORD PTR [r11-1]

; 2461 : 		_Hole = _Idx;

	mov	r8, r11
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r11, rax
	cmp	rbx, r8
	jl	SHORT $LL3@Push_heap
$LN21@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

	mov	rax, QWORD PTR [r9]

; 2465 : 	}

	mov	rbx, QWORD PTR [rsp+8]
	mov	QWORD PTR [r10+r8*8], rax
	ret	0
??$_Push_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ENDP ; std::_Push_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z DD imagerel $LN45
	DD	imagerel $LN45+269
	DD	imagerel $unwind$??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 8
_Hole$ = 16
_Bottom$ = 24
_Val$ = 32
_Pred$ = 40
??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z PROC ; std::_Adjust_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

$LN45:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 2566 : 	_Diff _Top = _Hole;
; 2567 : 	_Diff _Idx = 2 * _Hole + 2;

	lea	r10, QWORD PTR [rdx+rdx+2]
	mov	rbx, r9
	mov	r11, rcx
	mov	r9, rdx
	mov	rdi, rdx

; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	cmp	r10, r8
	jge	SHORT $LN44@Adjust_hea
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

	movzx	eax, WORD PTR [r11+r10*8+4]
	movzx	ecx, WORD PTR [r11+r10*8-4]
	cmp	cx, ax
	ja	SHORT $LN39@Adjust_hea
	jb	SHORT $LN2@Adjust_hea
	movzx	eax, WORD PTR [r11+r10*8+6]
	movzx	ecx, WORD PTR [r11+r10*8-2]
	cmp	cx, ax
	ja	SHORT $LN39@Adjust_hea
	jb	SHORT $LN2@Adjust_hea
	mov	ecx, DWORD PTR [r11+r10*8-8]
	mov	eax, DWORD PTR [r11+r10*8]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	je	SHORT $LN2@Adjust_hea
$LN39@Adjust_hea:

; 2572 : 			--_Idx;

	dec	r10
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

	mov	rax, QWORD PTR [r11+r10*8]
	mov	QWORD PTR [r11+r9*8], rax

; 2574 : 		_Hole = _Idx;

	mov	r9, r10
	lea	r10, QWORD PTR [r10+r10+2]
	cmp	r10, r8
	jl	SHORT $LL5@Adjust_hea
$LN44@Adjust_hea:

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

	mov	rax, QWORD PTR [r11+r8*8-8]
	mov	QWORD PTR [r11+r9*8], rax

; 2580 : 		_Hole = _Bottom - 1;

	lea	r9, QWORD PTR [r8-1]
$LN1@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

	lea	rax, QWORD PTR [r9-1]
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r8, rax
	cmp	rdi, r9
	jge	SHORT $LN43@Adjust_hea
	npad	2
$LL22@Adjust_hea:
	movzx	ecx, WORD PTR [r11+r8*8+4]
	movzx	edx, WORD PTR [rbx+4]
	cmp	dx, cx
	ja	SHORT $LN40@Adjust_hea
	jb	SHORT $LN43@Adjust_hea
	movzx	eax, WORD PTR [r11+r8*8+6]
	movzx	ecx, WORD PTR [rbx+6]
	cmp	cx, ax
	ja	SHORT $LN40@Adjust_hea
	jb	SHORT $LN43@Adjust_hea
	mov	ecx, DWORD PTR [rbx]
	mov	eax, DWORD PTR [r11+r8*8]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	je	SHORT $LN43@Adjust_hea
$LN40@Adjust_hea:
	mov	rax, QWORD PTR [r11+r8*8]
	mov	QWORD PTR [r11+r9*8], rax
	lea	rax, QWORD PTR [r8-1]
	mov	r9, r8
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r8, rax
	cmp	rdi, r9
	jl	SHORT $LL22@Adjust_hea
$LN43@Adjust_hea:
	mov	rax, QWORD PTR [rbx]

; 2583 : 	}

	mov	rdi, QWORD PTR [rsp+16]
	mov	rbx, QWORD PTR [rsp+8]
	mov	QWORD PTR [r11+r9*8], rax
	ret	0
??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ENDP ; std::_Adjust_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$_Pair_base@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z
_TEXT	SEGMENT
this$ = 8
_Val1$ = 16
_Val2$ = 24
??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$_Pair_base@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z PROC ; std::_Pair_base<CDB::edge * __ptr64,CDB::edge * __ptr64>::_Pair_base<CDB::edge * __ptr64,CDB::edge * __ptr64><CDB::edge * __ptr64 & __ptr64,CDB::edge * __ptr64 & __ptr64>, COMDAT

; 163  : 		{	// construct from moved values

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 164  : 		}

	mov	rax, rcx
	ret	0
??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$_Pair_base@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z ENDP ; std::_Pair_base<CDB::edge * __ptr64,CDB::edge * __ptr64>::_Pair_base<CDB::edge * __ptr64,CDB::edge * __ptr64><CDB::edge * __ptr64 & __ptr64,CDB::edge * __ptr64 & __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 8
_Mid$ = 16
_Last$ = 24
_Pred$ = 32
??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z PROC ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	movzx	eax, WORD PTR [rdx+4]
	mov	r9, rcx
	movzx	ecx, WORD PTR [rcx+4]
	cmp	cx, ax
	ja	SHORT $LN54@Med3
	jb	SHORT $LN14@Med3
	movzx	eax, WORD PTR [rdx+6]
	movzx	ecx, WORD PTR [r9+6]
	cmp	cx, ax
	ja	SHORT $LN54@Med3
	jb	SHORT $LN14@Med3
	mov	ecx, DWORD PTR [rdx]
	mov	eax, DWORD PTR [r9]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	ecx, eax
	setb	al
	test	al, al
	je	SHORT $LN14@Med3
$LN54@Med3:

; 3685 : 		_STD iter_swap(_Mid, _First);

	mov	rcx, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [r9], rax
$LN14@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

	movzx	eax, WORD PTR [r8+4]
	movzx	ecx, WORD PTR [rdx+4]
	cmp	cx, ax
	ja	SHORT $LN55@Med3
	jb	SHORT $LN30@Med3
	movzx	eax, WORD PTR [r8+6]
	movzx	ecx, WORD PTR [rdx+6]
	cmp	cx, ax
	ja	SHORT $LN55@Med3
	jb	SHORT $LN30@Med3
	mov	ecx, DWORD PTR [rdx]
	mov	eax, DWORD PTR [r8]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	je	SHORT $LN30@Med3
$LN55@Med3:

; 3687 : 		_STD iter_swap(_Last, _Mid);

	mov	rcx, QWORD PTR [rdx]
	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [r8], rcx
	mov	QWORD PTR [rdx], rax
$LN30@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	movzx	eax, WORD PTR [rdx+4]
	movzx	ecx, WORD PTR [r9+4]
	cmp	cx, ax
	ja	SHORT $LN56@Med3
	jb	SHORT $LN46@Med3
	movzx	eax, WORD PTR [rdx+6]
	movzx	ecx, WORD PTR [r9+6]
	cmp	cx, ax
	ja	SHORT $LN56@Med3
	jb	SHORT $LN46@Med3
	mov	ecx, DWORD PTR [rdx]
	mov	eax, DWORD PTR [r9]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	ecx, eax
	setb	al
	test	al, al
	je	SHORT $LN46@Med3
$LN56@Med3:

; 3689 : 		_STD iter_swap(_Mid, _First);

	mov	rcx, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [r9], rax
$LN46@Med3:

; 3690 : 	}

	fatret	0
??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ENDP ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD imagerel $LN49
	DD	imagerel $LN49+30
	DD	imagerel $unwind$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD imagerel $LN49+30
	DD	imagerel $LN49+283
	DD	imagerel $chain$1$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD imagerel $LN49+283
	DD	imagerel $LN49+285
	DD	imagerel $chain$2$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD 021H
	DD	imagerel $LN49
	DD	imagerel $LN49+30
	DD	imagerel $unwind$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD 040a21H
	DD	04740aH
	DD	033405H
	DD	imagerel $LN49
	DD	imagerel $LN49+30
	DD	imagerel $unwind$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD 010201H
	DD	06002H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
_TEXT	SEGMENT
_Val$98904 = 16
_First$ = 16
_Last$ = 24
_Pred$ = 32
??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z PROC ; std::_Insertion_sort1<CDB::edge * __ptr64,CDB::sort_predicate,CDB::edge>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

$LN49:
	push	rsi
	mov	rsi, rdx
	mov	r9, rcx

; 3651 : 	if (_First != _Last)

	cmp	rcx, rdx
	je	$LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	r10, QWORD PTR [rcx+8]
	cmp	r10, rdx
	je	$LN6@Insertion_
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rdi
	npad	8
$LL7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

	mov	rax, QWORD PTR [r10]

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

	movzx	edx, WORD PTR [r9+4]
	mov	rdi, r10
	mov	rcx, rax
	mov	QWORD PTR _Val$98904[rsp], rax
	shr	rcx, 32					; 00000020H
	cmp	dx, cx
	ja	$LN45@Insertion_
	jb	SHORT $LN5@Insertion_
	movzx	edx, WORD PTR [r9+6]
	mov	rcx, rax
	shr	rcx, 48					; 00000030H
	cmp	dx, cx
	ja	SHORT $LN45@Insertion_
	jb	SHORT $LN5@Insertion_
	mov	ecx, DWORD PTR [r9]
	mov	edx, eax
	and	ecx, 1073741823				; 3fffffffH
	and	edx, 1073741823				; 3fffffffH
	cmp	edx, ecx
	setb	cl
	test	cl, cl
	jne	SHORT $LN45@Insertion_
$LN5@Insertion_:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	movzx	r11d, WORD PTR _Val$98904[rsp+6]
	movzx	ebx, WORD PTR _Val$98904[rsp+4]
	lea	r8, QWORD PTR [r10+6]
	npad	2
$LL3@Insertion_:

; 3661 : 				}
; 3662 : 			else
; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

	movzx	ecx, WORD PTR [r8-10]
	sub	r8, 8
	cmp	cx, bx
	ja	SHORT $LN46@Insertion_
	jb	SHORT $LN48@Insertion_
	movzx	ecx, WORD PTR [r8]
	cmp	cx, r11w
	ja	SHORT $LN46@Insertion_
	jb	SHORT $LN48@Insertion_
	mov	edx, DWORD PTR [r8-6]
	mov	ecx, eax
	and	ecx, 1073741823				; 3fffffffH
	and	edx, 1073741823				; 3fffffffH
	cmp	ecx, edx
	setb	cl
	test	cl, cl
	je	SHORT $LN48@Insertion_
$LN46@Insertion_:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

	mov	rcx, QWORD PTR [r8-6]
	lea	rdx, QWORD PTR [r8-6]
	mov	QWORD PTR [rdi], rcx
	mov	rdi, rdx
	jmp	SHORT $LL3@Insertion_
$LN48@Insertion_:

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

	mov	QWORD PTR [rdi], rax
	jmp	SHORT $LN4@Insertion_
$LN45@Insertion_:

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

	mov	rdx, r10
	cmp	r9, r10
	je	SHORT $LN23@Insertion_
	npad	12
$LL24@Insertion_:
	mov	rcx, QWORD PTR [rdx-8]
	sub	rdx, 8
	mov	QWORD PTR [rdx+8], rcx
	cmp	rdx, r9
	jne	SHORT $LL24@Insertion_
$LN23@Insertion_:

; 3660 : 				*_First = _Move(_Val);

	mov	QWORD PTR [r9], rax
$LN4@Insertion_:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	add	r10, 8
	cmp	r10, rsi
	jne	$LL7@Insertion_
	mov	rdi, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+24]
$LN6@Insertion_:

; 3669 : 				}
; 3670 : 			}
; 3671 : 	}

	pop	rsi
	ret	0
??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z ENDP ; std::_Insertion_sort1<CDB::edge * __ptr64,CDB::sort_predicate,CDB::edge>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z DD imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z DD imagerel $LN54+42
	DD	imagerel $LN54+348
	DD	imagerel $chain$1$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z DD imagerel $LN54+348
	DD	imagerel $LN54+355
	DD	imagerel $chain$2$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z DD 021H
	DD	imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z DD 040a21H
	DD	04540aH
	DD	033405H
	DD	imagerel $LN54
	DD	imagerel $LN54+42
	DD	imagerel $unwind$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z DD 030601H
	DD	056406H
	DD	07006H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z
_TEXT	SEGMENT
_Val$98860 = 16
_First$ = 16
_Last$ = 24
_Pred$ = 32
??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z PROC ; std::_Make_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

$LN54:
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	mov	rsi, rdx
	mov	r9, rcx

; 2659 : 	_Diff _Bottom = _Last - _First;

	sub	rsi, rcx
	sar	rsi, 3

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	rax, rsi
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	rdi, rax
	test	rax, rax
	jle	$LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	lea	rbp, QWORD PTR [rax+rax+2]
	npad	7
$LL2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;
; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

	mov	rcx, QWORD PTR [r9+rdi*8-8]
	dec	rdi
	sub	rbp, 2
	mov	QWORD PTR _Val$98860[rsp], rcx

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

	mov	rbx, rdi
	mov	r8, rbp
	cmp	rbp, rsi
	jge	SHORT $LN11@Make_heap
	npad	4
$LL13@Make_heap:
	movzx	eax, WORD PTR [r9+r8*8+4]
	movzx	edx, WORD PTR [r9+r8*8-4]
	cmp	dx, ax
	ja	SHORT $LN49@Make_heap
	jb	SHORT $LN10@Make_heap
	movzx	eax, WORD PTR [r9+r8*8+6]
	movzx	edx, WORD PTR [r9+r8*8-2]
	cmp	dx, ax
	ja	SHORT $LN49@Make_heap
	jb	SHORT $LN10@Make_heap
	mov	edx, DWORD PTR [r9+r8*8]
	mov	eax, DWORD PTR [r9+r8*8-8]
	and	eax, 1073741823				; 3fffffffH
	and	edx, 1073741823				; 3fffffffH
	cmp	edx, eax
	setb	al
	test	al, al
	je	SHORT $LN10@Make_heap
$LN49@Make_heap:
	dec	r8
$LN10@Make_heap:
	mov	rax, QWORD PTR [r9+r8*8]
	mov	QWORD PTR [r9+rbx*8], rax
	mov	rbx, r8
	lea	r8, QWORD PTR [r8+r8+2]
	cmp	r8, rsi
	jl	SHORT $LL13@Make_heap
$LN11@Make_heap:
	cmp	r8, rsi
	jne	SHORT $LN9@Make_heap
	mov	rax, QWORD PTR [r9+rsi*8-8]
	mov	QWORD PTR [r9+rbx*8], rax
	lea	rbx, QWORD PTR [rsi-1]
$LN9@Make_heap:
	lea	rax, QWORD PTR [rbx-1]
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r8, rax
	cmp	rdi, rbx
	jge	SHORT $LN53@Make_heap
	movzx	r10d, WORD PTR _Val$98860[rsp+6]
	movzx	r11d, WORD PTR _Val$98860[rsp+4]
	npad	3
$LL30@Make_heap:
	movzx	edx, WORD PTR [r9+r8*8+4]
	cmp	r11w, dx
	ja	SHORT $LN50@Make_heap
	jb	SHORT $LN53@Make_heap
	movzx	eax, WORD PTR [r9+r8*8+6]
	cmp	r10w, ax
	ja	SHORT $LN50@Make_heap
	jb	SHORT $LN53@Make_heap
	mov	eax, DWORD PTR [r9+r8*8]
	mov	edx, ecx
	and	eax, 1073741823				; 3fffffffH
	and	edx, 1073741823				; 3fffffffH
	cmp	eax, edx
	setb	al
	test	al, al
	je	SHORT $LN53@Make_heap
$LN50@Make_heap:
	mov	rax, QWORD PTR [r9+r8*8]
	mov	QWORD PTR [r9+rbx*8], rax
	lea	rax, QWORD PTR [r8-1]
	mov	rbx, r8
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r8, rax
	cmp	rdi, rbx
	jl	SHORT $LL30@Make_heap
$LN53@Make_heap:
	mov	QWORD PTR [r9+rbx*8], rcx
	test	rdi, rdi
	jg	$LL2@Make_heap
	mov	rbp, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+24]
$LN1@Make_heap:

; 2666 : 		}
; 2667 : 	}

	mov	rsi, QWORD PTR [rsp+40]
	pop	rdi
	ret	0
??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z ENDP ; std::_Make_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$pair@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z
_TEXT	SEGMENT
this$ = 8
_Val1$ = 16
_Val2$ = 24
??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$pair@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z PROC ; std::pair<CDB::edge * __ptr64,CDB::edge * __ptr64>::pair<CDB::edge * __ptr64,CDB::edge * __ptr64><CDB::edge * __ptr64 & __ptr64,CDB::edge * __ptr64 & __ptr64>, COMDAT

; 247  : 		{	// construct from moved values

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx+8], rax

; 248  : 		}

	mov	rax, rcx
	ret	0
??$?0AEAPEAUedge@CDB@@AEAPEAU01@@?$pair@PEAUedge@CDB@@PEAU12@@std@@QEAA@AEAPEAUedge@CDB@@0@Z ENDP ; std::pair<CDB::edge * __ptr64,CDB::edge * __ptr64>::pair<CDB::edge * __ptr64,CDB::edge * __ptr64><CDB::edge * __ptr64 & __ptr64,CDB::edge * __ptr64 & __ptr64>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
pdata	SEGMENT
$pdata$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+40
	DD	imagerel $unwind$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z DD imagerel $LN5+40
	DD	imagerel $LN5+202
	DD	imagerel $chain$3$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z DD imagerel $LN5+202
	DD	imagerel $LN5+216
	DD	imagerel $chain$4$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+40
	DD	imagerel $unwind$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z DD 081921H
	DD	0bc419H
	DD	0a7414H
	DD	09640dH
	DD	085405H
	DD	imagerel $LN5
	DD	imagerel $LN5+40
	DD	imagerel $unwind$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z DD 040a01H
	DD	0e006320aH
	DD	03002d004H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 64
_Mid$ = 72
_Last$ = 80
_Pred$ = 88
??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z PROC ; std::_Median<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 3695 : 	{	// sort median element to middle

$LN5:
	push	rbx
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H

; 3696 : 	if (40 < _Last - _First)

	mov	rax, r8
	movzx	ebx, r9b
	mov	r13, r8
	sub	rax, rcx
	mov	r14, rdx
	sar	rax, 3
	cmp	rax, 40					; 00000028H
	jle	$LN2@Median

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	QWORD PTR [rsp+64], rbp
	inc	rax
	mov	QWORD PTR [rsp+72], rsi
	cdq
	mov	QWORD PTR [rsp+80], rdi
	mov	QWORD PTR [rsp+88], r12
	and	edx, 7
	add	rax, rdx
	sar	rax, 3

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

	mov	rbp, rax
	lea	rsi, QWORD PTR [rax*8]
	shl	rbp, 4
	lea	r12, QWORD PTR [rsi+rcx]
	lea	r8, QWORD PTR [rcx+rbp]
	mov	rdx, r12
	call	??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	rcx, r14
	lea	r8, QWORD PTR [rsi+r14]
	sub	rcx, rsi
	movzx	r9d, bl
	mov	rdx, r14
	call	??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

	mov	rdi, r13
	mov	rcx, r13
	sub	rdi, rsi
	movzx	r9d, bl
	mov	r8, r13
	mov	rdx, rdi
	sub	rcx, rbp
	call	??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

	movzx	r9d, bl
	mov	r8, rdi
	mov	rdx, r14
	mov	rcx, r12
	mov	r12, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+64]

; 3703 : 		}
; 3704 : 	else
; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);
; 3706 : 	}

	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	rbx
	jmp	??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>
$LN2@Median:
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	rbx
	jmp	??$_Med3@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Med3<CDB::edge * __ptr64,CDB::sort_predicate>
??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ENDP ; std::_Median<CDB::edge * __ptr64,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN7
	DD	imagerel $LN7+48
	DD	imagerel $unwind$??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC	; std::_Copy_backward<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2459 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 2460 : 	return (_Copy_backward(_First, _Last,
; 2461 : 		_Dest, _Ptr_cat(_First, _Dest)));

	sub	rdx, rcx
	mov	rbx, r8
	sar	rdx, 2
	lea	r8, QWORD PTR [rdx*4]
	mov	rdx, rcx
	sub	rbx, r8
	mov	rcx, rbx
	call	QWORD PTR __imp_memmove
	mov	rax, rbx

; 2462 : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Copy_backward@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP	; std::_Copy_backward<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+14
	DD	imagerel $unwind$??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Pred$ = 64
??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z PROC ; std::_Insertion_sort<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

$LN5:
	sub	rsp, 40					; 00000028H

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

	call	??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z ; std::_Insertion_sort1<CDB::edge * __ptr64,CDB::sort_predicate,CDB::edge>

; 3678 : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$_Insertion_sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ENDP ; std::_Insertion_sort<CDB::edge * __ptr64,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN12
	DD	imagerel $LN12+30
	DD	imagerel $unwind$??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Pred$ = 64
??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z PROC ; std::make_heap<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

$LN12:
	sub	rsp, 40					; 00000028H

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

	mov	rax, rdx
	sub	rax, rcx
	and	rax, -8
	cmp	rax, 8
	jle	SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

	call	??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z ; std::_Make_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
$LN1@make_heap:

; 2678 : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$make_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ENDP ; std::make_heap<CDB::edge * __ptr64,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z DD imagerel $LN202
	DD	imagerel $LN202+824
	DD	imagerel $unwind$??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_First$ = 56
_Last$ = 64
_Pred$ = 72
??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z PROC ; std::_Unguarded_partition<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

$LN202:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

	mov	rax, r8
	mov	rsi, r8
	sub	rax, rdx
	mov	r12, rcx

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

	add	r8, -8
	sar	rax, 3
	mov	rcx, rbp
	cdq
	sub	rax, rdx
	sar	rax, 1
	lea	rbx, QWORD PTR [rbp+rax*8]
	mov	rdx, rbx
	call	??$_Median@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00Usort_predicate@2@@Z ; std::_Median<CDB::edge * __ptr64,CDB::sort_predicate>

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

	lea	r10, QWORD PTR [rbx+8]

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

	cmp	rbp, rbx
	jae	$LN193@Unguarded_

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

	lea	rdx, QWORD PTR [rbx-2]
	npad	6
$LL27@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

	movzx	r8d, WORD PTR [rdx-2]
	movzx	r9d, WORD PTR [rdx+6]
	cmp	r9w, r8w
	ja	SHORT $LN193@Unguarded_
	jb	SHORT $LN193@Unguarded_
	movzx	eax, WORD PTR [rdx]
	movzx	ecx, WORD PTR [rdx+8]
	cmp	cx, ax
	ja	SHORT $LN193@Unguarded_
	jb	SHORT $LN173@Unguarded_
	mov	ecx, DWORD PTR [rdx-6]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	ecx, eax
	setb	al
	test	al, al
	jne	SHORT $LN193@Unguarded_
$LN173@Unguarded_:
	cmp	r9w, r8w
	jb	SHORT $LN193@Unguarded_
	movzx	eax, WORD PTR [rdx+8]
	movzx	ecx, WORD PTR [rdx]
	cmp	cx, ax
	ja	SHORT $LN193@Unguarded_
	jb	SHORT $LN174@Unguarded_
	mov	ecx, DWORD PTR [rdx-6]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	jne	SHORT $LN193@Unguarded_
$LN174@Unguarded_:

; 3721 : 		--_Pfirst;

	sub	rbx, 8
	sub	rdx, 8
	cmp	rbp, rbx
	jb	SHORT $LL27@Unguarded_
$LN193@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

	cmp	r10, rsi
	jae	SHORT $LN194@Unguarded_
	movzx	r8d, WORD PTR [rbx+4]
	npad	3
$LL25@Unguarded_:
	movzx	edx, WORD PTR [r10+4]
	cmp	r8w, dx
	ja	SHORT $LN194@Unguarded_
	jb	SHORT $LN194@Unguarded_
	movzx	eax, WORD PTR [r10+6]
	movzx	ecx, WORD PTR [rbx+6]
	cmp	cx, ax
	ja	SHORT $LN194@Unguarded_
	jb	SHORT $LN175@Unguarded_
	mov	ecx, DWORD PTR [r10]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	ecx, eax
	setb	al
	test	al, al
	jne	SHORT $LN194@Unguarded_
$LN175@Unguarded_:
	cmp	r8w, dx
	jb	SHORT $LN194@Unguarded_
	movzx	eax, WORD PTR [rbx+6]
	movzx	ecx, WORD PTR [r10+6]
	cmp	cx, ax
	ja	SHORT $LN194@Unguarded_
	jb	SHORT $LN176@Unguarded_
	mov	ecx, DWORD PTR [r10]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	jne	SHORT $LN194@Unguarded_
$LN176@Unguarded_:

; 3725 : 		++_Plast;

	add	r10, 8
	cmp	r10, rsi
	jb	SHORT $LL25@Unguarded_
$LN194@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;

	mov	r9, r10

; 3728 : 	_RanIt _Glast = _Pfirst;

	mov	r11, rbx
$LL23@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	r9, rsi
	jae	$LN195@Unguarded_
	npad	3
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

	movzx	edx, WORD PTR [rbx+4]
	movzx	r8d, WORD PTR [r9+4]
	cmp	r8w, dx
	ja	SHORT $LN20@Unguarded_
	jb	SHORT $LN195@Unguarded_
	movzx	eax, WORD PTR [rbx+6]
	movzx	ecx, WORD PTR [r9+6]
	cmp	cx, ax
	ja	SHORT $LN20@Unguarded_
	jb	SHORT $LN177@Unguarded_
	mov	ecx, DWORD PTR [r9]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	jne	SHORT $LN20@Unguarded_
$LN177@Unguarded_:

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

	cmp	r8w, dx
	jb	SHORT $LN195@Unguarded_
	movzx	eax, WORD PTR [r9+6]
	movzx	ecx, WORD PTR [rbx+6]
	cmp	cx, ax
	ja	SHORT $LN195@Unguarded_
	jb	SHORT $LN178@Unguarded_
	mov	ecx, DWORD PTR [r9]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	ecx, eax
	setb	al
	test	al, al
	jne	SHORT $LN195@Unguarded_
$LN178@Unguarded_:

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

	mov	rcx, QWORD PTR [r9]
	mov	rdx, r10
	add	r10, 8
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [r9], rax
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

	add	r9, 8
	cmp	r9, rsi
	jb	$LL21@Unguarded_
$LN195@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

	cmp	r11, rbp
	jbe	$LN200@Unguarded_
	lea	rdx, QWORD PTR [r11-2]
	npad	10
$LL14@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

	movzx	r8d, WORD PTR [rdx-2]
	movzx	edi, WORD PTR [rbx+4]
	cmp	di, r8w
	ja	SHORT $LN13@Unguarded_
	jb	SHORT $LN196@Unguarded_
	movzx	eax, WORD PTR [rdx]
	movzx	ecx, WORD PTR [rbx+6]
	cmp	cx, ax
	ja	SHORT $LN13@Unguarded_
	jb	SHORT $LN179@Unguarded_
	mov	ecx, DWORD PTR [rdx-6]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	ecx, eax
	setb	al
	test	al, al
	jne	SHORT $LN13@Unguarded_
$LN179@Unguarded_:

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

	cmp	di, r8w
	jb	SHORT $LN196@Unguarded_
	movzx	eax, WORD PTR [rbx+6]
	movzx	ecx, WORD PTR [rdx]
	cmp	cx, ax
	ja	SHORT $LN196@Unguarded_
	jb	SHORT $LN180@Unguarded_
	mov	ecx, DWORD PTR [rdx-6]
	mov	eax, DWORD PTR [rbx]
	and	eax, 1073741823				; 3fffffffH
	and	ecx, 1073741823				; 3fffffffH
	cmp	eax, ecx
	setb	al
	test	al, al
	jne	SHORT $LN196@Unguarded_
$LN180@Unguarded_:

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

	mov	rcx, QWORD PTR [rdx-6]
	mov	rax, QWORD PTR [rbx-8]
	sub	rbx, 8
	mov	QWORD PTR [rbx], rcx
	mov	QWORD PTR [rdx-6], rax
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

	sub	r11, 8
	sub	rdx, 8
	cmp	rbp, r11
	jb	$LL14@Unguarded_
$LN196@Unguarded_:

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	r11, rbp
$LN200@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	r9, rsi
	je	SHORT $LN168@Unguarded_

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));
; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

	cmp	r10, r9
	je	SHORT $LN112@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

	mov	rcx, QWORD PTR [r10]
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rbx], rcx
	mov	QWORD PTR [r10], rax
$LN112@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

	mov	r8, r9
	mov	rdx, rbx
	add	r10, 8
	mov	rcx, QWORD PTR [r8]
	mov	rax, QWORD PTR [rdx]
	add	rbx, 8
	mov	QWORD PTR [rdx], rcx
	mov	QWORD PTR [r8], rax
	add	r9, 8
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

	sub	r11, 8
	cmp	r9, rsi
	jne	SHORT $LN3@Unguarded_
	sub	rbx, 8
	cmp	r11, rbx
	je	SHORT $LN132@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [r11]
	mov	QWORD PTR [r11], rcx
	mov	QWORD PTR [rbx], rax
$LN132@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

	mov	rcx, QWORD PTR [r10-8]
	mov	rax, QWORD PTR [rbx]
	sub	r10, 8
	mov	QWORD PTR [rbx], rcx
	mov	QWORD PTR [r10], rax

; 3761 : 			}
; 3762 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

	mov	rax, QWORD PTR [r9]
	mov	rcx, QWORD PTR [r11]
	add	r9, 8
	mov	QWORD PTR [r9-8], rcx
	mov	QWORD PTR [r11], rax

; 3764 : 		}

	jmp	$LL23@Unguarded_
$LN168@Unguarded_:

; 3765 : 	}

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	mov	QWORD PTR [r12], rbx
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [r12+8], r10
	mov	rax, r12
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z ENDP ; std::_Unguarded_partition<CDB::edge * __ptr64,CDB::sort_predicate>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@IAEBI@std@@YAXPEAIAEBI@Z
_TEXT	SEGMENT
_Ptr$ = 8
_Val$ = 16
??$_Construct@IAEBI@std@@YAXPEAIAEBI@Z PROC		; std::_Construct<unsigned int,unsigned int const & __ptr64>, COMDAT

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	test	rcx, rcx
	je	SHORT $LN3@Construct@3
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
$LN3@Construct@3:

; 49   : 	}

	fatret	0
??$_Construct@IAEBI@std@@YAXPEAIAEBI@Z ENDP		; std::_Construct<unsigned int,unsigned int const & __ptr64>
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?construct@?$xalloc@I@@QEAAXPEAIAEBI@Z
_TEXT	SEGMENT
p$ = 8
_Val$ = 16
?construct@?$xalloc@I@@QEAAXPEAIAEBI@Z PROC		; xalloc<unsigned int>::construct, COMDAT

; 84   : 							void					construct		(pointer p, const T& _Val)				{	std::_Construct(p, _Val);	}

	test	rcx, rcx
	je	SHORT $LN5@construct@2
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
$LN5@construct@2:
	fatret	0
?construct@?$xalloc@I@@QEAAXPEAIAEBI@Z ENDP		; xalloc<unsigned int>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$xalloc@I@@IAEBI@std@@YAXAEAV?$xalloc@I@@PEAIAEBI@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@I@@IAEBI@std@@YAXAEAV?$xalloc@I@@PEAIAEBI@Z PROC ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int const & __ptr64>, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
$LN9@Cons_val:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@I@@IAEBI@std@@YAXAEAV?$xalloc@I@@PEAIAEBI@Z ENDP ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int const & __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$xalloc@I@@IAEAI@std@@YAXAEAV?$xalloc@I@@PEAIAEAI@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@I@@IAEAI@std@@YAXAEAV?$xalloc@I@@PEAIAEAI@Z PROC ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int & __ptr64>, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val@2
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
$LN9@Cons_val@2:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@I@@IAEAI@std@@YAXAEAV?$xalloc@I@@PEAIAEAI@Z ENDP ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int & __ptr64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Z?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
??Z?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-=, COMDAT

; 370  : 		return (*this += -_Off);

	add	QWORD PTR [rcx], -24
	mov	rax, rcx

; 371  : 		}

	ret	0
??Z?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Count$ = 16
?_Grow_to@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_K_K@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Grow_to, COMDAT

; 1275 : 		size_type _Capacity = capacity();

	mov	r8, QWORD PTR [rcx+16]
	mov	r9, rdx
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	r8, QWORD PTR [rcx]
	imul	r8
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	rax, 768614336404564650			; 0aaaaaaaaaaaaaaaH
	mov	rcx, rdx
	shr	rcx, 1
	sub	rax, rcx
	cmp	rax, rdx
	jae	SHORT $LN4@Grow_to
	xor	edx, edx

; 1279 : 		if (_Capacity < _Count)

	cmp	rdx, r9
	cmovb	rdx, r9

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	rax, rdx

; 1282 : 		}

	ret	0
$LN4@Grow_to:

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	add	rdx, rcx

; 1279 : 		if (_Capacity < _Count)

	cmp	rdx, r9
	cmovb	rdx, r9

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	rax, rdx

; 1282 : 		}

	ret	0
?_Grow_to@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEBA_K_K@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Grow_to
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Count$ = 16
?_Grow_to@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_K_K@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Grow_to, COMDAT

; 1275 : 		size_type _Capacity = capacity();

	mov	r8, QWORD PTR [rcx+16]
	mov	r9, rdx
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	r8, QWORD PTR [rcx]
	imul	r8
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	rax, 1537228672809129301		; 1555555555555555H
	mov	rcx, rdx
	shr	rcx, 1
	sub	rax, rcx
	cmp	rax, rdx
	jae	SHORT $LN4@Grow_to@2
	xor	edx, edx

; 1279 : 		if (_Capacity < _Count)

	cmp	rdx, r9
	cmovb	rdx, r9

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	rax, rdx

; 1282 : 		}

	ret	0
$LN4@Grow_to@2:

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	add	rdx, rcx

; 1279 : 		if (_Capacity < _Count)

	cmp	rdx, r9
	cmovb	rdx, r9

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	rax, rdx

; 1282 : 		}

	ret	0
?_Grow_to@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEBA_K_K@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Grow_to
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@IV?$xalloc@I@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Count$ = 16
?_Grow_to@?$vector@IV?$xalloc@I@@@std@@IEBA_K_K@Z PROC	; std::vector<unsigned int,xalloc<unsigned int> >::_Grow_to, COMDAT

; 1275 : 		size_type _Capacity = capacity();

	mov	r8, QWORD PTR [rcx+16]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	sub	r8, QWORD PTR [rcx]
	sar	r8, 2
	mov	rcx, r8
	shr	rcx, 1
	sub	rax, rcx
	cmp	rax, r8
	jae	SHORT $LN4@Grow_to@3
	xor	r8d, r8d

; 1279 : 		if (_Capacity < _Count)

	cmp	r8, rdx
	cmovb	r8, rdx

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	rax, r8

; 1282 : 		}

	ret	0
$LN4@Grow_to@3:

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	add	r8, rcx

; 1279 : 		if (_Capacity < _Count)

	cmp	r8, rdx
	cmovb	r8, rdx

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

	mov	rax, r8

; 1282 : 		}

	ret	0
?_Grow_to@?$vector@IV?$xalloc@I@@@std@@IEBA_K_K@Z ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::_Grow_to
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??G?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-, COMDAT

; 375  : 		_Myiter _Tmp = *this;
; 376  : 		return (_Tmp -= _Off);

	mov	rax, QWORD PTR [rcx]
	sub	rax, 24
	mov	QWORD PTR [rdx], rax
	mov	rax, rdx

; 377  : 		}

	ret	0
??G?$_Vector_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator-, COMDAT

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

	mov	r8, QWORD PTR [rcx]
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	r8, QWORD PTR [rdx]
	imul	r8
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rax, rdx

; 193  : 		}

	ret	0
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++, COMDAT

; 332  : 		++*(_Mybase *)this;

	add	QWORD PTR [rcx], 12

; 333  : 		return (*this);

	mov	rax, rcx

; 334  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@I@@QEBAPEAI_KPEBX@Z
_TEXT	SEGMENT
n$ = 8
?allocate@?$xalloc@I@@QEBAPEAI_KPEBX@Z PROC		; xalloc<unsigned int>::allocate, COMDAT

; 80   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	edx, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 2
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
?allocate@?$xalloc@I@@QEBAPEAI_KPEBX@Z ENDP		; xalloc<unsigned int>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA_JAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA_JAEBV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-, COMDAT

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

	mov	r8, QWORD PTR [rcx]
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	r8, QWORD PTR [rdx]
	imul	r8
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rax, rdx

; 193  : 		}

	ret	0
??G?$_Vector_const_iterator@V?$_Vector_val@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@@std@@QEBA_JAEBV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<CDB::TRI,xalloc<CDB::TRI> > >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator-, COMDAT

; 381  : 		return (*(_Mybase *)this - _Right);

	mov	r8, QWORD PTR [rcx]
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	r8, QWORD PTR [rdx]
	imul	r8
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rax, rdx

; 382  : 		}

	ret	0
??G?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBA_JAEBV?$_Vector_const_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++, COMDAT

; 338  : 		_Myiter _Tmp = *this;

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 339  : 		++*this;

	add	rax, 12
	mov	QWORD PTR [rcx], rax

; 340  : 		return (_Tmp);

	mov	rax, rdx

; 341  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAPEAU?$_vector3@M@@XZ
_TEXT	SEGMENT
this$ = 8
??C?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAPEAU?$_vector3@M@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator->, COMDAT

; 327  : 		return (&**this);

	mov	rax, QWORD PTR [rcx]

; 328  : 		}

	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@@std@@QEBAPEAU?$_vector3@M@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_vector3<float>,xalloc<_vector3<float> > > >::operator->
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pop_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?pop_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXXZ PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::pop_back, COMDAT

; 1017 : 		if (!empty())

	mov	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx], rax
	je	SHORT $LN1@pop_back

; 1018 : 			{	// erase last element
; 1019 : 			_Dest_val(this->_Alval,
; 1020 : 				this->_Mylast - 1);
; 1021 : 			--this->_Mylast;

	add	rax, -24
	mov	QWORD PTR [rcx+8], rax
$LN1@pop_back:

; 1022 : 			}
; 1023 : 		}

	fatret	0
?pop_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXXZ ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::pop_back
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@@QEAAAEAVTRI@CDB@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$xr_vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@@QEAAAEAVTRI@CDB@@_K@Z PROC ; xr_vector<CDB::TRI,xalloc<CDB::TRI> >::operator[], COMDAT

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	mov	rax, QWORD PTR [rcx]
	lea	rdx, QWORD PTR [rdx+rdx*2]
	lea	rax, QWORD PTR [rax+rdx*8]
	ret	0
??A?$xr_vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@@QEAAAEAVTRI@CDB@@_K@Z ENDP ; xr_vector<CDB::TRI,xalloc<CDB::TRI> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAAAEAU?$_vector3@M@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$xr_vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAAAEAU?$_vector3@M@@_K@Z PROC ; xr_vector<_vector3<float>,xalloc<_vector3<float> > >::operator[], COMDAT

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	mov	rax, QWORD PTR [rcx]
	lea	rdx, QWORD PTR [rdx+rdx*2]
	lea	rax, QWORD PTR [rax+rdx*4]
	ret	0
??A?$xr_vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@@QEAAAEAU?$_vector3@M@@_K@Z ENDP ; xr_vector<_vector3<float>,xalloc<_vector3<float> > >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@IV?$xalloc@I@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$vector@IV?$xalloc@I@@@std@@QEAA@XZ PROC		; std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >, COMDAT

; 507  : 		{	// construct empty vector

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 508  : 		}

	mov	rax, rcx
	ret	0
??0?$vector@IV?$xalloc@I@@@std@@QEAA@XZ ENDP		; std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
_Parg$ = 16
??0?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >, COMDAT

; 304  : 		{	// construct with pointer _Parg

	mov	QWORD PTR [rcx], rdx

; 305  : 		}

	mov	rax, rcx
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator!=, COMDAT

; 208  : 		return (!(*this == _Right));

	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx], rdx
	setne	al

; 209  : 		}

	ret	0
??9?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ PROC ; std::vector<unsigned int,xalloc<unsigned int> >::end, COMDAT

; 792  : 		return (iterator(this->_Mylast, this));

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rdx], rax
	mov	rax, rdx

; 793  : 		}

	ret	0
?end@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
_Off$ = 24
??H?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+, COMDAT

; 364  : 		_Myiter _Tmp = *this;
; 365  : 		return (_Tmp += _Off);

	mov	rax, QWORD PTR [rcx]
	lea	rcx, QWORD PTR [rax+r8*4]
	mov	rax, rdx
	mov	QWORD PTR [rdx], rcx

; 366  : 		}

	ret	0
??H?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned int,xalloc<unsigned int> > >::operator+
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@IV?$xalloc@I@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Where$ = 16
?_Make_iter@?$vector@IV?$xalloc@I@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Make_iter, COMDAT

; 802  : 		return (iterator(_Where._Ptr, this));

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx

; 803  : 		}

	ret	0
?_Make_iter@?$vector@IV?$xalloc@I@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Make_iter
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z DD imagerel $LN7
	DD	imagerel $LN7+41
	DD	imagerel $unwind$??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z
_TEXT	SEGMENT
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Val$ = 88
_Pred$ = 96
??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z PROC ; std::_Pop_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

$LN7:
	sub	rsp, 56					; 00000038H

; 2592 : 	*_Dest = _Move(*_First);

	mov	rax, QWORD PTR [rcx]

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

	sub	rdx, rcx
	mov	QWORD PTR [r8], rax
	movzx	eax, BYTE PTR _Pred$[rsp]
	sar	rdx, 3
	mov	r8, rdx
	xor	edx, edx
	mov	BYTE PTR [rsp+32], al
	call	??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ; std::_Adjust_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>

; 2595 : 	}

	add	rsp, 56					; 00000038H
	ret	0
??$_Pop_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@00$$QEAU12@Usort_predicate@2@PEA_J@Z ENDP ; std::_Pop_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD imagerel $LN15
	DD	imagerel $LN15+56
	DD	imagerel $unwind$??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z
_TEXT	SEGMENT
_Val$ = 64
_First$ = 64
_Last$ = 72
_Pred$ = 80
??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z PROC ; std::_Pop_heap_0<CDB::edge * __ptr64,CDB::edge,CDB::sort_predicate>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

$LN15:
	sub	rsp, 56					; 00000038H

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

	mov	rax, QWORD PTR [rdx-8]

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

	mov	BYTE PTR [rsp+32], r8b
	lea	r9, QWORD PTR _Val$[rsp]
	mov	QWORD PTR _Val$[rsp], rax
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx-8], rax
	sub	rdx, rcx
	sub	rdx, 8
	sar	rdx, 3
	mov	r8, rdx
	xor	edx, edx
	call	??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ; std::_Adjust_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>

; 2605 : 	}

	add	rsp, 56					; 00000038H
	ret	0
??$_Pop_heap_0@PEAUedge@CDB@@U12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z ENDP ; std::_Pop_heap_0<CDB::edge * __ptr64,CDB::edge,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel $LN32
	DD	imagerel $LN32+55
	DD	imagerel $unwind$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD imagerel ?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+23
	DD	imagerel $unwind$?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel ??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z+16
	DD	00H
	DD	imagerel ??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z+50
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	05H
	DD	imagerel $ip2state$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata	ENDS
;	COMDAT ??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T134761 = 32
_First$ = 64
_Count$ = 72
_Pval$ = 80
??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>, COMDAT

; 558  : 	{	// copy _Count * *_Pval to raw _First, using _Al, arbitrary type

$LN32:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T134761[rsp], -2
	npad	3
$LL6@Uninit_fil:

; 559  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 560  : //	if (_Count < 0)
; 561  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 562  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 563  : 
; 564  : 	_FwdIt _Next = _First;
; 565  : 
; 566  : 	_TRY_BEGIN
; 567  : 	for (; 0 < _Count; --_Count, ++_First)

	test	rdx, rdx
	je	SHORT $LN4@Uninit_fil

; 568  : 		_Cons_val(_Al, _First, *_Pval);

	test	rcx, rcx
	je	SHORT $LN22@Uninit_fil
	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rcx], eax
$LN22@Uninit_fil:

; 559  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 560  : //	if (_Count < 0)
; 561  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 562  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 563  : 
; 564  : 	_FwdIt _Next = _First;
; 565  : 
; 566  : 	_TRY_BEGIN
; 567  : 	for (; 0 < _Count; --_Count, ++_First)

	dec	rdx
	mov	QWORD PTR _Count$[rsp], rdx
	add	rcx, 4
	mov	QWORD PTR _First$[rsp], rcx
	jmp	SHORT $LL6@Uninit_fil
$LN4@Uninit_fil:

; 569  : 	_CATCH_ALL
; 570  : 	for (; _Next != _First; ++_Next)
; 571  : 		_Dest_val(_Al, _Next);
; 572  : 	_RERAISE;
; 573  : 	_CATCH_END
; 574  : 	}

	add	rsp, 56					; 00000038H
	ret	0
$LN31@Uninit_fil:
??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T134761 = 32
_First$ = 64
_Count$ = 72
_Pval$ = 80
?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA PROC ; `std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>'::`1'::catch$0

; 569  : 	_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 570  : 	for (; _Next != _First; ++_Next)
; 571  : 		_Dest_val(_Al, _Next);
; 572  : 	_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA ENDP ; `std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>'::`1'::catch$0
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
text$x	ENDS
;	COMDAT ??$_Cons_val@V?$xalloc@I@@II@std@@YAXAEAV?$xalloc@I@@PEAI$$QEAI@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@I@@II@std@@YAXAEAV?$xalloc@I@@PEAI$$QEAI@Z PROC ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int>, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val@12
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
$LN9@Cons_val@12:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@I@@II@std@@YAXAEAV?$xalloc@I@@PEAI$$QEAI@Z ENDP ; std::_Cons_val<xalloc<unsigned int>,unsigned int,unsigned int>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN23
	DD	imagerel $LN23+56
	DD	imagerel $unwind$??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
_TEXT	SEGMENT
_Val$134864 = 64
_First$ = 64
_Last$ = 72
_Pred$ = 80
??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z PROC ; std::_Pop_heap<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

$LN23:
	sub	rsp, 56					; 00000038H

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

	mov	rax, QWORD PTR [rdx-8]
	mov	BYTE PTR [rsp+32], r8b
	lea	r9, QWORD PTR _Val$134864[rsp]
	mov	QWORD PTR _Val$134864[rsp], rax
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx-8], rax
	sub	rdx, rcx
	sub	rdx, 8
	sar	rdx, 3
	mov	r8, rdx
	xor	edx, edx
	call	??$_Adjust_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@_J1$$QEAU12@Usort_predicate@2@@Z ; std::_Adjust_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>

; 2613 : 	}

	add	rsp, 56					; 00000038H
	ret	0
??$_Pop_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ENDP ; std::_Pop_heap<CDB::edge * __ptr64,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
pdata	SEGMENT
$pdata$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Count$ = 56
_Pval$ = 64
??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>, COMDAT

; 584  : 	{	// copy _Count * *_Pval to raw _First, using _Al, arbitrary type

$LN3:
	sub	rsp, 40					; 00000028H

; 585  : 	_Uninit_fill_n(_First, _Count,
; 586  : 		_Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());

	call	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>

; 587  : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$xalloc@VTRI@CDB@@@@VTRI@CDB@@V23@@std@@YAXAEAV?$xalloc@VTRI@CDB@@@@PEAVTRI@CDB@@$$QEAV23@@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@VTRI@CDB@@@@VTRI@CDB@@V23@@std@@YAXAEAV?$xalloc@VTRI@CDB@@@@PEAVTRI@CDB@@$$QEAV23@@Z PROC ; std::_Cons_val<xalloc<CDB::TRI>,CDB::TRI,CDB::TRI>, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val@13
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rcx+16], rax
$LN9@Cons_val@13:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@VTRI@CDB@@@@VTRI@CDB@@V23@@std@@YAXAEAV?$xalloc@VTRI@CDB@@@@PEAVTRI@CDB@@$$QEAV23@@Z ENDP ; std::_Cons_val<xalloc<CDB::TRI>,CDB::TRI,CDB::TRI>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z
_TEXT	SEGMENT
_Pdest$ = 8
_Src$ = 16
??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z PROC ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> >, COMDAT

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	test	rcx, rcx
	je	SHORT $LN9@Cons_val@14
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax
$LN9@Cons_val@14:

; 281  : 	}

	fatret	0
??$_Cons_val@V?$xalloc@U?$_vector3@M@@@@U?$_vector3@M@@U2@@std@@YAXAEAV?$xalloc@U?$_vector3@M@@@@PEAU?$_vector3@M@@$$QEAU2@@Z ENDP ; std::_Cons_val<xalloc<_vector3<float> >,_vector3<float>,_vector3<float> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel $LN32
	DD	imagerel $LN32+59
	DD	imagerel $unwind$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD imagerel ?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+23
	DD	imagerel $unwind$?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel ??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z+16
	DD	00H
	DD	imagerel ??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z+51
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	05H
	DD	imagerel $ip2state$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata	ENDS
;	COMDAT ??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T135052 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

$LN32:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T135052[rsp], -2
	npad	3
$LL6@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	rcx, rdx
	je	SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	mov	eax, DWORD PTR [rcx]
	test	r8, r8
	je	SHORT $LN22@Uninit_mov
	mov	DWORD PTR [r8], eax
$LN22@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	add	r8, 4
	mov	QWORD PTR _Dest$[rsp], r8
	add	rcx, 4
	mov	QWORD PTR _First$[rsp], rcx
	jmp	SHORT $LL6@Uninit_mov
$LN4@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

	mov	rax, r8

; 438  : 	}

	add	rsp, 56					; 00000038H
	ret	0
$LN31@Uninit_mov:
??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T135052 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA PROC ; `std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>'::`1'::catch$0

; 432  : 	_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA ENDP ; `std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>'::`1'::catch$0
text$x	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN74
	DD	imagerel $LN74+27
	DD	imagerel $unwind$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN74+27
	DD	imagerel $LN74+386
	DD	imagerel $chain$3$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN74+386
	DD	imagerel $LN74+391
	DD	imagerel $chain$4$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 021H
	DD	imagerel $LN74
	DD	imagerel $LN74+27
	DD	imagerel $unwind$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 081b21H
	DD	0741bH
	DD	05640fH
	DD	04540aH
	DD	033405H
	DD	imagerel $LN74
	DD	imagerel $LN74+27
	DD	imagerel $unwind$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 010401H
	DD	0204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
_TEXT	SEGMENT
_Val$135296 = 16
_First$ = 16
_Last$ = 24
_Pred$ = 32
??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z PROC ; std::_Sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

$LN74:
	sub	rsp, 8

; 2701 : 	for (; 1 < _Last - _First; --_Last)

	mov	rax, rdx
	mov	r9, rcx
	sub	rax, rcx
	and	rax, -8
	cmp	rax, 8
	jle	$LN1@Sort_heap
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	mov	QWORD PTR [rsp+40], rsi
	mov	rbp, rcx
	mov	esi, 8
	mov	QWORD PTR [rsp], rdi
	neg	rbp
	sub	rsi, rcx
	lea	rdi, QWORD PTR [rdx-8]
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

	mov	rcx, QWORD PTR [rdi]
	mov	rax, QWORD PTR [r9]
	lea	r10, QWORD PTR [rdi+rbp]
	sar	r10, 3
	mov	r8d, 2
	xor	ebx, ebx
	mov	QWORD PTR _Val$135296[rsp], rcx
	mov	QWORD PTR [rdi], rax
	cmp	r8, r10
	jge	SHORT $LN73@Sort_heap
	npad	13
$LL32@Sort_heap:
	movzx	eax, WORD PTR [r9+r8*8+4]
	movzx	edx, WORD PTR [r9+r8*8-4]
	cmp	dx, ax
	ja	SHORT $LN68@Sort_heap
	jb	SHORT $LN29@Sort_heap
	movzx	eax, WORD PTR [r9+r8*8+6]
	movzx	edx, WORD PTR [r9+r8*8-2]
	cmp	dx, ax
	ja	SHORT $LN68@Sort_heap
	jb	SHORT $LN29@Sort_heap
	mov	edx, DWORD PTR [r9+r8*8-8]
	mov	eax, DWORD PTR [r9+r8*8]
	and	eax, 1073741823				; 3fffffffH
	and	edx, 1073741823				; 3fffffffH
	cmp	eax, edx
	setb	al
	test	al, al
	je	SHORT $LN29@Sort_heap
$LN68@Sort_heap:
	dec	r8
$LN29@Sort_heap:
	mov	rax, QWORD PTR [r9+r8*8]
	mov	QWORD PTR [r9+rbx*8], rax
	mov	rbx, r8
	lea	r8, QWORD PTR [r8+r8+2]
	cmp	r8, r10
	jl	SHORT $LL32@Sort_heap
$LN73@Sort_heap:
	jne	SHORT $LN28@Sort_heap
	mov	rax, QWORD PTR [r9+r10*8-8]
	mov	QWORD PTR [r9+rbx*8], rax
	lea	rbx, QWORD PTR [r10-1]
$LN28@Sort_heap:
	lea	rax, QWORD PTR [rbx-1]
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r8, rax
	test	rbx, rbx
	jle	SHORT $LN72@Sort_heap
	movzx	r10d, WORD PTR _Val$135296[rsp+6]
	movzx	r11d, WORD PTR _Val$135296[rsp+4]
	npad	6
$LL49@Sort_heap:
	movzx	edx, WORD PTR [r9+r8*8+4]
	cmp	r11w, dx
	ja	SHORT $LN69@Sort_heap
	jb	SHORT $LN72@Sort_heap
	movzx	eax, WORD PTR [r9+r8*8+6]
	cmp	r10w, ax
	ja	SHORT $LN69@Sort_heap
	jb	SHORT $LN72@Sort_heap
	mov	edx, DWORD PTR [r9+r8*8]
	mov	eax, ecx
	and	eax, 1073741823				; 3fffffffH
	and	edx, 1073741823				; 3fffffffH
	cmp	edx, eax
	setb	al
	test	al, al
	je	SHORT $LN72@Sort_heap
$LN69@Sort_heap:
	mov	rax, QWORD PTR [r9+r8*8]
	mov	QWORD PTR [r9+rbx*8], rax
	lea	rax, QWORD PTR [r8-1]
	mov	rbx, r8
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r8, rax
	test	rbx, rbx
	jg	SHORT $LL49@Sort_heap
$LN72@Sort_heap:

; 2701 : 	for (; 1 < _Last - _First; --_Last)

	sub	rdi, 8

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

	mov	QWORD PTR [r9+rbx*8], rcx
	lea	rax, QWORD PTR [rsi+rdi]
	and	rax, -8
	cmp	rax, 8
	jg	$LL3@Sort_heap
	mov	rdi, QWORD PTR [rsp]
	mov	rsi, QWORD PTR [rsp+40]
	mov	rbp, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+24]
$LN1@Sort_heap:

; 2703 : 	}

	add	rsp, 8
	ret	0
??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ENDP ; std::_Sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PEAI_KIV?$xalloc@I@@@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@@Z
_TEXT	SEGMENT
_First$ = 8
_Count$ = 16
_Pval$ = 24
??$_Uninitialized_fill_n@PEAI_KIV?$xalloc@I@@@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@@Z PROC ; std::_Uninitialized_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int> >, COMDAT

; 607  : 	_Uninit_fill_n(_First, _Count, _Pval, _Al,
; 608  : 		_Val_type(_First), _Ptr_cat(_First, _First));
; 609  : 	}

	jmp	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>
??$_Uninitialized_fill_n@PEAI_KIV?$xalloc@I@@@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@@Z ENDP ; std::_Uninitialized_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel $LN32
	DD	imagerel $LN32+76
	DD	imagerel $unwind$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD imagerel ?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+23
	DD	imagerel $unwind$?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel ??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z+16
	DD	00H
	DD	imagerel ??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z+68
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	05H
	DD	imagerel $ip2state$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata	ENDS
;	COMDAT ??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T135479 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

$LN32:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T135479[rsp], -2
	npad	3
$LL6@Uninit_mov@2:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	rcx, rdx
	je	SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	test	r8, r8
	je	SHORT $LN22@Uninit_mov@2
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [r8+8], rax
	mov	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR [r8+16], rax
$LN22@Uninit_mov@2:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	add	r8, 24
	mov	QWORD PTR _Dest$[rsp], r8
	add	rcx, 24
	mov	QWORD PTR _First$[rsp], rcx
	jmp	SHORT $LL6@Uninit_mov@2
$LN4@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

	mov	rax, r8

; 438  : 	}

	add	rsp, 56					; 00000038H
	ret	0
$LN31@Uninit_mov@2:
??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T135479 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA PROC ; `std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>'::`1'::catch$0

; 432  : 	_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA ENDP ; `std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>'::`1'::catch$0
text$x	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel $LN32
	DD	imagerel $LN32+67
	DD	imagerel $unwind$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD imagerel ?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+23
	DD	imagerel $unwind$?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD imagerel ??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z+16
	DD	00H
	DD	imagerel ??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z+59
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	05H
	DD	imagerel $ip2state$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata	ENDS
;	COMDAT ??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T135570 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

$LN32:
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T135570[rsp], -2
	npad	3
$LL6@Uninit_mov@3:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	rcx, rdx
	je	SHORT $LN4@Uninit_mov@3

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	test	r8, r8
	je	SHORT $LN22@Uninit_mov@3
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r8+8], eax
$LN22@Uninit_mov@3:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	add	r8, 12
	mov	QWORD PTR _Dest$[rsp], r8
	add	rcx, 12
	mov	QWORD PTR _First$[rsp], rcx
	jmp	SHORT $LL6@Uninit_mov@3
$LN4@Uninit_mov@3:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

	mov	rax, r8

; 438  : 	}

	add	rsp, 56					; 00000038H
	ret	0
$LN31@Uninit_mov@3:
??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T135570 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA PROC ; `std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >'::`1'::catch$0

; 432  : 	_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0???$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z@4HA ENDP ; `std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >'::`1'::catch$0
text$x	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>, COMDAT

; 446  : 	{	// move [_First, _Last) to raw _Dest, using _Al, scalar type

$LN3:
	sub	rsp, 40					; 00000028H

; 447  : 	return (_Uninit_move(_First, _Last, _Dest,
; 448  : 		_Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));

	call	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>

; 449  : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN7
	DD	imagerel $LN7+14
	DD	imagerel $unwind$??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Pred$ = 64
??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z PROC ; std::sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

$LN7:
	sub	rsp, 40					; 00000028H

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

	call	??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::_Sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>

; 2713 : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ENDP ; std::sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
pdata	SEGMENT
$pdata$?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z DD imagerel $LN11
	DD	imagerel $LN11+36
	DD	imagerel $unwind$?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Count$ = 56
_Pval$ = 64
?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Ufill, COMDAT

; 1420 : 		{	// copy initializing _Count * _Val, using allocator

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx

; 1421 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Alval);

	call	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>

; 1422 : 		return (_Ptr + _Count);

	lea	rax, QWORD PTR [rbx+rdi*4]

; 1423 : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Ufill@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI_KPEBI@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Ufill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Uninitialized_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@@Z PROC ; std::_Uninitialized_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI> >, COMDAT

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 472  : 	}

	jmp	??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>
??$_Uninitialized_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@@Z ENDP ; std::_Uninitialized_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Uninitialized_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@@Z PROC ; std::_Uninitialized_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> > >, COMDAT

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 472  : 	}

	jmp	??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >
??$_Uninitialized_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@@Z ENDP ; std::_Uninitialized_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_move@PEAIPEAIV?$xalloc@I@@@std@@YAPEAIPEAI00AEAV?$xalloc@I@@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Uninitialized_move@PEAIPEAIV?$xalloc@I@@@std@@YAPEAIPEAI00AEAV?$xalloc@I@@@Z PROC ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int> >, COMDAT

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 472  : 	}

	jmp	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
??$_Uninitialized_move@PEAIPEAIV?$xalloc@I@@@std@@YAPEAIPEAI00AEAV?$xalloc@I@@@Z ENDP ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int> >
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z DD imagerel $LN36
	DD	imagerel $LN36+305
	DD	imagerel $unwind$??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z DD 081901H
	DD	0a6419H
	DD	095419H
	DD	083419H
	DD	070155219H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z
_TEXT	SEGMENT
_Mid$97937 = 32
_First$ = 64
_Last$ = 72
_Ideal$ = 80
_Pred$ = 88
??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z PROC ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

$LN36:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	BYTE PTR [rsp+32], r9b
	push	rdi
	sub	rsp, 48					; 00000030H

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	rax, rdx
	mov	rsi, r8
	mov	rbx, rdx
	sub	rax, rcx
	mov	rdi, rcx
	sar	rax, 3
	cmp	rax, 32					; 00000020H
	jle	$LN3@Sort
$LL7@Sort:
	test	rsi, rsi
	jle	$LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

	lea	rcx, QWORD PTR _Mid$97937[rsp]
	mov	r8, rbx
	mov	rdx, rdi
	call	??$_Unguarded_partition@PEAUedge@CDB@@Usort_predicate@2@@std@@YA?AU?$pair@PEAUedge@CDB@@PEAU12@@0@PEAUedge@CDB@@0Usort_predicate@3@@Z ; std::_Unguarded_partition<CDB::edge * __ptr64,CDB::sort_predicate>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	rbp, QWORD PTR _Mid$97937[rsp+8]

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

	movzx	r9d, BYTE PTR _Pred$[rsp]
	mov	rax, rsi
	mov	rcx, rbx
	cdq
	sub	rcx, rbp
	sub	rax, rdx
	and	rcx, -8
	sar	rax, 1
	mov	rsi, rax
	cdq
	sub	rax, rdx
	mov	rdx, QWORD PTR _Mid$97937[rsp]
	sar	rax, 1
	add	rsi, rax
	mov	rax, rdx
	sub	rax, rdi
	mov	r8, rsi
	and	rax, -8
	cmp	rax, rcx
	jge	SHORT $LN5@Sort
	mov	rcx, rdi
	call	??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>

; 3782 : 			_First = _Mid.second;

	mov	rdi, rbp

; 3783 : 			}
; 3784 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

	mov	rdx, rbx
	mov	rcx, rbp
	call	??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>

; 3787 : 			_Last = _Mid.first;

	mov	rbx, QWORD PTR _Mid$97937[rsp]
$LN4@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	movzx	r9d, BYTE PTR _Pred$[rsp]
	mov	rax, rbx
	sub	rax, rdi
	sar	rax, 3
	cmp	rax, 32					; 00000020H
	jg	$LL7@Sort
$LN3@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

	cmp	rax, 1
	jle	SHORT $LN27@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

	movzx	r8d, r9b
	mov	rdx, rbx
	mov	rcx, rdi
	call	??$_Insertion_sort1@PEAUedge@CDB@@Usort_predicate@2@U12@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@0@Z ; std::_Insertion_sort1<CDB::edge * __ptr64,CDB::sort_predicate,CDB::edge>
$LN27@Sort:

; 3798 : 	}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN6@Sort:

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

	cmp	rax, 32					; 00000020H
	jle	SHORT $LN3@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

	mov	rax, rbx
	sub	rax, rdi
	and	rax, -8
	cmp	rax, 8
	jle	SHORT $LN10@Sort
	movzx	r8d, r9b
	mov	rdx, rbx
	mov	rcx, rdi
	call	??$_Make_heap@PEAUedge@CDB@@_JU12@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@PEA_J0@Z ; std::_Make_heap<CDB::edge * __ptr64,__int64,CDB::edge,CDB::sort_predicate>
	movzx	r9d, BYTE PTR _Pred$[rsp]
$LN10@Sort:

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

	movzx	r8d, r9b
	mov	rdx, rbx
	mov	rcx, rdi
	call	??$_Sort_heap@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ; std::_Sort_heap<CDB::edge * __ptr64,CDB::sort_predicate>
	jmp	SHORT $LN27@Sort
??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z ENDP ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??$_Umove@PEAVTRI@CDB@@@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAPEAVTRI@CDB@@PEAV23@00@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Ptr$ = 24
??$_Umove@PEAVTRI@CDB@@@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAPEAVTRI@CDB@@PEAV23@00@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Umove<CDB::TRI * __ptr64>, COMDAT

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));
; 1326 : 		}

	jmp	??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>
??$_Umove@PEAVTRI@CDB@@@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAPEAVTRI@CDB@@PEAV23@00@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Umove<CDB::TRI * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Umove@PEAU?$_vector3@M@@@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAPEAU?$_vector3@M@@PEAU2@00@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Ptr$ = 24
??$_Umove@PEAU?$_vector3@M@@@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAPEAU?$_vector3@M@@PEAU2@00@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Umove<_vector3<float> * __ptr64>, COMDAT

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));
; 1326 : 		}

	jmp	??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >
??$_Umove@PEAU?$_vector3@M@@@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAPEAU?$_vector3@M@@PEAU2@00@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Umove<_vector3<float> * __ptr64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Umove@PEAI@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI00@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Ptr$ = 24
??$_Umove@PEAI@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI00@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Umove<unsigned int * __ptr64>, COMDAT

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));
; 1326 : 		}

	jmp	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
??$_Umove@PEAI@?$vector@IV?$xalloc@I@@@std@@IEAAPEAIPEAI00@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Umove<unsigned int * __ptr64>
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD imagerel $LN7
	DD	imagerel $LN7+31
	DD	imagerel $unwind$??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata	ENDS
;	COMDAT ??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Pred$ = 64
??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z PROC ; std::sort<CDB::edge * __ptr64,CDB::sort_predicate>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

$LN7:
	sub	rsp, 40					; 00000028H

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

	mov	rax, rdx
	movzx	r9d, r8b
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	call	??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>

; 3807 : 	}

	add	rsp, 40					; 00000028H
	ret	0
??$sort@PEAUedge@CDB@@Usort_predicate@2@@std@@YAXPEAUedge@CDB@@0Usort_predicate@2@@Z ENDP ; std::sort<CDB::edge * __ptr64,CDB::sort_predicate>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAAEAVTRI@CDB@@XZ
_TEXT	SEGMENT
this$ = 8
?back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAAEAVTRI@CDB@@XZ PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::back, COMDAT

; 967  : 		return (*(end() - 1));

	mov	rax, QWORD PTR [rcx+8]
	sub	rax, 24

; 968  : 		}

	ret	0
?back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAAEAVTRI@CDB@@XZ ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::back
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD imagerel $LN48
	DD	imagerel $LN48+261
	DD	imagerel $unwind$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA DD imagerel ?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA+45
	DD	imagerel $unwind$?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD imagerel ?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z+142
	DD	00H
	DD	imagerel ?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z+158
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD 081e19H
	DD	0b741eH
	DD	0a6419H
	DD	083414H
	DD	0c0025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
	DD	05H
	DD	imagerel $ip2state$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T136037 = 32
this$ = 64
_Ptr$96164 = 72
_Count$ = 72
?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve, COMDAT

; 746  : 		{	// determine new minimum length of allocated storage

$LN48:
	push	r12
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T136037[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+88], rdi
	mov	rdi, rdx
	mov	rbx, rcx

; 747  : 		if (max_size() < _Count)

	mov	rax, 768614336404564650			; 0aaaaaaaaaaaaaaaH
	cmp	rdx, rax
	jbe	SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

	mov	rcx, QWORD PTR [rcx+16]
	sub	rcx, QWORD PTR [rbx]
	mov	r12, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	mov	rax, r12
	imul	rcx
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	cmp	rdx, rdi
	jae	$LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, edi
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 3
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rsi, rax
	mov	QWORD PTR _Ptr$96164[rsp], rax

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	r8, rax
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rbx]
	call	??$_Uninit_move@PEAVTRI@CDB@@PEAV12@V?$xalloc@VTRI@CDB@@@@V12@@std@@YAPEAVTRI@CDB@@PEAV12@00AEAV?$xalloc@VTRI@CDB@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CDB::TRI * __ptr64,CDB::TRI * __ptr64,xalloc<CDB::TRI>,CDB::TRI>
	npad	1

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

	mov	r8, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+8]
	sub	rcx, r8
	mov	rax, r12
	imul	rcx
	mov	r12, rdx
	sar	r12, 2
	mov	rax, r12
	shr	rax, 63					; 0000003fH
	add	r12, rax

; 761  : 			if (this->_Myfirst != 0)

	test	r8, r8
	je	SHORT $LN42@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	rdx, r8
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN42@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

	lea	rax, QWORD PTR [rdi+rdi*2]
	lea	rcx, QWORD PTR [rsi+rax*8]
	mov	QWORD PTR [rbx+16], rcx

; 770  : 			this->_Mylast = _Ptr + _Size;

	lea	rax, QWORD PTR [r12+r12*2]
	lea	rcx, QWORD PTR [rsi+rax*8]
	mov	QWORD PTR [rbx+8], rcx

; 771  : 			this->_Myfirst = _Ptr;

	mov	QWORD PTR [rbx], rsi
$LN3@reserve:

; 772  : 			}
; 773  : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r12
	ret	0
$LN47@reserve:
?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T136037 = 32
this$ = 64
_Ptr$96164 = 72
_Count$ = 72
?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA PROC ; `std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve'::`1'::catch$0

; 755  : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z$0:

; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	rdx, QWORD PTR _Ptr$96164[rbp]
	test	rdx, rdx
	je	SHORT $LN35@catch$0@4
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN35@catch$0@4:

; 757  : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0??reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z@4HA ENDP ; `std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve'::`1'::catch$0
text$x	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD imagerel $LN48
	DD	imagerel $LN48+255
	DD	imagerel $unwind$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA DD imagerel ?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA+45
	DD	imagerel $unwind$?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD imagerel ?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z+137
	DD	00H
	DD	imagerel ?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z+153
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD 081e19H
	DD	0b741eH
	DD	0a6419H
	DD	083414H
	DD	0c0025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
	DD	05H
	DD	imagerel $ip2state$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T136162 = 32
this$ = 64
_Ptr$95970 = 72
_Count$ = 72
?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve, COMDAT

; 746  : 		{	// determine new minimum length of allocated storage

$LN48:
	push	r12
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T136162[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+88], rdi
	mov	rdi, rdx
	mov	rbx, rcx

; 747  : 		if (max_size() < _Count)

	mov	rax, 1537228672809129301		; 1555555555555555H
	cmp	rdx, rax
	jbe	SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

	mov	rcx, QWORD PTR [rcx+16]
	sub	rcx, QWORD PTR [rbx]
	mov	r12, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	mov	rax, r12
	imul	rcx
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	cmp	rdx, rdi
	jae	SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, edi
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 2
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rsi, rax
	mov	QWORD PTR _Ptr$95970[rsp], rax

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	r8, rax
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rbx]
	call	??$_Uninit_move@PEAU?$_vector3@M@@PEAU1@V?$xalloc@U?$_vector3@M@@@@U1@@std@@YAPEAU?$_vector3@M@@PEAU1@00AEAV?$xalloc@U?$_vector3@M@@@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_vector3<float> * __ptr64,_vector3<float> * __ptr64,xalloc<_vector3<float> >,_vector3<float> >
	npad	1

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

	mov	r8, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+8]
	sub	rcx, r8
	mov	rax, r12
	imul	rcx
	mov	r12, rdx
	sar	r12, 1
	mov	rax, r12
	shr	rax, 63					; 0000003fH
	add	r12, rax

; 761  : 			if (this->_Myfirst != 0)

	test	r8, r8
	je	SHORT $LN42@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	rdx, r8
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN42@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

	lea	rax, QWORD PTR [rdi+rdi*2]
	lea	rcx, QWORD PTR [rsi+rax*4]
	mov	QWORD PTR [rbx+16], rcx

; 770  : 			this->_Mylast = _Ptr + _Size;

	lea	rax, QWORD PTR [r12+r12*2]
	lea	rcx, QWORD PTR [rsi+rax*4]
	mov	QWORD PTR [rbx+8], rcx

; 771  : 			this->_Myfirst = _Ptr;

	mov	QWORD PTR [rbx], rsi
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r12
	ret	0
$LN47@reserve@2:
?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T136162 = 32
this$ = 64
_Ptr$95970 = 72
_Count$ = 72
?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA PROC ; `std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve'::`1'::catch$0

; 755  : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z$0:

; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	rdx, QWORD PTR _Ptr$95970[rbp]
	test	rdx, rdx
	je	SHORT $LN35@catch$0@5
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN35@catch$0@5:

; 757  : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0??reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z@4HA ENDP ; `std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve'::`1'::catch$0
text$x	ENDS
PUBLIC	?remove_duplicate_T@Collector@CDB@@QEAAXXZ	; CDB::Collector::remove_duplicate_T
pdata	SEGMENT
$pdata$?remove_duplicate_T@Collector@CDB@@QEAAXXZ DD imagerel $LN131
	DD	imagerel $LN131+60
	DD	imagerel $unwind$?remove_duplicate_T@Collector@CDB@@QEAAXXZ
$pdata$4$?remove_duplicate_T@Collector@CDB@@QEAAXXZ DD imagerel $LN131+60
	DD	imagerel $LN131+309
	DD	imagerel $chain$4$?remove_duplicate_T@Collector@CDB@@QEAAXXZ
$pdata$5$?remove_duplicate_T@Collector@CDB@@QEAAXXZ DD imagerel $LN131+309
	DD	imagerel $LN131+318
	DD	imagerel $chain$5$?remove_duplicate_T@Collector@CDB@@QEAAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?remove_duplicate_T@Collector@CDB@@QEAAXXZ DD 040901H
	DD	0f0055209H
	DD	050026003H
$chain$4$?remove_duplicate_T@Collector@CDB@@QEAAXXZ DD 0a1921H
	DD	04e419H
	DD	05d414H
	DD	0cc40fH
	DD	0b740aH
	DD	0a3405H
	DD	imagerel $LN131
	DD	imagerel $LN131+60
	DD	imagerel $unwind$?remove_duplicate_T@Collector@CDB@@QEAAXXZ
$chain$5$?remove_duplicate_T@Collector@CDB@@QEAAXXZ DD 021H
	DD	imagerel $LN131
	DD	imagerel $LN131+60
	DD	imagerel $unwind$?remove_duplicate_T@Collector@CDB@@QEAAXXZ
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_collector.cpp
xdata	ENDS
_TEXT	SEGMENT
this$ = 80
?remove_duplicate_T@Collector@CDB@@QEAAXXZ PROC		; CDB::Collector::remove_duplicate_T

; 270  :     {

$LN131:
	push	rbp
	push	rsi
	push	r15
	sub	rsp, 48					; 00000030H

; 271  : 		for (u32 f=0; f<faces.size(); f++)

	mov	rdx, QWORD PTR [rcx+40]
	mov	r15, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	xor	ebp, ebp
	sub	rdx, QWORD PTR [rcx+32]
	mov	rax, r15
	mov	rsi, rcx
	imul	rdx
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	test	edx, edx
	je	$LN6@remove_dup
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+88], rdi
	mov	QWORD PTR [rsp+96], r12
	mov	QWORD PTR [rsp+40], r13
	mov	QWORD PTR [rsp+32], r14
	lea	r14d, QWORD PTR [rbp+24]
	npad	7
$LL8@remove_dup:

; 272  : 		{
; 273  : 			for (u32 t=f+1; t<faces.size();)

	lea	r13d, DWORD PTR [rbp+1]
	mov	ebx, r13d
	cmp	r13d, edx
	jae	$LN7@remove_dup
	mov	rdi, r14
$LL5@remove_dup:

; 274  : 			{
; 275  : 				if (t==f)	continue;

	cmp	ebx, ebp
	je	SHORT $LN1@remove_dup

; 276  :                 TRI& T1	= faces[f];
; 277  :                 TRI& T2	= faces[t];

	mov	r12, QWORD PTR [rsi+32]

; 278  :                 if (similar(T1,T2)){

	mov	eax, ebx
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	eax, ebp
	lea	rdx, QWORD PTR [r12+rcx*8]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rcx, QWORD PTR [r12+rcx*8]
	call	?similar@CDB@@YAHAEAVTRI@1@0@Z		; CDB::similar
	test	eax, eax
	je	SHORT $LN2@remove_dup

; 279  :                 	faces[t] = faces.back();

	mov	rax, QWORD PTR [rsi+40]
	mov	rcx, QWORD PTR [rax-24]
	mov	QWORD PTR [rdi+r12], rcx
	mov	rcx, QWORD PTR [rax-16]
	mov	QWORD PTR [rdi+r12+8], rcx
	mov	rcx, QWORD PTR [rax-8]
	mov	QWORD PTR [rdi+r12+16], rcx

; 280  :                     faces.pop_back();

	mov	rax, QWORD PTR [rsi+40]
	cmp	QWORD PTR [rsi+32], rax
	je	SHORT $LN1@remove_dup
	add	rax, -24
	mov	QWORD PTR [rsi+40], rax

; 281  :                 }else{

	jmp	SHORT $LN1@remove_dup
$LN2@remove_dup:

; 282  :                 	t++;

	inc	ebx
	add	rdi, 24
$LN1@remove_dup:

; 272  : 		{
; 273  : 			for (u32 t=f+1; t<faces.size();)

	mov	rcx, QWORD PTR [rsi+40]
	mov	rax, r15
	sub	rcx, QWORD PTR [rsi+32]
	imul	rcx
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	cmp	ebx, edx
	jb	SHORT $LL5@remove_dup
$LN7@remove_dup:

; 271  : 		for (u32 f=0; f<faces.size(); f++)

	mov	rcx, QWORD PTR [rsi+40]
	mov	rax, r15
	add	r14, 24
	sub	rcx, QWORD PTR [rsi+32]
	mov	ebp, r13d
	imul	rcx
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	cmp	r13d, edx
	jb	$LL8@remove_dup
	mov	r14, QWORD PTR [rsp+32]
	mov	r13, QWORD PTR [rsp+40]
	mov	r12, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
$LN6@remove_dup:

; 283  :                 }
; 284  :             }
; 285  :         }
; 286  :     }

	add	rsp, 48					; 00000030H
	pop	r15
	pop	rsi
	pop	rbp
	ret	0
?remove_duplicate_T@Collector@CDB@@QEAAXXZ ENDP		; CDB::Collector::remove_duplicate_T
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ PROC ; std::vector<unsigned int,xalloc<unsigned int> >::begin, COMDAT

; 782  : 		return (iterator(this->_Myfirst, this));

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax
	mov	rax, rdx

; 783  : 		}

	ret	0
?begin@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@XZ ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::begin
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z DD imagerel $LN42
	DD	imagerel $LN42+33
	DD	imagerel $unwind$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z DD imagerel $LN42+33
	DD	imagerel $LN42+103
	DD	imagerel $chain$0$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z DD imagerel $LN42+103
	DD	imagerel $LN42+125
	DD	imagerel $chain$1$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z DD 021H
	DD	imagerel $LN42
	DD	imagerel $LN42+33
	DD	imagerel $unwind$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z DD 020521H
	DD	063405H
	DD	imagerel $LN42
	DD	imagerel $LN42+33
	DD	imagerel $unwind$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_First_arg$ = 64
_Last_arg$ = 72
?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::erase, COMDAT

; 1190 : 		{	// erase [_First, _Last)

$LN42:
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

	cmp	r8, r9
	je	SHORT $LN40@erase@4

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rsp+48], rbx
	mov	rdx, r9
	sub	rax, r9
	mov	rcx, rdi
	sar	rax, 2
	lea	rbx, QWORD PTR [rax*4]
	mov	r8, rbx
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rbx+rdi]
	mov	rbx, QWORD PTR [rsp+48]

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

	mov	QWORD PTR [rbp+8], r11

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

	mov	QWORD PTR [rsi], rdi
	mov	rax, rsi

; 1214 : 		}

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN40@erase@4:
	mov	rbp, QWORD PTR [rsp+56]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rdx], r8
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?erase@?$vector@IV?$xalloc@I@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@0@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::erase
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD imagerel $LN170
	DD	imagerel $LN170+568
	DD	imagerel $unwind$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA DD imagerel ?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
	DD	imagerel ?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA+45
	DD	imagerel $unwind$?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA DD imagerel ?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
	DD	imagerel ?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA+23
	DD	imagerel $unwind$?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD imagerel ?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
	DD	0ffffffffH
	DD	imagerel ?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z+195
	DD	00H
	DD	imagerel ?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z+266
	DD	0ffffffffH
	DD	imagerel ?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z+371
	DD	02H
	DD	imagerel ?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z+404
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA+13
	DD	03H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 082819H
	DD	0c3428H
	DD	0e016521aH
	DD	0c012d014H
	DD	0600f7010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
	DD	02H
	DD	imagerel $tryMap$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
	DD	09H
	DD	imagerel $ip2state$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
	DD	028H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$1$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$1$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
_TEXT	SEGMENT
_Ncopied$98448 = 32
$T162874 = 40
this$ = 96
_Where$ = 104
_Tmp$98456 = 112
_Newvec$98446 = 112
_Count$ = 112
_Val$ = 120
?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n, COMDAT

; 1330 : 		{	// insert _Count * _Val at _Where

$LN170:

; 1331 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1332 : 		if (_VICONT(_Where) != this
; 1333 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1334 : 			|| this->_Mylast < _VIPTR(_Where))
; 1335 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1336 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1337 : 
; 1338 : 		if (_Count == 0)

	test	r8, r8
	je	$LN169@Insert_n

; 1330 : 		{	// insert _Count * _Val at _Where

	mov	QWORD PTR [rsp+16], rdx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T162874[rsp], -2
	mov	QWORD PTR [rsp+96], rbx
	mov	r14, r9
	mov	rbx, r8
	mov	rax, rdx
	mov	rdi, rcx

; 1339 : 			;
; 1340 : 		else if (max_size() - size() < _Count)

	mov	r13, QWORD PTR [rcx+8]
	mov	r10, QWORD PTR [rcx]
	mov	rcx, r13
	sub	rcx, r10
	sar	rcx, 2
	mov	r8, 4611686018427387903			; 3fffffffffffffffH
	mov	rdx, r8
	sub	rdx, rcx
	cmp	rdx, rbx
	jae	SHORT $LN11@Insert_n

; 1341 : 			_Xlen();	// result too long

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN11@Insert_n:

; 1342 : 		else if (capacity() < size() + _Count)

	lea	rdx, QWORD PTR [rcx+rbx]
	mov	rsi, QWORD PTR [rdi+16]
	sub	rsi, r10
	sar	rsi, 2
	cmp	rsi, rdx
	jae	$LN9@Insert_n

; 1343 : 			{	// not enough room, reallocate
; 1344 : 			size_type _Capacity = _Grow_to(size() + _Count);

	mov	rax, rsi
	shr	rax, 1
	sub	r8, rax
	cmp	r8, rsi
	jae	SHORT $LN42@Insert_n
	xor	esi, esi
	jmp	SHORT $LN43@Insert_n
$LN42@Insert_n:
	add	rsi, rax
$LN43@Insert_n:
	cmp	rsi, rdx
	cmovb	rsi, rdx

; 1345 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	edx, esi
	shl	rdx, 2
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	r12, rax
	mov	QWORD PTR _Newvec$98446[rsp], rax

; 1346 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;

	mov	r13, QWORD PTR _Where$[rsp]
	sub	r13, QWORD PTR [rdi]
	sar	r13, 2

; 1347 : 			int _Ncopied = 0;
; 1348 : 
; 1349 : 			_TRY_BEGIN
; 1350 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1351 : 				_STD addressof(_Val));	// add new stuff

	lea	rcx, QWORD PTR [rax+r13*4]
	mov	r8, r14
	mov	rdx, rbx
	call	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>

; 1352 : 			++_Ncopied;

	mov	DWORD PTR _Ncopied$98448[rsp], 1

; 1353 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1354 : 				_Newvec);	// copy prefix

	mov	r8, r12
	mov	rdx, QWORD PTR _Where$[rsp]
	mov	rcx, QWORD PTR [rdi]
	call	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>

; 1355 : 			++_Ncopied;

	mov	DWORD PTR _Ncopied$98448[rsp], 2

; 1356 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1357 : 				_Newvec + (_Whereoff + _Count));	// copy suffix

	lea	rax, QWORD PTR [r13+rbx]
	lea	r8, QWORD PTR [r12+rax*4]
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, QWORD PTR _Where$[rsp]
	call	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
	npad	1

; 1358 : 			_CATCH_ALL
; 1359 : 			if (1 < _Ncopied)
; 1360 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1361 : 			if (0 < _Ncopied)
; 1362 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1363 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1364 : 			_RERAISE;
; 1365 : 			_CATCH_END
; 1366 : 
; 1367 : 			_Count += size();

	mov	rdx, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rdi+8]
	sub	rax, rdx
	sar	rax, 2
	add	rbx, rax

; 1368 : 			if (this->_Myfirst != 0)

	test	rdx, rdx
	je	SHORT $LN95@Insert_n

; 1369 : 				{	// destroy and deallocate old array
; 1370 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1371 : 				this->_Alval.deallocate(this->_Myfirst,
; 1372 : 					this->_Myend - this->_Myfirst);

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN95@Insert_n:

; 1373 : 				}
; 1374 : 
; 1375 : 			this->_Orphan_all();
; 1376 : 			this->_Myend = _Newvec + _Capacity;

	lea	rax, QWORD PTR [r12+rsi*4]
	mov	QWORD PTR [rdi+16], rax

; 1377 : 			this->_Mylast = _Newvec + _Count;

	lea	rax, QWORD PTR [r12+rbx*4]
	mov	QWORD PTR [rdi+8], rax

; 1378 : 			this->_Myfirst = _Newvec;

	mov	QWORD PTR [rdi], r12

; 1379 : 			}
; 1380 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))

	jmp	$LN159@Insert_n
$LN9@Insert_n:

; 1381 : 			< _Count)

	mov	rcx, r13
	sub	rcx, rax
	sar	rcx, 2

; 1384 : 
; 1385 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1386 : 				_VIPTR(_Where) + _Count);	// copy suffix

	mov	rdx, r13

; 1381 : 			< _Count)

	cmp	rcx, rbx
	jae	SHORT $LN3@Insert_n

; 1382 : 			{	// new stuff spills off end
; 1383 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	esi, DWORD PTR [r9]
	mov	DWORD PTR _Tmp$98456[rsp], esi

; 1384 : 
; 1385 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1386 : 				_VIPTR(_Where) + _Count);	// copy suffix

	lea	r12, QWORD PTR [rbx*4]
	lea	r8, QWORD PTR [r12+rax]
	mov	rcx, rax
	call	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
	npad	1

; 1387 : 
; 1388 : 			_TRY_BEGIN
; 1389 : 			_Ufill(this->_Mylast,
; 1390 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1391 : 				_STD addressof(_Tmp));	// insert new stuff off end

	mov	rcx, QWORD PTR [rdi+8]
	mov	rax, rcx
	sub	rax, QWORD PTR _Where$[rsp]
	sar	rax, 2
	sub	rbx, rax
	lea	r8, QWORD PTR _Tmp$98456[rsp]
	mov	rdx, rbx
	call	??$_Uninit_fill_n@PEAI_KIV?$xalloc@I@@I@std@@YAXPEAI_KPEBIAEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int * __ptr64,unsigned __int64,unsigned int,xalloc<unsigned int>,unsigned int>
	npad	1

; 1392 : 			_CATCH_ALL
; 1393 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1394 : 				this->_Mylast + _Count);
; 1395 : 			_RERAISE;
; 1396 : 			_CATCH_END
; 1397 : 
; 1398 : 			this->_Mylast += _Count;

	add	QWORD PTR [rdi+8], r12
	mov	rcx, QWORD PTR [rdi+8]

; 1399 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1400 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1401 : 				_Tmp);	// insert up to old end

	sub	rcx, r12
	mov	rax, QWORD PTR _Where$[rsp]
	cmp	rax, rcx
	je	SHORT $LN159@Insert_n
	npad	7
$LL132@Insert_n:
	mov	DWORD PTR [rax], esi
	add	rax, 4
	cmp	rax, rcx
	jne	SHORT $LL132@Insert_n

; 1402 : 			}
; 1403 : 		else

	jmp	SHORT $LN159@Insert_n
$LN3@Insert_n:

; 1404 : 			{	// new stuff can all be assigned
; 1405 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	r12d, DWORD PTR [r9]

; 1406 : 
; 1407 : 			pointer _Oldend = this->_Mylast;
; 1408 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1409 : 				this->_Mylast);	// copy suffix

	lea	rsi, QWORD PTR [rbx*4]
	mov	rbx, r13
	sub	rbx, rsi
	mov	r8, r13
	mov	rcx, rbx
	call	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
	mov	QWORD PTR [rdi+8], rax

; 1410 : 
; 1411 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1412 : 			_STD _Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1413 : 				_Oldend);	// copy hole

	mov	rdx, QWORD PTR _Where$[rsp]
	sub	rbx, rdx
	sar	rbx, 2
	lea	r8, QWORD PTR [rbx*4]
	sub	r13, r8
	mov	rcx, r13
	call	QWORD PTR __imp_memmove

; 1414 : 			_STD fill(_VIPTR(_Where),
; 1415 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole

	mov	r11, QWORD PTR _Where$[rsp]
	lea	rax, QWORD PTR [rsi+r11]
	cmp	r11, rax
	je	SHORT $LN159@Insert_n
	npad	5
$LL161@Insert_n:
	mov	DWORD PTR [r11], r12d
	add	r11, 4
	mov	rax, QWORD PTR _Where$[rsp]
	lea	rcx, QWORD PTR [rsi+rax]
	cmp	r11, rcx
	jne	SHORT $LL161@Insert_n
$LN159@Insert_n:

; 1416 : 			}
; 1417 : 		}

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
$LN169@Insert_n:
	fatret	0
$LN168@Insert_n:
?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ncopied$98448 = 32
$T162874 = 40
this$ = 96
_Where$ = 104
_Tmp$98456 = 112
_Newvec$98446 = 112
_Count$ = 112
_Val$ = 120
?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA PROC ; `std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n'::`1'::catch$0

; 1358 : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z$0:

; 1359 : 			if (1 < _Ncopied)
; 1360 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1361 : 			if (0 < _Ncopied)
; 1362 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1363 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	rdx, QWORD PTR _Newvec$98446[rbp]
	test	rdx, rdx
	je	SHORT $LN88@catch$0@7
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN88@catch$0@7:

; 1364 : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA ENDP ; `std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n'::`1'::catch$0
; Function compile flags: /Ogtpy
_Ncopied$98448 = 32
$T162874 = 40
this$ = 96
_Where$ = 104
_Tmp$98456 = 112
_Newvec$98446 = 112
_Count$ = 112
_Val$ = 120
?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA PROC ; `std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n'::`1'::catch$1

; 1392 : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z$2:

; 1393 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1394 : 				this->_Mylast + _Count);
; 1395 : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$1@?0??_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z@4HA ENDP ; `std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n'::`1'::catch$1
text$x	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z
_TEXT	SEGMENT
this$ = 48
_Where$ = 56
_Count$ = 64
_Val$ = 72
?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::insert, COMDAT

; 1058 : 		{	// insert _Count * _Val at _Where

$LN3:
	sub	rsp, 40					; 00000028H

; 1059 : 		_Insert_n(_Where, _Count, _Val);

	call	?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n

; 1060 : 		}

	add	rsp, 40					; 00000028H
	ret	0
?insert@?$vector@IV?$xalloc@I@@@std@@QEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::insert
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z DD imagerel $LN68
	DD	imagerel $LN68+43
	DD	imagerel $unwind$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z DD imagerel $LN68+43
	DD	imagerel $LN68+88
	DD	imagerel $chain$0$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z DD imagerel $LN68+88
	DD	imagerel $LN68+123
	DD	imagerel $chain$1$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z DD 021H
	DD	imagerel $LN68
	DD	imagerel $LN68+43
	DD	imagerel $unwind$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z DD 020521H
	DD	077405H
	DD	imagerel $LN68
	DD	imagerel $LN68+43
	DD	imagerel $unwind$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z DD 060f01H
	DD	09540fH
	DD	08340fH
	DD	0600b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z
_TEXT	SEGMENT
_Tmp$ = 48
this$ = 48
_Count$ = 56
_Val$ = 64
?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign_n, COMDAT

; 1243 : 		{	// assign _Count * _Val

$LN68:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	sub	rsp, 32					; 00000020H

; 1244 : 		_Ty _Tmp = _Val;	// in case _Val is in sequence
; 1245 : 		erase(begin(), end());

	mov	rbx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [r8]
	mov	rbp, rdx
	mov	rdx, QWORD PTR [rcx+8]
	mov	rsi, rcx
	mov	DWORD PTR _Tmp$[rsp], eax
	cmp	rbx, rdx
	je	SHORT $LN19@Assign_n
	mov	rax, rdx
	mov	QWORD PTR [rsp+56], rdi
	mov	rcx, rbx
	sub	rax, rdx
	sar	rax, 2
	lea	rdi, QWORD PTR [rax*4]
	mov	r8, rdi
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rdi+rbx]
	mov	rdi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rsi+8], r11
$LN19@Assign_n:

; 1246 : 		insert(begin(), _Count, _Tmp);

	mov	rdx, QWORD PTR [rsi]
	lea	r9, QWORD PTR _Tmp$[rsp]
	mov	r8, rbp
	mov	rcx, rsi
	call	?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n

; 1247 : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?_Assign_n@?$vector@IV?$xalloc@I@@@std@@IEAAX_KAEBI@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign_n
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z DD imagerel $LN70
	DD	imagerel $LN70+43
	DD	imagerel $unwind$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z DD imagerel $LN70+43
	DD	imagerel $LN70+88
	DD	imagerel $chain$0$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z DD imagerel $LN70+88
	DD	imagerel $LN70+123
	DD	imagerel $chain$1$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z DD 021H
	DD	imagerel $LN70
	DD	imagerel $LN70+43
	DD	imagerel $unwind$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z DD 020521H
	DD	067405H
	DD	imagerel $LN70
	DD	imagerel $LN70+43
	DD	imagerel $unwind$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z DD 060f01H
	DD	09540fH
	DD	08340fH
	DD	0600b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z
_TEXT	SEGMENT
this$ = 48
_Tmp$163428 = 56
_Count$ = 56
??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign<unsigned int>, COMDAT

; 1033 : 		void _Assign(_Iter _Count, _Iter _Val, _Int_iterator_tag)

$LN70:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	sub	rsp, 32					; 00000020H

; 1034 : 		{	// assign _Count * _Val
; 1035 : 		_Assign_n((size_type)_Count, (_Ty)_Val);

	mov	rbx, QWORD PTR [rcx]
	mov	ebp, edx
	mov	rdx, QWORD PTR [rcx+8]
	mov	rsi, rcx
	mov	DWORD PTR _Tmp$163428[rsp], -1		; ffffffffH
	cmp	rbx, rdx
	je	SHORT $LN21@Assign
	mov	rax, rdx
	mov	QWORD PTR [rsp+48], rdi
	mov	rcx, rbx
	sub	rax, rdx
	sar	rax, 2
	lea	rdi, QWORD PTR [rax*4]
	mov	r8, rdi
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rdi+rbx]
	mov	rdi, QWORD PTR [rsp+48]
	mov	QWORD PTR [rsi+8], r11
$LN21@Assign:
	mov	rdx, QWORD PTR [rsi]
	lea	r9, QWORD PTR _Tmp$163428[rsp]
	mov	r8, rbp
	mov	rcx, rsi
	call	?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n

; 1036 : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign<unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXII@Z
_TEXT	SEGMENT
this$ = 8
_First$ = 16
??$assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXII@Z PROC	; std::vector<unsigned int,xalloc<unsigned int> >::assign<unsigned int>, COMDAT

; 1028 : 		{	// assign [_First, _Last)
; 1029 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1030 : 		}

	jmp	??$_Assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXIIU_Int_iterator_tag@1@@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Assign<unsigned int>
??$assign@I@?$vector@IV?$xalloc@I@@@std@@QEAAXII@Z ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::assign<unsigned int>
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z DD imagerel $LN30
	DD	imagerel $LN30+182
	DD	imagerel $unwind$?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve, COMDAT

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

$LN30:
	sub	rsp, 40					; 00000028H

; 1291 : 		size_type _Size = size();

	mov	r10, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rcx+8]
	mov	r11, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	rdx, r10
	mov	rax, r11
	mov	r9, rcx
	imul	rdx
	mov	r8, rdx
	sar	r8, 2
	mov	rax, r8
	shr	rax, 63					; 0000003fH
	add	r8, rax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	rax, 768614336404564649			; 0aaaaaaaaaaaaaa9H
	cmp	r8, rax
	jbe	SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, r11
	inc	r8
	sub	rcx, r10
	imul	rcx
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	cmp	r8, rdx
	jbe	SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

	mov	rcx, rdx
	mov	rax, 768614336404564650			; 0aaaaaaaaaaaaaaaH
	shr	rcx, 1
	sub	rax, rcx
	cmp	rax, rdx
	jae	SHORT $LN21@Reserve@2
	xor	edx, edx
	mov	rcx, r9
	cmp	rdx, r8
	cmovb	rdx, r8

; 1298 : 		}

	add	rsp, 40					; 00000028H
	jmp	?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

$LN21@Reserve@2:
	add	rdx, rcx
	mov	rcx, r9
	cmp	rdx, r8
	cmovb	rdx, r8
	call	?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve
$LN1@Reserve@2:

; 1298 : 		}

	add	rsp, 40					; 00000028H
	ret	0
$LN29@Reserve@2:
?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z DD imagerel $LN30
	DD	imagerel $LN30+180
	DD	imagerel $unwind$?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Reserve, COMDAT

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

$LN30:
	sub	rsp, 40					; 00000028H

; 1291 : 		size_type _Size = size();

	mov	r10, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rcx+8]
	mov	r11, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	rdx, r10
	mov	rax, r11
	mov	r9, rcx
	imul	rdx
	mov	r8, rdx
	sar	r8, 1
	mov	rax, r8
	shr	rax, 63					; 0000003fH
	add	r8, rax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	rax, 1537228672809129300		; 1555555555555554H
	cmp	r8, rax
	jbe	SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, r11
	inc	r8
	sub	rcx, r10
	imul	rcx
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	cmp	r8, rdx
	jbe	SHORT $LN1@Reserve@3

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

	mov	rcx, rdx
	mov	rax, 1537228672809129301		; 1555555555555555H
	shr	rcx, 1
	sub	rax, rcx
	cmp	rax, rdx
	jae	SHORT $LN21@Reserve@3
	xor	edx, edx
	mov	rcx, r9
	cmp	rdx, r8
	cmovb	rdx, r8

; 1298 : 		}

	add	rsp, 40					; 00000028H
	jmp	?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

$LN21@Reserve@3:
	add	rdx, rcx
	mov	rcx, r9
	cmp	rdx, r8
	cmovb	rdx, r8
	call	?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve
$LN1@Reserve@3:

; 1298 : 		}

	add	rsp, 40					; 00000028H
	ret	0
$LN29@Reserve@3:
?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Reserve
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ DD imagerel $LN58
	DD	imagerel $LN58+28
	DD	imagerel $unwind$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ DD imagerel $LN58+28
	DD	imagerel $LN58+73
	DD	imagerel $chain$0$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ DD imagerel $LN58+73
	DD	imagerel $LN58+84
	DD	imagerel $chain$1$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ DD 021H
	DD	imagerel $LN58
	DD	imagerel $LN58+28
	DD	imagerel $unwind$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ DD 020521H
	DD	067405H
	DD	imagerel $LN58
	DD	imagerel $LN58+28
	DD	imagerel $unwind$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ DD 040a01H
	DD	07340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ PROC	; std::vector<unsigned int,xalloc<unsigned int> >::clear, COMDAT

; 1217 : 		{	// erase all

$LN58:
	mov	QWORD PTR [rsp+16], rbx
	push	rsi
	sub	rsp, 32					; 00000020H

; 1218 : 		erase(begin(), end());

	mov	rdx, QWORD PTR [rcx+8]
	mov	rbx, QWORD PTR [rcx]
	mov	rsi, rcx
	cmp	rbx, rdx
	je	SHORT $LN19@clear@7
	mov	rax, rdx
	mov	QWORD PTR [rsp+48], rdi
	mov	rcx, rbx
	sub	rax, rdx
	sar	rax, 2
	lea	rdi, QWORD PTR [rax*4]
	mov	r8, rdi
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rdi+rbx]
	mov	rdi, QWORD PTR [rsp+48]
	mov	QWORD PTR [rsi+8], r11
$LN19@clear@7:

; 1219 : 		}

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?clear@?$vector@IV?$xalloc@I@@@std@@QEAAXXZ ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::clear
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z DD imagerel $LN49
	DD	imagerel $LN49+180
	DD	imagerel $unwind$?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z PROC ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::push_back, COMDAT

; 976  : 		{	// insert element at end

$LN49:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	rcx, QWORD PTR [rcx+8]
	mov	rdi, rdx
	cmp	rdx, rcx
	jae	SHORT $LN4@push_back@2
	mov	rax, QWORD PTR [rbx]
	cmp	rax, rdx
	ja	SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	sub	rdi, rax
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	rdi
	mov	rdi, rdx
	sar	rdi, 2
	mov	rax, rdi
	shr	rax, 63					; 0000003fH
	add	rdi, rax

; 980  : 			if (this->_Mylast == this->_Myend)

	cmp	rcx, QWORD PTR [rbx+16]
	jne	SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

	mov	rcx, rbx
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	rcx, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdi+rdi*2]
	test	rcx, rcx
	je	SHORT $LN41@push_back@2
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN48@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	cmp	rcx, QWORD PTR [rbx+16]
	jne	SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

	mov	rcx, rbx
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	rcx, QWORD PTR [rbx+8]
	test	rcx, rcx
	je	SHORT $LN41@push_back@2
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [rdi+16]
$LN48@push_back@2:
	mov	QWORD PTR [rcx+16], rax
$LN41@push_back@2:

; 996  : 			++this->_Mylast;

	add	QWORD PTR [rbx+8], 24

; 997  : 			}
; 998  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAXAEBVTRI@CDB@@@Z ENDP ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::push_back
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@IV?$xalloc@I@@@@QEAAAEAI_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$xr_vector@IV?$xalloc@I@@@@QEAAAEAI_K@Z PROC	; xr_vector<unsigned int,xalloc<unsigned int> >::operator[], COMDAT

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	mov	rax, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rax+rdx*4]
	ret	0
??A?$xr_vector@IV?$xalloc@I@@@@QEAAAEAI_K@Z ENDP	; xr_vector<unsigned int,xalloc<unsigned int> >::operator[]
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ DD imagerel $LN60
	DD	imagerel $LN60+28
	DD	imagerel $unwind$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ DD imagerel $LN60+28
	DD	imagerel $LN60+73
	DD	imagerel $chain$0$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ DD imagerel $LN60+73
	DD	imagerel $LN60+84
	DD	imagerel $chain$1$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ DD 021H
	DD	imagerel $LN60
	DD	imagerel $LN60+28
	DD	imagerel $unwind$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ DD 020521H
	DD	067405H
	DD	imagerel $LN60
	DD	imagerel $LN60+28
	DD	imagerel $unwind$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ DD 040a01H
	DD	07340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
xdata	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ PROC ; xr_vector<unsigned int,xalloc<unsigned int> >::clear_and_free, COMDAT

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

$LN60:
	mov	QWORD PTR [rsp+16], rbx
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx+8]
	mov	rbx, QWORD PTR [rcx]
	mov	rsi, rcx
	cmp	rbx, rdx
	je	SHORT $LN21@clear_and_@3
	mov	rax, rdx
	mov	QWORD PTR [rsp+48], rdi
	mov	rcx, rbx
	sub	rax, rdx
	sar	rax, 2
	lea	rdi, QWORD PTR [rax*4]
	mov	r8, rdi
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rdi+rbx]
	mov	rdi, QWORD PTR [rsp+48]
	mov	QWORD PTR [rsi+8], r11
$LN21@clear_and_@3:
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?clear_and_free@?$xr_vector@IV?$xalloc@I@@@@QEAAXXZ ENDP ; xr_vector<unsigned int,xalloc<unsigned int> >::clear_and_free
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z DD imagerel $LN49
	DD	imagerel $LN49+177
	DD	imagerel $unwind$?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z PROC ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back, COMDAT

; 976  : 		{	// insert element at end

$LN49:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	rcx, QWORD PTR [rcx+8]
	mov	rdi, rdx
	cmp	rdx, rcx
	jae	SHORT $LN4@push_back@3
	mov	rax, QWORD PTR [rbx]
	cmp	rax, rdx
	ja	SHORT $LN4@push_back@3

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	sub	rdi, rax
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	rdi
	mov	rdi, rdx
	sar	rdi, 1
	mov	rax, rdi
	shr	rax, 63					; 0000003fH
	add	rdi, rax

; 980  : 			if (this->_Mylast == this->_Myend)

	cmp	rcx, QWORD PTR [rbx+16]
	jne	SHORT $LN3@push_back@3

; 981  : 				_Reserve(1);

	mov	rcx, rbx
	call	?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Reserve
$LN3@push_back@3:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	rcx, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rdi+rdi*2]
	test	rcx, rcx
	je	SHORT $LN41@push_back@3
	mov	rax, QWORD PTR [r8+rdx*4]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [r8+rdx*4+8]

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	DWORD PTR [rcx+8], eax

; 996  : 			++this->_Mylast;

	add	QWORD PTR [rbx+8], 12

; 997  : 			}
; 998  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@push_back@3:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	cmp	rcx, QWORD PTR [rbx+16]
	jne	SHORT $LN1@push_back@3

; 991  : 				_Reserve(1);

	mov	rcx, rbx
	call	?_Reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@IEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::_Reserve
$LN1@push_back@3:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	rcx, QWORD PTR [rbx+8]
	test	rcx, rcx
	je	SHORT $LN41@push_back@3
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rcx], rax
	mov	eax, DWORD PTR [rdi+8]
	mov	DWORD PTR [rcx+8], eax
$LN41@push_back@3:

; 996  : 			++this->_Mylast;

	add	QWORD PTR [rbx+8], 12

; 997  : 			}
; 998  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ENDP ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
pdata	SEGMENT
$pdata$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD imagerel $LN50
	DD	imagerel $LN50+197
	DD	imagerel $unwind$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA DD imagerel ?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA+45
	DD	imagerel $unwind$?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD imagerel ?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z+108
	DD	00H
	DD	imagerel ?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z+124
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA+13
	DD	01H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD 081e19H
	DD	0b741eH
	DD	0a6419H
	DD	083414H
	DD	0c0025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
	DD	05H
	DD	imagerel $ip2state$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T164671 = 32
this$ = 64
_Ptr$95869 = 72
_Count$ = 72
?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z PROC	; std::vector<unsigned int,xalloc<unsigned int> >::reserve, COMDAT

; 746  : 		{	// determine new minimum length of allocated storage

$LN50:
	push	r12
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T164671[rsp], -2
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+88], rdi
	mov	rdi, rdx
	mov	rbx, rcx

; 747  : 		if (max_size() < _Count)

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	cmp	rdx, rax
	jbe	SHORT $LN5@reserve@4

; 748  : 			_Xlen();	// result too long

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN5@reserve@4:

; 749  : 		else if (capacity() < _Count)

	mov	rax, QWORD PTR [rcx+16]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 2
	cmp	rax, rdx
	jae	SHORT $LN3@reserve@4

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	edx, edx
	shl	rdx, 2
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	r12, rax
	mov	QWORD PTR _Ptr$95869[rsp], rax

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	r8, rax
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rbx]
	call	??$_Uninit_move@PEAIPEAIV?$xalloc@I@@I@std@@YAPEAIPEAI00AEAV?$xalloc@I@@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int * __ptr64,unsigned int * __ptr64,xalloc<unsigned int>,unsigned int>
	npad	1

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

	mov	rdx, QWORD PTR [rbx]
	mov	rsi, QWORD PTR [rbx+8]
	sub	rsi, rdx
	sar	rsi, 2

; 761  : 			if (this->_Myfirst != 0)

	test	rdx, rdx
	je	SHORT $LN44@reserve@4

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN44@reserve@4:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

	lea	rax, QWORD PTR [r12+rdi*4]
	mov	QWORD PTR [rbx+16], rax

; 770  : 			this->_Mylast = _Ptr + _Size;

	lea	rax, QWORD PTR [r12+rsi*4]
	mov	QWORD PTR [rbx+8], rax

; 771  : 			this->_Myfirst = _Ptr;

	mov	QWORD PTR [rbx], r12
$LN3@reserve@4:

; 772  : 			}
; 773  : 		}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r12
	ret	0
$LN49@reserve@4:
?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::reserve
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T164671 = 32
this$ = 64
_Ptr$95869 = 72
_Count$ = 72
?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA PROC ; `std::vector<unsigned int,xalloc<unsigned int> >::reserve'::`1'::catch$0

; 755  : 			_CATCH_ALL

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z$0:

; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	rdx, QWORD PTR _Ptr$95869[rbp]
	test	rdx, rdx
	je	SHORT $LN37@catch$0@8
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN37@catch$0@8:

; 757  : 			_RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1
?catch$0@?0??reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z@4HA ENDP ; `std::vector<unsigned int,xalloc<unsigned int> >::reserve'::`1'::catch$0
text$x	ENDS
PUBLIC	?clear@CollectorPacked@CDB@@QEAAXXZ		; CDB::CollectorPacked::clear
pdata	SEGMENT
$pdata$?clear@CollectorPacked@CDB@@QEAAXXZ DD imagerel $LN209
	DD	imagerel $LN209+301
	DD	imagerel $unwind$?clear@CollectorPacked@CDB@@QEAAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?clear@CollectorPacked@CDB@@QEAAXXZ DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_collector.cpp
xdata	ENDS
_TEXT	SEGMENT
this$ = 64
?clear@CollectorPacked@CDB@@QEAAXXZ PROC		; CDB::CollectorPacked::clear

; 389  : 	{

$LN209:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 32					; 00000020H

; 390  : 		verts.clear_and_free	();

	mov	r8, QWORD PTR [rcx]
	mov	rsi, rcx
	mov	rcx, QWORD PTR [rcx+8]
	cmp	r8, rcx
	je	SHORT $LN32@clear@8
	mov	rdx, rcx
	cmp	rcx, rcx
	je	SHORT $LN61@clear@8
	npad	1
$LL63@clear@8:
	mov	rax, QWORD PTR [rdx]
	add	rdx, 12
	add	r8, 12
	mov	QWORD PTR [r8-12], rax
	mov	eax, DWORD PTR [rdx-4]
	mov	DWORD PTR [r8-4], eax
	cmp	rdx, rcx
	jne	SHORT $LL63@clear@8
$LN61@clear@8:
	mov	QWORD PTR [rsi+8], r8
$LN32@clear@8:

; 391  : 		faces.clear_and_free	();

	mov	rdx, QWORD PTR [rsi+32]
	mov	r8, QWORD PTR [rsi+40]
	cmp	rdx, r8
	je	SHORT $LN96@clear@8
	mov	rcx, r8
	cmp	r8, r8
	je	SHORT $LN125@clear@8
	npad	12
$LL127@clear@8:
	mov	rax, QWORD PTR [rcx]
	add	rcx, 24
	add	rdx, 24
	mov	QWORD PTR [rdx-24], rax
	mov	rax, QWORD PTR [rcx-16]
	mov	QWORD PTR [rdx-16], rax
	mov	rax, QWORD PTR [rcx-8]
	mov	QWORD PTR [rdx-8], rax
	cmp	rcx, r8
	jne	SHORT $LL127@clear@8
$LN125@clear@8:
	mov	QWORD PTR [rsi+40], rdx
$LN96@clear@8:

; 392  : 		for (u32 _x=0; _x<=clpMX; _x++)

	add	rsi, 96					; 00000060H
	mov	r13d, 25
	npad	14
$LL9@clear@8:

; 393  : 			for (u32 _y=0; _y<=clpMY; _y++)

	mov	r12d, 17
	npad	10
$LL6@clear@8:

; 394  : 				for (u32 _z=0; _z<=clpMZ; _z++)

	mov	ebp, 25
	npad	11
$LL3@clear@8:

; 395  : 					VM[_x][_y][_z].clear_and_free	();

	mov	rbx, QWORD PTR [rsi-8]
	mov	rdx, QWORD PTR [rsi]
	cmp	rbx, rdx
	je	SHORT $LN160@clear@8
	mov	rax, rdx
	mov	rcx, rbx
	sub	rax, rdx
	sar	rax, 2
	lea	rdi, QWORD PTR [rax*4]
	mov	r8, rdi
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rdi+rbx]
	mov	QWORD PTR [rsi], r11
$LN160@clear@8:

; 394  : 				for (u32 _z=0; _z<=clpMZ; _z++)

	add	rsi, 32					; 00000020H
	dec	rbp
	jne	SHORT $LL3@clear@8

; 393  : 			for (u32 _y=0; _y<=clpMY; _y++)

	dec	r12
	jne	SHORT $LL6@clear@8

; 392  : 		for (u32 _x=0; _x<=clpMX; _x++)

	dec	r13
	jne	SHORT $LL9@clear@8

; 396  : 	}

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?clear@CollectorPacked@CDB@@QEAAXXZ ENDP		; CDB::CollectorPacked::clear
_TEXT	ENDS
PUBLIC	?calc_adjacency@Collector@CDB@@QEAAXAEAV?$xr_vector@IV?$xalloc@I@@@@@Z ; CDB::Collector::calc_adjacency
EXTRN	__chkstk:PROC
pdata	SEGMENT
$pdata$?calc_adjacency@Collector@CDB@@QEAAXAEAV?$xr_vector@IV?$xalloc@I@@@@@Z DD imagerel $LN240
	DD	imagerel $LN240+610
	DD	imagerel $unwind$?calc_adjacency@Collector@CDB@@QEAAXAEAV?$xr_vector@IV?$xalloc@I@@@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?calc_adjacency@Collector@CDB@@QEAAXAEAV?$xr_vector@IV?$xalloc@I@@@@@Z DD 0250b2f01H
	DD	0c642fH
	DD	0b341dH
	DD	0320d2312H
	DD	0d007e009H
	DD	07003c005H
	DD	05002H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
_Tmp$166475 = 48
this$ = 48
dest$ = 56
?calc_adjacency@Collector@CDB@@QEAAXAEAV?$xr_vector@IV?$xalloc@I@@@@@Z PROC ; CDB::Collector::calc_adjacency

; 119  : 	{

$LN240:
	push	rbp
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H
	lea	rbp, QWORD PTR [rsp+32]

; 120  : #if 1
; 121  : 		VERIFY							(faces.size() < 65536);
; 122  : 		const u32						edge_count = faces.size()*3;

	mov	r8, QWORD PTR [rcx+40]
	mov	r12, rdx
	mov	QWORD PTR [rbp+56], rbx
	sub	r8, QWORD PTR [rcx+32]
	mov	rdi, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	mov	QWORD PTR [rbp+64], rsi
	mov	rax, rdi
	imul	r8
	sar	rdx, 2
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	lea	eax, DWORD PTR [rdx+rdx*2]

; 123  : #ifdef _EDITOR
; 124  : 		xr_vector<edge> _edges			(edge_count);
; 125  : 		edge 							*edges = &*_edges.begin();
; 126  : #else
; 127  : 		edge							*edges = (edge*)_alloca(edge_count*sizeof(edge));

	mov	r14d, eax
	lea	rbx, QWORD PTR [rax*8]
	lea	rax, QWORD PTR [rbx+15]
	cmp	rax, rbx
	ja	SHORT $LN239@calc_adjac
	mov	rax, 1152921504606846960		; 0ffffffffffffff0H
$LN239@calc_adjac:
	and	rax, -16
	call	__chkstk
	sub	rsp, rax

; 128  : #endif
; 129  : 		edge							*i = edges;
; 130  : 		xr_vector<TRI>::const_iterator	B = faces.begin(), I = B;

	mov	rax, QWORD PTR [rcx+32]

; 131  : 		xr_vector<TRI>::const_iterator	E = faces.end();

	mov	rcx, QWORD PTR [rcx+40]
	lea	r13, QWORD PTR [rsp+32]
	mov	r8, r13

; 132  : 		for ( ; I != E; ++I) {

	cmp	rax, rcx
	je	$LN10@calc_adjac

; 120  : #if 1
; 121  : 		VERIFY							(faces.size() < 65536);
; 122  : 		const u32						edge_count = faces.size()*3;

	mov	r11, -4
	lea	r9, QWORD PTR [rax+4]
	sub	r11, rax
	npad	9

; 132  : 		for ( ; I != E; ++I) {

$LL38@calc_adjac:

; 133  : 			u32							face_id = u32(I - B);

	lea	rdx, QWORD PTR [r11+r9]
	mov	rax, rdi
	imul	rdx
	mov	r10, rdx
	sar	r10, 2
	mov	rax, r10
	shr	rax, 63					; 0000003fH
	add	r10, rax

; 134  : 
; 135  : 			(*i).face_id				= face_id;

	and	r10d, 1073741823			; 3fffffffH

; 136  : 			(*i).edge_id				= 0;

	mov	eax, r10d
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR [r8], eax

; 137  : 			(*i).vertex_id0				= (u16)(*I).verts[0];

	movzx	edx, WORD PTR [r9-4]
	mov	WORD PTR [r8+4], dx

; 138  : 			(*i).vertex_id1				= (u16)(*I).verts[1];

	movzx	eax, WORD PTR [r9]
	mov	WORD PTR [r8+6], ax

; 139  : 			if ((*i).vertex_id0 > (*i).vertex_id1)

	cmp	dx, ax
	jbe	SHORT $LN60@calc_adjac

; 140  : 				std::swap				((*i).vertex_id0,(*i).vertex_id1);

	mov	WORD PTR [r8+4], ax
	mov	WORD PTR [r8+6], dx
$LN60@calc_adjac:

; 141  : 			++i;

	mov	eax, r10d
	and	eax, 1073741823				; 3fffffffH

; 142  : 			
; 143  : 			(*i).face_id				= face_id;
; 144  : 			(*i).edge_id				= 1;

	bts	eax, 30
	mov	DWORD PTR [r8+8], eax

; 145  : 			(*i).vertex_id0				= (u16)(*I).verts[1];

	movzx	edx, WORD PTR [r9]
	mov	WORD PTR [r8+12], dx

; 146  : 			(*i).vertex_id1				= (u16)(*I).verts[2];

	movzx	eax, WORD PTR [r9+4]
	mov	WORD PTR [r8+14], ax

; 147  : 			if ((*i).vertex_id0 > (*i).vertex_id1)

	cmp	dx, ax
	jbe	SHORT $LN78@calc_adjac

; 148  : 				std::swap				((*i).vertex_id0,(*i).vertex_id1);

	mov	WORD PTR [r8+12], ax
	mov	WORD PTR [r8+14], dx
$LN78@calc_adjac:

; 149  : 			++i;
; 150  : 			
; 151  : 			(*i).face_id				= face_id;
; 152  : 			(*i).edge_id				= 2;

	and	r10d, 1073741823			; 3fffffffH
	bts	r10d, 31
	mov	DWORD PTR [r8+16], r10d

; 153  : 			(*i).vertex_id0				= (u16)(*I).verts[2];

	movzx	edx, WORD PTR [r9+4]
	mov	WORD PTR [r8+20], dx

; 154  : 			(*i).vertex_id1				= (u16)(*I).verts[0];

	movzx	eax, WORD PTR [r9-4]
	mov	WORD PTR [r8+22], ax

; 155  : 			if ((*i).vertex_id0 > (*i).vertex_id1)

	cmp	dx, ax
	jbe	SHORT $LN96@calc_adjac

; 156  : 				std::swap				((*i).vertex_id0,(*i).vertex_id1);

	mov	WORD PTR [r8+20], ax
	mov	WORD PTR [r8+22], dx
$LN96@calc_adjac:

; 157  : 			++i;

	add	r9, 24
	add	r8, 24
	lea	rax, QWORD PTR [r9-4]
	cmp	rax, rcx
	jne	$LL38@calc_adjac
$LN10@calc_adjac:

; 158  : 		}
; 159  : 
; 160  : 		std::sort						(edges,edges + edge_count,sort_predicate());

	lea	rsi, QWORD PTR [rbx+r13]
	xor	eax, eax
	mov	rcx, r13
	mov	r8, rsi
	movzx	r9d, al
	mov	rdx, rsi
	sub	r8, r13
	sar	r8, 3
	call	??$_Sort@PEAUedge@CDB@@_JUsort_predicate@2@@std@@YAXPEAUedge@CDB@@0_JUsort_predicate@2@@Z ; std::_Sort<CDB::edge * __ptr64,__int64,CDB::sort_predicate>

; 161  : 
; 162  : 		dest.assign						(edge_count,u32(-1));

	mov	rdx, QWORD PTR [r12+8]
	mov	rbx, QWORD PTR [r12]
	mov	DWORD PTR _Tmp$166475[rbp], -1		; ffffffffH
	cmp	rbx, rdx
	je	SHORT $LN134@calc_adjac
	mov	rax, rdx
	mov	rcx, rbx
	sub	rax, rdx
	sar	rax, 2
	lea	rdi, QWORD PTR [rax*4]
	mov	r8, rdi
	call	QWORD PTR __imp_memmove
	lea	r11, QWORD PTR [rdi+rbx]
	mov	QWORD PTR [r12+8], r11
$LN134@calc_adjac:
	mov	rdx, QWORD PTR [r12]
	lea	r9, QWORD PTR _Tmp$166475[rbp]
	mov	r8, r14
	mov	rcx, r12
	call	?_Insert_n@?$vector@IV?$xalloc@I@@@std@@IEAAXV?$_Vector_const_iterator@V?$_Vector_val@IV?$xalloc@I@@@std@@@2@_KAEBI@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Insert_n

; 163  : 
; 164  : 		{
; 165  : 			edge						*I = edges, *J;
; 166  : 			edge						*E = edges + edge_count;
; 167  : 			for ( ; I != E; ++I) {

	cmp	r13, rsi
	je	SHORT $LN4@calc_adjac

; 161  : 
; 162  : 		dest.assign						(edge_count,u32(-1));

	lea	r8, QWORD PTR [r13+8]
$LL6@calc_adjac:

; 168  : 				if (I + 1 == E)

	cmp	r8, rsi
	je	SHORT $LN5@calc_adjac

; 169  : 					continue;
; 170  : 
; 171  : 				J							= I + 1;
; 172  : 
; 173  : 				if ((*I).vertex_id0 != (*J).vertex_id0)

	movzx	eax, WORD PTR [r8+4]
	cmp	WORD PTR [r8-4], ax
	jne	SHORT $LN5@calc_adjac

; 174  : 					continue;
; 175  : 
; 176  : 				if ((*I).vertex_id1 != (*J).vertex_id1)

	movzx	eax, WORD PTR [r8+6]
	cmp	WORD PTR [r8-2], ax
	jne	SHORT $LN5@calc_adjac

; 177  : 					continue;
; 178  : 
; 179  : 				dest[(*I).face_id*3 + (*I).edge_id]	= (*J).face_id;

	mov	edx, DWORD PTR [r8-8]
	mov	eax, edx
	shr	edx, 30
	and	eax, 1073741823				; 3fffffffH
	lea	ecx, DWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r8]
	add	edx, ecx
	mov	rcx, QWORD PTR [r12]
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR [rcx+rdx*4], eax

; 180  : 				dest[(*J).face_id*3 + (*J).edge_id]	= (*I).face_id;

	mov	edx, DWORD PTR [r8]
	mov	eax, edx
	shr	edx, 30
	and	eax, 1073741823				; 3fffffffH
	lea	ecx, DWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r8-8]
	add	edx, ecx
	mov	rcx, QWORD PTR [r12]
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR [rcx+rdx*4], eax
$LN5@calc_adjac:

; 163  : 
; 164  : 		{
; 165  : 			edge						*I = edges, *J;
; 166  : 			edge						*E = edges + edge_count;
; 167  : 			for ( ; I != E; ++I) {

	add	r8, 8
	lea	rax, QWORD PTR [r8-8]
	cmp	rax, rsi
	jne	SHORT $LL6@calc_adjac
$LN4@calc_adjac:

; 181  : 			}
; 182  : 		}
; 183  : #	if 0
; 184  : 		xr_vector<u32>	test = dest;
; 185  : 
; 186  : 		dest.assign		(faces.size()*3,0xffffffff);
; 187  : 		// Dumb algorithm O(N^2) :)
; 188  : 		for (u32 f=0; f<faces.size(); f++)
; 189  : 		{
; 190  : 			for (u32 t=0; t<faces.size(); t++)
; 191  : 			{
; 192  : 				if (t==f)	continue;
; 193  : 
; 194  : 				for (u32 f_e=0; f_e<3; f_e++)
; 195  : 				{
; 196  : 					u32 f1	= faces[f].verts[(f_e+0)%3];
; 197  : 					u32 f2	= faces[f].verts[(f_e+1)%3];
; 198  : 					if (f1>f2)	std::swap(f1,f2);
; 199  : 
; 200  : 					for (u32 t_e=0; t_e<3; t_e++)
; 201  : 					{
; 202  : 						u32 t1	= faces[t].verts[(t_e+0)%3];
; 203  : 						u32 t2	= faces[t].verts[(t_e+1)%3];
; 204  : 						if (t1>t2)	std::swap(t1,t2);
; 205  : 
; 206  : 						if (f1==t1 && f2==t2)
; 207  : 						{
; 208  : 							// f.edge[f_e] linked to t.edge[t_e]
; 209  : 							dest[f*3+f_e]	= t;
; 210  : 							break;
; 211  : 						}
; 212  : 					}
; 213  : 				}
; 214  : 			}
; 215  : 		}
; 216  : 
; 217  : 		{
; 218  : 			xr_vector<u32>::const_iterator	I = test.begin();
; 219  : 			xr_vector<u32>::const_iterator	E = test.end();
; 220  : 			xr_vector<u32>::const_iterator	J = dest.begin();
; 221  : 			for ( ; I != E; ++I, ++J) {
; 222  : 				VERIFY	(*I == *J);
; 223  : 			}
; 224  : 		}
; 225  : #	endif
; 226  : #else
; 227  : 		dest.assign		(faces.size()*3,0xffffffff);
; 228  : 		// Dumb algorithm O(N^2) :)
; 229  : 		for (u32 f=0; f<faces.size(); f++)
; 230  : 		{
; 231  : 			for (u32 t=0; t<faces.size(); t++)
; 232  : 			{
; 233  : 				if (t==f)	continue;
; 234  : 
; 235  : 				for (u32 f_e=0; f_e<3; f_e++)
; 236  : 				{
; 237  : 					u32 f1	= faces[f].verts[(f_e+0)%3];
; 238  : 					u32 f2	= faces[f].verts[(f_e+1)%3];
; 239  : 					if (f1>f2)	std::swap(f1,f2);
; 240  : 
; 241  : 					for (u32 t_e=0; t_e<3; t_e++)
; 242  : 					{
; 243  : 						u32 t1	= faces[t].verts[(t_e+0)%3];
; 244  : 						u32 t2	= faces[t].verts[(t_e+1)%3];
; 245  : 						if (t1>t2)	std::swap(t1,t2);
; 246  : 
; 247  : 						if (f1==t1 && f2==t2)
; 248  : 						{
; 249  : 							// f.edge[f_e] linked to t.edge[t_e]
; 250  : 							dest[f*3+f_e]	= t;
; 251  : 							break;
; 252  : 						}
; 253  : 					}
; 254  : 				}
; 255  : 			}
; 256  : 		}
; 257  : #endif
; 258  : 	}

	mov	rbx, QWORD PTR [rbp+56]
	mov	rsi, QWORD PTR [rbp+64]
	mov	rsp, rbp
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
?calc_adjacency@Collector@CDB@@QEAAXAEAV?$xr_vector@IV?$xalloc@I@@@@@Z ENDP ; CDB::Collector::calc_adjacency
_TEXT	ENDS
PUBLIC	?add_face@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z ; CDB::Collector::add_face
pdata	SEGMENT
$pdata$?add_face@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z DD imagerel $LN62
	DD	imagerel $LN62+369
	DD	imagerel $unwind$?add_face@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?add_face@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z DD 0a1a01H
	DD	0d741aH
	DD	0c641aH
	DD	0b541aH
	DD	0a341aH
	DD	0c016721aH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
T$ = 32
this$ = 80
v0$ = 88
v1$ = 96
v2$ = 104
material$ = 112
sector$ = 120
?add_face@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z PROC ; CDB::Collector::add_face

; 39   : 	{

$LN62:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 64					; 00000040H

; 40   : 		TRI			T;
; 41   : 		T.verts	[0]		= verts.size();

	mov	r10, QWORD PTR [rcx+8]

; 42   : 		T.verts	[1]		= verts.size()+1;
; 43   : 		T.verts	[2]		= verts.size()+2;
; 44   : 		T.material		= material;
; 45   : 		T.sector		= sector;

	movzx	ebp, WORD PTR material$[rsp]
	mov	r11, rdx
	sub	r10, QWORD PTR [rcx]
	mov	rsi, rcx
	mov	r12, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	mov	rax, r12
	and	ebp, 16383				; 00003fffH
	mov	rcx, -4294918144			; ffffffff0000c000H
	mov	rdi, r9
	mov	rbx, r8
	imul	r10
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	mov	DWORD PTR T$[rsp], edx
	lea	eax, DWORD PTR [rdx+1]
	mov	DWORD PTR T$[rsp+4], eax
	lea	eax, DWORD PTR [rdx+2]

; 46   : 
; 47   : 		verts.push_back(v0);

	mov	rdx, r11
	mov	DWORD PTR T$[rsp+8], eax
	movzx	eax, WORD PTR sector$[rsp]
	shl	rax, 16
	or	rbp, rax
	mov	rax, QWORD PTR T$[rsp+16]
	and	rax, rcx
	mov	rcx, rsi
	or	rbp, rax
	mov	QWORD PTR T$[rsp+16], rbp
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 48   : 		verts.push_back(v1);

	mov	rdx, rbx
	mov	rcx, rsi
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 49   : 		verts.push_back(v2);

	mov	rdx, rdi
	mov	rcx, rsi
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 50   : 		faces.push_back(T);

	mov	r8, QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rcx, r8
	jae	SHORT $LN18@add_face
	mov	rdx, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rdx, rcx
	ja	SHORT $LN18@add_face
	lea	rcx, QWORD PTR T$[rsp]
	mov	rax, r12
	sub	rcx, rdx
	imul	rcx
	mov	rbx, rdx
	sar	rbx, 2
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN17@add_face
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN17@add_face:
	mov	rcx, QWORD PTR [rsi+40]
	mov	r8, QWORD PTR [rsi+32]
	lea	rdx, QWORD PTR [rbx+rbx*2]
	test	rcx, rcx
	je	SHORT $LN55@add_face
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN55@add_face
$LN18@add_face:
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN15@add_face
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN15@add_face:
	mov	rcx, QWORD PTR [rsi+40]
	test	rcx, rcx
	je	SHORT $LN55@add_face
	mov	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR T$[rsp+8]
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rbp
$LN55@add_face:
	add	QWORD PTR [rsi+40], 24

; 51   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	r12
	ret	0
?add_face@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z ENDP ; CDB::Collector::add_face
_TEXT	ENDS
PUBLIC	?add_face_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z ; CDB::Collector::add_face_D
pdata	SEGMENT
$pdata$?add_face_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z DD imagerel $LN62
	DD	imagerel $LN62+327
	DD	imagerel $unwind$?add_face_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?add_face_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z DD 0a1a01H
	DD	0d741aH
	DD	0c641aH
	DD	0b541aH
	DD	0a341aH
	DD	0c016721aH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
T$ = 32
this$ = 80
v0$ = 88
v1$ = 96
v2$ = 104
dummy$ = 112
?add_face_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z PROC ; CDB::Collector::add_face_D

; 25   : 	{

$LN62:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 64					; 00000040H

; 26   : 		TRI T;
; 27   : 		T.verts		[0] = verts.size();

	mov	r10, QWORD PTR [rcx+8]

; 28   : 		T.verts		[1] = verts.size()+1;
; 29   : 		T.verts		[2] = verts.size()+2;  
; 30   : 		T.dummy			= dummy;

	mov	rbp, QWORD PTR dummy$[rsp]
	mov	r11, rdx
	sub	r10, QWORD PTR [rcx]
	mov	r12, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	mov	rdi, r9
	mov	rax, r12
	mov	rbx, r8
	mov	rsi, rcx
	mov	QWORD PTR T$[rsp+16], rbp
	imul	r10
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	mov	DWORD PTR T$[rsp], edx
	lea	eax, DWORD PTR [rdx+1]
	mov	DWORD PTR T$[rsp+4], eax
	lea	eax, DWORD PTR [rdx+2]

; 31   : 
; 32   : 		verts.push_back(v0);

	mov	rdx, r11
	mov	DWORD PTR T$[rsp+8], eax
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 33   : 		verts.push_back(v1);

	mov	rdx, rbx
	mov	rcx, rsi
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 34   : 		verts.push_back(v2);

	mov	rdx, rdi
	mov	rcx, rsi
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 35   : 		faces.push_back(T);

	mov	r8, QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rcx, r8
	jae	SHORT $LN18@add_face_D
	mov	rdx, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rdx, rcx
	ja	SHORT $LN18@add_face_D
	lea	rcx, QWORD PTR T$[rsp]
	mov	rax, r12
	sub	rcx, rdx
	imul	rcx
	mov	rbx, rdx
	sar	rbx, 2
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN17@add_face_D
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN17@add_face_D:
	mov	rcx, QWORD PTR [rsi+40]
	mov	r8, QWORD PTR [rsi+32]
	lea	rdx, QWORD PTR [rbx+rbx*2]
	test	rcx, rcx
	je	SHORT $LN55@add_face_D
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN55@add_face_D
$LN18@add_face_D:
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN15@add_face_D
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN15@add_face_D:
	mov	rcx, QWORD PTR [rsi+40]
	test	rcx, rcx
	je	SHORT $LN55@add_face_D
	mov	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR T$[rsp+8]
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rbp
$LN55@add_face_D:
	add	QWORD PTR [rsi+40], 24

; 36   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	r12
	ret	0
?add_face_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z ENDP ; CDB::Collector::add_face_D
_TEXT	ENDS
PUBLIC	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack
pdata	SEGMENT
$pdata$?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z DD imagerel $LN92
	DD	imagerel $LN92+195
	DD	imagerel $unwind$?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
V$ = 56
eps$ = 64
?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z PROC	; CDB::Collector::VPack

; 9    : 	{

$LN92:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 10   : 		xr_vector<Fvector>::iterator I,E;
; 11   : 		I=verts.begin();	E=verts.end();

	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rbx+8]
	mov	r8, rcx

; 12   : 		for (;I!=E;I++)		if (I->similar(V,eps)) return u32(I-verts.begin());

	cmp	rcx, rax
	je	SHORT $LN2@VPack
	movss	xmm3, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR __mask@@AbsFloat@
	npad	12
$LL35@VPack:
	movss	xmm0, DWORD PTR [r8]
	subss	xmm0, xmm3
	andps	xmm0, xmm1
	comiss	xmm0, xmm2
	jae	SHORT $LN54@VPack
	movss	xmm0, DWORD PTR [r8+4]
	subss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm1
	comiss	xmm0, xmm2
	jae	SHORT $LN54@VPack
	movss	xmm0, DWORD PTR [r8+8]
	subss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm1
	comiss	xmm0, xmm2
	jb	SHORT $LN87@VPack
$LN54@VPack:
	add	r8, 12
	cmp	r8, rax
	jne	SHORT $LL35@VPack
$LN2@VPack:

; 13   : 		verts.push_back		(V);

	mov	rcx, rbx
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 14   : 		return verts.size	()-1;

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	sub	rcx, QWORD PTR [rbx]
	imul	rcx
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	lea	eax, DWORD PTR [rax+rdx-1]

; 15   : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN87@VPack:

; 12   : 		for (;I!=E;I++)		if (I->similar(V,eps)) return u32(I-verts.begin());

	sub	r8, rcx
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	r8
	sar	rdx, 1
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rax, rdx

; 15   : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ENDP	; CDB::Collector::VPack
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
pdata	SEGMENT
$pdata$?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z DD imagerel $LN30
	DD	imagerel $LN30+137
	DD	imagerel $unwind$?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z PROC	; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve, COMDAT

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

$LN30:
	sub	rsp, 40					; 00000028H

; 1291 : 		size_type _Size = size();

	mov	rax, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rcx+8]
	mov	r9, rcx
	sub	r8, rax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	rcx, 4611686018427387902		; 3ffffffffffffffeH
	sar	r8, 2
	cmp	r8, rcx
	jbe	SHORT $LN4@Reserve@4

; 1293 : 			_Xlen();

	lea	rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN4@Reserve@4:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	rdx, QWORD PTR [r9+16]
	inc	r8
	sub	rdx, rax
	sar	rdx, 2
	cmp	r8, rdx
	jbe	SHORT $LN1@Reserve@4

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

	mov	rcx, rdx
	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	shr	rcx, 1
	sub	rax, rcx
	cmp	rax, rdx
	jae	SHORT $LN21@Reserve@4
	xor	edx, edx
	mov	rcx, r9
	cmp	rdx, r8
	cmovb	rdx, r8

; 1298 : 		}

	add	rsp, 40					; 00000028H
	jmp	?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

$LN21@Reserve@4:
	add	rdx, rcx
	mov	rcx, r9
	cmp	rdx, r8
	cmovb	rdx, r8
	call	?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::reserve
$LN1@Reserve@4:

; 1298 : 		}

	add	rsp, 40					; 00000028H
	ret	0
$LN29@Reserve@4:
?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ENDP	; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
pdata	SEGMENT
$pdata$?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z DD imagerel $LN48
	DD	imagerel $LN48+130
	DD	imagerel $unwind$?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata	ENDS
;	COMDAT ?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z PROC ; std::vector<unsigned int,xalloc<unsigned int> >::push_back, COMDAT

; 976  : 		{	// insert element at end

$LN48:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, rdx
	mov	rbx, rcx
	cmp	rdx, rax
	jae	SHORT $LN4@push_back@4
	mov	rcx, QWORD PTR [rcx]
	cmp	rcx, rdx
	ja	SHORT $LN4@push_back@4

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	sub	rdi, rcx
	sar	rdi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

	cmp	rax, QWORD PTR [rbx+16]
	jne	SHORT $LN3@push_back@4

; 981  : 				_Reserve(1);

	mov	rcx, rbx
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN3@push_back@4:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	rdx, QWORD PTR [rbx+8]
	test	rdx, rdx
	je	SHORT $LN41@push_back@4
	mov	rax, QWORD PTR [rbx]
	mov	ecx, DWORD PTR [rax+rdi*4]
	mov	DWORD PTR [rdx], ecx

; 996  : 			++this->_Mylast;

	add	QWORD PTR [rbx+8], 4

; 997  : 			}
; 998  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@push_back@4:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	cmp	rax, QWORD PTR [rbx+16]
	jne	SHORT $LN1@push_back@4

; 991  : 				_Reserve(1);

	mov	rcx, rbx
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN1@push_back@4:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	rcx, QWORD PTR [rbx+8]
	test	rcx, rcx
	je	SHORT $LN41@push_back@4
	mov	eax, DWORD PTR [rdi]
	mov	DWORD PTR [rcx], eax
$LN41@push_back@4:

; 996  : 			++this->_Mylast;

	add	QWORD PTR [rbx+8], 4

; 997  : 			}
; 998  : 		}

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@IV?$xalloc@I@@@std@@QEAAXAEBI@Z ENDP ; std::vector<unsigned int,xalloc<unsigned int> >::push_back
_TEXT	ENDS
PUBLIC	__real@41800000
PUBLIC	__real@41c00000
PUBLIC	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack
pdata	SEGMENT
$pdata$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z DD imagerel $LN535
	DD	imagerel $LN535+610
	DD	imagerel $unwind$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z
$pdata$1$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z DD imagerel $LN535+610
	DD	imagerel $LN535+2169
	DD	imagerel $chain$1$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z
$pdata$2$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z DD imagerel $LN535+2169
	DD	imagerel $LN535+2187
	DD	imagerel $chain$2$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z DD 093a01H
	DD	05683aH
	DD	0e00de214H
	DD	07009c00bH
	DD	030076008H
	DD	05006H
$chain$1$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z DD 040d21H
	DD	0df40dH
	DD	0ed405H
	DD	imagerel $LN535
	DD	imagerel $LN535+610
	DD	imagerel $unwind$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z
$chain$2$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z DD 021H
	DD	imagerel $LN535
	DD	imagerel $LN535+610
	DD	imagerel $unwind$?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z
xdata	ENDS
;	COMDAT __real@41800000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_collector.cpp
CONST	ENDS
_TEXT	SEGMENT
ix$2$ = 32
tv2150 = 40
tv2152 = 48
tv2154 = 56
tv2151 = 64
a$173207 = 176
a$173199 = 176
a$173191 = 176
P$ = 176
this$ = 176
a$173683 = 184
a$173675 = 184
a$173667 = 184
V$ = 184
iz$2$ = 192
iy$2$ = 200
?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z PROC ; CDB::CollectorPacked::VPack

; 342  : 	{

$LN535:
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r14
	mov	rbp, rsp
	sub	rsp, 120				; 00000078H

; 343  : 		u32 P = 0xffffffff;
; 344  : 
; 345  : 		u32 ix,iy,iz;
; 346  : 		ix = iFloor(float(V.x-VMmin.x)/VMscale.x*clpMX);

	movss	xmm5, DWORD PTR [rdx]
	mov	rsi, rcx
	mov	r12, rdx

; 347  : 		iy = iFloor(float(V.y-VMmin.y)/VMscale.y*clpMY);

	movss	xmm3, DWORD PTR [r12+4]

; 348  : 		iz = iFloor(float(V.z-VMmin.z)/VMscale.z*clpMZ);

	movss	xmm4, DWORD PTR [r12+8]
	mov	r9d, 158				; 0000009eH
	mov	edx, r9d
	movaps	XMMWORD PTR [rsp+80], xmm6
	mov	ebx, 1
	movaps	xmm0, xmm5
	mov	edi, 0
	subss	xmm0, DWORD PTR [rcx+64]
	movss	xmm6, DWORD PTR __real@41c00000
	divss	xmm0, DWORD PTR [rcx+76]
	mulss	xmm0, xmm6
	movss	DWORD PTR a$173191[rbp-120], xmm0
	mov	r8d, DWORD PTR a$173191[rbp-120]
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR [rsi+68]
	mov	eax, r8d
	mov	r11d, r8d
	sar	eax, 23
	or	r11d, -8388608				; ff800000H
	movzx	ecx, al
	shl	r11d, 8
	mov	eax, ebx
	divss	xmm0, DWORD PTR [rsi+80]
	sub	edx, ecx
	mov	ecx, edx
	shr	r11d, cl
	lea	ecx, DWORD PTR [rdx-96]
	shl	eax, cl
	dec	eax
	sar	eax, 8
	mulss	xmm0, DWORD PTR __real@41800000
	test	eax, r8d
	mov	eax, edi
	sete	al
	sar	r8d, 31
	and	eax, r8d
	sub	r11d, eax
	movss	DWORD PTR a$173199[rbp-120], xmm0
	lea	eax, DWORD PTR [rdx-32]
	movaps	xmm0, xmm4
	subss	xmm0, DWORD PTR [rsi+72]
	sar	eax, 31
	mov	edx, r9d
	and	r11d, eax
	divss	xmm0, DWORD PTR [rsi+84]
	xor	r11d, r8d
	mov	r8d, DWORD PTR a$173199[rbp-120]
	mov	eax, r8d
	mov	r10d, r8d
	sar	eax, 23
	or	r10d, -8388608				; ff800000H
	mulss	xmm0, xmm6
	movzx	ecx, al
	shl	r10d, 8
	mov	eax, ebx
	sub	edx, ecx
	mov	ecx, edx
	movss	DWORD PTR a$173207[rbp-120], xmm0
	shr	r10d, cl
	lea	ecx, DWORD PTR [rdx-96]
	shl	eax, cl
	dec	eax
	sar	eax, 8
	test	eax, r8d
	mov	eax, edi
	sete	al
	sar	r8d, 31
	and	eax, r8d
	sub	r10d, eax
	lea	eax, DWORD PTR [rdx-32]
	sar	eax, 31
	and	r10d, eax
	xor	r10d, r8d
	mov	r8d, DWORD PTR a$173207[rbp-120]
	mov	eax, r8d
	sar	eax, 23
	movzx	ecx, al
	mov	edx, r9d
	mov	r9d, r8d
	mov	eax, ebx
	or	r9d, -8388608				; ff800000H
	sub	edx, ecx
	shl	r9d, 8
	mov	ecx, edx
	shr	r9d, cl
	lea	ecx, DWORD PTR [rdx-96]
	shl	eax, cl

; 349  : 
; 350  : 		//		R_ASSERT(ix<=clpMX && iy<=clpMY && iz<=clpMZ);
; 351  : 		clamp(ix,(u32)0,clpMX);	clamp(iy,(u32)0,clpMY);	clamp(iz,(u32)0,clpMZ);

	mov	ecx, 16
	dec	eax
	sar	eax, 8
	test	eax, r8d
	mov	eax, edi
	sete	al
	sar	r8d, 31
	and	eax, r8d
	sub	r9d, eax
	lea	eax, DWORD PTR [rdx-32]
	sar	eax, 31
	and	r9d, eax
	mov	eax, 24
	xor	r9d, r8d
	cmp	r11d, eax
	cmova	r11d, eax
	cmp	r10d, ecx
	cmova	r10d, ecx
	cmp	r9d, eax

; 352  : 
; 353  : 		{
; 354  : 			DWORDList* vl;
; 355  : 			vl = &(VM[ix][iy][iz]);

	mov	ecx, r11d
	cmova	r9d, eax
	mov	eax, r10d
	mov	DWORD PTR ix$2$[rbp-120], r11d
	mov	QWORD PTR tv2152[rbp-120], rax
	mov	r14d, r9d
	mov	DWORD PTR iz$2$[rbp-120], r9d
	imul	rcx, 17
	add	rax, rcx
	mov	DWORD PTR iy$2$[rbp-120], r10d
	mov	QWORD PTR tv2154[rbp-120], rcx
	mov	QWORD PTR tv2150[rbp-120], r14
	imul	rax, 25
	mov	QWORD PTR tv2151[rbp-120], rax
	add	rax, r14
	shl	rax, 5
	lea	rdi, QWORD PTR [rax+rsi+88]

; 356  : 			for(DWORDIt it=vl->begin();it!=vl->end(); it++)

	mov	rax, QWORD PTR [rax+rsi+88]
	mov	r9, QWORD PTR [rdi+8]
	cmp	rax, r9
	je	SHORT $LN516@VPack@2
	mov	r8, QWORD PTR [rsi]
	movss	xmm1, DWORD PTR EPS_L
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	npad	8
$LL48@VPack@2:

; 357  : 				if( verts[*it].similar(V) )	{

	mov	ecx, DWORD PTR [rax]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	movss	xmm0, DWORD PTR [r8+rdx*4]
	subss	xmm0, xmm5
	andps	xmm0, xmm2
	comiss	xmm0, xmm1
	jae	SHORT $LN99@VPack@2
	movss	xmm0, DWORD PTR [r8+rdx*4+4]
	subss	xmm0, xmm3
	andps	xmm0, xmm2
	comiss	xmm0, xmm1
	jae	SHORT $LN99@VPack@2
	movss	xmm0, DWORD PTR [r8+rdx*4+8]
	subss	xmm0, xmm4
	andps	xmm0, xmm2
	comiss	xmm0, xmm1
	jb	SHORT $LN514@VPack@2
$LN99@VPack@2:

; 356  : 			for(DWORDIt it=vl->begin();it!=vl->end(); it++)

	add	rax, 4
	cmp	rax, r9
	jne	SHORT $LL48@VPack@2
	jmp	SHORT $LN516@VPack@2
$LN514@VPack@2:

; 358  : 					P = *it;

	mov	eax, DWORD PTR [rax]

; 359  : 					break;
; 360  : 				}
; 361  : 		}
; 362  : 		if (0xffffffff==P)

	cmp	eax, -1					; ffffffffH

; 383  : 			if ((ixE!=ix)&&(iyE!=iy)&&(izE!=iz))	VM[ixE][iyE][izE].push_back	(P);

	jne	$LN468@VPack@2
$LN516@VPack@2:

; 363  : 		{
; 364  : 			P = verts.size();

	mov	rcx, QWORD PTR [rsi+8]
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	mov	QWORD PTR [rsp+112], r13
	sub	rcx, QWORD PTR [rsi]
	mov	QWORD PTR [rsp+104], r15
	imul	rcx

; 365  : 			verts.push_back(V);

	mov	rcx, rsi
	mov	rbx, rdx
	mov	rdx, r12
	sar	rbx, 1
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	mov	DWORD PTR P$[rbp-120], ebx
	call	?push_back@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAXAEBU?$_vector3@M@@@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::push_back

; 366  : 
; 367  : 			VM[ix][iy][iz].push_back(P);

	mov	rax, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR P$[rbp-120]
	cmp	rcx, rax
	jae	SHORT $LN127@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN127@VPack@2
	lea	r12, QWORD PTR P$[rbp-120]
	sub	r12, rcx
	sar	r12, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN126@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN126@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN148@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r12*4]
	mov	DWORD PTR [rdx], ecx
$LN148@VPack@2:
	mov	r12, QWORD PTR V$[rbp-120]
	jmp	SHORT $LN164@VPack@2
$LN127@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN124@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN124@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN164@VPack@2
	mov	DWORD PTR [rax], ebx
$LN164@VPack@2:
	add	QWORD PTR [rdi+8], 4

; 368  : 
; 369  : 			u32 ixE,iyE,izE;
; 370  : 			ixE = iFloor(float(V.x+VMeps.x-VMmin.x)/VMscale.x*clpMX);

	movss	xmm0, DWORD PTR [rsi+340088]
	mov	r9d, 158				; 0000009eH
	addss	xmm0, DWORD PTR [r12]
	mov	edx, r9d
	mov	r10d, 1
	mov	r11d, 0
	subss	xmm0, DWORD PTR [rsi+64]
	divss	xmm0, DWORD PTR [rsi+76]
	mulss	xmm0, xmm6
	movss	DWORD PTR a$173667[rbp-120], xmm0
	mov	r8d, DWORD PTR a$173667[rbp-120]

; 371  : 			iyE = iFloor(float(V.y+VMeps.y-VMmin.y)/VMscale.y*clpMY);

	movss	xmm0, DWORD PTR [rsi+340092]
	mov	eax, r8d
	mov	r15d, r8d
	sar	eax, 23
	or	r15d, -8388608				; ff800000H
	addss	xmm0, DWORD PTR [r12+4]
	movzx	ecx, al
	shl	r15d, 8
	mov	eax, r10d
	subss	xmm0, DWORD PTR [rsi+68]
	sub	edx, ecx
	mov	ecx, edx
	shr	r15d, cl
	lea	ecx, DWORD PTR [rdx-96]
	shl	eax, cl
	mov	ecx, r11d
	divss	xmm0, DWORD PTR [rsi+80]
	dec	eax
	sar	eax, 8
	test	eax, r8d
	sete	cl
	sar	r8d, 31
	mov	eax, r8d
	mulss	xmm0, DWORD PTR __real@41800000
	and	eax, ecx
	sub	r15d, eax
	lea	eax, DWORD PTR [rdx-32]
	mov	edx, r9d
	sar	eax, 31
	movss	DWORD PTR a$173675[rbp-120], xmm0

; 372  : 			izE = iFloor(float(V.z+VMeps.z-VMmin.z)/VMscale.z*clpMZ);

	movss	xmm0, DWORD PTR [rsi+340096]
	and	r15d, eax
	addss	xmm0, DWORD PTR [r12+8]
	xor	r15d, r8d
	mov	r8d, DWORD PTR a$173675[rbp-120]
	subss	xmm0, DWORD PTR [rsi+72]
	mov	eax, r8d
	mov	r13d, r8d
	sar	eax, 23
	or	r13d, -8388608				; ff800000H
	movzx	ecx, al
	shl	r13d, 8
	mov	eax, r10d
	divss	xmm0, DWORD PTR [rsi+84]
	sub	edx, ecx
	mov	ecx, edx
	shr	r13d, cl
	lea	ecx, DWORD PTR [rdx-96]
	shl	eax, cl
	dec	eax
	mulss	xmm0, xmm6
	sar	eax, 8
	test	eax, r8d
	mov	eax, r11d
	sete	al
	sar	r8d, 31
	movss	DWORD PTR a$173683[rbp-120], xmm0
	and	eax, r8d
	sub	r13d, eax
	lea	eax, DWORD PTR [rdx-32]
	mov	edx, DWORD PTR a$173683[rbp-120]
	sar	eax, 31
	mov	r12d, edx
	and	r13d, eax
	mov	eax, edx
	sar	eax, 23
	xor	r13d, r8d
	movzx	ecx, al
	sub	r9d, ecx
	or	r12d, -8388608				; ff800000H
	mov	ecx, r9d
	lea	eax, DWORD PTR [r9-32]
	shl	r12d, 8
	shr	r12d, cl
	lea	ecx, DWORD PTR [r9-96]
	shl	r10d, cl

; 373  : 
; 374  : 			//			R_ASSERT(ixE<=clpMX && iyE<=clpMY && izE<=clpMZ);
; 375  : 			clamp(ixE,(u32)0,clpMX);	clamp(iyE,(u32)0,clpMY);	clamp(izE,(u32)0,clpMZ);

	mov	ecx, 16
	dec	r10d
	sar	r10d, 8
	test	r10d, edx
	sete	r11b
	sar	edx, 31
	sar	eax, 31
	and	r11d, edx
	sub	r12d, r11d
	and	r12d, eax
	mov	eax, 24
	xor	r12d, edx
	cmp	r15d, 24
	cmova	r15d, eax
	cmp	r13d, 16
	cmova	r13d, ecx
	cmp	r12d, eax
	cmova	r12d, eax

; 376  : 
; 377  : 			if (ixE!=ix)							VM[ixE][iy][iz].push_back	(P);

	cmp	r15d, DWORD PTR ix$2$[rbp-120]
	je	$LN192@VPack@2
	mov	eax, r15d
	lea	rcx, QWORD PTR P$[rbp-120]
	imul	rax, 17
	add	rax, QWORD PTR tv2152[rbp-120]
	imul	rax, 25
	add	rax, r14
	shl	rax, 5
	lea	rdi, QWORD PTR [rax+rsi+88]
	mov	rax, QWORD PTR [rax+rsi+96]
	cmp	rcx, rax
	jae	SHORT $LN194@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN194@VPack@2
	lea	r14, QWORD PTR P$[rbp-120]
	sub	r14, rcx
	sar	r14, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN193@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN193@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN215@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r14*4]
	mov	DWORD PTR [rdx], ecx
$LN215@VPack@2:
	mov	r14, QWORD PTR tv2150[rbp-120]
	jmp	SHORT $LN231@VPack@2
$LN194@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN191@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN191@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN231@VPack@2
	mov	DWORD PTR [rax], ebx
$LN231@VPack@2:
	add	QWORD PTR [rdi+8], 4
$LN192@VPack@2:

; 378  : 			if (iyE!=iy)							VM[ix][iyE][iz].push_back	(P);

	cmp	r13d, DWORD PTR iy$2$[rbp-120]
	je	SHORT $LN238@VPack@2
	mov	eax, r13d
	lea	rcx, QWORD PTR P$[rbp-120]
	add	rax, QWORD PTR tv2154[rbp-120]
	imul	rax, 25
	add	rax, r14
	shl	rax, 5
	lea	rdi, QWORD PTR [rax+rsi+88]
	mov	rax, QWORD PTR [rax+rsi+96]
	cmp	rcx, rax
	jae	SHORT $LN240@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN240@VPack@2
	lea	r14, QWORD PTR P$[rbp-120]
	sub	r14, rcx
	sar	r14, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN239@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN239@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN277@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r14*4]
	mov	DWORD PTR [rdx], ecx
	jmp	SHORT $LN277@VPack@2
$LN240@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN237@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN237@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN277@VPack@2
	mov	DWORD PTR [rax], ebx
$LN277@VPack@2:
	add	QWORD PTR [rdi+8], 4
$LN238@VPack@2:

; 379  : 			if (izE!=iz)							VM[ix][iy][izE].push_back	(P);

	cmp	r12d, DWORD PTR iz$2$[rbp-120]
	je	SHORT $LN284@VPack@2
	mov	eax, r12d
	lea	rcx, QWORD PTR P$[rbp-120]
	add	rax, QWORD PTR tv2151[rbp-120]
	shl	rax, 5
	lea	rdi, QWORD PTR [rax+rsi+88]
	mov	rax, QWORD PTR [rax+rsi+96]
	cmp	rcx, rax
	jae	SHORT $LN286@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN286@VPack@2
	lea	r14, QWORD PTR P$[rbp-120]
	sub	r14, rcx
	sar	r14, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN285@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN285@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN323@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r14*4]
	mov	DWORD PTR [rdx], ecx
	jmp	SHORT $LN323@VPack@2
$LN286@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN283@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN283@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN323@VPack@2
	mov	DWORD PTR [rax], ebx
$LN323@VPack@2:
	add	QWORD PTR [rdi+8], 4
$LN284@VPack@2:

; 380  : 			if ((ixE!=ix)&&(iyE!=iy))				VM[ixE][iyE][iz].push_back	(P);

	cmp	r15d, DWORD PTR ix$2$[rbp-120]
	je	$LN532@VPack@2
	cmp	r13d, DWORD PTR iy$2$[rbp-120]
	je	$LN330@VPack@2
	mov	eax, r13d
	mov	ecx, r15d
	imul	rcx, 17
	add	rcx, rax
	imul	rcx, 25
	add	rcx, QWORD PTR tv2150[rbp-120]
	shl	rcx, 5
	lea	rdi, QWORD PTR [rcx+rsi+88]
	lea	rcx, QWORD PTR P$[rbp-120]
	mov	rax, QWORD PTR [rdi+8]
	cmp	rcx, rax
	jae	SHORT $LN332@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN332@VPack@2
	lea	r14, QWORD PTR P$[rbp-120]
	sub	r14, rcx
	sar	r14, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN331@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN331@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN369@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r14*4]
	mov	DWORD PTR [rdx], ecx
	jmp	SHORT $LN369@VPack@2
$LN332@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN329@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN329@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN369@VPack@2
	mov	DWORD PTR [rax], ebx
$LN369@VPack@2:
	add	QWORD PTR [rdi+8], 4
$LN330@VPack@2:

; 381  : 			if ((ixE!=ix)&&(izE!=iz))				VM[ixE][iy][izE].push_back	(P);

	mov	eax, DWORD PTR iz$2$[rbp-120]
	cmp	r12d, eax
	je	$LN376@VPack@2
	mov	eax, r12d
	mov	ecx, r15d
	imul	rcx, 17
	add	rcx, QWORD PTR tv2152[rbp-120]
	imul	rcx, 25
	add	rcx, rax
	shl	rcx, 5
	lea	rdi, QWORD PTR [rcx+rsi+88]
	lea	rcx, QWORD PTR P$[rbp-120]
	mov	rax, QWORD PTR [rdi+8]
	cmp	rcx, rax
	jae	SHORT $LN378@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN378@VPack@2
	lea	r14, QWORD PTR P$[rbp-120]
	sub	r14, rcx
	sar	r14, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN377@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN377@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN415@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r14*4]
	mov	DWORD PTR [rdx], ecx
	jmp	SHORT $LN415@VPack@2
$LN378@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN375@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN375@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN415@VPack@2
	mov	DWORD PTR [rax], ebx
$LN415@VPack@2:
	add	QWORD PTR [rdi+8], 4
$LN532@VPack@2:
	mov	eax, DWORD PTR iz$2$[rbp-120]
$LN376@VPack@2:

; 382  : 			if ((iyE!=iy)&&(izE!=iz))				VM[ix][iyE][izE].push_back	(P);

	mov	ecx, DWORD PTR iy$2$[rbp-120]
	cmp	r13d, ecx
	je	$LN422@VPack@2
	cmp	r12d, eax
	je	$LN422@VPack@2
	mov	eax, r12d
	mov	ecx, r13d
	add	rcx, QWORD PTR tv2154[rbp-120]
	imul	rcx, 25
	add	rcx, rax
	shl	rcx, 5
	lea	rdi, QWORD PTR [rcx+rsi+88]
	lea	rcx, QWORD PTR P$[rbp-120]
	mov	rax, QWORD PTR [rdi+8]
	cmp	rcx, rax
	jae	SHORT $LN424@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN424@VPack@2
	lea	r14, QWORD PTR P$[rbp-120]
	sub	r14, rcx
	sar	r14, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN423@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN423@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN461@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+r14*4]
	mov	DWORD PTR [rdx], ecx
	jmp	SHORT $LN461@VPack@2
$LN424@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN421@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN421@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN461@VPack@2
	mov	DWORD PTR [rax], ebx
$LN461@VPack@2:
	mov	ecx, DWORD PTR iy$2$[rbp-120]
	add	QWORD PTR [rdi+8], 4
$LN422@VPack@2:

; 383  : 			if ((ixE!=ix)&&(iyE!=iy)&&(izE!=iz))	VM[ixE][iyE][izE].push_back	(P);

	cmp	r15d, DWORD PTR ix$2$[rbp-120]
	je	$LN528@VPack@2
	cmp	r13d, ecx
	je	$LN528@VPack@2
	cmp	r12d, DWORD PTR iz$2$[rbp-120]
	je	$LN528@VPack@2
	mov	eax, r13d
	mov	ecx, r15d
	imul	rcx, 17
	add	rcx, rax
	mov	eax, r12d
	imul	rcx, 25
	add	rcx, rax
	shl	rcx, 5
	lea	rdi, QWORD PTR [rcx+rsi+88]
	lea	rcx, QWORD PTR P$[rbp-120]
	mov	rax, QWORD PTR [rdi+8]
	cmp	rcx, rax
	jae	SHORT $LN470@VPack@2
	mov	rcx, QWORD PTR [rdi]
	lea	rdx, QWORD PTR P$[rbp-120]
	cmp	rcx, rdx
	ja	SHORT $LN470@VPack@2
	lea	rsi, QWORD PTR P$[rbp-120]
	sub	rsi, rcx
	sar	rsi, 2
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN469@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN469@VPack@2:
	mov	rdx, QWORD PTR [rdi+8]
	test	rdx, rdx
	je	SHORT $LN507@VPack@2
	mov	rax, QWORD PTR [rdi]
	mov	ecx, DWORD PTR [rax+rsi*4]
	mov	DWORD PTR [rdx], ecx
	jmp	SHORT $LN507@VPack@2
$LN470@VPack@2:
	cmp	rax, QWORD PTR [rdi+16]
	jne	SHORT $LN467@VPack@2
	mov	rcx, rdi
	call	?_Reserve@?$vector@IV?$xalloc@I@@@std@@IEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::_Reserve
$LN467@VPack@2:
	mov	rax, QWORD PTR [rdi+8]
	test	rax, rax
	je	SHORT $LN507@VPack@2
	mov	DWORD PTR [rax], ebx
$LN507@VPack@2:
	add	QWORD PTR [rdi+8], 4
$LN528@VPack@2:
	mov	r13, QWORD PTR [rsp+112]
	mov	r15, QWORD PTR [rsp+104]

; 384  : 		}
; 385  : 		return P;

	mov	eax, ebx
$LN468@VPack@2:

; 386  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+80]
	add	rsp, 120				; 00000078H
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ENDP ; CDB::CollectorPacked::VPack
_TEXT	ENDS
PUBLIC	?add_face_D@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z ; CDB::CollectorPacked::add_face_D
pdata	SEGMENT
$pdata$?add_face_D@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z DD imagerel $LN50
	DD	imagerel $LN50+264
	DD	imagerel $unwind$?add_face_D@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?add_face_D@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
T$ = 32
this$ = 80
v0$ = 88
v1$ = 96
v2$ = 104
dummy$ = 112
?add_face_D@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z PROC ; CDB::CollectorPacked::add_face_D

; 332  : 	{

$LN50:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, r9
	mov	rbx, r8
	mov	rsi, rcx

; 333  : 		TRI T;
; 334  : 		T.verts	[0] = VPack(v0);

	call	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack

; 335  : 		T.verts	[1] = VPack(v1);

	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR T$[rsp], eax
	call	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack

; 336  : 		T.verts	[2] = VPack(v2);

	mov	rdx, rdi
	mov	rcx, rsi
	mov	DWORD PTR T$[rsp+4], eax
	call	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack

; 337  : 		T.dummy			= dummy;
; 338  : 		faces.push_back(T);

	mov	r8, QWORD PTR [rsi+40]
	mov	rbx, QWORD PTR dummy$[rsp]
	mov	DWORD PTR T$[rsp+8], eax
	lea	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR T$[rsp+16], rbx
	cmp	rax, r8
	jae	SHORT $LN6@add_face_D@2
	mov	rax, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rax, rcx
	ja	SHORT $LN6@add_face_D@2
	lea	rcx, QWORD PTR T$[rsp]
	sub	rcx, rax
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	rcx
	mov	rbx, rdx
	sar	rbx, 2
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN5@add_face_D@2
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN5@add_face_D@2:
	mov	rcx, QWORD PTR [rsi+40]
	mov	r8, QWORD PTR [rsi+32]
	lea	rdx, QWORD PTR [rbx+rbx*2]
	test	rcx, rcx
	je	SHORT $LN43@add_face_D@2
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN43@add_face_D@2
$LN6@add_face_D@2:
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN3@add_face_D@2
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN3@add_face_D@2:
	mov	rcx, QWORD PTR [rsi+40]
	test	rcx, rcx
	je	SHORT $LN43@add_face_D@2
	mov	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR T$[rsp+8]
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rbx
$LN43@add_face_D@2:
	add	QWORD PTR [rsi+40], 24

; 339  : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?add_face_D@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00_K@Z ENDP ; CDB::CollectorPacked::add_face_D
_TEXT	ENDS
PUBLIC	?add_face@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z ; CDB::CollectorPacked::add_face
pdata	SEGMENT
$pdata$?add_face@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z DD imagerel $LN50
	DD	imagerel $LN50+303
	DD	imagerel $unwind$?add_face@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?add_face@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
T$ = 32
this$ = 80
v0$ = 88
v1$ = 96
v2$ = 104
material$ = 112
sector$ = 120
?add_face@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z PROC ; CDB::CollectorPacked::add_face

; 314  : 	{

$LN50:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, r9
	mov	rbx, r8
	mov	rsi, rcx

; 315  : 		TRI T;
; 316  : 		T.verts	[0] = VPack(v0);

	call	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack

; 317  : 		T.verts	[1] = VPack(v1);

	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR T$[rsp], eax
	call	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack

; 318  : 		T.verts	[2] = VPack(v2);

	mov	rdx, rdi
	mov	rcx, rsi
	mov	DWORD PTR T$[rsp+4], eax
	call	?VPack@CollectorPacked@CDB@@AEAAIAEBU?$_vector3@M@@@Z ; CDB::CollectorPacked::VPack

; 319  : 		T.material		= material;
; 320  : 		T.sector		= sector;

	movzx	ebx, WORD PTR material$[rsp]

; 321  : 		faces.push_back(T);

	mov	r8, QWORD PTR [rsi+40]
	mov	DWORD PTR T$[rsp+8], eax
	movzx	eax, WORD PTR sector$[rsp]
	and	ebx, 16383				; 00003fffH
	shl	rax, 16
	mov	rcx, -4294918144			; ffffffff0000c000H
	or	rbx, rax
	mov	rax, QWORD PTR T$[rsp+16]
	and	rax, rcx
	or	rbx, rax
	lea	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR T$[rsp+16], rbx
	cmp	rax, r8
	jae	SHORT $LN6@add_face@2
	mov	rax, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rax, rcx
	ja	SHORT $LN6@add_face@2
	lea	rcx, QWORD PTR T$[rsp]
	sub	rcx, rax
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	rcx
	mov	rbx, rdx
	sar	rbx, 2
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN5@add_face@2
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN5@add_face@2:
	mov	rcx, QWORD PTR [rsi+40]
	mov	r8, QWORD PTR [rsi+32]
	lea	rdx, QWORD PTR [rbx+rbx*2]
	test	rcx, rcx
	je	SHORT $LN43@add_face@2
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN43@add_face@2
$LN6@add_face@2:
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN3@add_face@2
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN3@add_face@2:
	mov	rcx, QWORD PTR [rsi+40]
	test	rcx, rcx
	je	SHORT $LN43@add_face@2
	mov	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR T$[rsp+8]
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rbx
$LN43@add_face@2:
	add	QWORD PTR [rsi+40], 24

; 322  : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?add_face@CollectorPacked@CDB@@QEAAXAEBU?$_vector3@M@@00GG@Z ENDP ; CDB::CollectorPacked::add_face
_TEXT	ENDS
PUBLIC	?add_face_packed_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_KM@Z ; CDB::Collector::add_face_packed_D
pdata	SEGMENT
$pdata$?add_face_packed_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_KM@Z DD imagerel $LN50
	DD	imagerel $LN50+282
	DD	imagerel $unwind$?add_face_packed_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_KM@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?add_face_packed_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_KM@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
T$ = 32
this$ = 80
v0$ = 88
v1$ = 96
v2$ = 104
dummy$ = 112
eps$ = 120
?add_face_packed_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_KM@Z PROC ; CDB::Collector::add_face_packed_D

; 76   : 	{

$LN50:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 77   : 		TRI T;
; 78   : 		T.verts	[0] = VPack(v0,eps);

	movss	xmm2, DWORD PTR eps$[rsp]
	mov	rdi, r9
	mov	rbx, r8
	mov	rsi, rcx
	call	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack

; 79   : 		T.verts	[1] = VPack(v1,eps);

	movss	xmm2, DWORD PTR eps$[rsp]
	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR T$[rsp], eax
	call	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack

; 80   : 		T.verts	[2] = VPack(v2,eps);

	mov	rdx, rdi
	mov	rcx, rsi
	movss	xmm2, DWORD PTR eps$[rsp]
	mov	DWORD PTR T$[rsp+4], eax
	call	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack

; 81   : 		T.dummy			= dummy;
; 82   : 		faces.push_back(T);

	mov	r8, QWORD PTR [rsi+40]
	mov	rbx, QWORD PTR dummy$[rsp]
	mov	DWORD PTR T$[rsp+8], eax
	lea	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR T$[rsp+16], rbx
	cmp	rax, r8
	jae	SHORT $LN6@add_face_p
	mov	rax, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rax, rcx
	ja	SHORT $LN6@add_face_p
	lea	rcx, QWORD PTR T$[rsp]
	sub	rcx, rax
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	rcx
	mov	rbx, rdx
	sar	rbx, 2
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN5@add_face_p
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN5@add_face_p:
	mov	rcx, QWORD PTR [rsi+40]
	mov	r8, QWORD PTR [rsi+32]
	lea	rdx, QWORD PTR [rbx+rbx*2]
	test	rcx, rcx
	je	SHORT $LN43@add_face_p
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN43@add_face_p
$LN6@add_face_p:
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN3@add_face_p
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN3@add_face_p:
	mov	rcx, QWORD PTR [rsi+40]
	test	rcx, rcx
	je	SHORT $LN43@add_face_p
	mov	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR T$[rsp+8]
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rbx
$LN43@add_face_p:
	add	QWORD PTR [rsi+40], 24

; 83   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?add_face_packed_D@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00_KM@Z ENDP ; CDB::Collector::add_face_packed_D
_TEXT	ENDS
PUBLIC	?add_face_packed@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GGM@Z ; CDB::Collector::add_face_packed
pdata	SEGMENT
$pdata$?add_face_packed@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GGM@Z DD imagerel $LN50
	DD	imagerel $LN50+330
	DD	imagerel $unwind$?add_face_packed@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GGM@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?add_face_packed@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GGM@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
T$ = 32
this$ = 80
v0$ = 88
v1$ = 96
v2$ = 104
material$ = 112
sector$ = 120
eps$ = 128
?add_face_packed@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GGM@Z PROC ; CDB::Collector::add_face_packed

; 58   : 	{

$LN50:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 59   : 		TRI T;
; 60   : 		T.verts	[0]		= VPack(v0,eps);

	movss	xmm2, DWORD PTR eps$[rsp]
	mov	rdi, r9
	mov	rbx, r8
	mov	rsi, rcx
	call	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack

; 61   : 		T.verts	[1]		= VPack(v1,eps);

	movss	xmm2, DWORD PTR eps$[rsp]
	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR T$[rsp], eax
	call	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack

; 62   : 		T.verts	[2]		= VPack(v2,eps);

	mov	rdx, rdi
	mov	rcx, rsi
	movss	xmm2, DWORD PTR eps$[rsp]
	mov	DWORD PTR T$[rsp+4], eax
	call	?VPack@Collector@CDB@@AEAAIAEBU?$_vector3@M@@M@Z ; CDB::Collector::VPack

; 63   : 		T.material		= material;
; 64   : 		T.sector		= sector;

	movzx	ebx, WORD PTR material$[rsp]

; 65   : 		faces.push_back(T);

	mov	r8, QWORD PTR [rsi+40]
	mov	DWORD PTR T$[rsp+8], eax
	movzx	eax, WORD PTR sector$[rsp]
	and	ebx, 16383				; 00003fffH
	mov	rcx, -4294918144			; ffffffff0000c000H
	shl	rax, 16
	or	rbx, rax
	mov	rax, QWORD PTR T$[rsp+16]
	and	rax, rcx
	or	rbx, rax
	lea	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR T$[rsp+16], rbx
	cmp	rax, r8
	jae	SHORT $LN6@add_face_p@2
	mov	rax, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR T$[rsp]
	cmp	rax, rcx
	ja	SHORT $LN6@add_face_p@2
	lea	rcx, QWORD PTR T$[rsp]
	sub	rcx, rax
	mov	rax, 3074457345618258603		; 2aaaaaaaaaaaaaabH
	imul	rcx
	mov	rbx, rdx
	sar	rbx, 2
	mov	rax, rbx
	shr	rax, 63					; 0000003fH
	add	rbx, rax
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN5@add_face_p@2
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN5@add_face_p@2:
	mov	rcx, QWORD PTR [rsi+40]
	mov	r8, QWORD PTR [rsi+32]
	lea	rdx, QWORD PTR [rbx+rbx*2]
	test	rcx, rcx
	je	SHORT $LN43@add_face_p@2
	mov	rax, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR [r8+rdx*8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR [r8+rdx*8+16]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN43@add_face_p@2
$LN6@add_face_p@2:
	cmp	r8, QWORD PTR [rsi+48]
	jne	SHORT $LN3@add_face_p@2
	lea	rcx, QWORD PTR [rsi+32]
	call	?_Reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@IEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::_Reserve
$LN3@add_face_p@2:
	mov	rcx, QWORD PTR [rsi+40]
	test	rcx, rcx
	je	SHORT $LN43@add_face_p@2
	mov	rax, QWORD PTR T$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR T$[rsp+8]
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rbx
$LN43@add_face_p@2:
	add	QWORD PTR [rsi+40], 24

; 66   : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?add_face_packed@Collector@CDB@@QEAAXAEBU?$_vector3@M@@00GGM@Z ENDP ; CDB::Collector::add_face_packed
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_stl_extensions.h
;	COMDAT ??0?$xr_vector@IV?$xalloc@I@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$xr_vector@IV?$xalloc@I@@@@QEAA@XZ PROC		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >, COMDAT

; 122  : 			xr_vector			()									: inherited	()					{}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, rcx
	ret	0
??0?$xr_vector@IV?$xalloc@I@@@@QEAA@XZ ENDP		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	__real@3d2aaaab
PUBLIC	__real@3d800000
PUBLIC	??0CollectorPacked@CDB@@QEAA@AEBV?$_box3@M@@HH@Z ; CDB::CollectorPacked::CollectorPacked
pdata	SEGMENT
$pdata$??0CollectorPacked@CDB@@QEAA@AEBV?$_box3@M@@HH@Z DD imagerel $LN68
	DD	imagerel $LN68+478
	DD	imagerel $unwind$??0CollectorPacked@CDB@@QEAA@AEBV?$_box3@M@@HH@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0CollectorPacked@CDB@@QEAA@AEBV?$_box3@M@@HH@Z DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT __real@3d2aaaab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
CONST	SEGMENT
__real@3d2aaaab DD 03d2aaaabr			; 0.0416667
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_collector.cpp
CONST	ENDS
_TEXT	SEGMENT
this$ = 80
bb$ = 88
apx_vertices$ = 96
apx_faces$ = 104
??0CollectorPacked@CDB@@QEAA@AEBV?$_box3@M@@HH@Z PROC	; CDB::CollectorPacked::CollectorPacked

; 289  : 	{

$LN68:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	r15d, r15d
	mov	rbp, rcx
	lea	rax, QWORD PTR [rcx+88]
	mov	QWORD PTR [rcx], r15
	mov	QWORD PTR [rcx+8], r15
	mov	QWORD PTR [rcx+16], r15
	mov	QWORD PTR [rcx+32], r15
	mov	QWORD PTR [rcx+40], r15
	mov	QWORD PTR [rcx+48], r15
	mov	ecx, 10624				; 00002980H
	movsxd	rsi, r9d
	movsxd	rdi, r8d
	npad	8
$LL41@CollectorP@2:
	mov	QWORD PTR [rax], r15
	mov	QWORD PTR [rax+8], r15
	mov	QWORD PTR [rax+16], r15
	add	rax, 32					; 00000020H
	dec	ecx
	jns	SHORT $LL41@CollectorP@2

; 290  : 		// Params
; 291  : 		VMscale.set		(bb.max.x-bb.min.x, bb.max.y-bb.min.y, bb.max.z-bb.min.z);

	movss	xmm2, DWORD PTR [rdx+20]
	movss	xmm1, DWORD PTR [rdx+16]
	movss	xmm0, DWORD PTR [rdx+12]
	subss	xmm0, DWORD PTR [rdx]
	subss	xmm1, DWORD PTR [rdx+4]
	subss	xmm2, DWORD PTR [rdx+8]
	movss	DWORD PTR [rbp+76], xmm0
	movss	DWORD PTR [rbp+80], xmm1

; 292  : 		VMmin.set		(bb.min);
; 293  : 		VMeps.set		(VMscale.x/clpMX/2,VMscale.y/clpMY/2,VMscale.z/clpMZ/2);

	movss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR [rbp+84], xmm2
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rbp+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rbp+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rbp+72], eax
	movss	xmm0, DWORD PTR [rbp+80]
	movss	xmm4, DWORD PTR [rbp+76]
	movss	xmm3, DWORD PTR [rbp+84]
	mulss	xmm0, DWORD PTR __real@3d800000
	mulss	xmm4, DWORD PTR __real@3d2aaaab
	mulss	xmm3, DWORD PTR __real@3d2aaaab
	mulss	xmm0, xmm1
	mulss	xmm4, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR [rbp+340092], xmm0

; 294  : 		VMeps.x			= (VMeps.x<EPS_L)?VMeps.x:EPS_L;

	movss	xmm0, DWORD PTR EPS_L
	movss	DWORD PTR [rbp+340088], xmm4
	comiss	xmm4, xmm0
	movss	DWORD PTR [rbp+340096], xmm3
	jb	SHORT $LN13@CollectorP@2
	movaps	xmm4, xmm0
$LN13@CollectorP@2:

; 295  : 		VMeps.y			= (VMeps.y<EPS_L)?VMeps.y:EPS_L;

	movss	xmm1, DWORD PTR [rbp+340092]
	movss	DWORD PTR [rbp+340088], xmm4
	comiss	xmm1, xmm0
	jb	SHORT $LN15@CollectorP@2
	movaps	xmm1, xmm0
$LN15@CollectorP@2:

; 296  : 		VMeps.z			= (VMeps.z<EPS_L)?VMeps.z:EPS_L;

	movss	xmm2, DWORD PTR [rbp+340096]
	movss	DWORD PTR [rbp+340092], xmm1
	comiss	xmm2, xmm0
	jb	SHORT $LN17@CollectorP@2
	movaps	xmm2, xmm0
$LN17@CollectorP@2:

; 297  : 
; 298  : 		// Preallocate memory
; 299  : 		verts.reserve	(apx_vertices);

	mov	rdx, rdi
	mov	rcx, rbp
	movss	DWORD PTR [rbp+340096], xmm2
	call	?reserve@?$vector@U?$_vector3@M@@V?$xalloc@U?$_vector3@M@@@@@std@@QEAAX_K@Z ; std::vector<_vector3<float>,xalloc<_vector3<float> > >::reserve

; 300  : 		faces.reserve	(apx_faces);

	lea	rcx, QWORD PTR [rbp+32]
	mov	rdx, rsi
	call	?reserve@?$vector@VTRI@CDB@@V?$xalloc@VTRI@CDB@@@@@std@@QEAAX_K@Z ; std::vector<CDB::TRI,xalloc<CDB::TRI> >::reserve

; 301  : 
; 302  : 		int		_size	= (clpMX+1)*(clpMY+1)*(clpMZ+1);
; 303  : 		int		_average= (apx_vertices/_size)/2;

	mov	eax, -983496981				; ffffffffc56106ebH

; 304  : 		for (int ix=0; ix<clpMX+1; ix++)

	mov	r14d, r15d
	imul	edi
	add	edx, edi
	sar	edx, 13
	mov	eax, edx
	shr	eax, 31
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	movsxd	r12, eax
$LL9@CollectorP@2:

; 305  : 			for (int iy=0; iy<clpMY+1; iy++)

	movsxd	r13, r14d
	mov	esi, r15d
	imul	r13, 17
	npad	6
$LL6@CollectorP@2:

; 306  : 				for (int iz=0; iz<clpMZ+1; iz++)

	movsxd	rdi, esi
	mov	ebx, r15d
	add	rdi, r13
	imul	rdi, 25
	npad	3
$LL3@CollectorP@2:

; 307  : 					VM[ix][iy][iz].reserve	(_average);

	movsxd	rax, ebx
	mov	rdx, r12
	add	rax, rdi
	shl	rax, 5
	lea	rcx, QWORD PTR [rax+rbp+88]
	call	?reserve@?$vector@IV?$xalloc@I@@@std@@QEAAX_K@Z ; std::vector<unsigned int,xalloc<unsigned int> >::reserve
	inc	ebx
	cmp	ebx, 25
	jb	SHORT $LL3@CollectorP@2

; 305  : 			for (int iy=0; iy<clpMY+1; iy++)

	inc	esi
	cmp	esi, 17
	jb	SHORT $LL6@CollectorP@2

; 304  : 		for (int ix=0; ix<clpMX+1; ix++)

	inc	r14d
	cmp	r14d, 25
	jb	SHORT $LL9@CollectorP@2

; 308  : 	}

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
??0CollectorPacked@CDB@@QEAA@AEBV?$_box3@M@@HH@Z ENDP	; CDB::CollectorPacked::CollectorPacked
END
