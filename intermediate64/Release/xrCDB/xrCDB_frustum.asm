; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?getMask@CFrustum@@QEBAIXZ			; CFrustum::getMask
PUBLIC	?_init@?$frustum_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ; frustum_collider<1,1>::_init
PUBLIC	?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ; frustum_collider<1,1>::_box
PUBLIC	?_prim@?$frustum_collider@$00$00@@QEAAXK@Z	; frustum_collider<1,1>::_prim
PUBLIC	?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<1,1>::_stab
PUBLIC	?_init@?$frustum_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ; frustum_collider<1,0>::_init
PUBLIC	?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ; frustum_collider<1,0>::_box
PUBLIC	?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z	; frustum_collider<1,0>::_prim
PUBLIC	?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<1,0>::_stab
PUBLIC	?_init@?$frustum_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ; frustum_collider<0,1>::_init
PUBLIC	?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ; frustum_collider<0,1>::_box
PUBLIC	?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z	; frustum_collider<0,1>::_prim
PUBLIC	?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<0,1>::_stab
PUBLIC	?_init@?$frustum_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ; frustum_collider<0,0>::_init
PUBLIC	?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ; frustum_collider<0,0>::_box
PUBLIC	?resize@?$svector@U?$_vector3@M@@$0DA@@@QEAAXH@Z ; svector<_vector3<float>,48>::resize
PUBLIC	?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z	; frustum_collider<0,0>::_prim
PUBLIC	?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<0,0>::_stab
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fixedvector.h
;	COMDAT ?resize@?$svector@U?$_vector3@M@@$0DA@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 8
?resize@?$svector@U?$_vector3@M@@$0DA@@@QEAAXH@Z PROC	; svector<_vector3<float>,48>::resize, COMDAT

; 32   : 	IC void		resize(int c)				{ VERIFY(c<=dim); count=c;				}

	mov	DWORD PTR [rcx+576], 3
	ret	0
?resize@?$svector@U?$_vector3@M@@$0DA@@@QEAAXH@Z ENDP	; svector<_vector3<float>,48>::resize
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
_TEXT	ENDS
;	COMDAT ?_init@?$frustum_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
_F$ = 40
?_init@?$frustum_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z PROC ; frustum_collider<0,0>::_init, COMDAT

; 22   : 		dest		= CL;
; 23   : 		tris		= T;
; 24   : 		verts		= V;
; 25   : 		F			= _F;

	mov	rax, QWORD PTR _F$[rsp]
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+16], r8

; 26   : 	}

	ret	0
?_init@?$frustum_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ENDP ; frustum_collider<0,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$frustum_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
_F$ = 40
?_init@?$frustum_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z PROC ; frustum_collider<0,1>::_init, COMDAT

; 22   : 		dest		= CL;
; 23   : 		tris		= T;
; 24   : 		verts		= V;
; 25   : 		F			= _F;

	mov	rax, QWORD PTR _F$[rsp]
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+16], r8

; 26   : 	}

	ret	0
?_init@?$frustum_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ENDP ; frustum_collider<0,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$frustum_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
_F$ = 40
?_init@?$frustum_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z PROC ; frustum_collider<1,0>::_init, COMDAT

; 22   : 		dest		= CL;
; 23   : 		tris		= T;
; 24   : 		verts		= V;
; 25   : 		F			= _F;

	mov	rax, QWORD PTR _F$[rsp]
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+16], r8

; 26   : 	}

	ret	0
?_init@?$frustum_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ENDP ; frustum_collider<1,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$frustum_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
_F$ = 40
?_init@?$frustum_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z PROC ; frustum_collider<1,1>::_init, COMDAT

; 22   : 		dest		= CL;
; 23   : 		tris		= T;
; 24   : 		verts		= V;
; 25   : 		F			= _F;

	mov	rax, QWORD PTR _F$[rsp]
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+16], r8

; 26   : 	}

	ret	0
?_init@?$frustum_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@PEBVCFrustum@@@Z ENDP ; frustum_collider<1,1>::_init
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\frustum.h
_TEXT	ENDS
;	COMDAT ?getMask@CFrustum@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?getMask@CFrustum@@QEBAIXZ PROC				; CFrustum::getMask, COMDAT

; 79   : 	u32				getMask				() const { return (1<<p_count)-1; }

	mov	ecx, DWORD PTR [rcx+240]
	mov	eax, 1
	shl	eax, cl
	dec	eax
	ret	0
?getMask@CFrustum@@QEBAIXZ ENDP				; CFrustum::getMask
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fixedvector.h
pdata	SEGMENT
$pdata$?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN30
	DD	imagerel $LN30+155
	DD	imagerel $unwind$?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 48
prim$ = 56
?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z PROC	; frustum_collider<0,0>::_prim, COMDAT

; 35   : 	{

$LN30:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 36   : 		if (bClass3)	{
; 37   : 			sPoly		src,dst;
; 38   : 			src.resize	(3);
; 39   : 			src[0]		= verts[ tris[prim].verts[0] ];
; 40   : 			src[1]		= verts[ tris[prim].verts[1] ];
; 41   : 			src[2]		= verts[ tris[prim].verts[2] ];
; 42   : 			if (F->ClipPoly(src,dst))
; 43   : 			{
; 44   : 				RESULT& R	= dest->r_add();
; 45   : 				R.id		= prim;
; 46   : 				R.verts[0]	= verts[ tris[prim].verts[0] ];
; 47   : 				R.verts[1]	= verts[ tris[prim].verts[1] ];
; 48   : 				R.verts[2]	= verts[ tris[prim].verts[2] ];
; 49   : 				R.dummy		= tris[prim].dummy;
; 50   : 			}
; 51   : 		} else {
; 52   : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	mov	ebx, edx
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 53   : 			R.id		= prim;
; 54   : 			R.verts[0]	= verts[ tris[prim].verts[0] ];

	lea	r10, QWORD PTR [rbx+rbx*2]
	mov	DWORD PTR [rax+48], ebx
	mov	rdx, QWORD PTR [rdi+8]

; 55   : 			R.verts[1]	= verts[ tris[prim].verts[1] ];
; 56   : 			R.verts[2]	= verts[ tris[prim].verts[2] ];
; 57   : 			R.dummy		= tris[prim].dummy;
; 58   : 		}
; 59   : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	r8d, DWORD PTR [rdx+r10*8]
	mov	rdx, QWORD PTR [rdi+16]
	mov	r11, rax
	lea	r9, QWORD PTR [r8+r8*2]
	mov	rcx, QWORD PTR [rdx+r9*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r9*4+8]
	mov	DWORD PTR [r11+8], eax
	mov	rax, QWORD PTR [rdi+8]
	mov	ecx, DWORD PTR [rax+r10*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rdi+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax
	mov	rax, QWORD PTR [rdi+8]
	mov	ecx, DWORD PTR [rax+r10*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rdi+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, QWORD PTR [rax+r10*8+16]
	mov	QWORD PTR [r11+40], rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z ENDP	; frustum_collider<0,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD 031e01H
	DD	04681eH
	DD	0a207H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
_TEXT	SEGMENT
this$ = 96
C$ = 104
E$ = 112
mask$ = 120
?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z PROC ; frustum_collider<0,0>::_box, COMDAT

; 28   : 	{

$LN7:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 29   : 		Fvector		mM[2];
; 30   : 		mM[0].sub	(C,E);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [r8+4]

; 31   : 		mM[1].add	(C,E);
; 32   : 		return F->testAABB		(&mM[0].x,mask);

	mov	rcx, QWORD PTR [rcx+24]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm0, xmm5
	movss	xmm6, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	lea	rdx, QWORD PTR [rax-56]
	mov	r8, r9
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 33   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 88					; 00000058H
	ret	0
?_box@?$frustum_collider@$0A@$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ENDP ; frustum_collider<0,0>::_box
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fixedvector.h
pdata	SEGMENT
$pdata$?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN30
	DD	imagerel $LN30+155
	DD	imagerel $unwind$?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 48
prim$ = 56
?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z PROC	; frustum_collider<0,1>::_prim, COMDAT

; 35   : 	{

$LN30:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 36   : 		if (bClass3)	{
; 37   : 			sPoly		src,dst;
; 38   : 			src.resize	(3);
; 39   : 			src[0]		= verts[ tris[prim].verts[0] ];
; 40   : 			src[1]		= verts[ tris[prim].verts[1] ];
; 41   : 			src[2]		= verts[ tris[prim].verts[2] ];
; 42   : 			if (F->ClipPoly(src,dst))
; 43   : 			{
; 44   : 				RESULT& R	= dest->r_add();
; 45   : 				R.id		= prim;
; 46   : 				R.verts[0]	= verts[ tris[prim].verts[0] ];
; 47   : 				R.verts[1]	= verts[ tris[prim].verts[1] ];
; 48   : 				R.verts[2]	= verts[ tris[prim].verts[2] ];
; 49   : 				R.dummy		= tris[prim].dummy;
; 50   : 			}
; 51   : 		} else {
; 52   : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rcx]
	mov	ebx, edx
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 53   : 			R.id		= prim;
; 54   : 			R.verts[0]	= verts[ tris[prim].verts[0] ];

	lea	r10, QWORD PTR [rbx+rbx*2]
	mov	DWORD PTR [rax+48], ebx
	mov	rdx, QWORD PTR [rdi+8]

; 55   : 			R.verts[1]	= verts[ tris[prim].verts[1] ];
; 56   : 			R.verts[2]	= verts[ tris[prim].verts[2] ];
; 57   : 			R.dummy		= tris[prim].dummy;
; 58   : 		}
; 59   : 	}

	mov	rbx, QWORD PTR [rsp+48]
	mov	r8d, DWORD PTR [rdx+r10*8]
	mov	rdx, QWORD PTR [rdi+16]
	mov	r11, rax
	lea	r9, QWORD PTR [r8+r8*2]
	mov	rcx, QWORD PTR [rdx+r9*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r9*4+8]
	mov	DWORD PTR [r11+8], eax
	mov	rax, QWORD PTR [rdi+8]
	mov	ecx, DWORD PTR [rax+r10*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rdi+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax
	mov	rax, QWORD PTR [rdi+8]
	mov	ecx, DWORD PTR [rax+r10*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rdi+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, QWORD PTR [rax+r10*8+16]
	mov	QWORD PTR [r11+40], rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z ENDP	; frustum_collider<0,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD 031e01H
	DD	04681eH
	DD	0a207H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
_TEXT	SEGMENT
this$ = 96
C$ = 104
E$ = 112
mask$ = 120
?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z PROC ; frustum_collider<0,1>::_box, COMDAT

; 28   : 	{

$LN7:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 29   : 		Fvector		mM[2];
; 30   : 		mM[0].sub	(C,E);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [r8+4]

; 31   : 		mM[1].add	(C,E);
; 32   : 		return F->testAABB		(&mM[0].x,mask);

	mov	rcx, QWORD PTR [rcx+24]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm0, xmm5
	movss	xmm6, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	lea	rdx, QWORD PTR [rax-56]
	mov	r8, r9
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 33   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 88					; 00000058H
	ret	0
?_box@?$frustum_collider@$0A@$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ENDP ; frustum_collider<0,1>::_box
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fixedvector.h
pdata	SEGMENT
$pdata$?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN30
	DD	imagerel $LN30+303
	DD	imagerel $unwind$?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z DD 071301H
	DD	09b6413H
	DD	09a3413H
	DD	0980113H
	DD	0700cH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
src$96289 = 32
dst$96290 = 624
this$ = 1232
prim$ = 1240
?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z PROC	; frustum_collider<1,0>::_prim, COMDAT

; 35   : 	{

$LN30:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 1216				; 000004c0H

; 36   : 		if (bClass3)	{
; 37   : 			sPoly		src,dst;
; 38   : 			src.resize	(3);
; 39   : 			src[0]		= verts[ tris[prim].verts[0] ];

	mov	r10, QWORD PTR [rcx+16]
	mov	r9, QWORD PTR [rcx+8]
	mov	DWORD PTR [rax-616], 3
	mov	DWORD PTR [rax-24], 0
	mov	esi, edx
	mov	rbx, rcx
	lea	rdi, QWORD PTR [rsi+rsi*2]

; 40   : 			src[1]		= verts[ tris[prim].verts[1] ];
; 41   : 			src[2]		= verts[ tris[prim].verts[2] ];
; 42   : 			if (F->ClipPoly(src,dst))

	lea	rdx, QWORD PTR src$96289[rsp]
	mov	eax, DWORD PTR [r9+rdi*8]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [r10+r8*4]
	mov	QWORD PTR src$96289[rsp], rax
	mov	eax, DWORD PTR [r10+r8*4+8]
	lea	r8, QWORD PTR dst$96290[rsp]
	mov	DWORD PTR src$96289[rsp+8], eax
	mov	eax, DWORD PTR [r9+rdi*8+4]
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR src$96289[rsp+12], rax
	mov	eax, DWORD PTR [r10+rcx*4+8]
	mov	DWORD PTR src$96289[rsp+20], eax
	mov	eax, DWORD PTR [r9+rdi*8+8]
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR src$96289[rsp+24], rax
	mov	eax, DWORD PTR [r10+rcx*4+8]
	mov	rcx, QWORD PTR [rbx+24]
	mov	DWORD PTR src$96289[rsp+32], eax
	call	?ClipPoly@CFrustum@@QEBAPEAV?$svector@U?$_vector3@M@@$0DA@@@AEAV2@0@Z ; CFrustum::ClipPoly
	test	rax, rax
	je	SHORT $LN2@prim@17

; 43   : 			{
; 44   : 				RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 45   : 				R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 46   : 				R.verts[0]	= verts[ tris[prim].verts[0] ];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	ecx, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [rax+8], ecx

; 47   : 				R.verts[1]	= verts[ tris[prim].verts[1] ];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8+4]
	mov	rcx, QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rax, QWORD PTR [rcx+r8*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+r8*4+8]
	mov	DWORD PTR [r11+20], eax

; 48   : 				R.verts[2]	= verts[ tris[prim].verts[2] ];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 49   : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN2@prim@17:

; 50   : 			}
; 51   : 		} else {
; 52   : 			RESULT& R	= dest->r_add();
; 53   : 			R.id		= prim;
; 54   : 			R.verts[0]	= verts[ tris[prim].verts[0] ];
; 55   : 			R.verts[1]	= verts[ tris[prim].verts[1] ];
; 56   : 			R.verts[2]	= verts[ tris[prim].verts[2] ];
; 57   : 			R.dummy		= tris[prim].dummy;
; 58   : 		}
; 59   : 	}

	lea	r11, QWORD PTR [rsp+1216]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z ENDP	; frustum_collider<1,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD 031e01H
	DD	04681eH
	DD	0a207H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
_TEXT	SEGMENT
this$ = 96
C$ = 104
E$ = 112
mask$ = 120
?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z PROC ; frustum_collider<1,0>::_box, COMDAT

; 28   : 	{

$LN7:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 29   : 		Fvector		mM[2];
; 30   : 		mM[0].sub	(C,E);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [r8+4]

; 31   : 		mM[1].add	(C,E);
; 32   : 		return F->testAABB		(&mM[0].x,mask);

	mov	rcx, QWORD PTR [rcx+24]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm0, xmm5
	movss	xmm6, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	lea	rdx, QWORD PTR [rax-56]
	mov	r8, r9
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 33   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 88					; 00000058H
	ret	0
?_box@?$frustum_collider@$00$0A@@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ENDP ; frustum_collider<1,0>::_box
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\fixedvector.h
pdata	SEGMENT
$pdata$?_prim@?$frustum_collider@$00$00@@QEAAXK@Z DD imagerel $LN30
	DD	imagerel $LN30+303
	DD	imagerel $unwind$?_prim@?$frustum_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$frustum_collider@$00$00@@QEAAXK@Z DD 071301H
	DD	09b6413H
	DD	09a3413H
	DD	0980113H
	DD	0700cH
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_prim@?$frustum_collider@$00$00@@QEAAXK@Z
_TEXT	SEGMENT
src$96277 = 32
dst$96278 = 624
this$ = 1232
prim$ = 1240
?_prim@?$frustum_collider@$00$00@@QEAAXK@Z PROC		; frustum_collider<1,1>::_prim, COMDAT

; 35   : 	{

$LN30:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	push	rdi
	sub	rsp, 1216				; 000004c0H

; 36   : 		if (bClass3)	{
; 37   : 			sPoly		src,dst;
; 38   : 			src.resize	(3);
; 39   : 			src[0]		= verts[ tris[prim].verts[0] ];

	mov	r10, QWORD PTR [rcx+16]
	mov	r9, QWORD PTR [rcx+8]
	mov	DWORD PTR [rax-616], 3
	mov	DWORD PTR [rax-24], 0
	mov	esi, edx
	mov	rbx, rcx
	lea	rdi, QWORD PTR [rsi+rsi*2]

; 40   : 			src[1]		= verts[ tris[prim].verts[1] ];
; 41   : 			src[2]		= verts[ tris[prim].verts[2] ];
; 42   : 			if (F->ClipPoly(src,dst))

	lea	rdx, QWORD PTR src$96277[rsp]
	mov	eax, DWORD PTR [r9+rdi*8]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [r10+r8*4]
	mov	QWORD PTR src$96277[rsp], rax
	mov	eax, DWORD PTR [r10+r8*4+8]
	lea	r8, QWORD PTR dst$96278[rsp]
	mov	DWORD PTR src$96277[rsp+8], eax
	mov	eax, DWORD PTR [r9+rdi*8+4]
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR src$96277[rsp+12], rax
	mov	eax, DWORD PTR [r10+rcx*4+8]
	mov	DWORD PTR src$96277[rsp+20], eax
	mov	eax, DWORD PTR [r9+rdi*8+8]
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR src$96277[rsp+24], rax
	mov	eax, DWORD PTR [r10+rcx*4+8]
	mov	rcx, QWORD PTR [rbx+24]
	mov	DWORD PTR src$96277[rsp+32], eax
	call	?ClipPoly@CFrustum@@QEBAPEAV?$svector@U?$_vector3@M@@$0DA@@@AEAV2@0@Z ; CFrustum::ClipPoly
	test	rax, rax
	je	SHORT $LN2@prim@18

; 43   : 			{
; 44   : 				RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 45   : 				R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 46   : 				R.verts[0]	= verts[ tris[prim].verts[0] ];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	ecx, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [rax+8], ecx

; 47   : 				R.verts[1]	= verts[ tris[prim].verts[1] ];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8+4]
	mov	rcx, QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rax, QWORD PTR [rcx+r8*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+r8*4+8]
	mov	DWORD PTR [r11+20], eax

; 48   : 				R.verts[2]	= verts[ tris[prim].verts[2] ];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 49   : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN2@prim@18:

; 50   : 			}
; 51   : 		} else {
; 52   : 			RESULT& R	= dest->r_add();
; 53   : 			R.id		= prim;
; 54   : 			R.verts[0]	= verts[ tris[prim].verts[0] ];
; 55   : 			R.verts[1]	= verts[ tris[prim].verts[1] ];
; 56   : 			R.verts[2]	= verts[ tris[prim].verts[2] ];
; 57   : 			R.dummy		= tris[prim].dummy;
; 58   : 		}
; 59   : 	}

	lea	r11, QWORD PTR [rsp+1216]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
?_prim@?$frustum_collider@$00$00@@QEAAXK@Z ENDP		; frustum_collider<1,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z DD 031e01H
	DD	04681eH
	DD	0a207H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z
_TEXT	SEGMENT
this$ = 96
C$ = 104
E$ = 112
mask$ = 120
?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z PROC ; frustum_collider<1,1>::_box, COMDAT

; 28   : 	{

$LN7:
	mov	rax, rsp
	sub	rsp, 88					; 00000058H

; 29   : 		Fvector		mM[2];
; 30   : 		mM[0].sub	(C,E);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [r8+4]

; 31   : 		mM[1].add	(C,E);
; 32   : 		return F->testAABB		(&mM[0].x,mask);

	mov	rcx, QWORD PTR [rcx+24]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	xmm0, xmm5
	movss	xmm6, DWORD PTR [r8]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [r8+8]
	lea	rdx, QWORD PTR [rax-56]
	mov	r8, r9
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 33   : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 88					; 00000058H
	ret	0
?_box@?$frustum_collider@$00$00@@QEAA?AW4EFC_Visible@@AEAU?$_vector3@M@@0AEAI@Z ENDP ; frustum_collider<1,1>::_box
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD imagerel $LN33
	DD	imagerel $LN33+362
	DD	imagerel $unwind$?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD 062201H
	DD	046822H
	DD	0c3410H
	DD	0700c9210H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
mM$161979 = 32
this$ = 96
node$ = 104
mask$ = 112
?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z PROC ; frustum_collider<0,0>::_stab, COMDAT

; 62   : 	{

$LN33:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	DWORD PTR [rax+24], r8d
	push	rdi
	sub	rsp, 80					; 00000050H

; 63   : 		// Actual frustum/aabb test
; 64   : 		EFC_Visible	result		= _box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,mask);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	mov	rcx, QWORD PTR [rcx+24]
	movaps	xmm0, xmm5
	mov	rbx, rdx
	lea	r8, QWORD PTR [rax+24]
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	lea	rdx, QWORD PTR [rax-56]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 65   : 		if (fcvNone == result)	return;

	test	eax, eax
	je	$LN1@stab@17
	npad	1
$LL27@stab@17:

; 66   : 		
; 67   : 		// 1st chield
; 68   : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@17
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z ; frustum_collider<0,0>::_prim
	jmp	SHORT $LN4@stab@17
$LN5@stab@17:

; 69   : 		else					_stab	(node->GetPos(),mask);

	mov	r8d, DWORD PTR mask$[rsp]
	call	?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<0,0>::_stab
$LN4@stab@17:

; 70   : 		
; 71   : 		// Early exit for "only first"
; 72   : 		if (bFirst && dest->r_count())												return;
; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	$LN31@stab@17

; 76   : 		else					_stab	(node->GetNeg(),mask);

	mov	rbx, QWORD PTR [rbx+32]
	mov	rcx, QWORD PTR [rdi+24]
	lea	r8, QWORD PTR mask$[rsp]
	lea	rdx, QWORD PTR mM$161979[rsp]
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm3, DWORD PTR [rbx+4]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [rbx+16]
	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rbx+20]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR mM$161979[rsp], xmm0
	movss	DWORD PTR mM$161979[rsp+12], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR mM$161979[rsp+4], xmm0
	movss	DWORD PTR mM$161979[rsp+16], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR mM$161979[rsp+20], xmm2
	movss	DWORD PTR mM$161979[rsp+8], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB
	test	eax, eax
	jne	$LL27@stab@17

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN31@stab@17:

; 70   : 		
; 71   : 		// Early exit for "only first"
; 72   : 		if (bFirst && dest->r_count())												return;
; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$0A@$0A@@@QEAAXK@Z ; frustum_collider<0,0>::_prim
$LN1@stab@17:

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ENDP ; frustum_collider<0,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD imagerel $LN40
	DD	imagerel $LN40+385
	DD	imagerel $unwind$?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD 062201H
	DD	046822H
	DD	0c3410H
	DD	0700c9210H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
mM$162031 = 32
this$ = 96
node$ = 104
mask$ = 112
?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z PROC ; frustum_collider<0,1>::_stab, COMDAT

; 62   : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	DWORD PTR [rax+24], r8d
	push	rdi
	sub	rsp, 80					; 00000050H

; 63   : 		// Actual frustum/aabb test
; 64   : 		EFC_Visible	result		= _box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,mask);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	mov	rcx, QWORD PTR [rcx+24]
	movaps	xmm0, xmm5
	mov	rbx, rdx
	lea	r8, QWORD PTR [rax+24]
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	lea	rdx, QWORD PTR [rax-56]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 65   : 		if (fcvNone == result)	return;

	test	eax, eax
	je	$LN1@stab@18
	npad	1
$LL33@stab@18:

; 66   : 		
; 67   : 		// 1st chield
; 68   : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@18
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z ; frustum_collider<0,1>::_prim
	jmp	SHORT $LN4@stab@18
$LN5@stab@18:

; 69   : 		else					_stab	(node->GetPos(),mask);

	mov	r8d, DWORD PTR mask$[rsp]
	call	?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<0,1>::_stab
$LN4@stab@18:

; 70   : 		
; 71   : 		// Early exit for "only first"
; 72   : 		if (bFirst && dest->r_count())												return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	$LN1@stab@18

; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	$LN38@stab@18

; 76   : 		else					_stab	(node->GetNeg(),mask);

	mov	rbx, QWORD PTR [rbx+32]
	mov	rcx, QWORD PTR [rdi+24]
	lea	r8, QWORD PTR mask$[rsp]
	lea	rdx, QWORD PTR mM$162031[rsp]
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm3, DWORD PTR [rbx+4]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [rbx+16]
	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rbx+20]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR mM$162031[rsp], xmm0
	movss	DWORD PTR mM$162031[rsp+12], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR mM$162031[rsp+4], xmm0
	movss	DWORD PTR mM$162031[rsp+16], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR mM$162031[rsp+20], xmm2
	movss	DWORD PTR mM$162031[rsp+8], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB
	test	eax, eax
	jne	$LL33@stab@18

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN38@stab@18:

; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$0A@$00@@QEAAXK@Z ; frustum_collider<0,1>::_prim
$LN1@stab@18:

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ENDP ; frustum_collider<0,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD imagerel $LN33
	DD	imagerel $LN33+362
	DD	imagerel $unwind$?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD 062201H
	DD	046822H
	DD	0c3410H
	DD	0700c9210H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
mM$162101 = 32
this$ = 96
node$ = 104
mask$ = 112
?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z PROC ; frustum_collider<1,0>::_stab, COMDAT

; 62   : 	{

$LN33:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	DWORD PTR [rax+24], r8d
	push	rdi
	sub	rsp, 80					; 00000050H

; 63   : 		// Actual frustum/aabb test
; 64   : 		EFC_Visible	result		= _box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,mask);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	mov	rcx, QWORD PTR [rcx+24]
	movaps	xmm0, xmm5
	mov	rbx, rdx
	lea	r8, QWORD PTR [rax+24]
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	lea	rdx, QWORD PTR [rax-56]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 65   : 		if (fcvNone == result)	return;

	test	eax, eax
	je	$LN1@stab@19
	npad	1
$LL27@stab@19:

; 66   : 		
; 67   : 		// 1st chield
; 68   : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@19
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z ; frustum_collider<1,0>::_prim
	jmp	SHORT $LN4@stab@19
$LN5@stab@19:

; 69   : 		else					_stab	(node->GetPos(),mask);

	mov	r8d, DWORD PTR mask$[rsp]
	call	?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<1,0>::_stab
$LN4@stab@19:

; 70   : 		
; 71   : 		// Early exit for "only first"
; 72   : 		if (bFirst && dest->r_count())												return;
; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	$LN31@stab@19

; 76   : 		else					_stab	(node->GetNeg(),mask);

	mov	rbx, QWORD PTR [rbx+32]
	mov	rcx, QWORD PTR [rdi+24]
	lea	r8, QWORD PTR mask$[rsp]
	lea	rdx, QWORD PTR mM$162101[rsp]
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm3, DWORD PTR [rbx+4]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [rbx+16]
	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rbx+20]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR mM$162101[rsp], xmm0
	movss	DWORD PTR mM$162101[rsp+12], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR mM$162101[rsp+4], xmm0
	movss	DWORD PTR mM$162101[rsp+16], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR mM$162101[rsp+20], xmm2
	movss	DWORD PTR mM$162101[rsp+8], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB
	test	eax, eax
	jne	$LL27@stab@19

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN31@stab@19:

; 70   : 		
; 71   : 		// Early exit for "only first"
; 72   : 		if (bFirst && dest->r_count())												return;
; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$00$0A@@@QEAAXK@Z ; frustum_collider<1,0>::_prim
$LN1@stab@19:

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ENDP ; frustum_collider<1,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD imagerel $LN40
	DD	imagerel $LN40+385
	DD	imagerel $unwind$?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z DD 062201H
	DD	046822H
	DD	0c3410H
	DD	0700c9210H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_frustum.cpp
xdata	ENDS
;	COMDAT ?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
mM$162153 = 32
this$ = 96
node$ = 104
mask$ = 112
?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z PROC ; frustum_collider<1,1>::_stab, COMDAT

; 62   : 	{

$LN40:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	DWORD PTR [rax+24], r8d
	push	rdi
	sub	rsp, 80					; 00000050H

; 63   : 		// Actual frustum/aabb test
; 64   : 		EFC_Visible	result		= _box((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,mask);

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rdi, rcx
	mov	rcx, QWORD PTR [rcx+24]
	movaps	xmm0, xmm5
	mov	rbx, rdx
	lea	r8, QWORD PTR [rax+24]
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	lea	rdx, QWORD PTR [rax-56]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR [rax-56], xmm0
	movss	DWORD PTR [rax-44], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR [rax-52], xmm0
	movss	DWORD PTR [rax-40], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR [rax-36], xmm2
	movss	DWORD PTR [rax-48], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB

; 65   : 		if (fcvNone == result)	return;

	test	eax, eax
	je	$LN1@stab@20
	npad	1
$LL33@stab@20:

; 66   : 		
; 67   : 		// 1st chield
; 68   : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, 1
	je	SHORT $LN5@stab@20
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$00$00@@QEAAXK@Z ; frustum_collider<1,1>::_prim
	jmp	SHORT $LN4@stab@20
$LN5@stab@20:

; 69   : 		else					_stab	(node->GetPos(),mask);

	mov	r8d, DWORD PTR mask$[rsp]
	call	?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<1,1>::_stab
$LN4@stab@20:

; 70   : 		
; 71   : 		// Early exit for "only first"
; 72   : 		if (bFirst && dest->r_count())												return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	$LN1@stab@20

; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], 1
	jne	$LN38@stab@20

; 76   : 		else					_stab	(node->GetNeg(),mask);

	mov	rbx, QWORD PTR [rbx+32]
	mov	rcx, QWORD PTR [rdi+24]
	lea	r8, QWORD PTR mask$[rsp]
	lea	rdx, QWORD PTR mM$162153[rsp]
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm3, DWORD PTR [rbx+4]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [rbx+16]
	movss	xmm1, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rbx+20]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR mM$162153[rsp], xmm0
	movss	DWORD PTR mM$162153[rsp+12], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR mM$162153[rsp+4], xmm0
	movss	DWORD PTR mM$162153[rsp+16], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR mM$162153[rsp+20], xmm2
	movss	DWORD PTR mM$162153[rsp+8], xmm0
	call	?testAABB@CFrustum@@QEBA?AW4EFC_Visible@@PEBMAEAI@Z ; CFrustum::testAABB
	test	eax, eax
	jne	$LL33@stab@20

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN38@stab@20:

; 73   : 		
; 74   : 		// 2nd chield
; 75   : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$frustum_collider@$00$00@@QEAAXK@Z ; frustum_collider<1,1>::_prim
$LN1@stab@20:

; 77   : 	}

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ENDP ; frustum_collider<1,1>::_stab
_TEXT	ENDS
PUBLIC	?frustum_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBVCFrustum@@@Z ; CDB::COLLIDER::frustum_query
pdata	SEGMENT
$pdata$?frustum_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBVCFrustum@@@Z DD imagerel $LN28
	DD	imagerel $LN28+209
	DD	imagerel $unwind$?frustum_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBVCFrustum@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?frustum_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBVCFrustum@@@Z DD 0a1a01H
	DD	0d741aH
	DD	0c641aH
	DD	0b541aH
	DD	0a341aH
	DD	0c016721aH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
BC$95715 = 32
this$ = 80
m_def$ = 88
F$ = 96
?frustum_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBVCFrustum@@@Z PROC ; CDB::COLLIDER::frustum_query

; 81   : {

$LN28:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 64					; 00000040H

; 82   : 	m_def->syncronize		();

	cmp	DWORD PTR [rdx+16], 0
	mov	rsi, r8
	mov	rbx, rdx
	mov	rdi, rcx
	je	SHORT $LN9@frustum_qu
	mov	rcx, rdx
	call	QWORD PTR __imp_?Enter@xrCriticalSection@@QEAAXXZ
	mov	rcx, rbx
	call	QWORD PTR __imp_?Leave@xrCriticalSection@@QEAAXXZ
$LN9@frustum_qu:

; 83   : 
; 84   : 	// Get nodes
; 85   : 	const AABBNoLeafTree*	T	= (const AABBNoLeafTree*)m_def->tree->GetTree();
; 86   : 	const AABBNoLeafNode*	N	= T->GetNodes();
; 87   : 	const DWORD				mask= F.getMask();

	mov	ecx, DWORD PTR [rsi+240]
	mov	rax, QWORD PTR [rbx+8]
	mov	ebp, 1
	mov	r9, QWORD PTR [rax+8]
	shl	ebp, cl

; 88   : 	r_clear					();

	lea	rcx, QWORD PTR [rdi+16]
	mov	r12, QWORD PTR [r9+16]
	dec	ebp
	call	?clear_not_free@?$xr_vector@URESULT@CDB@@V?$xalloc@URESULT@CDB@@@@@@QEAAXXZ ; xr_vector<CDB::RESULT,xalloc<CDB::RESULT> >::clear_not_free

; 94   : 		{
; 95   : 			frustum_collider<true,true> BC;
; 96   : 			BC._init	(this,m_def->verts,m_def->tris,&F);

	mov	rax, QWORD PTR [rbx+24]
	mov	r11d, DWORD PTR [rdi+8]
	mov	QWORD PTR BC$95715[rsp], rdi
	mov	QWORD PTR BC$95715[rsp+8], rax
	mov	rax, QWORD PTR [rbx+40]
	mov	QWORD PTR BC$95715[rsp+24], rsi

; 97   : 			BC._stab	(N,mask);

	mov	r8d, ebp
	mov	rdx, r12
	lea	rcx, QWORD PTR BC$95715[rsp]
	mov	QWORD PTR BC$95715[rsp+16], rax
	test	r11b, 8
	je	SHORT $LN6@frustum_qu

; 89   : 	
; 90   : 	// Binary dispatcher
; 91   : 	if (frustum_mode&OPT_FULL_TEST) 
; 92   : 	{
; 93   : 		if (frustum_mode&OPT_ONLYFIRST)

	test	r11b, 2
	je	SHORT $LN5@frustum_qu

; 97   : 			BC._stab	(N,mask);

	call	?_stab@?$frustum_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<1,1>::_stab

; 98   : 		} else {

	jmp	SHORT $LN1@frustum_qu
$LN5@frustum_qu:

; 99   : 			frustum_collider<true,false> BC;
; 100  : 			BC._init	(this,m_def->verts,m_def->tris,&F);
; 101  : 			BC._stab	(N,mask);

	call	?_stab@?$frustum_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<1,0>::_stab

; 102  : 		}
; 103  : 	} else {

	jmp	SHORT $LN1@frustum_qu
$LN6@frustum_qu:

; 104  : 		if (frustum_mode&OPT_ONLYFIRST)

	test	r11b, 2
	je	SHORT $LN2@frustum_qu

; 105  : 		{
; 106  : 			frustum_collider<false,true> BC;
; 107  : 			BC._init	(this,m_def->verts,m_def->tris,&F);
; 108  : 			BC._stab	(N,mask);

	call	?_stab@?$frustum_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<0,1>::_stab

; 109  : 		} else {

	jmp	SHORT $LN1@frustum_qu
$LN2@frustum_qu:

; 110  : 			frustum_collider<false,false> BC;
; 111  : 			BC._init	(this,m_def->verts,m_def->tris,&F);
; 112  : 			BC._stab	(N,mask);

	call	?_stab@?$frustum_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@I@Z ; frustum_collider<0,0>::_stab
$LN1@frustum_qu:

; 113  : 		}
; 114  : 	}
; 115  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	r12
	ret	0
?frustum_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBVCFrustum@@@Z ENDP ; CDB::COLLIDER::frustum_query
END
