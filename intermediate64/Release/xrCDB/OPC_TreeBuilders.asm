; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?GetSplittingValue@AABBTreeOfAABBsBuilder@Opcode@@UEBAMII@Z ; Opcode::AABBTreeOfAABBsBuilder::GetSplittingValue
PUBLIC	?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ; Opcode::AABBTreeOfAABBsBuilder::ComputeGlobalBox
PUBLIC	?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
PUBLIC	?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMII@Z ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
PUBLIC	?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ; Opcode::AABBTreeOfTrianglesBuilder::ComputeGlobalBox
pdata	SEGMENT
$pdata$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN59
	DD	imagerel $LN59+76
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$0$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN59+76
	DD	imagerel $LN59+354
	DD	imagerel $chain$0$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$1$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN59+354
	DD	imagerel $LN59+380
	DD	imagerel $chain$1$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN31
	DD	imagerel $LN31+29
	DD	imagerel $unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN31+29
	DD	imagerel $LN31+62
	DD	imagerel $chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$2$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN31+62
	DD	imagerel $LN31+363
	DD	imagerel $chain$2$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$3$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN31+363
	DD	imagerel $LN31+487
	DD	imagerel $chain$3$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$4$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN31+487
	DD	imagerel $LN31+520
	DD	imagerel $chain$4$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN119
	DD	imagerel $LN119+66
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$9$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN119+66
	DD	imagerel $LN119+660
	DD	imagerel $chain$9$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$10$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN119+660
	DD	imagerel $LN119+679
	DD	imagerel $chain$10$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
xdata	SEGMENT
$unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 040d01H
	DD	09740dH
	DD	05006520dH
$chain$0$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 020521H
	DD	083405H
	DD	imagerel $LN59
	DD	imagerel $LN59+76
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$chain$1$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 021H
	DD	imagerel $LN59
	DD	imagerel $LN59+76
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 030701H
	DD	057407H
	DD	0e007H
$chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 020521H
	DD	023405H
	DD	imagerel $LN31
	DD	imagerel $LN31+29
	DD	imagerel $unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$chain$2$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 040d21H
	DD	04f40dH
	DD	035405H
	DD	imagerel $LN31+29
	DD	imagerel $LN31+62
	DD	imagerel $chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$chain$3$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 021H
	DD	imagerel $LN31+29
	DD	imagerel $LN31+62
	DD	imagerel $chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$chain$4$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 021H
	DD	imagerel $LN31
	DD	imagerel $LN31+29
	DD	imagerel $unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 051301H
	DD	0193413H
	DD	0160113H
	DD	05008H
$chain$9$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 0146421H
	DD	02e864H
	DD	03d856H
	DD	04c84dH
	DD	05b848H
	DD	06a843H
	DD	07983eH
	DD	08882fH
	DD	09782aH
	DD	0a6825H
	DD	0187404H
	DD	imagerel $LN119
	DD	imagerel $LN119+66
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$chain$10$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 021H
	DD	imagerel $LN119
	DD	imagerel $LN119+66
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
_TEXT	SEGMENT
Min$ = 0
Max$ = 16
this$ = 192
primitives$ = 200
nb_prims$ = 208
global_box$ = 216
?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z PROC ; Opcode::AABBTreeOfTrianglesBuilder::ComputeGlobalBox

; 99   : {

$LN119:
	mov	r11, rsp
	mov	QWORD PTR [r11+16], rbx
	push	rbp
	lea	rbp, QWORD PTR [r11-95]
	sub	rsp, 176				; 000000b0H
	mov	rbx, r9
	mov	eax, r8d
	mov	r10, rdx

; 100  : 	// Checkings
; 101  : 	if(!primitives || !nb_prims)	return false;

	test	rdx, rdx
	je	$LN4@ComputeGlo
	test	r8d, r8d
	je	$LN4@ComputeGlo
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm3, DWORD PTR __real@7f7fffff
	movss	xmm1, DWORD PTR __real@ff7fffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 111  : 		const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	r8, QWORD PTR [rcx+72]
	mov	QWORD PTR [r11+8], rdi
	mov	rdi, QWORD PTR [rcx+64]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm4, xmm3
	movaps	xmm5, xmm3
	movaps	xmm2, xmm1
	movss	DWORD PTR Min$[rbp-89], xmm3
	movss	DWORD PTR Max$[rbp-89], xmm1
	movss	DWORD PTR Min$[rbp-85], xmm4
	movaps	XMMWORD PTR [r11-24], xmm6
	movaps	XMMWORD PTR [r11-40], xmm7
	movaps	XMMWORD PTR [r11-56], xmm8
	movss	DWORD PTR Min$[rbp-81], xmm5
	movss	DWORD PTR Max$[rbp-85], xmm2
	movaps	XMMWORD PTR [r11-72], xmm9
	movaps	XMMWORD PTR [r11-88], xmm10
	movaps	XMMWORD PTR [r11-104], xmm11
	movaps	XMMWORD PTR [r11-120], xmm12
	movaps	xmm0, xmm1
	movaps	XMMWORD PTR [rsp+48], xmm13
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 111  : 		const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	r11d, eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$[rbp-81], xmm0
	movaps	XMMWORD PTR [rsp+32], xmm14
	npad	10
$LL3@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 111  : 		const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	eax, DWORD PTR [r10]
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdi+rcx*4]
	lea	rdx, QWORD PTR [rax+rax*2]

; 112  : 		const Point& p1 = mVerts[mTriList[primitives[i]].mVRef[1]];

	mov	eax, DWORD PTR [rdi+rcx*4+4]
	lea	r9, QWORD PTR [rax+rax*2]

; 113  : 		const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];

	mov	eax, DWORD PTR [rdi+rcx*4+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm14, DWORD PTR [r8+rdx*4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm3, xmm14
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 113  : 		const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];

	lea	rcx, QWORD PTR [rax+rax*2]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	jb	SHORT $LN29@ComputeGlo
	movaps	xmm3, xmm14
	movss	DWORD PTR Min$[rbp-89], xmm3
$LN29@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm11, DWORD PTR [r8+rdx*4+4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm4, xmm11
	jb	SHORT $LN33@ComputeGlo
	movaps	xmm4, xmm11
	movss	DWORD PTR Min$[rbp-85], xmm4
$LN33@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm13, DWORD PTR [r8+rdx*4+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm5, xmm13
	jb	SHORT $LN37@ComputeGlo
	movaps	xmm5, xmm13
	movss	DWORD PTR Min$[rbp-81], xmm5
$LN37@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm10, DWORD PTR [r8+r9*4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm3, xmm10
	jb	SHORT $LN43@ComputeGlo
	movaps	xmm3, xmm10
	movss	DWORD PTR Min$[rbp-89], xmm3
$LN43@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm12, DWORD PTR [r8+r9*4+4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm4, xmm12
	jb	SHORT $LN47@ComputeGlo
	movaps	xmm4, xmm12
	movss	DWORD PTR Min$[rbp-85], xmm4
$LN47@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm9, DWORD PTR [r8+r9*4+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm5, xmm9
	jb	SHORT $LN51@ComputeGlo
	movaps	xmm5, xmm9
	movss	DWORD PTR Min$[rbp-81], xmm5
$LN51@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm8, DWORD PTR [r8+rcx*4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm3, xmm8
	jb	SHORT $LN57@ComputeGlo
	movaps	xmm3, xmm8
	movss	DWORD PTR Min$[rbp-89], xmm3
$LN57@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm7, DWORD PTR [r8+rcx*4+4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm4, xmm7
	jb	SHORT $LN61@ComputeGlo
	movaps	xmm4, xmm7
	movss	DWORD PTR Min$[rbp-85], xmm4
$LN61@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 214  : 		inline_	Point&			Min(const Point& p)				{ x = _min(x, p.x); y = _min(y, p.y); z = _min(z, p.z);	return *this;	}

	movss	xmm6, DWORD PTR [r8+rcx*4+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm5, xmm6
	jb	SHORT $LN65@ComputeGlo
	movaps	xmm5, xmm6
	movss	DWORD PTR Min$[rbp-81], xmm5
$LN65@ComputeGlo:

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm1, xmm14
	ja	SHORT $LN71@ComputeGlo
	movaps	xmm1, xmm14
	movss	DWORD PTR Max$[rbp-89], xmm1
$LN71@ComputeGlo:
	comiss	xmm2, xmm11
	ja	SHORT $LN75@ComputeGlo
	movaps	xmm2, xmm11
	movss	DWORD PTR Max$[rbp-85], xmm2
$LN75@ComputeGlo:
	comiss	xmm0, xmm13
	ja	SHORT $LN79@ComputeGlo
	movaps	xmm0, xmm13
	movss	DWORD PTR Max$[rbp-81], xmm0
$LN79@ComputeGlo:
	comiss	xmm1, xmm10
	ja	SHORT $LN85@ComputeGlo
	movaps	xmm1, xmm10
	movss	DWORD PTR Max$[rbp-89], xmm1
$LN85@ComputeGlo:
	comiss	xmm2, xmm12
	ja	SHORT $LN89@ComputeGlo
	movaps	xmm2, xmm12
	movss	DWORD PTR Max$[rbp-85], xmm2
$LN89@ComputeGlo:
	comiss	xmm0, xmm9
	ja	SHORT $LN93@ComputeGlo
	movaps	xmm0, xmm9
	movss	DWORD PTR Max$[rbp-81], xmm0
$LN93@ComputeGlo:
	comiss	xmm1, xmm8
	ja	SHORT $LN99@ComputeGlo
	movaps	xmm1, xmm8
	movss	DWORD PTR Max$[rbp-89], xmm1
$LN99@ComputeGlo:
	comiss	xmm2, xmm7
	ja	SHORT $LN103@ComputeGlo
	movaps	xmm2, xmm7
	movss	DWORD PTR Max$[rbp-85], xmm2
$LN103@ComputeGlo:
	comiss	xmm0, xmm6
	ja	SHORT $LN107@ComputeGlo
	movaps	xmm0, xmm6
	movss	DWORD PTR Max$[rbp-81], xmm0
$LN107@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 108  : 	for(udword i=0;i<nb_prims;i++)

	add	r10, 4
	dec	r11
	jne	$LL3@ComputeGlo
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 50   : 						void		SetMinMax(const Point& min, const Point& max)		{ mMin = min;		mMax = max;									}

	movsdx	xmm0, QWORD PTR Min$[rbp-89]
	mov	eax, DWORD PTR Min$[rbp-81]
	movaps	xmm14, XMMWORD PTR [rsp+32]
	movaps	xmm13, XMMWORD PTR [rsp+48]
	movaps	xmm12, XMMWORD PTR [rsp+64]
	movaps	xmm11, XMMWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+192]
	movsdx	QWORD PTR [rbx], xmm0
	movsdx	xmm0, QWORD PTR Max$[rbp-89]
	mov	DWORD PTR [rbx+8], eax
	mov	eax, DWORD PTR Max$[rbp-81]
	movsdx	QWORD PTR [rbx+12], xmm0
	mov	DWORD PTR [rbx+20], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 119  : 	return true;

	mov	al, 1
	movaps	xmm10, XMMWORD PTR [rsp+96]
	movaps	xmm9, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+128]
	movaps	xmm7, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+160]

; 120  : }

	mov	rbx, QWORD PTR [rsp+200]
	add	rsp, 176				; 000000b0H
	pop	rbp
	ret	0
$LN4@ComputeGlo:

; 100  : 	// Checkings
; 101  : 	if(!primitives || !nb_prims)	return false;

	xor	al, al

; 120  : }

	mov	rbx, QWORD PTR [rsp+200]
	add	rsp, 176				; 000000b0H
	pop	rbp
	ret	0
?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ENDP ; Opcode::AABBTreeOfTrianglesBuilder::ComputeGlobalBox
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
_TEXT	SEGMENT
this$ = 8
index$ = 16
axis$ = 24
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMII@Z PROC ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue

; 132  : /*	// Compute center of triangle
; 133  : 	Point Center;
; 134  : 	mTriList[index].Center(mVerts, Center);
; 135  : 	// Return value
; 136  : 	return Center[axis];*/
; 137  : 
; 138  : 	// Compute correct component from center of triangle
; 139  : 	return	(((const float*)mVerts[mTriList[index].mVRef[0]])[axis]
; 140  : 			+((const float*)mVerts[mTriList[index].mVRef[1]])[axis]
; 141  : 			+((const float*)mVerts[mTriList[index].mVRef[2]])[axis])*INV3;

	mov	r10, QWORD PTR [rcx+64]
	mov	eax, edx
	mov	r9d, r8d
	mov	r8, QWORD PTR [rcx+72]
	lea	r11, QWORD PTR [rax+rax*2]
	mov	edx, DWORD PTR [r10+r11*4+4]
	mov	ecx, DWORD PTR [r10+r11*4]
	lea	rax, QWORD PTR [r9+rdx*2]
	add	rdx, rax
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	movss	xmm0, DWORD PTR [r8+rdx*4]
	addss	xmm0, DWORD PTR [r8+rcx*4]
	mov	ecx, DWORD PTR [r10+r11*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r8+rcx*4]
	mulss	xmm0, DWORD PTR __real@3eaaaaab

; 142  : }

	ret	0
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMII@Z ENDP ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
_TEXT	SEGMENT
this$ = 16
primitives$ = 24
nb_prims$ = 32
global_box$ = 40
axis$ = 48
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z PROC ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue

; 155  : {

$LN31:
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 156  : 	if(mRules&SPLIT_GEOMCENTER)

	test	BYTE PTR [rcx+12], 64			; 00000040H
	mov	r10, r9
	mov	edi, r8d
	mov	r9, rcx
	mov	r14, rdx
	je	$LN5@GetSplitti

; 157  : 	{
; 158  : 		// Loop through triangles
; 159  : 		float SplitValue = 0.0f;
; 160  : 		for(udword i=0;i<nb_prims;i++)

	mov	QWORD PTR [rsp+16], rbx
	xor	ebx, ebx
	xorps	xmm0, xmm0
	cmp	r8d, 4
	jb	$LC26@GetSplitti

; 161  : 		{
; 162  : 			// Get current triangle-vertices
; 163  : 			const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	r8, QWORD PTR [rcx+64]
	mov	r10, QWORD PTR [rcx+72]
	mov	r11d, DWORD PTR axis$[rsp]
	mov	QWORD PTR [rsp+24], rbp
	lea	eax, DWORD PTR [rdi-4]
	mov	QWORD PTR [rsp+32], r15
	shr	eax, 2
	lea	r15, QWORD PTR [rdx+8]
	inc	eax
	mov	ebp, eax
	lea	ebx, DWORD PTR [rax*4]
	npad	3
$LL27@GetSplitti:
	mov	eax, DWORD PTR [r15-8]

; 164  : 			const Point& p1 = mVerts[mTriList[primitives[i]].mVRef[1]];
; 165  : 			const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];
; 166  : 			// Update split value
; 167  : 			SplitValue += ((const float*)p0)[axis];
; 168  : 			SplitValue += ((const float*)p1)[axis];
; 169  : 			SplitValue += ((const float*)p2)[axis];

	add	r15, 16
	lea	rdx, QWORD PTR [rax+rax*2]
	mov	ecx, DWORD PTR [r8+rdx*4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+8]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	mov	eax, DWORD PTR [r15-20]
	lea	rdx, QWORD PTR [rax+rax*2]
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+8]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	mov	eax, DWORD PTR [r15-16]
	lea	rdx, QWORD PTR [rax+rax*2]
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+8]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	mov	eax, DWORD PTR [r15-12]
	lea	rdx, QWORD PTR [rax+rax*2]
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+4]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+8]
	lea	rax, QWORD PTR [r11+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	dec	rbp
	jne	$LL27@GetSplitti
	mov	r15, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+24]
$LC26@GetSplitti:

; 157  : 	{
; 158  : 		// Loop through triangles
; 159  : 		float SplitValue = 0.0f;
; 160  : 		for(udword i=0;i<nb_prims;i++)

	cmp	ebx, edi
	jae	SHORT $LN25@GetSplitti

; 161  : 		{
; 162  : 			// Get current triangle-vertices
; 163  : 			const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	r8, QWORD PTR [r9+64]
	mov	r10d, DWORD PTR axis$[rsp]
	mov	r9, QWORD PTR [r9+72]
	mov	eax, edi
	lea	r11, QWORD PTR [r14+rbx*4]
	sub	eax, ebx
	mov	ebx, eax
$LC4@GetSplitti:
	mov	eax, DWORD PTR [r11]
	add	r11, 4
	lea	rdx, QWORD PTR [rax+rax*2]
	mov	ecx, DWORD PTR [r8+rdx*4]

; 164  : 			const Point& p1 = mVerts[mTriList[primitives[i]].mVRef[1]];
; 165  : 			const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];
; 166  : 			// Update split value
; 167  : 			SplitValue += ((const float*)p0)[axis];
; 168  : 			SplitValue += ((const float*)p1)[axis];
; 169  : 			SplitValue += ((const float*)p2)[axis];

	lea	rax, QWORD PTR [r10+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r9+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+4]
	lea	rax, QWORD PTR [r10+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r9+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+8]
	lea	rax, QWORD PTR [r10+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r9+rcx*4]
	dec	rbx
	jne	SHORT $LC4@GetSplitti
$LN25@GetSplitti:
	mov	rbx, QWORD PTR [rsp+16]

; 170  : 		}
; 171  : 		return SplitValue / float(nb_prims*3);

	lea	ecx, DWORD PTR [rdi+rdi*2]
	xorps	xmm1, xmm1
	cvtsi2ss xmm1, rcx
	divss	xmm0, xmm1

; 174  : }

	mov	rdi, QWORD PTR [rsp+40]
	pop	r14
	ret	0
$LN5@GetSplitti:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 119  : 		inline_			float		GetCenter(udword axis)					const		{ return (((const float*)mMax)[axis] + ((const float*)mMin)[axis])*0.5f;	}

	mov	eax, DWORD PTR axis$[rsp]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 174  : }

	mov	rdi, QWORD PTR [rsp+40]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 119  : 		inline_			float		GetCenter(udword axis)					const		{ return (((const float*)mMax)[axis] + ((const float*)mMin)[axis])*0.5f;	}

	movss	xmm0, DWORD PTR [r10+rax*4+12]
	addss	xmm0, DWORD PTR [r10+rax*4]
	mulss	xmm0, DWORD PTR __real@3f000000
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 174  : }

	pop	r14
	ret	0
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z ENDP ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
_TEXT	SEGMENT
Tmp$1 = 0
Min$2 = 16
Max$3 = 32
this$ = 64
primitives$ = 72
nb_prims$ = 80
global_box$ = 88
?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z PROC ; Opcode::AABBTreeOfAABBsBuilder::ComputeGlobalBox

; 57   : {

$LN59:
	mov	QWORD PTR [rsp+16], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx

; 58   : 	// Checkings
; 59   : 	if(!primitives || !nb_prims)	return false;

	test	rdx, rdx
	je	$LN4@ComputeGlo
	test	r8d, r8d
	je	$LN4@ComputeGlo

; 60   : 
; 61   : 	// Initialize global box
; 62   : 	global_box = mAABBList[primitives[0]];

	mov	eax, DWORD PTR [rdx]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [rcx+64]
	movups	xmm0, XMMWORD PTR [rax+r10*8]
	movups	XMMWORD PTR [r9], xmm0
	movsdx	xmm1, QWORD PTR [rax+r10*8+16]
	movsdx	QWORD PTR [r9+16], xmm1

; 65   : 	for(udword i=1;i<nb_prims;i++)

	cmp	r8d, 1
	jbe	$LN1@ComputeGlo
	mov	QWORD PTR [rsp+64], rbx
	lea	r11, QWORD PTR [rdx+4]
	lea	ebx, DWORD PTR [r8-1]
	npad	7
$LL3@ComputeGlo:

; 68   : 		global_box.Add(mAABBList[primitives[i]]);

	mov	eax, DWORD PTR [r11]
	mov	r10, QWORD PTR [rdi+64]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 104  : 		inline_			void		GetMin(Point& min)						const		{ min = mMin;								}

	movsdx	xmm0, QWORD PTR [r9]
	mov	edx, DWORD PTR [r9+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 68   : 		global_box.Add(mAABBList[primitives[i]]);

	lea	r8, QWORD PTR [rax+rax*2]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 104  : 		inline_			void		GetMin(Point& min)						const		{ min = mMin;								}

	movsdx	QWORD PTR Min$2[rbp-48], xmm0
	mov	eax, DWORD PTR [r10+r8*8+8]
	mov	DWORD PTR Min$2[rbp-40], edx
	movsdx	xmm0, QWORD PTR [r10+r8*8]
	movsdx	QWORD PTR Tmp$1[rbp-48], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	movss	xmm1, DWORD PTR Tmp$1[rbp-48]
	movss	xmm0, DWORD PTR Min$2[rbp-48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 104  : 		inline_			void		GetMin(Point& min)						const		{ min = mMin;								}

	mov	DWORD PTR Tmp$1[rbp-40], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm0, xmm1
	jb	SHORT $LN19@ComputeGlo
	movss	DWORD PTR Min$2[rbp-48], xmm1
$LN19@ComputeGlo:
	movss	xmm1, DWORD PTR Tmp$1[rbp-44]
	movss	xmm0, DWORD PTR Min$2[rbp-44]
	comiss	xmm0, xmm1
	jb	SHORT $LN23@ComputeGlo
	movss	DWORD PTR Min$2[rbp-44], xmm1
$LN23@ComputeGlo:
	movss	xmm1, DWORD PTR Tmp$1[rbp-40]
	movss	xmm0, DWORD PTR Min$2[rbp-40]
	comiss	xmm0, xmm1
	jb	SHORT $LN27@ComputeGlo
	movss	DWORD PTR Min$2[rbp-40], xmm1
	mov	edx, DWORD PTR Min$2[rbp-40]
$LN27@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 106  : 		inline_			void		GetMax(Point& max)						const		{ max = mMax;								}

	movsdx	xmm0, QWORD PTR [r9+12]
	mov	ecx, DWORD PTR [r9+20]
	mov	eax, DWORD PTR [r10+r8*8+20]
	movsdx	QWORD PTR Max$3[rbp-48], xmm0
	movsdx	xmm0, QWORD PTR [r10+r8*8+12]
	mov	DWORD PTR Max$3[rbp-40], ecx
	mov	DWORD PTR Tmp$1[rbp-40], eax
	movsdx	QWORD PTR Tmp$1[rbp-48], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	movss	xmm1, DWORD PTR Tmp$1[rbp-48]
	movss	xmm0, DWORD PTR Max$3[rbp-48]
	comiss	xmm0, xmm1
	ja	SHORT $LN37@ComputeGlo
	movss	DWORD PTR Max$3[rbp-48], xmm1
$LN37@ComputeGlo:
	movss	xmm1, DWORD PTR Tmp$1[rbp-44]
	movss	xmm0, DWORD PTR Max$3[rbp-44]
	comiss	xmm0, xmm1
	ja	SHORT $LN41@ComputeGlo
	movss	DWORD PTR Max$3[rbp-44], xmm1
$LN41@ComputeGlo:
	movss	xmm1, DWORD PTR Tmp$1[rbp-40]
	movss	xmm0, DWORD PTR Max$3[rbp-40]
	comiss	xmm0, xmm1
	ja	SHORT $LN45@ComputeGlo
	movss	DWORD PTR Max$3[rbp-40], xmm1
	mov	ecx, DWORD PTR Max$3[rbp-40]
$LN45@ComputeGlo:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 50   : 						void		SetMinMax(const Point& min, const Point& max)		{ mMin = min;		mMax = max;									}

	movsdx	xmm0, QWORD PTR Min$2[rbp-48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 65   : 	for(udword i=1;i<nb_prims;i++)

	add	r11, 4
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 50   : 						void		SetMinMax(const Point& min, const Point& max)		{ mMin = min;		mMax = max;									}

	movsdx	QWORD PTR [r9], xmm0
	movsdx	xmm0, QWORD PTR Max$3[rbp-48]
	mov	DWORD PTR [r9+8], edx
	movsdx	QWORD PTR [r9+12], xmm0
	mov	DWORD PTR [r9+20], ecx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 65   : 	for(udword i=1;i<nb_prims;i++)

	dec	rbx
	jne	$LL3@ComputeGlo
	mov	rbx, QWORD PTR [rsp+64]
$LN1@ComputeGlo:

; 69   : 	}
; 70   : 
; 71   : 	return true;

	mov	al, 1

; 72   : }

	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rbp
	ret	0
$LN4@ComputeGlo:

; 58   : 	// Checkings
; 59   : 	if(!primitives || !nb_prims)	return false;

	xor	al, al

; 72   : }

	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rbp
	ret	0
?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ENDP ; Opcode::AABBTreeOfAABBsBuilder::ComputeGlobalBox
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
_TEXT	SEGMENT
this$ = 8
index$ = 16
axis$ = 24
?GetSplittingValue@AABBTreeOfAABBsBuilder@Opcode@@UEBAMII@Z PROC ; Opcode::AABBTreeOfAABBsBuilder::GetSplittingValue

; 84   : 	// For an AABB, the splitting value is the middle of the given axis,
; 85   : 	// i.e. the corresponding component of the center point
; 86   : 	return mAABBList[index].GetCenter(axis);

	mov	eax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [rcx+64]
	lea	rcx, QWORD PTR [rax+rdx*8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 119  : 		inline_			float		GetCenter(udword axis)					const		{ return (((const float*)mMax)[axis] + ((const float*)mMin)[axis])*0.5f;	}

	mov	eax, r8d
	movss	xmm0, DWORD PTR [rcx+rax*4+12]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@3f000000
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp

; 87   : }

	ret	0
?GetSplittingValue@AABBTreeOfAABBsBuilder@Opcode@@UEBAMII@Z ENDP ; Opcode::AABBTreeOfAABBsBuilder::GetSplittingValue
_TEXT	ENDS
END
