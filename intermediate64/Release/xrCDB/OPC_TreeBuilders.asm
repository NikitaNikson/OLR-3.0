; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
PUBLIC	?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMII@Z ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
PUBLIC	?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ; Opcode::AABBTreeOfTrianglesBuilder::ComputeGlobalBox
PUBLIC	__real@3eaaaaab
;	COMDAT __real@3eaaaaab
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
CONST	ENDS
_TEXT	SEGMENT
this$ = 8
index$ = 16
axis$ = 24
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMII@Z PROC ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue

; 132  : /*	// Compute center of triangle
; 133  : 	Point Center;
; 134  : 	mTriList[index].Center(mVerts, Center);
; 135  : 	// Return value
; 136  : 	return Center[axis];*/
; 137  : 
; 138  : 	// Compute correct component from center of triangle
; 139  : 	return	(((const float*)mVerts[mTriList[index].mVRef[0]])[axis]
; 140  : 			+((const float*)mVerts[mTriList[index].mVRef[1]])[axis]
; 141  : 			+((const float*)mVerts[mTriList[index].mVRef[2]])[axis])*INV3;

	mov	r10, QWORD PTR [rcx+72]
	mov	eax, edx
	mov	r9d, r8d
	mov	r8, QWORD PTR [rcx+80]
	lea	r11, QWORD PTR [rax+rax*2]
	mov	edx, DWORD PTR [r10+r11*4+4]
	mov	ecx, DWORD PTR [r10+r11*4]
	lea	rax, QWORD PTR [r9+rdx*2]
	add	rdx, rax
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	movss	xmm0, DWORD PTR [r8+rdx*4]
	addss	xmm0, DWORD PTR [r8+rcx*4]
	mov	ecx, DWORD PTR [r10+r11*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r8+rcx*4]
	mulss	xmm0, DWORD PTR __real@3eaaaaab

; 142  : }

	ret	0
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMII@Z ENDP ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
PUBLIC	__real@ff7fffff
PUBLIC	__real@7f7fffff
pdata	SEGMENT
$pdata$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN116
	DD	imagerel $LN116+63
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$9$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN116+63
	DD	imagerel $LN116+665
	DD	imagerel $chain$9$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$10$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN116+665
	DD	imagerel $LN116+684
	DD	imagerel $chain$10$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 051301H
	DD	0193413H
	DD	0160113H
	DD	05008H
$chain$9$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 0145f21H
	DD	02e85fH
	DD	03d859H
	DD	04c836H
	DD	05b831H
	DD	06a82cH
	DD	07981aH
	DD	097815H
	DD	0a6811H
	DD	0187409H
	DD	088805H
	DD	imagerel $LN116
	DD	imagerel $LN116+63
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$chain$10$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 021H
	DD	imagerel $LN116
	DD	imagerel $LN116+63
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
xdata	ENDS
;	COMDAT __real@ff7fffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+038
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_treebuilders.cpp
CONST	ENDS
_TEXT	SEGMENT
Min$ = 0
Max$ = 16
this$ = 192
primitives$ = 200
nb_prims$ = 208
global_box$ = 216
?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z PROC ; Opcode::AABBTreeOfTrianglesBuilder::ComputeGlobalBox

; 99   : {

$LN116:
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	push	rbp
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 176				; 000000b0H
	mov	rbx, r9
	mov	r10, rdx

; 100  : 	// Checkings
; 101  : 	if(!primitives || !nb_prims)	return false;

	test	rdx, rdx
	je	$LN4@ComputeGlo
	test	r8d, r8d
	je	$LN4@ComputeGlo

; 102  : 
; 103  : 	// Initialize global box
; 104  : 	Point Min(flt_max, flt_max, flt_max);

	movss	xmm3, DWORD PTR __real@7f7fffff

; 105  : 	Point Max(flt_min, flt_min, flt_min);

	movss	xmm2, DWORD PTR __real@ff7fffff
	mov	r9, QWORD PTR [rcx+80]
	movaps	XMMWORD PTR [rax-56], xmm8
	mov	QWORD PTR [rax+8], rdi
	mov	rdi, QWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-72], xmm9
	movss	DWORD PTR Min$[rbp-89], xmm3
	movss	DWORD PTR Max$[rbp-89], xmm2
	mov	r11d, r8d
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	xmm5, xmm3
	movaps	xmm8, xmm3
	movaps	xmm1, xmm2
	movss	DWORD PTR Min$[rbp-85], xmm5
	movss	DWORD PTR Min$[rbp-81], xmm8
	movss	DWORD PTR Max$[rbp-85], xmm1
	movaps	xmm0, xmm2
	movaps	XMMWORD PTR [rsp+48], xmm13
	movaps	XMMWORD PTR [rsp+32], xmm14
	movss	DWORD PTR Max$[rbp-81], xmm0
	npad	13
$LL3@ComputeGlo:

; 109  : 	{
; 110  : 		// Get current triangle-vertices
; 111  : 		const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	eax, DWORD PTR [r10]
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdi+rcx*4]
	lea	rdx, QWORD PTR [rax+rax*2]

; 112  : 		const Point& p1 = mVerts[mTriList[primitives[i]].mVRef[1]];

	mov	eax, DWORD PTR [rdi+rcx*4+4]
	lea	r8, QWORD PTR [rax+rax*2]

; 113  : 		const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];

	mov	eax, DWORD PTR [rdi+rcx*4+8]

; 114  : 		// Update global box
; 115  : 		Min.Min(p0).Min(p1).Min(p2);

	movss	xmm14, DWORD PTR [r9+rdx*4]
	comiss	xmm3, xmm14
	lea	rcx, QWORD PTR [rax+rax*2]
	jb	SHORT $LN29@ComputeGlo
	movaps	xmm3, xmm14
	movss	DWORD PTR Min$[rbp-89], xmm3
$LN29@ComputeGlo:
	movss	xmm11, DWORD PTR [r9+rdx*4+4]
	comiss	xmm5, xmm11
	jb	SHORT $LN33@ComputeGlo
	movaps	xmm5, xmm11
	movss	DWORD PTR Min$[rbp-85], xmm5
$LN33@ComputeGlo:
	movss	xmm13, DWORD PTR [r9+rdx*4+8]
	comiss	xmm8, xmm13
	jb	SHORT $LN37@ComputeGlo
	movaps	xmm8, xmm13
	movss	DWORD PTR Min$[rbp-81], xmm8
$LN37@ComputeGlo:
	movss	xmm10, DWORD PTR [r9+r8*4]
	comiss	xmm3, xmm10
	jb	SHORT $LN43@ComputeGlo
	movaps	xmm3, xmm10
	movss	DWORD PTR Min$[rbp-89], xmm3
$LN43@ComputeGlo:
	movss	xmm12, DWORD PTR [r9+r8*4+4]
	comiss	xmm5, xmm12
	jb	SHORT $LN47@ComputeGlo
	movaps	xmm5, xmm12
	movss	DWORD PTR Min$[rbp-85], xmm5
$LN47@ComputeGlo:
	movss	xmm9, DWORD PTR [r9+r8*4+8]
	comiss	xmm8, xmm9
	jb	SHORT $LN51@ComputeGlo
	movaps	xmm8, xmm9
	movss	DWORD PTR Min$[rbp-81], xmm8
$LN51@ComputeGlo:
	movss	xmm7, DWORD PTR [r9+rcx*4]
	comiss	xmm3, xmm7
	jb	SHORT $LN57@ComputeGlo
	movaps	xmm3, xmm7
	movss	DWORD PTR Min$[rbp-89], xmm3
$LN57@ComputeGlo:
	movss	xmm6, DWORD PTR [r9+rcx*4+4]
	comiss	xmm5, xmm6
	jb	SHORT $LN61@ComputeGlo
	movaps	xmm5, xmm6
	movss	DWORD PTR Min$[rbp-85], xmm5
$LN61@ComputeGlo:
	movss	xmm4, DWORD PTR [r9+rcx*4+8]
	comiss	xmm8, xmm4
	jb	SHORT $LN65@ComputeGlo
	movaps	xmm8, xmm4
	movss	DWORD PTR Min$[rbp-81], xmm8
$LN65@ComputeGlo:

; 116  : 		Max.Max(p0).Max(p1).Max(p2);

	comiss	xmm2, xmm14
	ja	SHORT $LN71@ComputeGlo
	movaps	xmm2, xmm14
	movss	DWORD PTR Max$[rbp-89], xmm2
$LN71@ComputeGlo:
	comiss	xmm1, xmm11
	ja	SHORT $LN75@ComputeGlo
	movaps	xmm1, xmm11
	movss	DWORD PTR Max$[rbp-85], xmm1
$LN75@ComputeGlo:
	comiss	xmm0, xmm13
	ja	SHORT $LN79@ComputeGlo
	movaps	xmm0, xmm13
	movss	DWORD PTR Max$[rbp-81], xmm0
$LN79@ComputeGlo:
	comiss	xmm2, xmm10
	ja	SHORT $LN85@ComputeGlo
	movaps	xmm2, xmm10
	movss	DWORD PTR Max$[rbp-89], xmm2
$LN85@ComputeGlo:
	comiss	xmm1, xmm12
	ja	SHORT $LN89@ComputeGlo
	movaps	xmm1, xmm12
	movss	DWORD PTR Max$[rbp-85], xmm1
$LN89@ComputeGlo:
	comiss	xmm0, xmm9
	ja	SHORT $LN93@ComputeGlo
	movaps	xmm0, xmm9
	movss	DWORD PTR Max$[rbp-81], xmm0
$LN93@ComputeGlo:
	comiss	xmm2, xmm7
	ja	SHORT $LN99@ComputeGlo
	movaps	xmm2, xmm7
	movss	DWORD PTR Max$[rbp-89], xmm2
$LN99@ComputeGlo:
	comiss	xmm1, xmm6
	ja	SHORT $LN103@ComputeGlo
	movaps	xmm1, xmm6
	movss	DWORD PTR Max$[rbp-85], xmm1
$LN103@ComputeGlo:
	comiss	xmm0, xmm4
	ja	SHORT $LN107@ComputeGlo
	movaps	xmm0, xmm4
	movss	DWORD PTR Max$[rbp-81], xmm0
$LN107@ComputeGlo:

; 106  : 
; 107  : 	// Loop through triangles
; 108  : 	for(udword i=0;i<nb_prims;i++)

	add	r10, 4
	dec	r11
	jne	$LL3@ComputeGlo

; 117  : 	}
; 118  : 	global_box.SetMinMax(Min, Max);

	mov	eax, DWORD PTR Min$[rbp-89]
	movaps	xmm14, XMMWORD PTR [rsp+32]
	movaps	xmm13, XMMWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+192]
	mov	DWORD PTR [rbx], eax
	mov	eax, DWORD PTR Min$[rbp-85]
	movaps	xmm12, XMMWORD PTR [rsp+64]
	movaps	xmm11, XMMWORD PTR [rsp+80]
	movaps	xmm10, XMMWORD PTR [rsp+96]
	mov	DWORD PTR [rbx+4], eax
	mov	eax, DWORD PTR Min$[rbp-81]
	mov	DWORD PTR [rbx+8], eax
	mov	eax, DWORD PTR Max$[rbp-89]
	movaps	xmm9, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+160]
	mov	DWORD PTR [rbx+12], eax
	mov	eax, DWORD PTR Max$[rbp-85]
	movaps	xmm8, XMMWORD PTR [rsp+128]
	mov	DWORD PTR [rbx+16], eax
	mov	eax, DWORD PTR Max$[rbp-81]
	mov	DWORD PTR [rbx+20], eax

; 119  : 	return true;

	mov	al, 1

; 120  : }

	mov	rbx, QWORD PTR [rsp+200]
	add	rsp, 176				; 000000b0H
	pop	rbp
	ret	0
$LN4@ComputeGlo:

; 100  : 	// Checkings
; 101  : 	if(!primitives || !nb_prims)	return false;

	xor	al, al

; 120  : }

	mov	rbx, QWORD PTR [rsp+200]
	add	rsp, 176				; 000000b0H
	pop	rbp
	ret	0
?ComputeGlobalBox@AABBTreeOfTrianglesBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ENDP ; Opcode::AABBTreeOfTrianglesBuilder::ComputeGlobalBox
_TEXT	ENDS
PUBLIC	?GetSplittingValue@AABBTreeOfAABBsBuilder@Opcode@@UEBAMII@Z ; Opcode::AABBTreeOfAABBsBuilder::GetSplittingValue
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
index$ = 16
axis$ = 24
?GetSplittingValue@AABBTreeOfAABBsBuilder@Opcode@@UEBAMII@Z PROC ; Opcode::AABBTreeOfAABBsBuilder::GetSplittingValue

; 84   : 	// For an AABB, the splitting value is the middle of the given axis,
; 85   : 	// i.e. the corresponding component of the center point
; 86   : 	return mAABBList[index].GetCenter(axis);

	mov	eax, edx
	lea	rdx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [rcx+72]
	lea	rcx, QWORD PTR [rax+rdx*8]
	mov	eax, r8d
	movss	xmm0, DWORD PTR [rcx+rax*4+12]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@3f000000

; 87   : }

	ret	0
?GetSplittingValue@AABBTreeOfAABBsBuilder@Opcode@@UEBAMII@Z ENDP ; Opcode::AABBTreeOfAABBsBuilder::GetSplittingValue
_TEXT	ENDS
PUBLIC	?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ; Opcode::AABBTreeOfAABBsBuilder::ComputeGlobalBox
pdata	SEGMENT
$pdata$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN56
	DD	imagerel $LN56+107
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$4$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN56+107
	DD	imagerel $LN56+443
	DD	imagerel $chain$4$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$pdata$5$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD imagerel $LN56+443
	DD	imagerel $LN56+463
	DD	imagerel $chain$5$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 030b01H
	DD	0e004620bH
	DD	05002H
$chain$4$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 0a1921H
	DD	06d419H
	DD	0dc414H
	DD	0c740fH
	DD	0b640aH
	DD	0a3405H
	DD	imagerel $LN56
	DD	imagerel $LN56+107
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
$chain$5$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z DD 021H
	DD	imagerel $LN56
	DD	imagerel $LN56+107
	DD	imagerel $unwind$?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
Min$122736 = 0
Tmp$122737 = 16
Max$122738 = 32
this$ = 80
primitives$ = 88
nb_prims$ = 96
global_box$ = 104
?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z PROC ; Opcode::AABBTreeOfAABBsBuilder::ComputeGlobalBox

; 57   : {

$LN56:
	push	rbp
	push	r14
	mov	rbp, rsp
	sub	rsp, 56					; 00000038H
	mov	r11, r9
	mov	r14, rcx

; 58   : 	// Checkings
; 59   : 	if(!primitives || !nb_prims)	return false;

	test	rdx, rdx
	je	$LN4@ComputeGlo@2
	test	r8d, r8d
	je	$LN4@ComputeGlo@2

; 60   : 
; 61   : 	// Initialize global box
; 62   : 	global_box = mAABBList[primitives[0]];

	mov	r9, QWORD PTR [rcx+72]
	mov	eax, DWORD PTR [rdx]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r9+r10*8]
	mov	DWORD PTR [r11], eax
	mov	eax, DWORD PTR [r9+r10*8+4]
	mov	DWORD PTR [r11+4], eax
	mov	eax, DWORD PTR [r9+r10*8+8]
	mov	DWORD PTR [r11+8], eax
	mov	eax, DWORD PTR [r9+r10*8+12]
	mov	DWORD PTR [r11+12], eax
	mov	eax, DWORD PTR [r9+r10*8+16]
	mov	DWORD PTR [r11+16], eax
	mov	eax, DWORD PTR [r9+r10*8+20]
	mov	DWORD PTR [r11+20], eax

; 63   : 
; 64   : 	// Loop through boxes
; 65   : 	for(udword i=1;i<nb_prims;i++)

	cmp	r8d, 1
	jbe	$LN1@ComputeGlo@2

; 60   : 
; 61   : 	// Initialize global box
; 62   : 	global_box = mAABBList[primitives[0]];

	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+88], rsi
	mov	QWORD PTR [rsp+96], rdi
	mov	QWORD PTR [rsp+104], r12
	mov	QWORD PTR [rsp+48], r13
	lea	r13d, DWORD PTR [r8-1]
	lea	r12, QWORD PTR [rdx+4]
	npad	4
$LL3@ComputeGlo@2:

; 66   : 	{
; 67   : 		// Update global box
; 68   : 		global_box.Add(mAABBList[primitives[i]]);

	mov	rsi, QWORD PTR [r14+72]
	mov	eax, DWORD PTR [r12]
	mov	r9d, DWORD PTR [r11]
	mov	r10d, DWORD PTR [r11+4]
	mov	ebx, DWORD PTR [r11+8]
	lea	rdi, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rsi+rdi*8]
	mov	DWORD PTR Min$122736[rbp-56], r9d
	mov	DWORD PTR Min$122736[rbp-52], r10d
	movss	xmm0, DWORD PTR Min$122736[rbp-56]
	mov	DWORD PTR Tmp$122737[rbp-56], eax
	mov	eax, DWORD PTR [rsi+rdi*8+4]
	mov	DWORD PTR Min$122736[rbp-48], ebx
	movss	xmm1, DWORD PTR Tmp$122737[rbp-56]
	comiss	xmm0, xmm1
	mov	DWORD PTR Tmp$122737[rbp-52], eax
	mov	eax, DWORD PTR [rsi+rdi*8+8]
	mov	DWORD PTR Tmp$122737[rbp-48], eax
	jb	SHORT $LN19@ComputeGlo@2
	movss	DWORD PTR Min$122736[rbp-56], xmm1
	mov	r9d, DWORD PTR Min$122736[rbp-56]
$LN19@ComputeGlo@2:
	movss	xmm1, DWORD PTR Tmp$122737[rbp-52]
	movss	xmm0, DWORD PTR Min$122736[rbp-52]
	comiss	xmm0, xmm1
	jb	SHORT $LN23@ComputeGlo@2
	movss	DWORD PTR Min$122736[rbp-52], xmm1
	mov	r10d, DWORD PTR Min$122736[rbp-52]
$LN23@ComputeGlo@2:
	movss	xmm1, DWORD PTR Tmp$122737[rbp-48]
	movss	xmm0, DWORD PTR Min$122736[rbp-48]
	comiss	xmm0, xmm1
	jb	SHORT $LN27@ComputeGlo@2
	movss	DWORD PTR Min$122736[rbp-48], xmm1
	mov	ebx, DWORD PTR Min$122736[rbp-48]
$LN27@ComputeGlo@2:
	mov	eax, DWORD PTR [rsi+rdi*8+12]
	mov	ecx, DWORD PTR [r11+12]
	mov	edx, DWORD PTR [r11+16]
	mov	r8d, DWORD PTR [r11+20]
	mov	DWORD PTR Tmp$122737[rbp-56], eax
	mov	eax, DWORD PTR [rsi+rdi*8+16]
	movss	xmm1, DWORD PTR Tmp$122737[rbp-56]
	mov	DWORD PTR Tmp$122737[rbp-52], eax
	mov	eax, DWORD PTR [rsi+rdi*8+20]
	mov	DWORD PTR Max$122738[rbp-56], ecx
	movss	xmm0, DWORD PTR Max$122738[rbp-56]
	comiss	xmm0, xmm1
	mov	DWORD PTR Max$122738[rbp-52], edx
	mov	DWORD PTR Max$122738[rbp-48], r8d
	mov	DWORD PTR Tmp$122737[rbp-48], eax
	ja	SHORT $LN37@ComputeGlo@2
	movss	DWORD PTR Max$122738[rbp-56], xmm1
	mov	ecx, DWORD PTR Max$122738[rbp-56]
$LN37@ComputeGlo@2:
	movss	xmm1, DWORD PTR Tmp$122737[rbp-52]
	movss	xmm0, DWORD PTR Max$122738[rbp-52]
	comiss	xmm0, xmm1
	ja	SHORT $LN41@ComputeGlo@2
	movss	DWORD PTR Max$122738[rbp-52], xmm1
	mov	edx, DWORD PTR Max$122738[rbp-52]
$LN41@ComputeGlo@2:
	movss	xmm1, DWORD PTR Tmp$122737[rbp-48]
	movss	xmm0, DWORD PTR Max$122738[rbp-48]
	comiss	xmm0, xmm1
	ja	SHORT $LN45@ComputeGlo@2
	movss	DWORD PTR Max$122738[rbp-48], xmm1
	mov	r8d, DWORD PTR Max$122738[rbp-48]
$LN45@ComputeGlo@2:
	mov	DWORD PTR [r11], r9d
	mov	DWORD PTR [r11+12], ecx
	add	r12, 4
	dec	r13
	mov	DWORD PTR [r11+4], r10d
	mov	DWORD PTR [r11+16], edx
	mov	DWORD PTR [r11+8], ebx
	mov	DWORD PTR [r11+20], r8d
	jne	$LL3@ComputeGlo@2
	mov	r13, QWORD PTR [rsp+48]
	mov	r12, QWORD PTR [rsp+104]
	mov	rdi, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
$LN1@ComputeGlo@2:

; 69   : 	}
; 70   : 
; 71   : 	return true;

	mov	al, 1

; 72   : }

	add	rsp, 56					; 00000038H
	pop	r14
	pop	rbp
	ret	0
$LN4@ComputeGlo@2:

; 58   : 	// Checkings
; 59   : 	if(!primitives || !nb_prims)	return false;

	xor	al, al

; 72   : }

	add	rsp, 56					; 00000038H
	pop	r14
	pop	rbp
	ret	0
?ComputeGlobalBox@AABBTreeOfAABBsBuilder@Opcode@@UEBA_NPEBIIAEAVAABB@Meshmerizer@@@Z ENDP ; Opcode::AABBTreeOfAABBsBuilder::ComputeGlobalBox
pdata	SEGMENT
$pdata$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN27
	DD	imagerel $LN27+34
	DD	imagerel $unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN27+34
	DD	imagerel $LN27+54
	DD	imagerel $chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$4$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN27+54
	DD	imagerel $LN27+392
	DD	imagerel $chain$4$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$5$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN27+392
	DD	imagerel $LN27+511
	DD	imagerel $chain$5$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$pdata$6$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD imagerel $LN27+511
	DD	imagerel $LN27+543
	DD	imagerel $chain$6$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 030701H
	DD	070030207H
	DD	06002H
$chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 020521H
	DD	043405H
	DD	imagerel $LN27
	DD	imagerel $LN27+34
	DD	imagerel $unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$chain$4$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 082421H
	DD	0e424H
	DD	07d41aH
	DD	06c415H
	DD	055405H
	DD	imagerel $LN27+34
	DD	imagerel $LN27+54
	DD	imagerel $chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$chain$5$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 021H
	DD	imagerel $LN27+34
	DD	imagerel $LN27+54
	DD	imagerel $chain$0$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
$chain$6$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z DD 021H
	DD	imagerel $LN27
	DD	imagerel $LN27+34
	DD	imagerel $unwind$?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 32
primitives$ = 40
nb_prims$ = 48
global_box$ = 56
axis$ = 64
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z PROC ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue

; 155  : {

$LN27:
	push	rsi
	push	rdi
	sub	rsp, 8

; 156  : 	if(mRules&SPLIT_GEOMCENTER)

	test	BYTE PTR [rcx+12], 64			; 00000040H
	mov	edi, r8d
	mov	rsi, rdx
	mov	r10, rcx
	je	$LN5@GetSplitti

; 157  : 	{
; 158  : 		// Loop through triangles
; 159  : 		float SplitValue = 0.0f;

	xorps	xmm0, xmm0

; 160  : 		for(udword i=0;i<nb_prims;i++)

	mov	r9d, DWORD PTR axis$[rsp]
	mov	QWORD PTR [rsp+32], rbx
	xor	ebx, ebx
	mov	r11d, ebx
	cmp	r8d, 4
	jl	$LC25@GetSplitti

; 157  : 	{
; 158  : 		// Loop through triangles
; 159  : 		float SplitValue = 0.0f;

	mov	QWORD PTR [rsp+40], rbp
	mov	rbp, QWORD PTR [rcx+72]
	lea	eax, DWORD PTR [r8-4]
	shr	eax, 2
	mov	QWORD PTR [rsp+48], r12
	mov	QWORD PTR [rsp+56], r13
	mov	r13, QWORD PTR [rcx+80]
	inc	eax
	mov	QWORD PTR [rsp], r14
	lea	r14, QWORD PTR [rdx+8]
	mov	r8d, eax

; 160  : 		for(udword i=0;i<nb_prims;i++)

	lea	ebx, DWORD PTR [rax*4]
	lea	r11, QWORD PTR [rax*4]
$LL26@GetSplitti:

; 161  : 		{
; 162  : 			// Get current triangle-vertices
; 163  : 			const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	eax, DWORD PTR [r14-8]

; 164  : 			const Point& p1 = mVerts[mTriList[primitives[i]].mVRef[1]];
; 165  : 			const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];
; 166  : 			// Update split value
; 167  : 			SplitValue += ((const float*)p0)[axis];
; 168  : 			SplitValue += ((const float*)p1)[axis];
; 169  : 			SplitValue += ((const float*)p2)[axis];

	add	r14, 16
	lea	rdx, QWORD PTR [rax+rax*2]
	mov	ecx, DWORD PTR [rbp+rdx*4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	mov	eax, DWORD PTR [r14-20]
	lea	rdx, QWORD PTR [rax+rax*2]
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	mov	eax, DWORD PTR [r14-16]
	lea	rdx, QWORD PTR [rax+rax*2]
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	mov	eax, DWORD PTR [r14-12]
	lea	rdx, QWORD PTR [rax+rax*2]
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r13+rcx*4]
	mov	ecx, DWORD PTR [rbp+rdx*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	dec	r8
	addss	xmm0, DWORD PTR [r13+rcx*4]
	jne	$LL26@GetSplitti
	mov	r14, QWORD PTR [rsp]
	mov	r13, QWORD PTR [rsp+56]
	mov	r12, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+40]
$LC25@GetSplitti:

; 160  : 		for(udword i=0;i<nb_prims;i++)

	cmp	ebx, edi
	jae	SHORT $LN24@GetSplitti
	mov	r8, QWORD PTR [r10+72]
	mov	r10, QWORD PTR [r10+80]
	mov	eax, edi
	sub	eax, ebx
	lea	r11, QWORD PTR [rsi+r11*4]
	mov	ebx, eax
$LC4@GetSplitti:

; 161  : 		{
; 162  : 			// Get current triangle-vertices
; 163  : 			const Point& p0 = mVerts[mTriList[primitives[i]].mVRef[0]];

	mov	eax, DWORD PTR [r11]
	add	r11, 4
	lea	rdx, QWORD PTR [rax+rax*2]

; 164  : 			const Point& p1 = mVerts[mTriList[primitives[i]].mVRef[1]];
; 165  : 			const Point& p2 = mVerts[mTriList[primitives[i]].mVRef[2]];
; 166  : 			// Update split value
; 167  : 			SplitValue += ((const float*)p0)[axis];
; 168  : 			SplitValue += ((const float*)p1)[axis];
; 169  : 			SplitValue += ((const float*)p2)[axis];

	mov	ecx, DWORD PTR [r8+rdx*4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+4]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	addss	xmm0, DWORD PTR [r10+rcx*4]
	mov	ecx, DWORD PTR [r8+rdx*4+8]
	lea	rax, QWORD PTR [r9+rcx*2]
	add	rcx, rax
	dec	rbx
	addss	xmm0, DWORD PTR [r10+rcx*4]
	jne	SHORT $LC4@GetSplitti
$LN24@GetSplitti:
	mov	rbx, QWORD PTR [rsp+32]

; 170  : 		}
; 171  : 		return SplitValue / float(nb_prims*3);

	lea	ecx, DWORD PTR [rdi+rdi*2]
	pxor	xmm1, xmm1
	cvtsi2ss xmm1, rcx
	divss	xmm0, xmm1

; 174  : }

	add	rsp, 8
	pop	rdi
	pop	rsi
	ret	0
$LN5@GetSplitti:

; 172  : 	}
; 173  : 	else return AABBTreeBuilder::GetSplittingValueEx(primitives, nb_prims, global_box, axis);

	mov	eax, DWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [r9+rax*4+12]
	addss	xmm0, DWORD PTR [r9+rax*4]
	mulss	xmm0, DWORD PTR __real@3f000000

; 174  : }

	add	rsp, 8
	pop	rdi
	pop	rsi
	ret	0
?GetSplittingValue@AABBTreeOfTrianglesBuilder@Opcode@@UEBAMPEBIIAEBVAABB@Meshmerizer@@I@Z ENDP ; Opcode::AABBTreeOfTrianglesBuilder::GetSplittingValue
END
