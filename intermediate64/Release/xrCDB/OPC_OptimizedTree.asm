; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R2AABBQuantizedNoLeafTree@Opcode@@8		; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Array'
PUBLIC	??_R2AABBQuantizedTree@Opcode@@8		; Opcode::AABBQuantizedTree::`RTTI Base Class Array'
PUBLIC	??_R2AABBNoLeafTree@Opcode@@8			; Opcode::AABBNoLeafTree::`RTTI Base Class Array'
PUBLIC	??_R2AABBCollisionTree@Opcode@@8		; Opcode::AABBCollisionTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8	; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8	; Opcode::AABBQuantizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8		; Opcode::AABBNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8	; Opcode::AABBCollisionTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3AABBQuantizedNoLeafTree@Opcode@@8		; Opcode::AABBQuantizedNoLeafTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8	; Opcode::AABBQuantizedNoLeafTree `RTTI Type Descriptor'
PUBLIC	??_R3AABBQuantizedTree@Opcode@@8		; Opcode::AABBQuantizedTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVAABBQuantizedTree@Opcode@@@8		; Opcode::AABBQuantizedTree `RTTI Type Descriptor'
PUBLIC	??_R3AABBNoLeafTree@Opcode@@8			; Opcode::AABBNoLeafTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVAABBNoLeafTree@Opcode@@@8		; Opcode::AABBNoLeafTree `RTTI Type Descriptor'
PUBLIC	??_R3AABBCollisionTree@Opcode@@8		; Opcode::AABBCollisionTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVAABBCollisionTree@Opcode@@@8		; Opcode::AABBCollisionTree `RTTI Type Descriptor'
PUBLIC	??_R4AABBQuantizedNoLeafTree@Opcode@@6B@	; Opcode::AABBQuantizedNoLeafTree::`RTTI Complete Object Locator'
PUBLIC	??_R4AABBQuantizedTree@Opcode@@6B@		; Opcode::AABBQuantizedTree::`RTTI Complete Object Locator'
PUBLIC	??_R4AABBNoLeafTree@Opcode@@6B@			; Opcode::AABBNoLeafTree::`RTTI Complete Object Locator'
PUBLIC	??_R4AABBCollisionTree@Opcode@@6B@		; Opcode::AABBCollisionTree::`RTTI Complete Object Locator'
PUBLIC	??_7AABBQuantizedNoLeafTree@Opcode@@6B@		; Opcode::AABBQuantizedNoLeafTree::`vftable'
PUBLIC	??_7AABBQuantizedTree@Opcode@@6B@		; Opcode::AABBQuantizedTree::`vftable'
PUBLIC	??_7AABBNoLeafTree@Opcode@@6B@			; Opcode::AABBNoLeafTree::`vftable'
PUBLIC	??_7AABBCollisionTree@Opcode@@6B@		; Opcode::AABBCollisionTree::`vftable'
PUBLIC	??_R0?AVAABBOptimizedTree@Opcode@@@8		; Opcode::AABBOptimizedTree `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8	; Opcode::AABBOptimizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2AABBOptimizedTree@Opcode@@8		; Opcode::AABBOptimizedTree::`RTTI Base Class Array'
PUBLIC	??_R3AABBOptimizedTree@Opcode@@8		; Opcode::AABBOptimizedTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4AABBOptimizedTree@Opcode@@6B@		; Opcode::AABBOptimizedTree::`RTTI Complete Object Locator'
PUBLIC	??_7AABBOptimizedTree@Opcode@@6B@		; Opcode::AABBOptimizedTree::`vftable'
;	COMDAT ??_7AABBOptimizedTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBOptimizedTree@Opcode@@6B@ DQ FLAT:??_R4AABBOptimizedTree@Opcode@@6B@ ; Opcode::AABBOptimizedTree::`vftable'
	DQ	FLAT:??_EAABBOptimizedTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R4AABBOptimizedTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBOptimizedTree@Opcode@@6B@ DD 01H		; Opcode::AABBOptimizedTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBOptimizedTree@Opcode@@@8
	DD	imagerel ??_R3AABBOptimizedTree@Opcode@@8
	DD	imagerel ??_R4AABBOptimizedTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R3AABBOptimizedTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBOptimizedTree@Opcode@@8 DD 00H			; Opcode::AABBOptimizedTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2AABBOptimizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBOptimizedTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBOptimizedTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8 ; Opcode::AABBOptimizedTree::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8 DD imagerel ??_R0?AVAABBOptimizedTree@Opcode@@@8 ; Opcode::AABBOptimizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBOptimizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBOptimizedTree@Opcode@@@8
data$r	SEGMENT
??_R0?AVAABBOptimizedTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBOptimizedTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBOptimizedTree@Opcode@@', 00H
data$r	ENDS
;	COMDAT ??_7AABBCollisionTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBCollisionTree@Opcode@@6B@ DQ FLAT:??_R4AABBCollisionTree@Opcode@@6B@ ; Opcode::AABBCollisionTree::`vftable'
	DQ	FLAT:??_EAABBCollisionTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_7AABBNoLeafTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBNoLeafTree@Opcode@@6B@ DQ FLAT:??_R4AABBNoLeafTree@Opcode@@6B@ ; Opcode::AABBNoLeafTree::`vftable'
	DQ	FLAT:??_EAABBNoLeafTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_7AABBQuantizedTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBQuantizedTree@Opcode@@6B@ DQ FLAT:??_R4AABBQuantizedTree@Opcode@@6B@ ; Opcode::AABBQuantizedTree::`vftable'
	DQ	FLAT:??_EAABBQuantizedTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_7AABBQuantizedNoLeafTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBQuantizedNoLeafTree@Opcode@@6B@ DQ FLAT:??_R4AABBQuantizedNoLeafTree@Opcode@@6B@ ; Opcode::AABBQuantizedNoLeafTree::`vftable'
	DQ	FLAT:??_EAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_R4AABBCollisionTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBCollisionTree@Opcode@@6B@ DD 01H		; Opcode::AABBCollisionTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBCollisionTree@Opcode@@@8
	DD	imagerel ??_R3AABBCollisionTree@Opcode@@8
	DD	imagerel ??_R4AABBCollisionTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R4AABBNoLeafTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBNoLeafTree@Opcode@@6B@ DD 01H			; Opcode::AABBNoLeafTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBNoLeafTree@Opcode@@@8
	DD	imagerel ??_R3AABBNoLeafTree@Opcode@@8
	DD	imagerel ??_R4AABBNoLeafTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R4AABBQuantizedTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBQuantizedTree@Opcode@@6B@ DD 01H		; Opcode::AABBQuantizedTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBQuantizedTree@Opcode@@@8
	DD	imagerel ??_R3AABBQuantizedTree@Opcode@@8
	DD	imagerel ??_R4AABBQuantizedTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R4AABBQuantizedNoLeafTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBQuantizedNoLeafTree@Opcode@@6B@ DD 01H		; Opcode::AABBQuantizedNoLeafTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8
	DD	imagerel ??_R3AABBQuantizedNoLeafTree@Opcode@@8
	DD	imagerel ??_R4AABBQuantizedNoLeafTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBCollisionTree@Opcode@@@8
data$r	SEGMENT
??_R0?AVAABBCollisionTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBCollisionTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBCollisionTree@Opcode@@', 00H
data$r	ENDS
;	COMDAT ??_R3AABBCollisionTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBCollisionTree@Opcode@@8 DD 00H			; Opcode::AABBCollisionTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBCollisionTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBNoLeafTree@Opcode@@@8
data$r	SEGMENT
??_R0?AVAABBNoLeafTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBNoLeafTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBNoLeafTree@Opcode@@', 00H
data$r	ENDS
;	COMDAT ??_R3AABBNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBNoLeafTree@Opcode@@8 DD 00H			; Opcode::AABBNoLeafTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBQuantizedTree@Opcode@@@8
data$r	SEGMENT
??_R0?AVAABBQuantizedTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBQuantizedTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBQuantizedTree@Opcode@@', 00H
data$r	ENDS
;	COMDAT ??_R3AABBQuantizedTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBQuantizedTree@Opcode@@8 DD 00H			; Opcode::AABBQuantizedTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBQuantizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8
data$r	SEGMENT
??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBQuantizedNoLeafTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBQuantizedNoLeafTree@Opcode@@', 00H
data$r	ENDS
;	COMDAT ??_R3AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBQuantizedNoLeafTree@Opcode@@8 DD 00H		; Opcode::AABBQuantizedNoLeafTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8 DD imagerel ??_R0?AVAABBCollisionTree@Opcode@@@8 ; Opcode::AABBCollisionTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBCollisionTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8 DD imagerel ??_R0?AVAABBNoLeafTree@Opcode@@@8 ; Opcode::AABBNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8 DD imagerel ??_R0?AVAABBQuantizedTree@Opcode@@@8 ; Opcode::AABBQuantizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBQuantizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8 DD imagerel ??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8 ; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBCollisionTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBCollisionTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8 ; Opcode::AABBCollisionTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2AABBNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBNoLeafTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8 ; Opcode::AABBNoLeafTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2AABBQuantizedTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBQuantizedTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8 ; Opcode::AABBQuantizedTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBQuantizedNoLeafTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8 ; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
gFixQuantized DB 01H
CONST	ENDS
PUBLIC	??0AABBOptimizedTree@Opcode@@QEAA@XZ		; Opcode::AABBOptimizedTree::AABBOptimizedTree
PUBLIC	??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBOptimizedTree::`scalar deleting destructor'
PUBLIC	??1AABBOptimizedTree@Opcode@@UEAA@XZ		; Opcode::AABBOptimizedTree::~AABBOptimizedTree
PUBLIC	?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ	; Opcode::AABBCollisionNode::GetNodeSize
PUBLIC	?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ	; Opcode::AABBNoLeafNode::GetNodeSize
PUBLIC	?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ	; Opcode::AABBCollisionTree::GetUsedBytes
PUBLIC	?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ	; Opcode::AABBNoLeafTree::GetUsedBytes
PUBLIC	?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ	; Opcode::AABBQuantizedTree::GetUsedBytes
PUBLIC	?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ ; Opcode::AABBQuantizedNoLeafTree::GetUsedBytes
PUBLIC	??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBQuantizedNoLeafNode>
PUBLIC	??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z ; xr_free<Opcode::AABBQuantizedNoLeafNode>
PUBLIC	??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBQuantizedNode>
PUBLIC	??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z ; xr_free<Opcode::AABBQuantizedNode>
PUBLIC	??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBNoLeafNode>
PUBLIC	??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z ; xr_free<Opcode::AABBNoLeafNode>
PUBLIC	??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBCollisionNode>
PUBLIC	??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z ; xr_free<Opcode::AABBCollisionNode>
PUBLIC	?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBQuantizedNoLeafTree::Build
PUBLIC	??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ	; Opcode::AABBQuantizedNoLeafTree::~AABBQuantizedNoLeafTree
PUBLIC	??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBQuantizedNoLeafTree::`scalar deleting destructor'
PUBLIC	?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBQuantizedTree::Build
PUBLIC	??1AABBQuantizedTree@Opcode@@UEAA@XZ		; Opcode::AABBQuantizedTree::~AABBQuantizedTree
PUBLIC	??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBQuantizedTree::`scalar deleting destructor'
PUBLIC	?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBNoLeafTree::Build
PUBLIC	??1AABBNoLeafTree@Opcode@@UEAA@XZ		; Opcode::AABBNoLeafTree::~AABBNoLeafTree
PUBLIC	??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z		; Opcode::AABBNoLeafTree::`scalar deleting destructor'
PUBLIC	?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBCollisionTree::Build
PUBLIC	??1AABBCollisionTree@Opcode@@UEAA@XZ		; Opcode::AABBCollisionTree::~AABBCollisionTree
PUBLIC	??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBCollisionTree::`scalar deleting destructor'
PUBLIC	??0AABBQuantizedNoLeafTree@Opcode@@QEAA@XZ	; Opcode::AABBQuantizedNoLeafTree::AABBQuantizedNoLeafTree
PUBLIC	??0AABBNoLeafTree@Opcode@@QEAA@XZ		; Opcode::AABBNoLeafTree::AABBNoLeafTree
PUBLIC	??0AABBQuantizedTree@Opcode@@QEAA@XZ		; Opcode::AABBQuantizedTree::AABBQuantizedTree
PUBLIC	??0AABBCollisionTree@Opcode@@QEAA@XZ		; Opcode::AABBCollisionTree::AABBCollisionTree
EXTRN	??_EAABBOptimizedTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBOptimizedTree::`vector deleting destructor'
EXTRN	??_EAABBCollisionTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBCollisionTree::`vector deleting destructor'
EXTRN	??_EAABBNoLeafTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBNoLeafTree::`vector deleting destructor'
EXTRN	??_EAABBQuantizedTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBQuantizedTree::`vector deleting destructor'
EXTRN	??_EAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z:PROC ; Opcode::AABBQuantizedNoLeafTree::`vector deleting destructor'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN13
	DD	imagerel $LN13+49
	DD	imagerel $unwind$??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN161
	DD	imagerel $LN161+51
	DD	imagerel $unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$0$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN161+51
	DD	imagerel $LN161+198
	DD	imagerel $chain$0$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$4$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN161+198
	DD	imagerel $LN161+218
	DD	imagerel $chain$4$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN161+218
	DD	imagerel $LN161+604
	DD	imagerel $chain$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$16$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN161+604
	DD	imagerel $LN161+1289
	DD	imagerel $chain$16$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$12$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN161+1289
	DD	imagerel $LN161+1383
	DD	imagerel $chain$12$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+81
	DD	imagerel $unwind$??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN22
	DD	imagerel $LN22+101
	DD	imagerel $unwind$??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN158
	DD	imagerel $LN158+66
	DD	imagerel $unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$0$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN158+66
	DD	imagerel $LN158+199
	DD	imagerel $chain$0$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$4$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN158+199
	DD	imagerel $LN158+218
	DD	imagerel $chain$4$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN158+218
	DD	imagerel $LN158+604
	DD	imagerel $chain$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$15$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN158+604
	DD	imagerel $LN158+1225
	DD	imagerel $chain$15$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$12$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN158+1225
	DD	imagerel $LN158+1319
	DD	imagerel $chain$12$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$??1AABBQuantizedTree@Opcode@@UEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+81
	DD	imagerel $unwind$??1AABBQuantizedTree@Opcode@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN22
	DD	imagerel $LN22+101
	DD	imagerel $unwind$??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN14
	DD	imagerel $LN14+151
	DD	imagerel $unwind$?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$??1AABBNoLeafTree@Opcode@@UEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+81
	DD	imagerel $unwind$??1AABBNoLeafTree@Opcode@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN18
	DD	imagerel $LN18+101
	DD	imagerel $unwind$??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN14
	DD	imagerel $LN14+145
	DD	imagerel $unwind$?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$??1AABBCollisionTree@Opcode@@UEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+81
	DD	imagerel $unwind$??1AABBCollisionTree@Opcode@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN18
	DD	imagerel $LN18+101
	DD	imagerel $unwind$??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD imagerel ?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
	DD	imagerel ?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z+385
	DD	imagerel $unwind$?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
$pdata$?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD imagerel ?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
	DD	imagerel ?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z+299
	DD	imagerel $unwind$?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
xdata	SEGMENT
$unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	01b010aH
	DD	030027003H
$chain$0$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 020821H
	DD	0206408H
	DD	imagerel $LN161
	DD	imagerel $LN161+51
	DD	imagerel $unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$4$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 061421H
	DD	0b6814H
	DD	018f40cH
	DD	0206400H
	DD	imagerel $LN161
	DD	imagerel $LN161+51
	DD	imagerel $unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0e4221H
	DD	04d842H
	DD	05c83cH
	DD	06b836H
	DD	07a830H
	DD	08981aH
	DD	098811H
	DD	0a7808H
	DD	imagerel $LN161+198
	DD	imagerel $LN161+218
	DD	imagerel $chain$4$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$16$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 082d21H
	DD	019e42dH
	DD	01ad418H
	DD	021c410H
	DD	01e5408H
	DD	imagerel $LN161+1289
	DD	imagerel $LN161+1383
	DD	imagerel $chain$12$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$12$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0c0021H
	DD	04d800H
	DD	05c800H
	DD	06b800H
	DD	07a800H
	DD	089800H
	DD	098800H
	DD	imagerel $LN161+198
	DD	imagerel $LN161+218
	DD	imagerel $chain$4$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$unwind$??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
$unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	01b010aH
	DD	030027003H
$chain$0$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 020821H
	DD	0206408H
	DD	imagerel $LN158
	DD	imagerel $LN158+66
	DD	imagerel $unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$4$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 061321H
	DD	0b6813H
	DD	019e40bH
	DD	0206400H
	DD	imagerel $LN158
	DD	imagerel $LN158+66
	DD	imagerel $unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0e4321H
	DD	04d843H
	DD	05c83dH
	DD	06b837H
	DD	07a831H
	DD	08981aH
	DD	098811H
	DD	0a7808H
	DD	imagerel $LN158+199
	DD	imagerel $LN158+218
	DD	imagerel $chain$4$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$15$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 062821H
	DD	018f428H
	DD	01ac41dH
	DD	01e5408H
	DD	imagerel $LN158+1225
	DD	imagerel $LN158+1319
	DD	imagerel $chain$12$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$12$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0c0021H
	DD	04d800H
	DD	05c800H
	DD	06b800H
	DD	07a800H
	DD	089800H
	DD	098800H
	DD	imagerel $LN158+199
	DD	imagerel $LN158+218
	DD	imagerel $chain$4$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$unwind$??1AABBQuantizedTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
$unwind$?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$??1AABBNoLeafTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
$unwind$?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$??1AABBCollisionTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
$unwind$?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD 0a1901H
	DD	046819H
	DD	0f6414H
	DD	0e5414H
	DD	0d3414H
	DD	070109214H
$unwind$?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD 0a1901H
	DD	046819H
	DD	0e6414H
	DD	0d5414H
	DD	0c3414H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 8
??0AABBCollisionTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBCollisionTree::AABBCollisionTree

; 206  : {

	lea	rax, OFFSET FLAT:??_7AABBCollisionTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	xor	edx, edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 206  : {

	mov	QWORD PTR [rcx], rax

; 207  : }

	mov	rax, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	mov	DWORD PTR [rcx+8], edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 206  : {

	mov	QWORD PTR [rcx+16], rdx

; 207  : }

	ret	0
??0AABBCollisionTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBCollisionTree::AABBCollisionTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 8
??0AABBQuantizedTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBQuantizedTree::AABBQuantizedTree

; 410  : {

	lea	rax, OFFSET FLAT:??_7AABBQuantizedTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	xor	edx, edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 410  : {

	mov	QWORD PTR [rcx], rax

; 411  : }

	mov	rax, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	mov	DWORD PTR [rcx+8], edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 410  : {

	mov	QWORD PTR [rcx+16], rdx

; 411  : }

	ret	0
??0AABBQuantizedTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBQuantizedTree::AABBQuantizedTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 8
??0AABBNoLeafTree@Opcode@@QEAA@XZ PROC			; Opcode::AABBNoLeafTree::AABBNoLeafTree

; 260  : {

	lea	rax, OFFSET FLAT:??_7AABBNoLeafTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	xor	edx, edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 260  : {

	mov	QWORD PTR [rcx], rax

; 261  : }

	mov	rax, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	mov	DWORD PTR [rcx+8], edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 260  : {

	mov	QWORD PTR [rcx+16], rdx

; 261  : }

	ret	0
??0AABBNoLeafTree@Opcode@@QEAA@XZ ENDP			; Opcode::AABBNoLeafTree::AABBNoLeafTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 8
??0AABBQuantizedNoLeafTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBQuantizedNoLeafTree::AABBQuantizedNoLeafTree

; 487  : {

	lea	rax, OFFSET FLAT:??_7AABBQuantizedNoLeafTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	xor	edx, edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 487  : {

	mov	QWORD PTR [rcx], rax

; 488  : }

	mov	rax, rcx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	mov	DWORD PTR [rcx+8], edx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 487  : {

	mov	QWORD PTR [rcx+16], rdx

; 488  : }

	ret	0
??0AABBQuantizedNoLeafTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBQuantizedNoLeafTree::AABBQuantizedNoLeafTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
linear$ = 96
boxid$ = 104
curid$ = 112
curnode$ = 120
?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z PROC ; _BuildCollisionTree

; 96   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	movss	xmm6, DWORD PTR __real@3f000000
	mov	rbx, r9
	mov	rsi, r8
	mov	ebp, edx
	mov	rdi, rcx
	npad	4
$LL47@BuildColli:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	movss	xmm2, DWORD PTR [rbx+12]
	movss	xmm0, DWORD PTR [rbx+20]
	movss	xmm1, DWORD PTR [rbx+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 100  : 	curnode->GetAABB()->GetCenter(linear[boxid].mAABB.mCenter);

	mov	ecx, ebp
	shl	rcx, 5
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	addss	xmm0, DWORD PTR [rbx+8]
	addss	xmm2, DWORD PTR [rbx]
	addss	xmm1, DWORD PTR [rbx+4]

; 380  : 		inline_	Point			operator*(float s)					const		{ return Point(x * s,   y * s,   z * s );			}

	mulss	xmm0, xmm6
	mulss	xmm2, xmm6
	mulss	xmm1, xmm6

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 114  : 		inline_			void		GetCenter(Point& center)				const		{ center = (mMax + mMin)*0.5f;				}

	mov	eax, DWORD PTR $T1[rsp+8]
	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rcx+rdi], xmm0
	mov	DWORD PTR [rcx+rdi+8], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+16]

; 380  : 		inline_	Point			operator*(float s)					const		{ return Point(x * s,   y * s,   z * s );			}

	mulss	xmm0, xmm6

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm2, DWORD PTR [rbx]
	subss	xmm1, DWORD PTR [rbx+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T2[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 116  : 		inline_			void		GetExtents(Point& extents)				const		{ extents = (mMax - mMin)*0.5f;				}

	mov	eax, DWORD PTR $T2[rsp+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 380  : 		inline_	Point			operator*(float s)					const		{ return Point(x * s,   y * s,   z * s );			}

	mulss	xmm2, xmm6
	mulss	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 116  : 		inline_			void		GetExtents(Point& extents)				const		{ extents = (mMax - mMin)*0.5f;				}

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rcx+rdi+12], xmm0
	mov	DWORD PTR [rcx+rdi+20], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 50   : 									IMPLEMENT_TREE(AABBTreeNode, AABB)

	cmp	QWORD PTR [rbx+24], 0
	jne	SHORT $LN39@BuildColli
	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN54@BuildColli
$LN39@BuildColli:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 115  : 		udword PosID = curid++;	// Get a _new_ id for positive child

	mov	edx, DWORD PTR [rsi]

; 116  : 		udword NegID = curid++;	// Get a _new_ id for negative child
; 117  : 		// Setup box data as the forthcoming _new_ P pointer
; 118  : 		linear[boxid].mData = (uintptr_t)&linear[PosID];
; 119  : 		// Make sure it's not marked as leaf
; 120  : 		ASSERT(!(linear[boxid].mData&1));
; 121  : 		// Recurse with _new_ IDs
; 122  : 		_BuildCollisionTree(linear, PosID, curid, curnode->GetPos());

	mov	r8, rsi
	lea	ebp, DWORD PTR [rdx+1]
	lea	eax, DWORD PTR [rbp+1]
	mov	DWORD PTR [rsi], eax
	mov	eax, edx
	shl	rax, 5
	add	rax, rdi
	mov	QWORD PTR [rcx+rdi+24], rax
	mov	r9, QWORD PTR [rbx+24]
	mov	rcx, rdi
	call	?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildCollisionTree

; 123  : 		_BuildCollisionTree(linear, NegID, curid, curnode->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL47@BuildColli
$LN54@BuildColli:

; 101  : 	curnode->GetAABB()->GetExtents(linear[boxid].mAABB.mExtents);
; 102  : 	// Store remaining info
; 103  : 	if(curnode->IsLeaf())
; 104  : 	{
; 105  : 		// The input tree must be complete => i.e. one primitive/leaf
; 106  : 		ASSERT(curnode->GetNbPrimitives()==1);
; 107  : 		// Get the primitive index from the input tree
; 108  : 		udword PrimitiveIndex = curnode->GetPrimitives()[0];

	mov	rax, QWORD PTR [rbx+40]

; 124  : 	}
; 125  : }

	mov	rsi, QWORD PTR [rsp+112]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	mov	ecx, DWORD PTR [rax]
	mov	rbx, QWORD PTR [rsp+96]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+104]
	lea	edx, DWORD PTR [rcx+rcx]
	or	rdx, 1
	shl	rax, 5
	mov	QWORD PTR [rax+rdi+24], rdx
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ENDP ; _BuildCollisionTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
tv523 = 96
linear$ = 96
boxid$ = 104
curid$ = 112
curnode$ = 120
?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z PROC ; _BuildNoLeafTree

; 147  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	movss	xmm6, DWORD PTR __real@3f000000
	mov	r10, r9
	mov	rdi, r8
	mov	ebp, edx
	mov	rbx, rcx
	npad	4
$LL55@BuildNoLea:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	movss	xmm2, DWORD PTR [r10+12]
	movss	xmm0, DWORD PTR [r10+20]
	movss	xmm1, DWORD PTR [r10+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 50   : 									IMPLEMENT_TREE(AABBTreeNode, AABB)

	mov	r9, QWORD PTR [r10+24]
	mov	rsi, QWORD PTR [r10+32]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 154  : 	curnode->GetAABB()->GetCenter(linear[boxid].mAABB.mCenter);

	mov	eax, ebp
	lea	r8, QWORD PTR [rax+rax*4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	addss	xmm0, DWORD PTR [r10+8]
	addss	xmm2, DWORD PTR [r10]
	addss	xmm1, DWORD PTR [r10+4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 154  : 	curnode->GetAABB()->GetCenter(linear[boxid].mAABB.mCenter);

	mov	QWORD PTR tv523[rsp], r8
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 380  : 		inline_	Point			operator*(float s)					const		{ return Point(x * s,   y * s,   z * s );			}

	mulss	xmm0, xmm6
	mulss	xmm2, xmm6
	mulss	xmm1, xmm6

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 114  : 		inline_			void		GetCenter(Point& center)				const		{ center = (mMax + mMin)*0.5f;				}

	mov	eax, DWORD PTR $T1[rsp+8]
	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rbx+r8*8], xmm0
	mov	DWORD PTR [rbx+r8*8+8], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [r10+20]
	subss	xmm0, DWORD PTR [r10+8]
	movss	xmm2, DWORD PTR [r10+12]
	movss	xmm1, DWORD PTR [r10+16]

; 380  : 		inline_	Point			operator*(float s)					const		{ return Point(x * s,   y * s,   z * s );			}

	mulss	xmm0, xmm6

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm2, DWORD PTR [r10]
	subss	xmm1, DWORD PTR [r10+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T2[rsp+8], xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 116  : 		inline_			void		GetExtents(Point& extents)				const		{ extents = (mMax - mMin)*0.5f;				}

	mov	eax, DWORD PTR $T2[rsp+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 380  : 		inline_	Point			operator*(float s)					const		{ return Point(x * s,   y * s,   z * s );			}

	mulss	xmm2, xmm6
	mulss	xmm1, xmm6
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabb.h

; 116  : 		inline_			void		GetExtents(Point& extents)				const		{ extents = (mMax - mMin)*0.5f;				}

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movsdx	QWORD PTR [rbx+r8*8+12], xmm0
	mov	DWORD PTR [rbx+r8*8+20], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 50   : 									IMPLEMENT_TREE(AABBTreeNode, AABB)

	cmp	QWORD PTR [r9+24], 0
	jne	SHORT $LN4@BuildNoLea
	cmp	QWORD PTR [r9+32], 0
	jne	SHORT $LN4@BuildNoLea
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 164  : 		linear[boxid].mData = (PrimitiveIndex<<1)|1;

	mov	rax, QWORD PTR [r9+40]
	mov	ecx, DWORD PTR [rax]
	lea	eax, DWORD PTR [rcx+rcx]
	or	rax, 1
	mov	QWORD PTR [rbx+r8*8+24], rax

; 165  : 	}
; 166  : 	else

	jmp	SHORT $LN3@BuildNoLea
$LN4@BuildNoLea:

; 167  : 	{
; 168  : 		// Get a _new_ id for positive child
; 169  : 		udword PosID = curid++;

	mov	edx, DWORD PTR [rdi]
	lea	eax, DWORD PTR [rdx+1]

; 170  : 		// Setup box data
; 171  : 		linear[boxid].mData = (uintptr_t)&linear[PosID];

	lea	rcx, QWORD PTR [rdx+rdx*4]
	mov	DWORD PTR [rdi], eax
	lea	rax, QWORD PTR [rbx+rcx*8]

; 172  : 		// Make sure it's not marked as leaf
; 173  : 		ASSERT(!(linear[boxid].mData&1));
; 174  : 		// Recurse
; 175  : 		_BuildNoLeafTree(linear, PosID, curid, P);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+r8*8+24], rax
	mov	r8, rdi
	call	?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildNoLeafTree
	mov	r8, QWORD PTR tv523[rsp]
$LN3@BuildNoLea:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 50   : 									IMPLEMENT_TREE(AABBTreeNode, AABB)

	cmp	QWORD PTR [rsi+24], 0
	jne	SHORT $LN51@BuildNoLea
	cmp	QWORD PTR [rsi+32], 0
	je	SHORT $LN63@BuildNoLea
$LN51@BuildNoLea:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 190  : 		udword NegID = curid++;

	mov	ebp, DWORD PTR [rdi]

; 191  : 		// Setup box data
; 192  : 		linear[boxid].mData2 = (uintptr_t)&linear[NegID];
; 193  : 		// Make sure it's not marked as leaf
; 194  : 		ASSERT(!(linear[boxid].mData2&1));
; 195  : 		// Recurse
; 196  : 		_BuildNoLeafTree(linear, NegID, curid, N);

	mov	r10, rsi
	lea	eax, DWORD PTR [rbp+1]
	lea	rcx, QWORD PTR [rbp*4]
	add	rcx, rbp
	mov	DWORD PTR [rdi], eax
	lea	rax, QWORD PTR [rbx+rcx*8]
	mov	QWORD PTR [rbx+r8*8+32], rax
	jmp	$LL55@BuildNoLea
$LN63@BuildNoLea:

; 176  : 	}
; 177  : 
; 178  : 	if(N->IsLeaf())
; 179  : 	{
; 180  : 		// The input tree must be complete => i.e. one primitive/leaf
; 181  : 		ASSERT(N->GetNbPrimitives()==1);
; 182  : 		// Get the primitive index from the input tree
; 183  : 		udword PrimitiveIndex = N->GetPrimitives()[0];

	mov	rax, QWORD PTR [rsi+40]

; 197  : 	}
; 198  : }

	movaps	xmm6, XMMWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+120]
	mov	ecx, DWORD PTR [rax]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+112]
	lea	edx, DWORD PTR [rcx+rcx]
	lea	rcx, QWORD PTR [rax+rax*4]
	or	rdx, 1
	mov	QWORD PTR [rbx+rcx*8+32], rdx
	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ENDP ; _BuildNoLeafTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBCollisionTree::`scalar deleting destructor', COMDAT
$LN18:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 215  : {

	lea	rax, OFFSET FLAT:??_7AABBCollisionTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN16@scalar
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN16@scalar:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBCollisionTree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 48
??1AABBCollisionTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBCollisionTree::~AABBCollisionTree

; 215  : {

$LN10:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBCollisionTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN8@AABBCollis
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	QWORD PTR [rbx+16], 0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	mov	QWORD PTR [rbx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 217  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@AABBCollis:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 217  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBCollisionTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBCollisionTree::~AABBCollisionTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 48
CurID$ = 56
tree$ = 56
?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBCollisionTree::Build

; 227  : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 228  : 	// Checkings
; 229  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN3@Build
$LN12@Build:
	xor	al, al

; 244  : 	ASSERT(CurID==mNbNodes);
; 245  : 
; 246  : #ifdef __ICECORE_H__
; 247  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 248  : 	Log("AABB Collision tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 249  : #endif
; 250  : 
; 251  : 	return true;
; 252  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@Build:

; 233  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	mov	eax, DWORD PTR [rdx+48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 77   : 		inline_	udword				GetNbNodes()		const	{ return mTotalNbNodes;	}	//!< Catch the number of nodes

	mov	ecx, DWORD PTR [rdx+64]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 233  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	lea	eax, DWORD PTR [rax*2-1]
	cmp	ecx, eax
	jne	SHORT $LN12@Build
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 236  : 	mNbNodes	= NbNodes;

	mov	DWORD PTR [rdi+8], ecx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 237  : 	mNodes		= xr_alloc<AABBCollisionNode>(mNbNodes);

	mov	QWORD PTR [rdi+16], rax

; 238  : 	CHECKALLOC	(mNodes);

	test	rax, rax
	je	SHORT $LN12@Build

; 239  : 	ZeroMemory	(mNodes,mNbNodes*sizeof(AABBCollisionNode));

	mov	r8d, DWORD PTR [rdi+8]
	mov	rcx, rax
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 5
	xor	edx, edx
	call	QWORD PTR [rax+16]

; 240  : 
; 241  : 	// Build the tree
; 242  : 	udword CurID = 1;
; 243  : 	_BuildCollisionTree(mNodes, 0, CurID, tree);

	mov	rcx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rbx
	xor	edx, edx
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildCollisionTree

; 244  : 	ASSERT(CurID==mNbNodes);
; 245  : 
; 246  : #ifdef __ICECORE_H__
; 247  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 248  : 	Log("AABB Collision tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 249  : #endif
; 250  : 
; 251  : 	return true;
; 252  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	al, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBCollisionTree::Build
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBNoLeafTree::`scalar deleting destructor', COMDAT
$LN18:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 269  : {

	lea	rax, OFFSET FLAT:??_7AABBNoLeafTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN16@scalar
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN16@scalar:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBNoLeafTree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 48
??1AABBNoLeafTree@Opcode@@UEAA@XZ PROC			; Opcode::AABBNoLeafTree::~AABBNoLeafTree

; 269  : {

$LN10:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBNoLeafTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN8@AABBNoLeaf
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	QWORD PTR [rbx+16], 0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	mov	QWORD PTR [rbx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 271  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@AABBNoLeaf:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 271  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBNoLeafTree@Opcode@@UEAA@XZ ENDP			; Opcode::AABBNoLeafTree::~AABBNoLeafTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 48
CurID$ = 56
tree$ = 56
?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBNoLeafTree::Build

; 281  : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 282  : 	// Checkings
; 283  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN3@Build
$LN12@Build:
	xor	al, al

; 298  : 	ASSERT(CurID==mNbNodes);
; 299  : 
; 300  : #ifdef __ICECORE_H__
; 301  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 302  : 	Log("AABB quantized tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 303  : #endif
; 304  : 
; 305  : 	return true;
; 306  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@Build:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 54   : 		inline_	udword				GetNbPrimitives()	const	{ return mNbPrimitives;		}

	mov	ecx, DWORD PTR [rdx+48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 287  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	lea	eax, DWORD PTR [rcx*2-1]
	cmp	DWORD PTR [rdx+64], eax
	jne	SHORT $LN12@Build

; 288  : 
; 289  : 	// Get nodes
; 290  : 	mNbNodes	= NbTriangles-1;

	lea	eax, DWORD PTR [rcx-1]
	mov	DWORD PTR [rdi+8], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*4]
	shl	rdx, 3
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rcx, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 291  : 	mNodes		= xr_alloc<AABBNoLeafNode>(mNbNodes);

	mov	QWORD PTR [rdi+16], rax

; 292  : 	CHECKALLOC	(mNodes);

	test	rax, rax
	je	SHORT $LN12@Build

; 293  : 	ZeroMemory	(mNodes,mNbNodes*sizeof(AABBNoLeafNode));

	mov	eax, DWORD PTR [rdi+8]
	xor	edx, edx
	lea	r8d, DWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 3
	call	QWORD PTR [rax+16]

; 294  : 
; 295  : 	// Build the tree
; 296  : 	udword CurID = 1;
; 297  : 	_BuildNoLeafTree(mNodes, 0, CurID, tree);

	mov	rcx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rbx
	xor	edx, edx
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildNoLeafTree

; 298  : 	ASSERT(CurID==mNbNodes);
; 299  : 
; 300  : #ifdef __ICECORE_H__
; 301  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 302  : 	Log("AABB quantized tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 303  : #endif
; 304  : 
; 305  : 	return true;
; 306  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	al, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBNoLeafTree::Build
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBQuantizedTree::`scalar deleting destructor', COMDAT
$LN22:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 419  : {

	lea	rax, OFFSET FLAT:??_7AABBQuantizedTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN20@scalar
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN20@scalar:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBQuantizedTree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 48
??1AABBQuantizedTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBQuantizedTree::~AABBQuantizedTree

; 419  : {

$LN14:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBQuantizedTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN12@AABBQuanti
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	QWORD PTR [rbx+16], 0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	mov	QWORD PTR [rbx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 421  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@AABBQuanti:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 421  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBQuantizedTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBQuantizedTree::~AABBQuantizedTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
Max$1 = 32
Min$2 = 48
this$ = 240
CurID$ = 248
tree$ = 248
?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBQuantizedTree::Build

; 431  : {

$LN158:
	push	rbx
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	rdi, rdx
	mov	rbx, rcx

; 432  : 	// Checkings
; 433  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN29@Build
$LN156@Build:
	xor	al, al

; 477  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rbx
	ret	0
$LN29@Build:

; 437  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	mov	eax, DWORD PTR [rdx+48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 77   : 		inline_	udword				GetNbNodes()		const	{ return mTotalNbNodes;	}	//!< Catch the number of nodes

	mov	ecx, DWORD PTR [rdx+64]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 437  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	lea	eax, DWORD PTR [rax*2-1]
	cmp	ecx, eax
	jne	SHORT $LN156@Build
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 440  : 	mNbNodes					= NbNodes;

	mov	DWORD PTR [rbx+8], ecx
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	mov	QWORD PTR [rsp+256], rsi
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rsi, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 442  : 	CHECKALLOC			(Nodes);

	test	rax, rax
	je	SHORT $LN155@Build

; 443  : 	ZeroMemory			(Nodes,mNbNodes*sizeof(AABBCollisionNode));

	mov	r8d, DWORD PTR [rbx+8]
	mov	rcx, rax
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 5
	xor	edx, edx
	call	QWORD PTR [rax+16]

; 444  : 
; 445  : 	// Build the tree
; 446  : 	udword CurID = 1;
; 447  : 	_BuildCollisionTree(Nodes, 0, CurID, tree);

	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rdi
	xor	edx, edx
	mov	rcx, rsi
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildCollisionTree
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, DWORD PTR [rbx+8]
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 3
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rcx, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 451  : 		mNodes		= xr_alloc<AABBQuantizedNode>(mNbNodes);

	mov	QWORD PTR [rbx+16], rax

; 452  : 		CHECKALLOC	(mNodes);

	test	rax, rax
	jne	SHORT $LN26@Build
$LN155@Build:
	xor	al, al
	mov	rsi, QWORD PTR [rsp+256]

; 477  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rbx
	ret	0
$LN26@Build:

; 453  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNode));

	mov	eax, DWORD PTR [rbx+8]
	mov	QWORD PTR [rsp+200], r14
	movaps	XMMWORD PTR [rsp+176], xmm6
	movaps	XMMWORD PTR [rsp+160], xmm7
	movaps	XMMWORD PTR [rsp+144], xmm8
	movaps	XMMWORD PTR [rsp+128], xmm9
	lea	r8d, DWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	xor	edx, edx
	shl	r8d, 3
	movaps	XMMWORD PTR [rsp+112], xmm10
	movaps	XMMWORD PTR [rsp+96], xmm11
	movaps	XMMWORD PTR [rsp+80], xmm12
	movaps	XMMWORD PTR [rsp+64], xmm13
	call	QWORD PTR [rax+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm2, DWORD PTR __real@ff7fffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	mov	edx, DWORD PTR [rbx+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm3, xmm2
	movaps	xmm4, xmm2
	movaps	xmm5, xmm2
	movaps	xmm6, xmm2
	movaps	xmm7, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	test	edx, edx
	je	SHORT $LN23@Build

; 453  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNode));

	movss	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	lea	rax, QWORD PTR [rsi+8]
	mov	ecx, edx
	npad	4
$LL25@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax-8]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm2
	jbe	SHORT $LN22@Build
	movaps	xmm2, xmm1
$LN22@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax-4]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm3
	jbe	SHORT $LN21@Build
	movaps	xmm3, xmm1
$LN21@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm4
	jbe	SHORT $LN20@Build
	movaps	xmm4, xmm1
$LN20@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax+4]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm5
	jbe	SHORT $LN19@Build
	movaps	xmm5, xmm1
$LN19@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax+8]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm6
	jbe	SHORT $LN18@Build
	movaps	xmm6, xmm1
$LN18@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax+12]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 456  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm7
	jbe	SHORT $LN24@Build
	movaps	xmm7, xmm1
$LN24@Build:
	add	rax, 32					; 00000020H
	dec	rcx
	jne	SHORT $LL25@Build
$LN23@Build:

; 457  : 
; 458  : 		// Quantization
; 459  : 		INIT_QUANTIZATION

	movss	xmm8, DWORD PTR __real@46fffe00

; 460  : 
; 461  : 		// Quantize
; 462  : 		uintptr_t Data;
; 463  : 		for(i=0;i<mNbNodes;i++)

	xor	r14d, r14d
	movaps	xmm9, xmm8
	movaps	xmm10, xmm8
	movaps	xmm12, xmm8
	divss	xmm12, xmm5
	movss	xmm5, DWORD PTR __real@3f800000
	divss	xmm9, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm5
	movaps	xmm11, xmm8
	movaps	xmm13, xmm8
	divss	xmm0, xmm9
	divss	xmm10, xmm3
	divss	xmm8, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+160]
	movss	DWORD PTR [rbx+24], xmm0
	movaps	xmm0, xmm5
	divss	xmm1, xmm10
	divss	xmm11, xmm4
	divss	xmm13, xmm6
	movss	DWORD PTR [rbx+28], xmm1
	movaps	xmm1, xmm5
	divss	xmm0, xmm11
	divss	xmm1, xmm12
	movss	DWORD PTR [rbx+32], xmm0
	movss	DWORD PTR [rbx+36], xmm1
	movaps	xmm0, xmm5
	movaps	xmm1, xmm5
	divss	xmm0, xmm13
	divss	xmm1, xmm8
	movss	DWORD PTR [rbx+40], xmm0
	movss	DWORD PTR [rbx+44], xmm1
	test	edx, edx
	je	$LN13@Build
	mov	QWORD PTR [rsp+240], rbp
	lea	rdi, QWORD PTR Max$1[rsp]
	lea	r10, QWORD PTR Min$2[rsp]
	xorps	xmm6, xmm6
	mov	QWORD PTR [rsp+208], r12
	sub	rdi, rbx
	mov	QWORD PTR [rsp+192], r15
	sub	r10, rbx
	npad	9
$LL15@Build:

; 465  : 			PERFORM_QUANTIZATION

	lea	rax, QWORD PTR [r14+r14*2]
	movaps	xmm0, xmm9
	mov	r15d, r14d
	lea	r12, QWORD PTR [rax*8]
	shl	r15, 5
	mov	rbp, rbx
	mov	r9, r12
	sub	rbp, r12
	mov	r11d, 3
	mulss	xmm0, DWORD PTR [r15+rsi]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm10
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax], xmm1
	mulss	xmm0, DWORD PTR [r15+rsi+4]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm11
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+4], xmm1
	mulss	xmm0, DWORD PTR [r15+rsi+8]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm12
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+8], xmm1
	mulss	xmm0, DWORD PTR [r15+rsi+12]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm13
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+6], xmm1
	mulss	xmm0, DWORD PTR [r15+rsi+16]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm8
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+10], xmm1
	mulss	xmm0, DWORD PTR [r15+rsi+20]
	cvttss2si rax, xmm0
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+14], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	movss	xmm0, DWORD PTR [r15+rsi+12]
	movss	xmm1, DWORD PTR [r15+rsi+16]
	addss	xmm0, DWORD PTR [r15+rsi]
	addss	xmm1, DWORD PTR [r15+rsi+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$1[rsp], xmm0

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	movss	xmm0, DWORD PTR [r15+rsi+20]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$1[rsp+4], xmm1

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	addss	xmm0, DWORD PTR [r15+rsi+8]

; 374  : 		//! Operator for Point Minus = Point - Point.
; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm1, DWORD PTR [r15+rsi+4]
	subss	xmm1, DWORD PTR [r15+rsi+16]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$1[rsp+8], xmm0

; 374  : 		//! Operator for Point Minus = Point - Point.
; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [r15+rsi]
	subss	xmm0, DWORD PTR [r15+rsi+12]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Min$2[rsp+4], xmm1
	movss	DWORD PTR Min$2[rsp], xmm0

; 374  : 		//! Operator for Point Minus = Point - Point.
; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [r15+rsi+8]
	subss	xmm0, DWORD PTR [r15+rsi+20]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Min$2[rsp+8], xmm0
$LL11@Build:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 465  : 			PERFORM_QUANTIZATION

	mov	rcx, QWORD PTR [rbx+16]
	movss	xmm3, DWORD PTR [r9+rbp+24]
	lea	rdx, QWORD PTR [r9+rbp]
	add	rcx, r9
	mov	r8b, 1
	movss	xmm4, DWORD PTR [rdx+rdi]
	mulss	xmm3, DWORD PTR [rcx]
	npad	1
$LL8@Build:
	movss	xmm1, DWORD PTR [rcx+6]
	movaps	xmm2, xmm1
	mulss	xmm2, DWORD PTR [rdx+36]
	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	comiss	xmm0, xmm4
	jb	SHORT $LN4@Build
	movaps	xmm0, xmm3
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdx+r10]
	ja	SHORT $LN4@Build
	xor	r8b, r8b
	jmp	SHORT $LN3@Build
$LN4@Build:
	addss	xmm1, xmm5
	movss	DWORD PTR [rcx+6], xmm1
$LN3@Build:
	mov	rax, QWORD PTR [rbx+16]
	ucomiss	xmm6, DWORD PTR [r9+rax+6]
	lea	rcx, QWORD PTR [r9+rax]
	je	SHORT $LN153@Build
	test	r8b, r8b
	jne	SHORT $LL8@Build
	jmp	SHORT $LN152@Build
$LN153@Build:
	mov	DWORD PTR [r9+rax+6], 1199570688	; 477fff00H
$LN152@Build:
	add	r9, 4
	dec	r11
	jne	SHORT $LL11@Build

; 466  : 			REMAP_DATA(mData)

	mov	rcx, QWORD PTR [r15+rsi+24]
	test	cl, 1
	jne	SHORT $LN1@Build
	mov	rax, QWORD PTR [rbx+16]
	sub	rcx, rsi
	shr	rcx, 5
	lea	rcx, QWORD PTR [rcx+rcx*2]
	lea	rcx, QWORD PTR [rax+rcx*8]
$LN1@Build:
	mov	rax, QWORD PTR [rbx+16]
	inc	r14d
	mov	QWORD PTR [rax+r12+16], rcx
	cmp	r14d, DWORD PTR [rbx+8]
	jb	$LL15@Build
	mov	r15, QWORD PTR [rsp+192]
	mov	r12, QWORD PTR [rsp+208]
	mov	rbp, QWORD PTR [rsp+240]
$LN13@Build:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rsi
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	r14, QWORD PTR [rsp+200]
	mov	rsi, QWORD PTR [rsp+256]
	movaps	xmm13, XMMWORD PTR [rsp+64]
	movaps	xmm12, XMMWORD PTR [rsp+80]
	movaps	xmm11, XMMWORD PTR [rsp+96]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 476  : 	return true;

	mov	al, 1
	movaps	xmm10, XMMWORD PTR [rsp+112]
	movaps	xmm9, XMMWORD PTR [rsp+128]
	movaps	xmm8, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+176]

; 477  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rbx
	ret	0
?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBQuantizedTree::Build
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z PROC	; Opcode::AABBQuantizedNoLeafTree::`scalar deleting destructor', COMDAT
$LN22:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 496  : {

	lea	rax, OFFSET FLAT:??_7AABBQuantizedNoLeafTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN20@scalar
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN20@scalar:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z ENDP	; Opcode::AABBQuantizedNoLeafTree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
this$ = 48
??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBQuantizedNoLeafTree::~AABBQuantizedNoLeafTree

; 496  : {

$LN14:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBQuantizedNoLeafTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN12@AABBQuanti
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	QWORD PTR [rbx+16], 0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	mov	QWORD PTR [rbx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 498  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@AABBQuanti:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 498  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBQuantizedNoLeafTree::~AABBQuantizedNoLeafTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
_TEXT	SEGMENT
Max$1 = 32
Min$2 = 48
this$ = 240
CurID$ = 248
tree$ = 248
?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBQuantizedNoLeafTree::Build

; 508  : {

$LN161:
	push	rbx
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	rdi, rdx
	mov	rbx, rcx

; 509  : 	// Checkings
; 510  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN30@Build
$LN159@Build:
	xor	al, al

; 557  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rbx
	ret	0
$LN30@Build:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_aabbtree.h

; 54   : 		inline_	udword				GetNbPrimitives()	const	{ return mNbPrimitives;		}

	mov	ecx, DWORD PTR [rdx+48]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 514  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	lea	eax, DWORD PTR [rcx*2-1]
	cmp	DWORD PTR [rdx+64], eax
	jne	SHORT $LN159@Build

; 517  : 	mNbNodes				= NbTriangles-1;

	lea	eax, DWORD PTR [rcx-1]
	mov	QWORD PTR [rsp+256], rsi
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	rdx, QWORD PTR [rax+rax*4]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 517  : 	mNbNodes				= NbTriangles-1;

	mov	DWORD PTR [rbx+8], eax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 3
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rsi, rax
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 519  : 	CHECKALLOC		(Nodes);

	test	rax, rax
	je	SHORT $LN158@Build

; 520  : 	ZeroMemory		(Nodes,	mNbNodes*sizeof(AABBNoLeafNode));

	mov	eax, DWORD PTR [rbx+8]
	xor	edx, edx
	mov	rcx, rsi
	lea	r8d, DWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 3
	call	QWORD PTR [rax+16]

; 521  : 
; 522  : 	// Build the tree
; 523  : 	udword CurID = 1;
; 524  : 	_BuildNoLeafTree(Nodes, 0, CurID, tree);

	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rdi
	xor	edx, edx
	mov	rcx, rsi
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildNoLeafTree
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, DWORD PTR [rbx+8]
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 529  : 		mNodes		= xr_alloc<AABBQuantizedNoLeafNode>(mNbNodes);

	mov	QWORD PTR [rbx+16], rax

; 530  : 		CHECKALLOC	(mNodes);

	test	rax, rax
	jne	SHORT $LN27@Build
$LN158@Build:
	xor	al, al
	mov	rsi, QWORD PTR [rsp+256]

; 557  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rbx
	ret	0
$LN27@Build:

; 531  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNoLeafNode));

	mov	r8d, DWORD PTR [rbx+8]
	mov	QWORD PTR [rsp+192], r15
	movaps	XMMWORD PTR [rsp+176], xmm6
	movaps	XMMWORD PTR [rsp+160], xmm7
	movaps	XMMWORD PTR [rsp+144], xmm8
	movaps	XMMWORD PTR [rsp+128], xmm9
	mov	rcx, rax
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	xor	edx, edx
	shl	r8d, 5
	movaps	XMMWORD PTR [rsp+112], xmm10
	movaps	XMMWORD PTR [rsp+96], xmm11
	movaps	XMMWORD PTR [rsp+80], xmm12
	movaps	XMMWORD PTR [rsp+64], xmm13
	call	QWORD PTR [rax+16]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm2, DWORD PTR __real@ff7fffff
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	mov	edx, DWORD PTR [rbx+8]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm3, xmm2
	movaps	xmm4, xmm2
	movaps	xmm5, xmm2
	movaps	xmm6, xmm2
	movaps	xmm7, xmm2
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	test	edx, edx
	je	SHORT $LN24@Build

; 531  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNoLeafNode));

	movss	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	lea	rax, QWORD PTR [rsi+8]
	mov	ecx, edx
	npad	5
$LL26@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax-8]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm2
	jbe	SHORT $LN23@Build
	movaps	xmm2, xmm1
$LN23@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax-4]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm3
	jbe	SHORT $LN22@Build
	movaps	xmm3, xmm1
$LN22@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm4
	jbe	SHORT $LN21@Build
	movaps	xmm4, xmm1
$LN21@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax+4]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm5
	jbe	SHORT $LN20@Build
	movaps	xmm5, xmm1
$LN20@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax+8]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm6
	jbe	SHORT $LN19@Build
	movaps	xmm6, xmm1
$LN19@Build:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm1, DWORD PTR [rax+12]
	andps	xmm1, xmm0
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 534  : 		FIND_MAX_VALUES

	comiss	xmm1, xmm7
	jbe	SHORT $LN25@Build
	movaps	xmm7, xmm1
$LN25@Build:
	add	rax, 40					; 00000028H
	dec	rcx
	jne	SHORT $LL26@Build
$LN24@Build:

; 535  : 
; 536  : 		// Quantization
; 537  : 		INIT_QUANTIZATION

	movss	xmm8, DWORD PTR __real@46fffe00

; 538  : 
; 539  : 		// Quantize
; 540  : 		uintptr_t Data;
; 541  : 		for(i=0;i<mNbNodes;i++)

	xor	r15d, r15d
	movaps	xmm9, xmm8
	movaps	xmm10, xmm8
	movaps	xmm12, xmm8
	divss	xmm12, xmm5
	movss	xmm5, DWORD PTR __real@3f800000
	divss	xmm9, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm5
	movaps	xmm11, xmm8
	movaps	xmm13, xmm8
	divss	xmm0, xmm9
	divss	xmm10, xmm3
	divss	xmm8, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+160]
	movss	DWORD PTR [rbx+24], xmm0
	movaps	xmm0, xmm5
	divss	xmm1, xmm10
	divss	xmm11, xmm4
	divss	xmm13, xmm6
	movss	DWORD PTR [rbx+28], xmm1
	movaps	xmm1, xmm5
	divss	xmm0, xmm11
	divss	xmm1, xmm12
	movss	DWORD PTR [rbx+32], xmm0
	movss	DWORD PTR [rbx+36], xmm1
	movaps	xmm0, xmm5
	movaps	xmm1, xmm5
	divss	xmm0, xmm13
	divss	xmm1, xmm8
	movss	DWORD PTR [rbx+40], xmm0
	movss	DWORD PTR [rbx+44], xmm1
	test	edx, edx
	je	$LN14@Build
	mov	QWORD PTR [rsp+240], rbp
	mov	QWORD PTR [rsp+264], r12
	mov	QWORD PTR [rsp+208], r13
	xorps	xmm6, xmm6
	lea	rdi, QWORD PTR Max$1[rsp]
	lea	r10, QWORD PTR Min$2[rsp]
	mov	QWORD PTR [rsp+200], r14
	sub	rdi, rbx
	sub	r10, rbx
	mov	r13, -3689348814741910323		; cccccccccccccccdH
	npad	7
$LL16@Build:

; 543  : 			PERFORM_QUANTIZATION

	lea	r14, QWORD PTR [r15+r15*4]
	movaps	xmm0, xmm9
	mov	r12d, r15d
	shl	r12, 5
	mov	rbp, rbx
	mov	r11d, 3
	mov	r9, r12
	sub	rbp, r12
	mulss	xmm0, DWORD PTR [rsi+r14*8]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm10
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax], xmm1
	mulss	xmm0, DWORD PTR [rsi+r14*8+4]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm11
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+4], xmm1
	mulss	xmm0, DWORD PTR [rsi+r14*8+8]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm12
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+8], xmm1
	mulss	xmm0, DWORD PTR [rsi+r14*8+12]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm13
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+6], xmm1
	mulss	xmm0, DWORD PTR [rsi+r14*8+16]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm8
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+10], xmm1
	mulss	xmm0, DWORD PTR [rsi+r14*8+20]
	cvttss2si rax, xmm0
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+r12+14], xmm1
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	movss	xmm0, DWORD PTR [rsi+r14*8]
	movss	xmm1, DWORD PTR [rsi+r14*8+16]
	addss	xmm0, DWORD PTR [rsi+r14*8+12]
	addss	xmm1, DWORD PTR [rsi+r14*8+4]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$1[rsp], xmm0

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	movss	xmm0, DWORD PTR [rsi+r14*8+20]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$1[rsp+4], xmm1

; 373  : 		inline_	Point			operator+(const Point& p)			const		{ return Point(x + p.x, y + p.y, z + p.z);			}

	addss	xmm0, DWORD PTR [rsi+r14*8+8]

; 374  : 		//! Operator for Point Minus = Point - Point.
; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm1, DWORD PTR [rsi+r14*8+4]
	subss	xmm1, DWORD PTR [rsi+r14*8+16]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Max$1[rsp+8], xmm0

; 374  : 		//! Operator for Point Minus = Point - Point.
; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rsi+r14*8]
	subss	xmm0, DWORD PTR [rsi+r14*8+12]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Min$2[rsp+4], xmm1
	movss	DWORD PTR Min$2[rsp], xmm0

; 374  : 		//! Operator for Point Minus = Point - Point.
; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rsi+r14*8+8]
	subss	xmm0, DWORD PTR [rsi+r14*8+20]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR Min$2[rsp+8], xmm0
	npad	7
$LL12@Build:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 543  : 			PERFORM_QUANTIZATION

	mov	rcx, QWORD PTR [rbx+16]
	movss	xmm3, DWORD PTR [r9+rbp+24]
	lea	rdx, QWORD PTR [r9+rbp]
	add	rcx, r9
	mov	r8b, 1
	movss	xmm4, DWORD PTR [rdx+rdi]
	mulss	xmm3, DWORD PTR [rcx]
	npad	2
$LL9@Build:
	movss	xmm1, DWORD PTR [rcx+6]
	movaps	xmm2, xmm1
	mulss	xmm2, DWORD PTR [rdx+36]
	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	comiss	xmm0, xmm4
	jb	SHORT $LN5@Build
	movaps	xmm0, xmm3
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdx+r10]
	ja	SHORT $LN5@Build
	xor	r8b, r8b
	jmp	SHORT $LN4@Build
$LN5@Build:
	addss	xmm1, xmm5
	movss	DWORD PTR [rcx+6], xmm1
$LN4@Build:
	mov	rax, QWORD PTR [rbx+16]
	ucomiss	xmm6, DWORD PTR [rax+r9+6]
	lea	rcx, QWORD PTR [rax+r9]
	je	SHORT $LN156@Build
	test	r8b, r8b
	jne	SHORT $LL9@Build
	jmp	SHORT $LN155@Build
$LN156@Build:
	mov	DWORD PTR [rax+r9+6], 1199570688	; 477fff00H
$LN155@Build:
	add	r9, 4
	dec	r11
	jne	SHORT $LL12@Build

; 544  : 			REMAP_DATA(mData)

	mov	rcx, QWORD PTR [rsi+r14*8+24]
	test	cl, 1
	jne	SHORT $LN2@Build
	sub	rcx, rsi
	mov	rax, r13
	mul	rcx
	mov	rcx, rdx
	and	rcx, -32				; ffffffffffffffe0H
	add	rcx, QWORD PTR [rbx+16]
$LN2@Build:
	mov	rax, QWORD PTR [rbx+16]
	mov	QWORD PTR [rax+r12+16], rcx

; 545  : 			REMAP_DATA(mData2)

	mov	rcx, QWORD PTR [rsi+r14*8+32]
	test	cl, 1
	jne	SHORT $LN1@Build
	sub	rcx, rsi
	mov	rax, r13
	mul	rcx
	mov	rcx, rdx
	and	rcx, -32				; ffffffffffffffe0H
	add	rcx, QWORD PTR [rbx+16]
$LN1@Build:
	mov	rax, QWORD PTR [rbx+16]
	inc	r15d
	mov	QWORD PTR [rax+r12+24], rcx
	cmp	r15d, DWORD PTR [rbx+8]
	jb	$LL16@Build
	mov	r14, QWORD PTR [rsp+200]
	mov	r13, QWORD PTR [rsp+208]
	mov	r12, QWORD PTR [rsp+264]
	mov	rbp, QWORD PTR [rsp+240]
$LN14@Build:
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rsi
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	r15, QWORD PTR [rsp+192]
	mov	rsi, QWORD PTR [rsp+256]
	movaps	xmm13, XMMWORD PTR [rsp+64]
	movaps	xmm12, XMMWORD PTR [rsp+80]
	movaps	xmm11, XMMWORD PTR [rsp+96]
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp

; 556  : 	return true;

	mov	al, 1
	movaps	xmm10, XMMWORD PTR [rsp+112]
	movaps	xmm9, XMMWORD PTR [rsp+128]
	movaps	xmm8, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+176]

; 557  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rbx
	ret	0
?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBQuantizedNoLeafTree::Build
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBCollisionNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBCollisionNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBCollisionNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBCollisionNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBNoLeafNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBNoLeafNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBNoLeafNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*4]
	shl	rdx, 3
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBNoLeafNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBQuantizedNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBQuantizedNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBQuantizedNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 3
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBQuantizedNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBQuantizedNoLeafNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBQuantizedNoLeafNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBQuantizedNoLeafNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBQuantizedNoLeafNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ PROC ; Opcode::AABBQuantizedNoLeafTree::GetUsedBytes, COMDAT

; 164  : 		IMPLEMENT_COLLISION_TREE(AABBQuantizedNoLeafTree, AABBQuantizedNoLeafNode)

	mov	eax, DWORD PTR [rcx+8]
	shl	rax, 5
	ret	0
?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ ENDP ; Opcode::AABBQuantizedNoLeafTree::GetUsedBytes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ PROC	; Opcode::AABBQuantizedTree::GetUsedBytes, COMDAT

; 155  : 		IMPLEMENT_COLLISION_TREE(AABBQuantizedTree, AABBQuantizedNode)

	mov	eax, DWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rax+rax*2]
	shl	rax, 3
	ret	0
?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ ENDP	; Opcode::AABBQuantizedTree::GetUsedBytes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ PROC	; Opcode::AABBNoLeafTree::GetUsedBytes, COMDAT

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	eax, DWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rax+rax*4]
	shl	rax, 3
	ret	0
?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ ENDP	; Opcode::AABBNoLeafTree::GetUsedBytes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ PROC	; Opcode::AABBCollisionTree::GetUsedBytes, COMDAT

; 145  : 		IMPLEMENT_COLLISION_TREE(AABBCollisionTree, AABBCollisionNode)

	mov	eax, DWORD PTR [rcx+8]
	shl	rax, 5
	ret	0
?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ ENDP	; Opcode::AABBCollisionTree::GetUsedBytes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ PROC	; Opcode::AABBNoLeafNode::GetNodeSize, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	eax, 40					; 00000028H
	ret	0
?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ ENDP	; Opcode::AABBNoLeafNode::GetNodeSize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ PROC	; Opcode::AABBCollisionNode::GetNodeSize, COMDAT

; 64   : 		IMPLEMENT_IMPLICIT_NODE(AABBCollisionNode, CollisionAABB)

	mov	eax, 32					; 00000020H
	ret	0
?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ ENDP	; Opcode::AABBCollisionNode::GetNodeSize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ??1AABBOptimizedTree@Opcode@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1AABBOptimizedTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBOptimizedTree::~AABBOptimizedTree, COMDAT

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
	ret	0
??1AABBOptimizedTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBOptimizedTree::~AABBOptimizedTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
;	COMDAT ??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBOptimizedTree::`scalar deleting destructor', COMDAT
$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	test	dl, 1
	je	SHORT $LN11@scalar
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	rdx, rcx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN11@scalar:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBOptimizedTree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ??0AABBOptimizedTree@Opcode@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0AABBOptimizedTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBOptimizedTree::AABBOptimizedTree, COMDAT

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	DWORD PTR [rcx+8], 0
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0AABBOptimizedTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBOptimizedTree::AABBOptimizedTree
_TEXT	ENDS
END
