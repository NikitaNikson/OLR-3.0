; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R4AABBOptimizedTree@Opcode@@6B@		; Opcode::AABBOptimizedTree::`RTTI Complete Object Locator'
PUBLIC	?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBQuantizedNoLeafTree::Build
PUBLIC	??_R4AABBQuantizedNoLeafTree@Opcode@@6B@	; Opcode::AABBQuantizedNoLeafTree::`RTTI Complete Object Locator'
PUBLIC	??_R3AABBQuantizedNoLeafTree@Opcode@@8		; Opcode::AABBQuantizedNoLeafTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBQuantizedNoLeafTree@Opcode@@8		; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8	; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8	; Opcode::AABBQuantizedNoLeafTree `RTTI Type Descriptor'
PUBLIC	?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBQuantizedTree::Build
PUBLIC	??_R4AABBQuantizedTree@Opcode@@6B@		; Opcode::AABBQuantizedTree::`RTTI Complete Object Locator'
PUBLIC	??_R3AABBQuantizedTree@Opcode@@8		; Opcode::AABBQuantizedTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBQuantizedTree@Opcode@@8		; Opcode::AABBQuantizedTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8	; Opcode::AABBQuantizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAABBQuantizedTree@Opcode@@@8		; Opcode::AABBQuantizedTree `RTTI Type Descriptor'
PUBLIC	?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBNoLeafTree::Build
PUBLIC	??_R4AABBNoLeafTree@Opcode@@6B@			; Opcode::AABBNoLeafTree::`RTTI Complete Object Locator'
PUBLIC	??_R3AABBNoLeafTree@Opcode@@8			; Opcode::AABBNoLeafTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBNoLeafTree@Opcode@@8			; Opcode::AABBNoLeafTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8		; Opcode::AABBNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAABBNoLeafTree@Opcode@@@8		; Opcode::AABBNoLeafTree `RTTI Type Descriptor'
PUBLIC	?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ; Opcode::AABBCollisionTree::Build
PUBLIC	??_R4AABBCollisionTree@Opcode@@6B@		; Opcode::AABBCollisionTree::`RTTI Complete Object Locator'
PUBLIC	??_R3AABBCollisionTree@Opcode@@8		; Opcode::AABBCollisionTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBCollisionTree@Opcode@@8		; Opcode::AABBCollisionTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8	; Opcode::AABBOptimizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3AABBOptimizedTree@Opcode@@8		; Opcode::AABBOptimizedTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBOptimizedTree@Opcode@@8		; Opcode::AABBOptimizedTree::`RTTI Base Class Array'
PUBLIC	??_R0?AVAABBOptimizedTree@Opcode@@@8		; Opcode::AABBOptimizedTree `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8	; Opcode::AABBCollisionTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAABBCollisionTree@Opcode@@@8		; Opcode::AABBCollisionTree `RTTI Type Descriptor'
PUBLIC	?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ	; Opcode::AABBCollisionTree::GetUsedBytes
PUBLIC	??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBCollisionTree::`scalar deleting destructor'
PUBLIC	?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ	; Opcode::AABBNoLeafTree::GetUsedBytes
PUBLIC	??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z		; Opcode::AABBNoLeafTree::`scalar deleting destructor'
PUBLIC	?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ	; Opcode::AABBQuantizedTree::GetUsedBytes
PUBLIC	??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBQuantizedTree::`scalar deleting destructor'
PUBLIC	??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z ; xr_free<Opcode::AABBQuantizedNode>
PUBLIC	?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ	; Opcode::AABBCollisionNode::GetNodeSize
PUBLIC	??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z ; xr_free<Opcode::AABBCollisionNode>
PUBLIC	??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBCollisionNode>
PUBLIC	??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBQuantizedNode>
PUBLIC	??0AABBOptimizedTree@Opcode@@QEAA@XZ		; Opcode::AABBOptimizedTree::AABBOptimizedTree
PUBLIC	??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBOptimizedTree::`scalar deleting destructor'
PUBLIC	??1AABBOptimizedTree@Opcode@@UEAA@XZ		; Opcode::AABBOptimizedTree::~AABBOptimizedTree
PUBLIC	?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ ; Opcode::AABBQuantizedNoLeafTree::GetUsedBytes
PUBLIC	??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z	; Opcode::AABBQuantizedNoLeafTree::`scalar deleting destructor'
PUBLIC	??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z ; xr_free<Opcode::AABBQuantizedNoLeafNode>
PUBLIC	?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ	; Opcode::AABBNoLeafNode::GetNodeSize
PUBLIC	??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z ; xr_free<Opcode::AABBNoLeafNode>
PUBLIC	??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBNoLeafNode>
PUBLIC	??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z ; xr_alloc<Opcode::AABBQuantizedNoLeafNode>
PUBLIC	??_7AABBCollisionTree@Opcode@@6B@		; Opcode::AABBCollisionTree::`vftable'
PUBLIC	??_7AABBNoLeafTree@Opcode@@6B@			; Opcode::AABBNoLeafTree::`vftable'
PUBLIC	??_7AABBQuantizedTree@Opcode@@6B@		; Opcode::AABBQuantizedTree::`vftable'
PUBLIC	??_7AABBQuantizedNoLeafTree@Opcode@@6B@		; Opcode::AABBQuantizedNoLeafTree::`vftable'
PUBLIC	??_7AABBOptimizedTree@Opcode@@6B@		; Opcode::AABBOptimizedTree::`vftable'
EXTRN	??_EAABBCollisionTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBCollisionTree::`vector deleting destructor'
EXTRN	??_EAABBNoLeafTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBNoLeafTree::`vector deleting destructor'
EXTRN	??_EAABBQuantizedTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBQuantizedTree::`vector deleting destructor'
EXTRN	??_EAABBOptimizedTree@Opcode@@UEAAPEAXI@Z:PROC	; Opcode::AABBOptimizedTree::`vector deleting destructor'
EXTRN	??_EAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z:PROC ; Opcode::AABBQuantizedNoLeafTree::`vector deleting destructor'
;	COMDAT ??_7AABBOptimizedTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBOptimizedTree@Opcode@@6B@ DQ FLAT:??_R4AABBOptimizedTree@Opcode@@6B@ ; Opcode::AABBOptimizedTree::`vftable'
	DQ	FLAT:??_EAABBOptimizedTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R4AABBOptimizedTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBOptimizedTree@Opcode@@6B@ DD 01H		; Opcode::AABBOptimizedTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBOptimizedTree@Opcode@@@8
	DD	imagerel ??_R3AABBOptimizedTree@Opcode@@8
	DD	imagerel ??_R4AABBOptimizedTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_7AABBQuantizedNoLeafTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBQuantizedNoLeafTree@Opcode@@6B@ DQ FLAT:??_R4AABBQuantizedNoLeafTree@Opcode@@6B@ ; Opcode::AABBQuantizedNoLeafTree::`vftable'
	DQ	FLAT:??_EAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_R4AABBQuantizedNoLeafTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBQuantizedNoLeafTree@Opcode@@6B@ DD 01H		; Opcode::AABBQuantizedNoLeafTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8
	DD	imagerel ??_R3AABBQuantizedNoLeafTree@Opcode@@8
	DD	imagerel ??_R4AABBQuantizedNoLeafTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R3AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBQuantizedNoLeafTree@Opcode@@8 DD 00H		; Opcode::AABBQuantizedNoLeafTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBQuantizedNoLeafTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8 ; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBQuantizedNoLeafTree@Opcode@@8 DD imagerel ??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8 ; Opcode::AABBQuantizedNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBQuantizedNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8
_DATA	SEGMENT
??_R0?AVAABBQuantizedNoLeafTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBQuantizedNoLeafTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBQuantizedNoLeafTree@Opcode@@', 00H
_DATA	ENDS
;	COMDAT ??_7AABBQuantizedTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBQuantizedTree@Opcode@@6B@ DQ FLAT:??_R4AABBQuantizedTree@Opcode@@6B@ ; Opcode::AABBQuantizedTree::`vftable'
	DQ	FLAT:??_EAABBQuantizedTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_R4AABBQuantizedTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBQuantizedTree@Opcode@@6B@ DD 01H		; Opcode::AABBQuantizedTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBQuantizedTree@Opcode@@@8
	DD	imagerel ??_R3AABBQuantizedTree@Opcode@@8
	DD	imagerel ??_R4AABBQuantizedTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R3AABBQuantizedTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBQuantizedTree@Opcode@@8 DD 00H			; Opcode::AABBQuantizedTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBQuantizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBQuantizedTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBQuantizedTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8 ; Opcode::AABBQuantizedTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBQuantizedTree@Opcode@@8 DD imagerel ??_R0?AVAABBQuantizedTree@Opcode@@@8 ; Opcode::AABBQuantizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBQuantizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBQuantizedTree@Opcode@@@8
_DATA	SEGMENT
??_R0?AVAABBQuantizedTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBQuantizedTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBQuantizedTree@Opcode@@', 00H
_DATA	ENDS
;	COMDAT ??_7AABBNoLeafTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBNoLeafTree@Opcode@@6B@ DQ FLAT:??_R4AABBNoLeafTree@Opcode@@6B@ ; Opcode::AABBNoLeafTree::`vftable'
	DQ	FLAT:??_EAABBNoLeafTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_R4AABBNoLeafTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBNoLeafTree@Opcode@@6B@ DD 01H			; Opcode::AABBNoLeafTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBNoLeafTree@Opcode@@@8
	DD	imagerel ??_R3AABBNoLeafTree@Opcode@@8
	DD	imagerel ??_R4AABBNoLeafTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R3AABBNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBNoLeafTree@Opcode@@8 DD 00H			; Opcode::AABBNoLeafTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBNoLeafTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8 ; Opcode::AABBNoLeafTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBNoLeafTree@Opcode@@8 DD imagerel ??_R0?AVAABBNoLeafTree@Opcode@@@8 ; Opcode::AABBNoLeafTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBNoLeafTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBNoLeafTree@Opcode@@@8
_DATA	SEGMENT
??_R0?AVAABBNoLeafTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBNoLeafTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBNoLeafTree@Opcode@@', 00H
_DATA	ENDS
;	COMDAT ??_7AABBCollisionTree@Opcode@@6B@
CONST	SEGMENT
??_7AABBCollisionTree@Opcode@@6B@ DQ FLAT:??_R4AABBCollisionTree@Opcode@@6B@ ; Opcode::AABBCollisionTree::`vftable'
	DQ	FLAT:??_EAABBCollisionTree@Opcode@@UEAAPEAXI@Z
	DQ	FLAT:?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ
	DQ	FLAT:?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
CONST	ENDS
;	COMDAT ??_R4AABBCollisionTree@Opcode@@6B@
rdata$r	SEGMENT
??_R4AABBCollisionTree@Opcode@@6B@ DD 01H		; Opcode::AABBCollisionTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAABBCollisionTree@Opcode@@@8
	DD	imagerel ??_R3AABBCollisionTree@Opcode@@8
	DD	imagerel ??_R4AABBCollisionTree@Opcode@@6B@
rdata$r	ENDS
;	COMDAT ??_R3AABBCollisionTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBCollisionTree@Opcode@@8 DD 00H			; Opcode::AABBCollisionTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AABBCollisionTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBCollisionTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBCollisionTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8 ; Opcode::AABBCollisionTree::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8 DD imagerel ??_R0?AVAABBOptimizedTree@Opcode@@@8 ; Opcode::AABBOptimizedTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBOptimizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R3AABBOptimizedTree@Opcode@@8
rdata$r	SEGMENT
??_R3AABBOptimizedTree@Opcode@@8 DD 00H			; Opcode::AABBOptimizedTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2AABBOptimizedTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBOptimizedTree@Opcode@@8
rdata$r	SEGMENT
??_R2AABBOptimizedTree@Opcode@@8 DD imagerel ??_R1A@?0A@EA@AABBOptimizedTree@Opcode@@8 ; Opcode::AABBOptimizedTree::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBOptimizedTree@Opcode@@@8
_DATA	SEGMENT
??_R0?AVAABBOptimizedTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBOptimizedTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBOptimizedTree@Opcode@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBCollisionTree@Opcode@@8 DD imagerel ??_R0?AVAABBCollisionTree@Opcode@@@8 ; Opcode::AABBCollisionTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AABBCollisionTree@Opcode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBCollisionTree@Opcode@@@8
_DATA	SEGMENT
??_R0?AVAABBCollisionTree@Opcode@@@8 DQ FLAT:??_7type_info@@6B@ ; Opcode::AABBCollisionTree `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAABBCollisionTree@Opcode@@', 00H
gFixQuantized DB 01H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
;	COMDAT ??0AABBOptimizedTree@Opcode@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0AABBOptimizedTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBOptimizedTree::AABBOptimizedTree, COMDAT

; 131  : 											AABBOptimizedTree() : mNbNodes(0)		{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	DWORD PTR [rcx+8], 0
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0AABBOptimizedTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBOptimizedTree::AABBOptimizedTree
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1AABBOptimizedTree@Opcode@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1AABBOptimizedTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBOptimizedTree::~AABBOptimizedTree, COMDAT

; 132  : 		virtual								~AABBOptimizedTree()					{}

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
	ret	0
??1AABBOptimizedTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBOptimizedTree::~AABBOptimizedTree
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ
_TEXT	SEGMENT
?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ PROC	; Opcode::AABBCollisionNode::GetNodeSize, COMDAT

; 64   : 		IMPLEMENT_IMPLICIT_NODE(AABBCollisionNode, CollisionAABB)

	mov	eax, 32					; 00000020H
	ret	0
?GetNodeSize@AABBCollisionNode@Opcode@@QEBA_KXZ ENDP	; Opcode::AABBCollisionNode::GetNodeSize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ
_TEXT	SEGMENT
?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ PROC	; Opcode::AABBNoLeafNode::GetNodeSize, COMDAT

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	eax, 40					; 00000028H
	ret	0
?GetNodeSize@AABBNoLeafNode@Opcode@@QEBA_KXZ ENDP	; Opcode::AABBNoLeafNode::GetNodeSize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ PROC	; Opcode::AABBCollisionTree::GetUsedBytes, COMDAT

; 145  : 		IMPLEMENT_COLLISION_TREE(AABBCollisionTree, AABBCollisionNode)

	mov	eax, DWORD PTR [rcx+8]
	shl	rax, 5
	ret	0
?GetUsedBytes@AABBCollisionTree@Opcode@@UEBAIXZ ENDP	; Opcode::AABBCollisionTree::GetUsedBytes
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ PROC	; Opcode::AABBNoLeafTree::GetUsedBytes, COMDAT

; 150  : 		IMPLEMENT_COLLISION_TREE(AABBNoLeafTree, AABBNoLeafNode)

	mov	eax, DWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rax+rax*4]
	shl	rax, 3
	ret	0
?GetUsedBytes@AABBNoLeafTree@Opcode@@UEBAIXZ ENDP	; Opcode::AABBNoLeafTree::GetUsedBytes
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ PROC	; Opcode::AABBQuantizedTree::GetUsedBytes, COMDAT

; 155  : 		IMPLEMENT_COLLISION_TREE(AABBQuantizedTree, AABBQuantizedNode)

	mov	eax, DWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rax+rax*2]
	shl	rax, 3
	ret	0
?GetUsedBytes@AABBQuantizedTree@Opcode@@UEBAIXZ ENDP	; Opcode::AABBQuantizedTree::GetUsedBytes
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ
_TEXT	SEGMENT
this$ = 8
?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ PROC ; Opcode::AABBQuantizedNoLeafTree::GetUsedBytes, COMDAT

; 164  : 		IMPLEMENT_COLLISION_TREE(AABBQuantizedNoLeafTree, AABBQuantizedNoLeafNode)

	mov	eax, DWORD PTR [rcx+8]
	shl	rax, 5
	ret	0
?GetUsedBytes@AABBQuantizedNoLeafTree@Opcode@@UEBAIXZ ENDP ; Opcode::AABBQuantizedNoLeafTree::GetUsedBytes
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBQuantizedNoLeafNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBQuantizedNoLeafNode@Opcode@@@@YAPEAVAABBQuantizedNoLeafNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBQuantizedNoLeafNode>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z DD imagerel $LN4
	DD	imagerel $LN4+43
	DD	imagerel $unwind$??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBQuantizedNoLeafNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free@2
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free@2:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBQuantizedNoLeafNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNoLeafNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBQuantizedNoLeafNode>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBQuantizedNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 3
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBQuantizedNode@Opcode@@@@YAPEAVAABBQuantizedNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBQuantizedNode>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z DD imagerel $LN4
	DD	imagerel $LN4+43
	DD	imagerel $unwind$??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBQuantizedNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free@3
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free@3:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBQuantizedNode@Opcode@@@@YAXAEAPEAVAABBQuantizedNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBQuantizedNode>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBNoLeafNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*4]
	shl	rdx, 3
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBNoLeafNode@Opcode@@@@YAPEAVAABBNoLeafNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBNoLeafNode>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN4
	DD	imagerel $LN4+43
	DD	imagerel $unwind$??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBNoLeafNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free@4
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free@4:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBNoLeafNode@Opcode@@@@YAXAEAPEAVAABBNoLeafNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBNoLeafNode>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z
_TEXT	SEGMENT
count$ = 8
??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z PROC ; xr_alloc<Opcode::AABBCollisionNode>, COMDAT

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edx, ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	rex_jmp	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
??$xr_alloc@VAABBCollisionNode@Opcode@@@@YAPEAVAABBCollisionNode@Opcode@@I@Z ENDP ; xr_alloc<Opcode::AABBCollisionNode>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z DD imagerel $LN4
	DD	imagerel $LN4+43
	DD	imagerel $unwind$??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z
_TEXT	SEGMENT
P$ = 48
??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z PROC ; xr_free<Opcode::AABBCollisionNode>, COMDAT

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@xr_free@5
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx], 0
$LN1@xr_free@5:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$xr_free@VAABBCollisionNode@Opcode@@@@YAXAEAPEAVAABBCollisionNode@Opcode@@@Z ENDP ; xr_free<Opcode::AABBCollisionNode>
_TEXT	ENDS
PUBLIC	??1AABBNoLeafTree@Opcode@@UEAA@XZ		; Opcode::AABBNoLeafTree::~AABBNoLeafTree
pdata	SEGMENT
$pdata$??1AABBNoLeafTree@Opcode@@UEAA@XZ DD imagerel $LN9
	DD	imagerel $LN9+81
	DD	imagerel $unwind$??1AABBNoLeafTree@Opcode@@UEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??1AABBNoLeafTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
??1AABBNoLeafTree@Opcode@@UEAA@XZ PROC			; Opcode::AABBNoLeafTree::~AABBNoLeafTree

; 269  : {

$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBNoLeafTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 270  : 	xr_free(mNodes);

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN8@AABBNoLeaf
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z

; 271  : }

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx+16], 0
	mov	QWORD PTR [rbx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@AABBNoLeaf:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBNoLeafTree@Opcode@@UEAA@XZ ENDP			; Opcode::AABBNoLeafTree::~AABBNoLeafTree
_TEXT	ENDS
PUBLIC	??0AABBNoLeafTree@Opcode@@QEAA@XZ		; Opcode::AABBNoLeafTree::AABBNoLeafTree
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
??0AABBNoLeafTree@Opcode@@QEAA@XZ PROC			; Opcode::AABBNoLeafTree::AABBNoLeafTree

; 260  : {

	lea	rax, OFFSET FLAT:??_7AABBNoLeafTree@Opcode@@6B@
	xor	edx, edx
	mov	QWORD PTR [rcx], rax

; 261  : }

	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0AABBNoLeafTree@Opcode@@QEAA@XZ ENDP			; Opcode::AABBNoLeafTree::AABBNoLeafTree
_TEXT	ENDS
PUBLIC	??1AABBCollisionTree@Opcode@@UEAA@XZ		; Opcode::AABBCollisionTree::~AABBCollisionTree
pdata	SEGMENT
$pdata$??1AABBCollisionTree@Opcode@@UEAA@XZ DD imagerel $LN9
	DD	imagerel $LN9+81
	DD	imagerel $unwind$??1AABBCollisionTree@Opcode@@UEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??1AABBCollisionTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
??1AABBCollisionTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBCollisionTree::~AABBCollisionTree

; 215  : {

$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBCollisionTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 216  : 	xr_free(mNodes);

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN8@AABBCollis
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z

; 217  : }

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx+16], 0
	mov	QWORD PTR [rbx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@AABBCollis:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBCollisionTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBCollisionTree::~AABBCollisionTree
_TEXT	ENDS
PUBLIC	??0AABBCollisionTree@Opcode@@QEAA@XZ		; Opcode::AABBCollisionTree::AABBCollisionTree
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
??0AABBCollisionTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBCollisionTree::AABBCollisionTree

; 206  : {

	lea	rax, OFFSET FLAT:??_7AABBCollisionTree@Opcode@@6B@
	xor	edx, edx
	mov	QWORD PTR [rcx], rax

; 207  : }

	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0AABBCollisionTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBCollisionTree::AABBCollisionTree
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+49
	DD	imagerel $unwind$??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBOptimizedTree::`scalar deleting destructor', COMDAT
$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	test	dl, 1
	je	SHORT $LN11@scalar@4
	mov	rdx, rcx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN11@scalar@4:
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GAABBOptimizedTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBOptimizedTree::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ	; Opcode::AABBQuantizedNoLeafTree::~AABBQuantizedNoLeafTree
pdata	SEGMENT
$pdata$??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+81
	DD	imagerel $unwind$??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBQuantizedNoLeafTree::~AABBQuantizedNoLeafTree

; 496  : {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBQuantizedNoLeafTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 497  : 	xr_free(mNodes);

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN12@AABBQuanti
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z

; 498  : }

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx+16], 0
	mov	QWORD PTR [rbx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@AABBQuanti:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBQuantizedNoLeafTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBQuantizedNoLeafTree::~AABBQuantizedNoLeafTree
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN21
	DD	imagerel $LN21+101
	DD	imagerel $unwind$??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z PROC	; Opcode::AABBQuantizedNoLeafTree::`scalar deleting destructor', COMDAT
$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBQuantizedNoLeafTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar@5
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar@5:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN20@scalar@5
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN20@scalar@5:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBQuantizedNoLeafTree@Opcode@@UEAAPEAXI@Z ENDP	; Opcode::AABBQuantizedNoLeafTree::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0AABBQuantizedNoLeafTree@Opcode@@QEAA@XZ	; Opcode::AABBQuantizedNoLeafTree::AABBQuantizedNoLeafTree
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
??0AABBQuantizedNoLeafTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBQuantizedNoLeafTree::AABBQuantizedNoLeafTree

; 487  : {

	lea	rax, OFFSET FLAT:??_7AABBQuantizedNoLeafTree@Opcode@@6B@
	xor	edx, edx
	mov	QWORD PTR [rcx], rax

; 488  : }

	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0AABBQuantizedNoLeafTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBQuantizedNoLeafTree::AABBQuantizedNoLeafTree
_TEXT	ENDS
PUBLIC	??1AABBQuantizedTree@Opcode@@UEAA@XZ		; Opcode::AABBQuantizedTree::~AABBQuantizedTree
pdata	SEGMENT
$pdata$??1AABBQuantizedTree@Opcode@@UEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+81
	DD	imagerel $unwind$??1AABBQuantizedTree@Opcode@@UEAA@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$??1AABBQuantizedTree@Opcode@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
??1AABBQuantizedTree@Opcode@@UEAA@XZ PROC		; Opcode::AABBQuantizedTree::~AABBQuantizedTree

; 419  : {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBQuantizedTree@Opcode@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 420  : 	xr_free(mNodes);

	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN12@AABBQuanti@2
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z

; 421  : }

	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx+16], 0
	mov	QWORD PTR [rbx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@AABBQuanti@2:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rcx], rax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1AABBQuantizedTree@Opcode@@UEAA@XZ ENDP		; Opcode::AABBQuantizedTree::~AABBQuantizedTree
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN21
	DD	imagerel $LN21+101
	DD	imagerel $unwind$??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBQuantizedTree::`scalar deleting destructor', COMDAT
$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBQuantizedTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar@6
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar@6:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN20@scalar@6
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN20@scalar@6:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBQuantizedTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBQuantizedTree::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0AABBQuantizedTree@Opcode@@QEAA@XZ		; Opcode::AABBQuantizedTree::AABBQuantizedTree
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
this$ = 8
??0AABBQuantizedTree@Opcode@@QEAA@XZ PROC		; Opcode::AABBQuantizedTree::AABBQuantizedTree

; 410  : {

	lea	rax, OFFSET FLAT:??_7AABBQuantizedTree@Opcode@@6B@
	xor	edx, edx
	mov	QWORD PTR [rcx], rax

; 411  : }

	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
??0AABBQuantizedTree@Opcode@@QEAA@XZ ENDP		; Opcode::AABBQuantizedTree::AABBQuantizedTree
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN17
	DD	imagerel $LN17+101
	DD	imagerel $unwind$??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBNoLeafTree::`scalar deleting destructor', COMDAT
$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBNoLeafTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar@7
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar@7:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN16@scalar@7
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN16@scalar@7:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBNoLeafTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBNoLeafTree::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z DD imagerel $LN17
	DD	imagerel $LN17+101
	DD	imagerel $unwind$??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z PROC		; Opcode::AABBCollisionTree::`scalar deleting destructor', COMDAT
$LN17:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7AABBCollisionTree@Opcode@@6B@
	mov	edi, edx
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rdx, QWORD PTR [rcx+16]
	test	rdx, rdx
	je	SHORT $LN6@scalar@8
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	QWORD PTR [rbx+16], 0
$LN6@scalar@8:
	lea	rax, OFFSET FLAT:??_7AABBOptimizedTree@Opcode@@6B@
	mov	QWORD PTR [rbx], rax
	test	dil, 1
	je	SHORT $LN16@scalar@8
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, rbx
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
$LN16@scalar@8:
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GAABBCollisionTree@Opcode@@UEAAPEAXI@Z ENDP		; Opcode::AABBCollisionTree::`scalar deleting destructor'
pdata	SEGMENT
$pdata$?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD imagerel ?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
	DD	imagerel ?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z+413
	DD	imagerel $unwind$?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD 0a1901H
	DD	046819H
	DD	0f6414H
	DD	0e5414H
	DD	0d3414H
	DD	070109214H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T140567 = 32
$T140618 = 44
tv468 = 96
linear$ = 96
boxid$ = 104
curid$ = 112
curnode$ = 120
?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z PROC ; _BuildNoLeafTree

; 147  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	movss	xmm6, DWORD PTR __real@3f000000
	mov	r10, r9
	mov	rdi, r8
	mov	ebp, edx
	mov	rbx, rcx
	npad	4
$LL55@BuildNoLea:

; 148  : 	const AABBTreeNode* P = curnode->GetPos();
; 149  : 	const AABBTreeNode* N = curnode->GetNeg();
; 150  : 	// Leaf nodes here?!
; 151  : 	ASSERT(P);
; 152  : 	ASSERT(N);
; 153  : 	// Internal node => keep the box
; 154  : 	curnode->GetAABB()->GetCenter(linear[boxid].mAABB.mCenter);

	movss	xmm2, DWORD PTR [r10+12]
	movss	xmm1, DWORD PTR [r10+4]
	movss	xmm0, DWORD PTR [r10+8]
	mov	r9, QWORD PTR [r10+24]
	mov	rsi, QWORD PTR [r10+32]
	mov	eax, ebp
	lea	r8, QWORD PTR [rax+rax*4]
	addss	xmm2, DWORD PTR [r10]
	addss	xmm1, DWORD PTR [r10+16]
	addss	xmm0, DWORD PTR [r10+20]
	mov	QWORD PTR tv468[rsp], r8
	mulss	xmm2, xmm6
	mulss	xmm1, xmm6
	mulss	xmm0, xmm6
	movss	DWORD PTR $T140567[rsp], xmm2
	movss	DWORD PTR $T140567[rsp+4], xmm1
	movss	DWORD PTR $T140567[rsp+8], xmm0
	mov	eax, DWORD PTR $T140567[rsp]
	mov	DWORD PTR [rbx+r8*8], eax
	mov	eax, DWORD PTR $T140567[rsp+4]
	mov	DWORD PTR [rbx+r8*8+4], eax
	mov	eax, DWORD PTR $T140567[rsp+8]
	mov	DWORD PTR [rbx+r8*8+8], eax

; 155  : 	curnode->GetAABB()->GetExtents(linear[boxid].mAABB.mExtents);

	movss	xmm0, DWORD PTR [r10+12]
	movss	xmm1, DWORD PTR [r10+16]
	movss	xmm2, DWORD PTR [r10+20]
	subss	xmm0, DWORD PTR [r10]
	subss	xmm1, DWORD PTR [r10+4]
	subss	xmm2, DWORD PTR [r10+8]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm6
	mulss	xmm2, xmm6
	movss	DWORD PTR $T140618[rsp], xmm0
	movss	DWORD PTR $T140618[rsp+4], xmm1
	movss	DWORD PTR $T140618[rsp+8], xmm2
	mov	eax, DWORD PTR $T140618[rsp]
	mov	DWORD PTR [rbx+r8*8+12], eax
	mov	eax, DWORD PTR $T140618[rsp+4]
	mov	DWORD PTR [rbx+r8*8+16], eax
	mov	eax, DWORD PTR $T140618[rsp+8]
	mov	DWORD PTR [rbx+r8*8+20], eax

; 156  : 
; 157  : 	if(P->IsLeaf())

	cmp	QWORD PTR [r9+24], 0
	jne	SHORT $LN4@BuildNoLea
	cmp	QWORD PTR [r9+32], 0
	jne	SHORT $LN4@BuildNoLea

; 158  : 	{
; 159  : 		// The input tree must be complete => i.e. one primitive/leaf
; 160  : 		ASSERT(P->GetNbPrimitives()==1);
; 161  : 		// Get the primitive index from the input tree
; 162  : 		udword PrimitiveIndex = P->GetPrimitives()[0];

	mov	rax, QWORD PTR [r9+40]

; 163  : 		// Setup prev box data as the primitive index, marked as leaf
; 164  : 		linear[boxid].mData = (PrimitiveIndex<<1)|1;

	mov	ecx, DWORD PTR [rax]
	lea	eax, DWORD PTR [rcx+rcx]
	or	rax, 1
	mov	QWORD PTR [rbx+r8*8+24], rax

; 165  : 	}
; 166  : 	else

	jmp	SHORT $LN3@BuildNoLea
$LN4@BuildNoLea:

; 167  : 	{
; 168  : 		// Get a _new_ id for positive child
; 169  : 		udword PosID = curid++;

	mov	edx, DWORD PTR [rdi]
	lea	eax, DWORD PTR [rdx+1]

; 170  : 		// Setup box data
; 171  : 		linear[boxid].mData = (uintptr_t)&linear[PosID];

	lea	rcx, QWORD PTR [rdx+rdx*4]
	mov	DWORD PTR [rdi], eax
	lea	rax, QWORD PTR [rbx+rcx*8]

; 172  : 		// Make sure it's not marked as leaf
; 173  : 		ASSERT(!(linear[boxid].mData&1));
; 174  : 		// Recurse
; 175  : 		_BuildNoLeafTree(linear, PosID, curid, P);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+r8*8+24], rax
	mov	r8, rdi
	call	?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildNoLeafTree
	mov	r8, QWORD PTR tv468[rsp]
$LN3@BuildNoLea:

; 176  : 	}
; 177  : 
; 178  : 	if(N->IsLeaf())

	cmp	QWORD PTR [rsi+24], 0
	jne	SHORT $LN51@BuildNoLea
	cmp	QWORD PTR [rsi+32], 0
	je	SHORT $LN61@BuildNoLea
$LN51@BuildNoLea:

; 184  : 		// Setup prev box data as the primitive index, marked as leaf
; 185  : 		linear[boxid].mData2 = (PrimitiveIndex<<1)|1;
; 186  : 	}
; 187  : 	else
; 188  : 	{
; 189  : 		// Get a _new_ id for positive child
; 190  : 		udword NegID = curid++;

	mov	ebp, DWORD PTR [rdi]

; 191  : 		// Setup box data
; 192  : 		linear[boxid].mData2 = (uintptr_t)&linear[NegID];
; 193  : 		// Make sure it's not marked as leaf
; 194  : 		ASSERT(!(linear[boxid].mData2&1));
; 195  : 		// Recurse
; 196  : 		_BuildNoLeafTree(linear, NegID, curid, N);

	mov	r10, rsi
	lea	eax, DWORD PTR [rbp+1]
	lea	rcx, QWORD PTR [rbp+rbp*4]
	mov	DWORD PTR [rdi], eax
	lea	rax, QWORD PTR [rbx+rcx*8]
	mov	QWORD PTR [rbx+r8*8+32], rax
	jmp	$LL55@BuildNoLea
$LN61@BuildNoLea:

; 179  : 	{
; 180  : 		// The input tree must be complete => i.e. one primitive/leaf
; 181  : 		ASSERT(N->GetNbPrimitives()==1);
; 182  : 		// Get the primitive index from the input tree
; 183  : 		udword PrimitiveIndex = N->GetPrimitives()[0];

	mov	rax, QWORD PTR [rsi+40]

; 197  : 	}
; 198  : }

	movaps	xmm6, XMMWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+120]
	mov	ecx, DWORD PTR [rax]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+112]
	lea	edx, DWORD PTR [rcx+rcx]
	lea	rcx, QWORD PTR [rax+rax*4]
	or	rdx, 1
	mov	QWORD PTR [rbx+rcx*8+32], rdx
	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ENDP ; _BuildNoLeafTree
_TEXT	ENDS
pdata	SEGMENT
$pdata$?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD imagerel ?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
	DD	imagerel ?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z+331
	DD	imagerel $unwind$?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z DD 0a1901H
	DD	046819H
	DD	0e6414H
	DD	0d5414H
	DD	0c3414H
	DD	070109214H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
$T140716 = 32
$T140767 = 44
linear$ = 96
boxid$ = 104
curid$ = 112
curnode$ = 120
?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z PROC ; _BuildCollisionTree

; 96   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6
	movss	xmm6, DWORD PTR __real@3f000000
	mov	rbx, r9
	mov	rsi, r8
	mov	ebp, edx
	mov	rdi, rcx
	npad	4
$LL47@BuildColli:

; 97   : 	// Current node from input tree is "curnode". Must be flattened into "linear[boxid]".
; 98   : 
; 99   : 	// Store the AABB
; 100  : 	curnode->GetAABB()->GetCenter(linear[boxid].mAABB.mCenter);

	movss	xmm2, DWORD PTR [rbx]
	movss	xmm1, DWORD PTR [rbx+16]
	movss	xmm0, DWORD PTR [rbx+20]
	mov	ecx, ebp
	shl	rcx, 5
	addss	xmm2, DWORD PTR [rbx+12]
	addss	xmm1, DWORD PTR [rbx+4]
	addss	xmm0, DWORD PTR [rbx+8]
	mulss	xmm2, xmm6
	mulss	xmm1, xmm6
	mulss	xmm0, xmm6
	movss	DWORD PTR $T140716[rsp], xmm2
	movss	DWORD PTR $T140716[rsp+4], xmm1
	movss	DWORD PTR $T140716[rsp+8], xmm0
	mov	eax, DWORD PTR $T140716[rsp]
	mov	DWORD PTR [rcx+rdi], eax
	mov	eax, DWORD PTR $T140716[rsp+4]
	mov	DWORD PTR [rcx+rdi+4], eax
	mov	eax, DWORD PTR $T140716[rsp+8]
	mov	DWORD PTR [rcx+rdi+8], eax

; 101  : 	curnode->GetAABB()->GetExtents(linear[boxid].mAABB.mExtents);

	movss	xmm0, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+16]
	movss	xmm2, DWORD PTR [rbx+20]
	subss	xmm0, DWORD PTR [rbx]
	subss	xmm1, DWORD PTR [rbx+4]
	subss	xmm2, DWORD PTR [rbx+8]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm6
	mulss	xmm2, xmm6
	movss	DWORD PTR $T140767[rsp], xmm0
	movss	DWORD PTR $T140767[rsp+4], xmm1
	movss	DWORD PTR $T140767[rsp+8], xmm2
	mov	eax, DWORD PTR $T140767[rsp]
	mov	DWORD PTR [rcx+rdi+12], eax
	mov	eax, DWORD PTR $T140767[rsp+4]
	mov	DWORD PTR [rcx+rdi+16], eax
	mov	eax, DWORD PTR $T140767[rsp+8]
	mov	DWORD PTR [rcx+rdi+20], eax

; 102  : 	// Store remaining info
; 103  : 	if(curnode->IsLeaf())

	cmp	QWORD PTR [rbx+24], 0
	jne	SHORT $LN39@BuildColli
	cmp	QWORD PTR [rbx+32], 0
	je	SHORT $LN52@BuildColli
$LN39@BuildColli:

; 109  : 		// Setup box data as the primitive index, marked as leaf
; 110  : 		linear[boxid].mData = (PrimitiveIndex<<1)|1;
; 111  : 	}
; 112  : 	else
; 113  : 	{
; 114  : 		// To make the negative one implicit, we must store P and N in successive order
; 115  : 		udword PosID = curid++;	// Get a _new_ id for positive child

	mov	edx, DWORD PTR [rsi]

; 116  : 		udword NegID = curid++;	// Get a _new_ id for negative child
; 117  : 		// Setup box data as the forthcoming _new_ P pointer
; 118  : 		linear[boxid].mData = (uintptr_t)&linear[PosID];
; 119  : 		// Make sure it's not marked as leaf
; 120  : 		ASSERT(!(linear[boxid].mData&1));
; 121  : 		// Recurse with _new_ IDs
; 122  : 		_BuildCollisionTree(linear, PosID, curid, curnode->GetPos());

	mov	r8, rsi
	lea	ebp, DWORD PTR [rdx+1]
	lea	eax, DWORD PTR [rbp+1]
	mov	DWORD PTR [rsi], eax
	mov	eax, edx
	shl	rax, 5
	add	rax, rdi
	mov	QWORD PTR [rcx+rdi+24], rax
	mov	r9, QWORD PTR [rbx+24]
	mov	rcx, rdi
	call	?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildCollisionTree

; 123  : 		_BuildCollisionTree(linear, NegID, curid, curnode->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL47@BuildColli
$LN52@BuildColli:

; 104  : 	{
; 105  : 		// The input tree must be complete => i.e. one primitive/leaf
; 106  : 		ASSERT(curnode->GetNbPrimitives()==1);
; 107  : 		// Get the primitive index from the input tree
; 108  : 		udword PrimitiveIndex = curnode->GetPrimitives()[0];

	mov	rax, QWORD PTR [rbx+40]

; 124  : 	}
; 125  : }

	mov	rsi, QWORD PTR [rsp+112]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	mov	ecx, DWORD PTR [rax]
	mov	rbx, QWORD PTR [rsp+96]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+104]
	lea	edx, DWORD PTR [rcx+rcx]
	or	rdx, 1
	shl	rax, 5
	mov	QWORD PTR [rax+rdi+24], rdx
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ENDP ; _BuildCollisionTree
PUBLIC	__real@46fffe00
pdata	SEGMENT
$pdata$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN152
	DD	imagerel $LN152+48
	DD	imagerel $unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$0$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN152+48
	DD	imagerel $LN152+195
	DD	imagerel $chain$0$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN152+195
	DD	imagerel $LN152+599
	DD	imagerel $chain$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$16$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN152+599
	DD	imagerel $LN152+1262
	DD	imagerel $chain$16$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$17$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN152+1262
	DD	imagerel $LN152+1364
	DD	imagerel $chain$17$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	01d010aH
	DD	030027003H
$chain$0$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 020821H
	DD	01be408H
	DD	imagerel $LN152
	DD	imagerel $LN152+48
	DD	imagerel $unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0145621H
	DD	04e856H
	DD	05d850H
	DD	06c84aH
	DD	07b844H
	DD	08a82eH
	DD	099825H
	DD	0b781cH
	DD	0c6814H
	DD	01cd40cH
	DD	01be400H
	DD	imagerel $LN152
	DD	imagerel $LN152+48
	DD	imagerel $unwind$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$16$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0a3321H
	DD	0a8833H
	DD	01af420H
	DD	023c418H
	DD	0226410H
	DD	0205408H
	DD	imagerel $LN152+195
	DD	imagerel $LN152+599
	DD	imagerel $chain$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$17$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 021H
	DD	imagerel $LN152+195
	DD	imagerel $LN152+599
	DD	imagerel $chain$11$?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
xdata	ENDS
;	COMDAT __real@46fffe00
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_point.h
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.cpp
CONST	ENDS
_TEXT	SEGMENT
Max$94190 = 32
Min$94192 = 48
this$ = 256
CurID$ = 264
tree$ = 264
?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBQuantizedNoLeafTree::Build

; 508  : {

$LN152:
	push	rbx
	push	rdi
	sub	rsp, 232				; 000000e8H
	mov	rdi, rdx
	mov	rbx, rcx

; 509  : 	// Checkings
; 510  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN30@Build
$LN151@Build:
	xor	al, al

; 557  : }

	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rbx
	ret	0
$LN30@Build:

; 511  : 	// Check the input tree is complete
; 512  : 	udword NbTriangles	= tree->GetNbPrimitives();

	mov	ecx, DWORD PTR [rdx+48]

; 513  : 	udword NbNodes		= tree->GetNbNodes();
; 514  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	lea	eax, DWORD PTR [rcx+rcx-1]
	cmp	DWORD PTR [rdx+64], eax
	jne	SHORT $LN151@Build

; 515  : 
; 516  : 	// Get nodes
; 517  : 	mNbNodes				= NbTriangles-1;

	lea	eax, DWORD PTR [rcx-1]
	mov	QWORD PTR [rsp+216], r14

; 518  : 	AABBNoLeafNode* Nodes	= xr_alloc<AABBNoLeafNode>(mNbNodes);

	lea	rdx, QWORD PTR [rax+rax*4]
	mov	DWORD PTR [rbx+8], eax
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 3
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	r14, rax

; 519  : 	CHECKALLOC		(Nodes);

	test	rax, rax
	je	SHORT $LN150@Build

; 520  : 	ZeroMemory		(Nodes,	mNbNodes*sizeof(AABBNoLeafNode));

	mov	eax, DWORD PTR [rbx+8]
	xor	edx, edx
	mov	rcx, r14
	lea	r8d, DWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 3
	call	QWORD PTR [rax+16]

; 521  : 
; 522  : 	// Build the tree
; 523  : 	udword CurID = 1;
; 524  : 	_BuildNoLeafTree(Nodes, 0, CurID, tree);

	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rdi
	xor	edx, edx
	mov	rcx, r14
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildNoLeafTree

; 525  : 	ASSERT(CurID==mNbNodes);
; 526  : 
; 527  : 	// Quantize
; 528  : 	{
; 529  : 		mNodes		= xr_alloc<AABBQuantizedNoLeafNode>(mNbNodes);

	mov	edx, DWORD PTR [rbx+8]
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	QWORD PTR [rbx+16], rax

; 530  : 		CHECKALLOC	(mNodes);

	test	rax, rax
	jne	SHORT $LN27@Build
$LN150@Build:
	xor	al, al
	mov	r14, QWORD PTR [rsp+216]

; 557  : }

	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rbx
	ret	0
$LN27@Build:

; 531  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNoLeafNode));

	mov	r8d, DWORD PTR [rbx+8]
	mov	QWORD PTR [rsp+224], r13
	movaps	XMMWORD PTR [rsp+192], xmm6
	movaps	XMMWORD PTR [rsp+176], xmm7
	movaps	XMMWORD PTR [rsp+144], xmm9
	movaps	XMMWORD PTR [rsp+128], xmm10
	mov	rcx, rax
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	xor	edx, edx
	shl	r8d, 5
	movaps	XMMWORD PTR [rsp+112], xmm11
	movaps	XMMWORD PTR [rsp+96], xmm12
	movaps	XMMWORD PTR [rsp+80], xmm13
	movaps	XMMWORD PTR [rsp+64], xmm14
	call	QWORD PTR [rax+16]

; 532  : 
; 533  : 		// Get max values
; 534  : 		FIND_MAX_VALUES

	movss	xmm5, DWORD PTR __real@ff7fffff
	mov	edx, DWORD PTR [rbx+8]
	movaps	xmm2, xmm5
	movaps	xmm3, xmm5
	movaps	xmm4, xmm5
	movaps	xmm6, xmm5
	movaps	xmm7, xmm5
	test	edx, edx
	je	SHORT $LN24@Build

; 531  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNoLeafNode));

	movss	xmm0, DWORD PTR __mask@@AbsFloat@
	lea	rax, QWORD PTR [r14+8]
	mov	ecx, edx
	npad	8
$LL26@Build:

; 532  : 
; 533  : 		// Get max values
; 534  : 		FIND_MAX_VALUES

	movss	xmm1, DWORD PTR [rax-8]
	andps	xmm1, xmm0
	comiss	xmm1, xmm5
	jbe	SHORT $LN23@Build
	movaps	xmm5, xmm1
$LN23@Build:
	movss	xmm1, DWORD PTR [rax-4]
	andps	xmm1, xmm0
	comiss	xmm1, xmm2
	jbe	SHORT $LN22@Build
	movaps	xmm2, xmm1
$LN22@Build:
	movss	xmm1, DWORD PTR [rax]
	andps	xmm1, xmm0
	comiss	xmm1, xmm3
	jbe	SHORT $LN21@Build
	movaps	xmm3, xmm1
$LN21@Build:
	movss	xmm1, DWORD PTR [rax+4]
	andps	xmm1, xmm0
	comiss	xmm1, xmm4
	jbe	SHORT $LN20@Build
	movaps	xmm4, xmm1
$LN20@Build:
	movss	xmm1, DWORD PTR [rax+8]
	andps	xmm1, xmm0
	comiss	xmm1, xmm6
	jbe	SHORT $LN19@Build
	movaps	xmm6, xmm1
$LN19@Build:
	movss	xmm1, DWORD PTR [rax+12]
	andps	xmm1, xmm0
	comiss	xmm1, xmm7
	jbe	SHORT $LN25@Build
	movaps	xmm7, xmm1
$LN25@Build:
	add	rax, 40					; 00000028H
	dec	rcx
	jne	SHORT $LL26@Build
$LN24@Build:

; 535  : 
; 536  : 		// Quantization
; 537  : 		INIT_QUANTIZATION

	movss	xmm9, DWORD PTR __real@46fffe00
	lea	rdi, QWORD PTR [rbx+36]

; 538  : 
; 539  : 		// Quantize
; 540  : 		uintptr_t Data;
; 541  : 		for(i=0;i<mNbNodes;i++)

	xor	r13d, r13d
	movaps	xmm10, xmm9
	movaps	xmm11, xmm9
	movaps	xmm12, xmm9
	divss	xmm10, xmm5
	divss	xmm11, xmm2
	divss	xmm12, xmm3
	movaps	xmm13, xmm9
	movaps	xmm14, xmm9
	divss	xmm9, xmm7
	divss	xmm13, xmm4
	divss	xmm14, xmm6
	movss	xmm7, DWORD PTR __real@3f800000
	movaps	xmm0, xmm7
	movaps	xmm1, xmm7
	divss	xmm0, xmm10
	divss	xmm1, xmm11
	movss	DWORD PTR [rbx+24], xmm0
	movss	DWORD PTR [rbx+28], xmm1
	movaps	xmm0, xmm7
	movaps	xmm1, xmm7
	divss	xmm0, xmm12
	divss	xmm1, xmm13
	movss	DWORD PTR [rbx+32], xmm0
	movss	DWORD PTR [rdi], xmm1
	movaps	xmm0, xmm7
	movaps	xmm1, xmm7
	divss	xmm0, xmm14
	divss	xmm1, xmm9
	movss	DWORD PTR [rbx+40], xmm0
	movss	DWORD PTR [rbx+44], xmm1
	test	edx, edx
	je	$LN14@Build
	mov	QWORD PTR [rsp+256], rbp
	mov	QWORD PTR [rsp+272], rsi
	mov	QWORD PTR [rsp+280], r12
	mov	QWORD PTR [rsp+208], r15
	lea	r12, QWORD PTR Max$94190[rsp]
	lea	r10, QWORD PTR Min$94192[rsp]
	movaps	XMMWORD PTR [rsp+160], xmm8
	xorps	xmm8, xmm8
	sub	r12, rbx
	mov	ebp, r13d
	lea	rsi, QWORD PTR [r14+20]
	sub	r10, rbx
	mov	r15, -3689348814741910323		; cccccccccccccccdH
	npad	11
$LL16@Build:

; 542  : 		{
; 543  : 			PERFORM_QUANTIZATION

	movaps	xmm0, xmm10
	mov	r9, rbp
	mov	r11d, 3
	mulss	xmm0, DWORD PTR [rsi-20]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm11
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+rbp], xmm1
	mulss	xmm0, DWORD PTR [rsi-16]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm12
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+rbp+4], xmm1
	mulss	xmm0, DWORD PTR [rsi-12]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm13
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+rbp+8], xmm1
	mulss	xmm0, DWORD PTR [rsi-8]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm14
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+rbp+6], xmm1
	mulss	xmm0, DWORD PTR [rsi-4]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm9
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+rbp+10], xmm1
	mulss	xmm0, DWORD PTR [rsi]
	cvttss2si rax, xmm0
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rax+rbp+14], xmm1
	movss	xmm6, DWORD PTR [rsi-20]
	movss	xmm4, DWORD PTR [rsi-16]
	movaps	xmm0, xmm6
	addss	xmm0, DWORD PTR [rsi-8]
	movss	xmm2, DWORD PTR [rsi-12]
	subss	xmm6, DWORD PTR [rsi-8]
	movss	DWORD PTR Max$94190[rsp], xmm0
	movss	DWORD PTR Min$94192[rsp], xmm6
	movaps	xmm0, xmm4
	addss	xmm0, DWORD PTR [rsi-4]
	subss	xmm4, DWORD PTR [rsi-4]
	movss	DWORD PTR Max$94190[rsp+4], xmm0
	movss	DWORD PTR Min$94192[rsp+4], xmm4
	movaps	xmm0, xmm2
	addss	xmm0, DWORD PTR [rsi]
	subss	xmm2, DWORD PTR [rsi]
	movss	DWORD PTR Max$94190[rsp+8], xmm0
	movss	DWORD PTR Min$94192[rsp+8], xmm2
	npad	8
$LL12@Build:
	mov	rcx, QWORD PTR [rbx+16]
	movss	xmm2, DWORD PTR [r9+rdi-12]
	lea	rdx, QWORD PTR [r9+rdi]
	add	rcx, r9
	mov	r8b, 1
	movss	xmm3, DWORD PTR [r12+rdx-36]
	mulss	xmm2, DWORD PTR [rcx]
$LL9@Build:
	movss	xmm1, DWORD PTR [rdx]
	mulss	xmm1, DWORD PTR [rcx+6]
	movaps	xmm0, xmm1
	addss	xmm0, xmm2
	comiss	xmm0, xmm3
	jb	SHORT $LN5@Build
	movaps	xmm0, xmm2
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdx+r10-36]
	ja	SHORT $LN5@Build
	xor	r8b, r8b
	jmp	SHORT $LN4@Build
$LN5@Build:
	movss	xmm0, DWORD PTR [rcx+6]
	addss	xmm0, xmm7
	movss	DWORD PTR [rcx+6], xmm0
$LN4@Build:
	mov	rax, QWORD PTR [rbx+16]
	ucomiss	xmm8, DWORD PTR [rax+r9+6]
	lea	rcx, QWORD PTR [rax+r9]
	je	SHORT $LN148@Build
	test	r8b, r8b
	jne	SHORT $LL9@Build
	jmp	SHORT $LN147@Build
$LN148@Build:
	mov	DWORD PTR [rax+r9+6], 1199570688	; 477fff00H
$LN147@Build:
	add	r9, 4
	dec	r11
	jne	SHORT $LL12@Build

; 544  : 			REMAP_DATA(mData)

	mov	rcx, QWORD PTR [rsi+4]
	test	cl, 1
	jne	SHORT $LN2@Build
	sub	rcx, r14
	mov	rax, r15
	mul	rcx
	mov	rcx, rdx
	and	rcx, -32				; ffffffffffffffe0H
	add	rcx, QWORD PTR [rbx+16]
$LN2@Build:
	mov	rax, QWORD PTR [rbx+16]
	mov	QWORD PTR [rax+rbp+16], rcx

; 545  : 			REMAP_DATA(mData2)

	mov	rcx, QWORD PTR [rsi+12]
	test	cl, 1
	jne	SHORT $LN1@Build
	sub	rcx, r14
	mov	rax, r15
	mul	rcx
	mov	rcx, rdx
	and	rcx, -32				; ffffffffffffffe0H
	add	rcx, QWORD PTR [rbx+16]
$LN1@Build:
	mov	rax, QWORD PTR [rbx+16]
	inc	r13d
	add	rbp, 32					; 00000020H
	mov	QWORD PTR [rax+rbp-8], rcx
	add	rsi, 40					; 00000028H
	sub	rdi, 32					; 00000020H
	cmp	r13d, DWORD PTR [rbx+8]
	jb	$LL16@Build
	movaps	xmm8, XMMWORD PTR [rsp+160]
	mov	r15, QWORD PTR [rsp+208]
	mov	r12, QWORD PTR [rsp+280]
	mov	rsi, QWORD PTR [rsp+272]
	mov	rbp, QWORD PTR [rsp+256]
$LN14@Build:

; 546  : 		}
; 547  : 
; 548  : 		xr_free(Nodes);

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, r14
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	r13, QWORD PTR [rsp+224]
	mov	r14, QWORD PTR [rsp+216]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm13, XMMWORD PTR [rsp+80]
	movaps	xmm12, XMMWORD PTR [rsp+96]

; 549  : 	}
; 550  : 
; 551  : #ifdef __ICECORE_H__
; 552  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 553  : 	Log("AABB quantized no-leaf tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 554  : #endif
; 555  : 
; 556  : 	return true;

	mov	al, 1
	movaps	xmm11, XMMWORD PTR [rsp+112]
	movaps	xmm10, XMMWORD PTR [rsp+128]
	movaps	xmm9, XMMWORD PTR [rsp+144]
	movaps	xmm7, XMMWORD PTR [rsp+176]
	movaps	xmm6, XMMWORD PTR [rsp+192]

; 557  : }

	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rbx
	ret	0
?Build@AABBQuantizedNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBQuantizedNoLeafTree::Build
_TEXT	ENDS
pdata	SEGMENT
$pdata$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN149
	DD	imagerel $LN149+63
	DD	imagerel $unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$0$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN149+63
	DD	imagerel $LN149+196
	DD	imagerel $chain$0$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN149+196
	DD	imagerel $LN149+599
	DD	imagerel $chain$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$15$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN149+599
	DD	imagerel $LN149+1199
	DD	imagerel $chain$15$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$pdata$16$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN149+1199
	DD	imagerel $LN149+1301
	DD	imagerel $chain$16$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	01d010aH
	DD	030027003H
$chain$0$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 020821H
	DD	01ae408H
	DD	imagerel $LN149
	DD	imagerel $LN149+63
	DD	imagerel $unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 0145621H
	DD	04e856H
	DD	05d850H
	DD	06c84aH
	DD	07b844H
	DD	08a82dH
	DD	099824H
	DD	0b781bH
	DD	0c6813H
	DD	01bd40bH
	DD	01ae400H
	DD	imagerel $LN149
	DD	imagerel $LN149+63
	DD	imagerel $unwind$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$15$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 082121H
	DD	0a8821H
	DD	01cc418H
	DD	0226410H
	DD	0205408H
	DD	imagerel $LN149+196
	DD	imagerel $LN149+599
	DD	imagerel $chain$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
$chain$16$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 021H
	DD	imagerel $LN149+196
	DD	imagerel $LN149+599
	DD	imagerel $chain$11$?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
Max$94092 = 32
Min$94094 = 48
this$ = 256
CurID$ = 264
tree$ = 264
?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBQuantizedTree::Build

; 431  : {

$LN149:
	push	rbx
	push	rdi
	sub	rsp, 232				; 000000e8H
	mov	rdi, rdx
	mov	rbx, rcx

; 432  : 	// Checkings
; 433  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN29@Build@2
$LN148@Build@2:
	xor	al, al

; 477  : }

	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rbx
	ret	0
$LN29@Build@2:

; 434  : 	// Check the input tree is complete
; 435  : 	udword NbTriangles	= tree->GetNbPrimitives();
; 436  : 	udword NbNodes		= tree->GetNbNodes();
; 437  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	mov	eax, DWORD PTR [rdx+48]
	mov	ecx, DWORD PTR [rdx+64]
	lea	eax, DWORD PTR [rax+rax-1]
	cmp	ecx, eax
	jne	SHORT $LN148@Build@2

; 438  : 
; 439  : 	// Get nodes
; 440  : 	mNbNodes					= NbNodes;
; 441  : 	AABBCollisionNode*	Nodes	= xr_alloc<AABBCollisionNode>(mNbNodes);

	mov	edx, ecx
	mov	DWORD PTR [rbx+8], ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	mov	QWORD PTR [rsp+208], r14
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	r14, rax

; 442  : 	CHECKALLOC			(Nodes);

	test	rax, rax
	je	SHORT $LN147@Build@2

; 443  : 	ZeroMemory			(Nodes,mNbNodes*sizeof(AABBCollisionNode));

	mov	r8d, DWORD PTR [rbx+8]
	mov	rcx, rax
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 5
	xor	edx, edx
	call	QWORD PTR [rax+16]

; 444  : 
; 445  : 	// Build the tree
; 446  : 	udword CurID = 1;
; 447  : 	_BuildCollisionTree(Nodes, 0, CurID, tree);

	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rdi
	xor	edx, edx
	mov	rcx, r14
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildCollisionTree

; 448  : 
; 449  : 	// Quantize
; 450  : 	{
; 451  : 		mNodes		= xr_alloc<AABBQuantizedNode>(mNbNodes);

	mov	eax, DWORD PTR [rbx+8]
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 3
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rcx, rax
	mov	QWORD PTR [rbx+16], rax

; 452  : 		CHECKALLOC	(mNodes);

	test	rax, rax
	jne	SHORT $LN26@Build@2
$LN147@Build@2:
	xor	al, al
	mov	r14, QWORD PTR [rsp+208]

; 477  : }

	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rbx
	ret	0
$LN26@Build@2:

; 453  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNode));

	mov	eax, DWORD PTR [rbx+8]
	mov	QWORD PTR [rsp+216], r13
	movaps	XMMWORD PTR [rsp+192], xmm6
	movaps	XMMWORD PTR [rsp+176], xmm7
	movaps	XMMWORD PTR [rsp+144], xmm9
	movaps	XMMWORD PTR [rsp+128], xmm10
	lea	r8d, DWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	xor	edx, edx
	shl	r8d, 3
	movaps	XMMWORD PTR [rsp+112], xmm11
	movaps	XMMWORD PTR [rsp+96], xmm12
	movaps	XMMWORD PTR [rsp+80], xmm13
	movaps	XMMWORD PTR [rsp+64], xmm14
	call	QWORD PTR [rax+16]

; 454  : 
; 455  : 		// Get max values
; 456  : 		FIND_MAX_VALUES

	movss	xmm5, DWORD PTR __real@ff7fffff
	mov	edx, DWORD PTR [rbx+8]
	movaps	xmm2, xmm5
	movaps	xmm3, xmm5
	movaps	xmm4, xmm5
	movaps	xmm6, xmm5
	movaps	xmm7, xmm5
	test	edx, edx
	je	SHORT $LN23@Build@2

; 453  : 		ZeroMemory	(mNodes,mNbNodes*sizeof(AABBQuantizedNode));

	movss	xmm0, DWORD PTR __mask@@AbsFloat@
	lea	rax, QWORD PTR [r14+8]
	mov	ecx, edx
	npad	7
$LL25@Build@2:

; 454  : 
; 455  : 		// Get max values
; 456  : 		FIND_MAX_VALUES

	movss	xmm1, DWORD PTR [rax-8]
	andps	xmm1, xmm0
	comiss	xmm1, xmm5
	jbe	SHORT $LN22@Build@2
	movaps	xmm5, xmm1
$LN22@Build@2:
	movss	xmm1, DWORD PTR [rax-4]
	andps	xmm1, xmm0
	comiss	xmm1, xmm2
	jbe	SHORT $LN21@Build@2
	movaps	xmm2, xmm1
$LN21@Build@2:
	movss	xmm1, DWORD PTR [rax]
	andps	xmm1, xmm0
	comiss	xmm1, xmm3
	jbe	SHORT $LN20@Build@2
	movaps	xmm3, xmm1
$LN20@Build@2:
	movss	xmm1, DWORD PTR [rax+4]
	andps	xmm1, xmm0
	comiss	xmm1, xmm4
	jbe	SHORT $LN19@Build@2
	movaps	xmm4, xmm1
$LN19@Build@2:
	movss	xmm1, DWORD PTR [rax+8]
	andps	xmm1, xmm0
	comiss	xmm1, xmm6
	jbe	SHORT $LN18@Build@2
	movaps	xmm6, xmm1
$LN18@Build@2:
	movss	xmm1, DWORD PTR [rax+12]
	andps	xmm1, xmm0
	comiss	xmm1, xmm7
	jbe	SHORT $LN24@Build@2
	movaps	xmm7, xmm1
$LN24@Build@2:
	add	rax, 32					; 00000020H
	dec	rcx
	jne	SHORT $LL25@Build@2
$LN23@Build@2:

; 457  : 
; 458  : 		// Quantization
; 459  : 		INIT_QUANTIZATION

	movss	xmm9, DWORD PTR __real@46fffe00
	lea	rdi, QWORD PTR [rbx+36]

; 460  : 
; 461  : 		// Quantize
; 462  : 		uintptr_t Data;
; 463  : 		for(i=0;i<mNbNodes;i++)

	xor	r13d, r13d
	movaps	xmm10, xmm9
	movaps	xmm11, xmm9
	movaps	xmm12, xmm9
	divss	xmm10, xmm5
	divss	xmm11, xmm2
	divss	xmm12, xmm3
	movaps	xmm13, xmm9
	movaps	xmm14, xmm9
	divss	xmm9, xmm7
	divss	xmm13, xmm4
	divss	xmm14, xmm6
	movss	xmm7, DWORD PTR __real@3f800000
	movaps	xmm0, xmm7
	movaps	xmm1, xmm7
	divss	xmm0, xmm10
	divss	xmm1, xmm11
	movss	DWORD PTR [rbx+24], xmm0
	movss	DWORD PTR [rbx+28], xmm1
	movaps	xmm0, xmm7
	movaps	xmm1, xmm7
	divss	xmm0, xmm12
	divss	xmm1, xmm13
	movss	DWORD PTR [rbx+32], xmm0
	movss	DWORD PTR [rdi], xmm1
	movaps	xmm0, xmm7
	movaps	xmm1, xmm7
	divss	xmm0, xmm14
	divss	xmm1, xmm9
	movss	DWORD PTR [rbx+40], xmm0
	movss	DWORD PTR [rbx+44], xmm1
	test	edx, edx
	je	$LN13@Build@2

; 457  : 
; 458  : 		// Quantization
; 459  : 		INIT_QUANTIZATION

	mov	QWORD PTR [rsp+256], rbp
	mov	QWORD PTR [rsp+272], rsi
	mov	QWORD PTR [rsp+224], r12
	movaps	XMMWORD PTR [rsp+160], xmm8
	xorps	xmm8, xmm8

; 460  : 
; 461  : 		// Quantize
; 462  : 		uintptr_t Data;
; 463  : 		for(i=0;i<mNbNodes;i++)

	lea	rsi, QWORD PTR Max$94092[rsp]
	lea	r10, QWORD PTR Min$94094[rsp]
	mov	r12d, r13d
	sub	rsi, rbx
	sub	r10, rbx
	lea	rbp, QWORD PTR [r14+20]
$LL15@Build@2:

; 464  : 		{
; 465  : 			PERFORM_QUANTIZATION

	movaps	xmm0, xmm10
	mov	r9, r12
	mov	r11d, 3
	mulss	xmm0, DWORD PTR [rbp-20]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm11
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax], xmm1
	mulss	xmm0, DWORD PTR [rbp-16]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm12
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax+4], xmm1
	mulss	xmm0, DWORD PTR [rbp-12]
	cvttss2si eax, xmm0
	movaps	xmm0, xmm13
	movsx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax+8], xmm1
	mulss	xmm0, DWORD PTR [rbp-8]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm14
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax+6], xmm1
	mulss	xmm0, DWORD PTR [rbp-4]
	cvttss2si rax, xmm0
	movaps	xmm0, xmm9
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax+10], xmm1
	mulss	xmm0, DWORD PTR [rbp]
	cvttss2si rax, xmm0
	movzx	ecx, ax
	mov	rax, QWORD PTR [rbx+16]
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [r12+rax+14], xmm1
	movss	xmm6, DWORD PTR [rbp-20]
	movss	xmm4, DWORD PTR [rbp-16]
	movaps	xmm0, xmm6
	addss	xmm0, DWORD PTR [rbp-8]
	movss	xmm2, DWORD PTR [rbp-12]
	subss	xmm6, DWORD PTR [rbp-8]
	movss	DWORD PTR Max$94092[rsp], xmm0
	movss	DWORD PTR Min$94094[rsp], xmm6
	movaps	xmm0, xmm4
	addss	xmm0, DWORD PTR [rbp-4]
	subss	xmm4, DWORD PTR [rbp-4]
	movss	DWORD PTR Max$94092[rsp+4], xmm0
	movss	DWORD PTR Min$94094[rsp+4], xmm4
	movaps	xmm0, xmm2
	addss	xmm0, DWORD PTR [rbp]
	subss	xmm2, DWORD PTR [rbp]
	movss	DWORD PTR Max$94092[rsp+8], xmm0
	movss	DWORD PTR Min$94094[rsp+8], xmm2
	npad	12
$LL11@Build@2:
	mov	rax, QWORD PTR [rbx+16]
	movss	xmm2, DWORD PTR [r9+rdi-12]
	lea	rdx, QWORD PTR [r9+rdi]
	lea	rcx, QWORD PTR [r9+rax]
	mov	r8b, 1
	movss	xmm3, DWORD PTR [rsi+rdx-36]
	mulss	xmm2, DWORD PTR [rcx]
$LL8@Build@2:
	movss	xmm1, DWORD PTR [rcx+6]
	mulss	xmm1, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	addss	xmm0, xmm2
	comiss	xmm0, xmm3
	jb	SHORT $LN4@Build@2
	movaps	xmm0, xmm2
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdx+r10-36]
	ja	SHORT $LN4@Build@2
	xor	r8b, r8b
	jmp	SHORT $LN3@Build@2
$LN4@Build@2:
	movss	xmm0, DWORD PTR [rcx+6]
	addss	xmm0, xmm7
	movss	DWORD PTR [rcx+6], xmm0
$LN3@Build@2:
	mov	rax, QWORD PTR [rbx+16]
	ucomiss	xmm8, DWORD PTR [r9+rax+6]
	lea	rcx, QWORD PTR [r9+rax]
	je	SHORT $LN145@Build@2
	test	r8b, r8b
	jne	SHORT $LL8@Build@2
	jmp	SHORT $LN144@Build@2
$LN145@Build@2:
	mov	DWORD PTR [r9+rax+6], 1199570688	; 477fff00H
$LN144@Build@2:
	add	r9, 4
	dec	r11
	jne	SHORT $LL11@Build@2

; 466  : 			REMAP_DATA(mData)

	mov	rcx, QWORD PTR [rbp+4]
	test	cl, 1
	jne	SHORT $LN1@Build@2
	mov	rax, QWORD PTR [rbx+16]
	sub	rcx, r14
	shr	rcx, 5
	lea	rcx, QWORD PTR [rcx+rcx*2]
	lea	rcx, QWORD PTR [rax+rcx*8]
$LN1@Build@2:
	mov	rax, QWORD PTR [rbx+16]
	inc	r13d
	add	r12, 24
	mov	QWORD PTR [r12+rax-8], rcx
	add	rbp, 32					; 00000020H
	sub	rdi, 24
	cmp	r13d, DWORD PTR [rbx+8]
	jb	$LL15@Build@2
	movaps	xmm8, XMMWORD PTR [rsp+160]
	mov	r12, QWORD PTR [rsp+224]
	mov	rsi, QWORD PTR [rsp+272]
	mov	rbp, QWORD PTR [rsp+256]
$LN13@Build@2:

; 467  : 		}
; 468  : 
; 469  : 		xr_free(Nodes);

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	rdx, r14
	call	QWORD PTR __imp_?mem_free@xrMemory@@QEAAXPEAX@Z
	mov	r13, QWORD PTR [rsp+216]
	mov	r14, QWORD PTR [rsp+208]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm13, XMMWORD PTR [rsp+80]
	movaps	xmm12, XMMWORD PTR [rsp+96]

; 470  : 	}
; 471  : 
; 472  : #ifdef __ICECORE_H__
; 473  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 474  : 	Log("AABB quantized tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 475  : #endif
; 476  : 	return true;

	mov	al, 1
	movaps	xmm11, XMMWORD PTR [rsp+112]
	movaps	xmm10, XMMWORD PTR [rsp+128]
	movaps	xmm9, XMMWORD PTR [rsp+144]
	movaps	xmm7, XMMWORD PTR [rsp+176]
	movaps	xmm6, XMMWORD PTR [rsp+192]

; 477  : }

	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rbx
	ret	0
?Build@AABBQuantizedTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBQuantizedTree::Build
_TEXT	ENDS
pdata	SEGMENT
$pdata$?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN13
	DD	imagerel $LN13+148
	DD	imagerel $unwind$?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
CurID$ = 56
tree$ = 56
?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBNoLeafTree::Build

; 281  : {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 282  : 	// Checkings
; 283  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN3@Build@3
$LN12@Build@3:
	xor	al, al

; 298  : 	ASSERT(CurID==mNbNodes);
; 299  : 
; 300  : #ifdef __ICECORE_H__
; 301  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 302  : 	Log("AABB quantized tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 303  : #endif
; 304  : 
; 305  : 	return true;
; 306  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@Build@3:

; 284  : 	// Check the input tree is complete
; 285  : 	udword NbTriangles	= tree->GetNbPrimitives();

	mov	ecx, DWORD PTR [rdx+48]

; 286  : 	udword NbNodes		= tree->GetNbNodes();
; 287  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	lea	eax, DWORD PTR [rcx+rcx-1]
	cmp	DWORD PTR [rdx+64], eax
	jne	SHORT $LN12@Build@3

; 288  : 
; 289  : 	// Get nodes
; 290  : 	mNbNodes	= NbTriangles-1;

	lea	eax, DWORD PTR [rcx-1]
	mov	DWORD PTR [rdi+8], eax

; 291  : 	mNodes		= xr_alloc<AABBNoLeafNode>(mNbNodes);

	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	rdx, QWORD PTR [rax+rax*4]
	shl	rdx, 3
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	rcx, rax
	mov	QWORD PTR [rdi+16], rax

; 292  : 	CHECKALLOC	(mNodes);

	test	rax, rax
	je	SHORT $LN12@Build@3

; 293  : 	ZeroMemory	(mNodes,mNbNodes*sizeof(AABBNoLeafNode));

	mov	eax, DWORD PTR [rdi+8]
	xor	edx, edx
	lea	r8d, DWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 3
	call	QWORD PTR [rax+16]

; 294  : 
; 295  : 	// Build the tree
; 296  : 	udword CurID = 1;
; 297  : 	_BuildNoLeafTree(mNodes, 0, CurID, tree);

	mov	rcx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rbx
	xor	edx, edx
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildNoLeafTree@@YAXPEAVAABBNoLeafNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildNoLeafTree

; 298  : 	ASSERT(CurID==mNbNodes);
; 299  : 
; 300  : #ifdef __ICECORE_H__
; 301  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 302  : 	Log("AABB quantized tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 303  : #endif
; 304  : 
; 305  : 	return true;
; 306  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	al, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Build@AABBNoLeafTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBNoLeafTree::Build
_TEXT	ENDS
pdata	SEGMENT
$pdata$?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD imagerel $LN13
	DD	imagerel $LN13+142
	DD	imagerel $unwind$?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
this$ = 48
CurID$ = 56
tree$ = 56
?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z PROC ; Opcode::AABBCollisionTree::Build

; 227  : {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 228  : 	// Checkings
; 229  : 	if(!tree)	return false;

	test	rdx, rdx
	jne	SHORT $LN3@Build@4
$LN12@Build@4:
	xor	al, al

; 244  : 	ASSERT(CurID==mNbNodes);
; 245  : 
; 246  : #ifdef __ICECORE_H__
; 247  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 248  : 	Log("AABB Collision tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 249  : #endif
; 250  : 
; 251  : 	return true;
; 252  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@Build@4:

; 230  : 	// Check the input tree is complete
; 231  : 	udword NbTriangles	= tree->GetNbPrimitives();
; 232  : 	udword NbNodes		= tree->GetNbNodes();
; 233  : 	if(NbNodes!=NbTriangles*2-1)	return false;

	mov	eax, DWORD PTR [rdx+48]
	mov	ecx, DWORD PTR [rdx+64]
	lea	eax, DWORD PTR [rax+rax-1]
	cmp	ecx, eax
	jne	SHORT $LN12@Build@4

; 234  : 
; 235  : 	// Get nodes
; 236  : 	mNbNodes	= NbNodes;
; 237  : 	mNodes		= xr_alloc<AABBCollisionNode>(mNbNodes);

	mov	edx, ecx
	mov	DWORD PTR [rdi+8], ecx
	mov	rcx, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	rdx, 5
	call	QWORD PTR __imp_?mem_alloc@xrMemory@@QEAAPEAX_K@Z
	mov	QWORD PTR [rdi+16], rax

; 238  : 	CHECKALLOC	(mNodes);

	test	rax, rax
	je	SHORT $LN12@Build@4

; 239  : 	ZeroMemory	(mNodes,mNbNodes*sizeof(AABBCollisionNode));

	mov	r8d, DWORD PTR [rdi+8]
	mov	rcx, rax
	mov	rax, QWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	r8d, 5
	xor	edx, edx
	call	QWORD PTR [rax+16]

; 240  : 
; 241  : 	// Build the tree
; 242  : 	udword CurID = 1;
; 243  : 	_BuildCollisionTree(mNodes, 0, CurID, tree);

	mov	rcx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR CurID$[rsp]
	mov	r9, rbx
	xor	edx, edx
	mov	DWORD PTR CurID$[rsp], 1
	call	?_BuildCollisionTree@@YAXPEAVAABBCollisionNode@Opcode@@IAEAIPEBVAABBTreeNode@2@@Z ; _BuildCollisionTree

; 244  : 	ASSERT(CurID==mNbNodes);
; 245  : 
; 246  : #ifdef __ICECORE_H__
; 247  : 	Log("Original tree: %d nodes, depth %d\n", NbNodes, tree->ComputeDepth());
; 248  : 	Log("AABB Collision tree: %d nodes, %d bytes - Alignment: %d\n", mNbNodes, GetUsedBytes(), Alignment(udword(mNodes)));
; 249  : #endif
; 250  : 
; 251  : 	return true;
; 252  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	al, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Build@AABBCollisionTree@Opcode@@UEAA_NPEAVAABBTree@2@@Z ENDP ; Opcode::AABBCollisionTree::Build
END
