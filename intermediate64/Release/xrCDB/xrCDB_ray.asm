; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?_init@?$ray_collider@$00$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,1,1,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,1,1,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,1,1,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,1,1>::_tri
PUBLIC	?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z	; ray_collider<1,1,1,1>::_prim
PUBLIC	?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,1,1>::_stab
PUBLIC	?_init@?$ray_collider@$00$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,1,1,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,1,1,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,1,1,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,1,0>::_tri
PUBLIC	?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z	; ray_collider<1,1,1,0>::_prim
PUBLIC	?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,1,0>::_stab
PUBLIC	?_init@?$ray_collider@$00$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,1,0,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,1,0,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,1,0,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,0,1>::_tri
PUBLIC	?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z	; ray_collider<1,1,0,1>::_prim
PUBLIC	?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,0,1>::_stab
PUBLIC	?_init@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,1,0,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,1,0,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,1,0,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,0,0>::_tri
PUBLIC	?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z	; ray_collider<1,1,0,0>::_prim
PUBLIC	?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,0,0>::_stab
PUBLIC	?_init@?$ray_collider@$00$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,0,1,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,0,1,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,0,1,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,1,1>::_tri
PUBLIC	?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z	; ray_collider<1,0,1,1>::_prim
PUBLIC	?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,1,1>::_stab
PUBLIC	?_init@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,0,1,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,0,1,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,0,1,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,1,0>::_tri
PUBLIC	?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z	; ray_collider<1,0,1,0>::_prim
PUBLIC	?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,1,0>::_stab
PUBLIC	?_init@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,0,0,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,0,0,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,0,0,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,0,1>::_tri
PUBLIC	?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z	; ray_collider<1,0,0,1>::_prim
PUBLIC	?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,0,1>::_stab
PUBLIC	?_init@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<1,0,0,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<1,0,0,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<1,0,0,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,0,0>::_tri
PUBLIC	?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z	; ray_collider<1,0,0,0>::_prim
PUBLIC	?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,0,0>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,1,1,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,1,1,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,1,1,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,1,1>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z	; ray_collider<0,1,1,1>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,1,1>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,1,1,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,1,1,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,1,1,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,1,0>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z	; ray_collider<0,1,1,0>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,1,0>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,1,0,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,1,0,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,1,0,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,0,1>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z	; ray_collider<0,1,0,1>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,0,1>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,1,0,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,1,0,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,1,0,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,0,0>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z	; ray_collider<0,1,0,0>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,0,0>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,0,1,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,0,1,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,0,1,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,1,1>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z	; ray_collider<0,0,1,1>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,1,1>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,0,1,0>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,0,1,0>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,0,1,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,1,0>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z	; ray_collider<0,0,1,0>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,1,0>::_stab
PUBLIC	?_init@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,0,0,1>::_init
PUBLIC	?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,0,0,1>::_box_fpu
PUBLIC	?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,0,0,1>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,0,1>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z	; ray_collider<0,0,0,1>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,0,1>::_stab
PUBLIC	?div@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z		; _vector3<float>::div
PUBLIC	?_init@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ; ray_collider<0,0,0,0>::_init
PUBLIC	?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z	; _vector3<float>::distance_to_sqr
PUBLIC	??A?$_vector3@M@@QEAAAEAMH@Z			; _vector3<float>::operator[]
PUBLIC	??A?$_vector3@M@@QEBAAEAMH@Z			; _vector3<float>::operator[]
PUBLIC	?uf@@YAAEAIAEAM@Z				; uf
PUBLIC	?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z ; isect_fpu
PUBLIC	?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ; ray_collider<0,0,0,0>::_box_fpu
PUBLIC	?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z	; isect_sse
PUBLIC	?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ; ray_collider<0,0,0,0>::_box_sse
PUBLIC	?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,0,0>::_tri
PUBLIC	?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z ; ray_collider<0,0,0,0>::_prim
PUBLIC	?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,0,0>::_stab
EXTRN	__imp_?ID@CPU@@3U_processor_info@@A:BYTE
EXTRN	__imp_?epsilon@?$numeric_limits@M@std@@SAMXZ:PROC
EPS	DD	03727c5acr			; 1e-005
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
;	COMDAT ?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z PROC	; _vector3<float>::distance_to_sqr, COMDAT

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	movss	xmm2, DWORD PTR [rcx+4]
	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, DWORD PTR [rdx]
	subss	xmm2, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rdx+8]
	mulss	xmm0, xmm0
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm0, xmm2
	addss	xmm0, xmm1
	ret	0
?distance_to_sqr@?$_vector3@M@@QEBAMAEBU1@@Z ENDP	; _vector3<float>::distance_to_sqr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?div@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
?div@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z PROC		; _vector3<float>::div, COMDAT

; 44   : 	ICF	SelfRef	div(const Self &v)						{ x/=v.x;	y/=v.y;  z/=v.z;			return *this;	};

	movss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rcx+4]
	mov	rax, rcx
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx], xmm0
	divss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rcx+4], xmm1
	divss	xmm0, DWORD PTR [rdx+8]
	movss	DWORD PTR [rcx+8], xmm0
	ret	0
?div@?$_vector3@M@@QEAAAEAU1@AEBU1@@Z ENDP		; _vector3<float>::div
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$_vector3@M@@QEBAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$_vector3@M@@QEBAAEAMH@Z PROC			; _vector3<float>::operator[], COMDAT

; 21   : 	ICF	T&			operator[] (int i)	const			{ return *((T*)this + i); }

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]
	ret	0
??A?$_vector3@M@@QEBAAEAMH@Z ENDP			; _vector3<float>::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$_vector3@M@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$_vector3@M@@QEAAAEAMH@Z PROC			; _vector3<float>::operator[], COMDAT

; 20   : 	ICF	T&			operator[] (int i)					{ return *((T*)this + i); }

	movsxd	rax, edx
	lea	rax, QWORD PTR [rcx+rax*4]
	ret	0
??A?$_vector3@M@@QEAAAEAMH@Z ENDP			; _vector3<float>::operator[]
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
pdata	SEGMENT
$pdata$?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z DD 030c01H
	DD	0680cH
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z
_TEXT	SEGMENT
box$ = 32
ray$ = 40
dist$ = 48
?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z PROC	; isect_sse, COMDAT

; 127  : ICF BOOL isect_sse			(const aabb_t &box, const ray_t &ray, float &dist)	{

$LN3:
	sub	rsp, 24

; 128  : 	// you may already have those values hanging around somewhere
; 129  : 	const __m128
; 130  : 		plus_inf	= loadps(ps_cst_plus_inf),
; 131  : 		minus_inf	= loadps(ps_cst_minus_inf);
; 132  : 
; 133  : 	// use whatever's apropriate to load.
; 134  : 	const __m128
; 135  : 		box_min		= loadps(&box.min),
; 136  : 		box_max		= loadps(&box.max),

	movaps	xmm2, XMMWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rsp], xmm6
	movaps	xmm6, XMMWORD PTR [rcx]

; 137  : 		pos			= loadps(&ray.pos),
; 138  : 		inv_dir		= loadps(&ray.inv_dir);
; 139  : 
; 140  : 	// use a div if inverted directions aren't available
; 141  : 	const __m128 l1 = mulps(subps(box_min, pos), inv_dir);
; 142  : 	const __m128 l2 = mulps(subps(box_max, pos), inv_dir);
; 143  : 
; 144  : 	// the order we use for those min/max is vital to filter out
; 145  : 	// NaNs that happens when an inv_dir is +/- inf and
; 146  : 	// (box_min - pos) is 0. inf * 0 = NaN
; 147  : 	const __m128 filtered_l1a = minps(l1, plus_inf);
; 148  : 	const __m128 filtered_l2a = minps(l2, plus_inf);
; 149  : 
; 150  : 	const __m128 filtered_l1b = maxps(l1, minus_inf);
; 151  : 	const __m128 filtered_l2b = maxps(l2, minus_inf);
; 152  : 
; 153  : 	// now that we're back on our feet, test those slabs.
; 154  : 	__m128 lmax = maxps(filtered_l1a, filtered_l2a);
; 155  : 	__m128 lmin = minps(filtered_l1b, filtered_l2b);
; 156  : 
; 157  : 	// unfold back. try to hide the latency of the shufps & co.
; 158  : 	const __m128 lmax0 = rotatelps(lmax);
; 159  : 	const __m128 lmin0 = rotatelps(lmin);
; 160  : 	lmax = minss(lmax, lmax0);
; 161  : 	lmin = maxss(lmin, lmin0);
; 162  : 
; 163  : 	const __m128 lmax1 = muxhps(lmax,lmax);
; 164  : 	const __m128 lmin1 = muxhps(lmin,lmin);
; 165  : 	lmax = minss(lmax, lmax1);
; 166  : 	lmin = maxss(lmin, lmin1);
; 167  : 
; 168  : 	const BOOL ret = _mm_comige_ss(lmax, _mm_setzero_ps()) & _mm_comige_ss(lmax,lmin);

	mov	ecx, 0
	mov	eax, ecx
	subps	xmm6, XMMWORD PTR [rdx]
	subps	xmm2, XMMWORD PTR [rdx]
	mulps	xmm6, XMMWORD PTR [rdx+16]
	mulps	xmm2, XMMWORD PTR [rdx+16]
	mov	edx, 1
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6

; 169  : 
; 170  : 	storess		(lmin, &dist);

	movss	DWORD PTR [r8], xmm6

; 171  : 	//storess	(lmax, &rs.t_far);
; 172  : 
; 173  : 	return  ret;
; 174  : }

	movaps	xmm6, XMMWORD PTR [rsp]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 24
	ret	0
?isect_sse@@YAHAEBUaabb_t@@AEBUray_t@@AEAM@Z ENDP	; isect_sse
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?uf@@YAAEAIAEAM@Z
_TEXT	SEGMENT
x$ = 8
?uf@@YAAEAIAEAM@Z PROC					; uf, COMDAT

; 35   : ICF u32&	uf			(float &x)	{ return (u32&)x; }

	mov	rax, rcx
	ret	0
?uf@@YAAEAIAEAM@Z ENDP					; uf
PUBLIC	__real@b727c5ac
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT __real@b727c5ac
CONST	SEGMENT
__real@b727c5ac DD 0b727c5acr			; -1e-005
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
CONST	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,0,0,0>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri
	xor	al, al
	jmp	$LN13@tri
$LN5@tri:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri
$LN3@tri:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,0,0,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,0,0,1>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@2
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@2
	xor	al, al
	jmp	$LN13@tri@2
$LN5@tri@2:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@2
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@2

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@2
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@2

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@2
$LN3@tri@2:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@2:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@2:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,0,0,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,0,1,0>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@3
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@3
	xor	al, al
	jmp	$LN13@tri@3
$LN5@tri@3:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@3
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@3

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@3
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@3

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@3
$LN3@tri@3:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@3:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@3:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,0,1,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,0,1,1>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@4
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@4
	xor	al, al
	jmp	$LN13@tri@4
$LN5@tri@4:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@4
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@4

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@4
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@4

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@4
$LN3@tri@4:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@4:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@4:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,0,1,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,1,0,0>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@5
	xor	al, al
	jmp	$LN13@tri@5
$LN11@tri@5:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@5
	comiss	xmm3, xmm7
	ja	$LN9@tri@5

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@5
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@5

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@5
$LN9@tri@5:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@5:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@5:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,1,0,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,1,0,1>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@6
	xor	al, al
	jmp	$LN13@tri@6
$LN11@tri@6:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@6
	comiss	xmm3, xmm7
	ja	$LN9@tri@6

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@6
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@6

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@6
$LN9@tri@6:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@6:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@6:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,1,0,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,1,1,0>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@7
	xor	al, al
	jmp	$LN13@tri@7
$LN11@tri@7:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@7
	comiss	xmm3, xmm7
	ja	$LN9@tri@7

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@7
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@7

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@7
$LN9@tri@7:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@7:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@7:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,1,1,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<0,1,1,1>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@8
	xor	al, al
	jmp	$LN13@tri@8
$LN11@tri@8:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@8
	comiss	xmm3, xmm7
	ja	$LN9@tri@8

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@8
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@8

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@8
$LN9@tri@8:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@8:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@8:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<0,1,1,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,0,0,0>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@9
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@9
	xor	al, al
	jmp	$LN13@tri@9
$LN5@tri@9:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@9
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@9

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@9
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@9

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@9
$LN3@tri@9:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@9:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@9:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,0,0,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,0,0,1>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@10
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@10
	xor	al, al
	jmp	$LN13@tri@10
$LN5@tri@10:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@10
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@10

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@10
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@10

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@10
$LN3@tri@10:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@10:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@10:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,0,0,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,0,1,0>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@11
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@11
	xor	al, al
	jmp	$LN13@tri@11
$LN5@tri@11:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@11
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@11

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@11
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@11

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@11
$LN3@tri@11:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@11:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@11:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,0,1,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+311
	DD	imagerel $LN45+602
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN45+602
	DD	imagerel $LN45+650
	DD	imagerel $chain$2$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD 041021H
	DD	068810H
	DD	077805H
	DD	imagerel $LN45
	DD	imagerel $LN45+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z DD 0115e01H
	DD	0f85eH
	DD	01e859H
	DD	02d83cH
	DD	03c837H
	DD	04b827H
	DD	05a822H
	DD	08681dH
	DD	012010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
pvec$3$ = 160
this$ = 160
edge2$3$ = 168
p$ = 168
u$ = 176
v$ = 184
range$ = 192
?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,0,1,1>::_tri, COMDAT

; 224  : 	{

$LN45:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm3, DWORD PTR [rcx+64]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-72], xmm10
	movaps	XMMWORD PTR [rax-88], xmm11
	mov	rbx, r9
	mov	r9, r8
	movss	xmm6, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-104], xmm12
	movaps	XMMWORD PTR [rax-120], xmm13
	movaps	xmm11, xmm1
	mov	eax, DWORD PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	xmm0, xmm6
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm4, xmm3
	movss	xmm5, DWORD PTR [r11+r8*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movss	xmm13, DWORD PTR [r11+r10*4+4]
	movss	xmm12, DWORD PTR [r11+r10*4]
	movss	xmm10, DWORD PTR [r11+r10*4+8]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	subss	xmm15, DWORD PTR [r11+r8*4+4]
	subss	xmm13, DWORD PTR [r11+r8*4+4]
	mulss	xmm11, xmm2
	mulss	xmm0, xmm15
	mulss	xmm4, xmm15
	subss	xmm10, DWORD PTR [r11+r8*4+8]
	subss	xmm11, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm14, xmm5
	subss	xmm12, xmm5
	mulss	xmm1, xmm14
	mulss	xmm6, xmm14
	subss	xmm6, xmm0
	subss	xmm4, xmm1

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm11
	mulss	xmm0, xmm12
	movaps	xmm2, xmm6
	movaps	xmm1, xmm4
	mulss	xmm2, xmm13
	mulss	xmm1, xmm10
	movss	DWORD PTR pvec$3$[rsp], xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;
; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds
; 243  : 			if (u < 0.f || u > det) return false;
; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds
; 246  : 			if (v < 0.f || u + v > det) return false;
; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;
; 250  : 			u		*= inv_det;
; 251  : 			v		*= inv_det;
; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;

	comiss	xmm2, DWORD PTR __real@b727c5ac
	jbe	SHORT $LN5@tri@12
	comiss	xmm2, DWORD PTR EPS
	jae	SHORT $LN5@tri@12
	xor	al, al
	jmp	$LN13@tri@12
$LN5@tri@12:

; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+112], xmm7
	movss	xmm7, DWORD PTR [rcx+36]
	movaps	XMMWORD PTR [rsp+96], xmm8
	movss	xmm8, DWORD PTR __real@3f800000
	subss	xmm7, DWORD PTR [r11+r8*4+4]
	subss	xmm4, xmm5
	divss	xmm8, xmm2

; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm5, xmm7
	movss	xmm2, DWORD PTR [rcx+40]
	subss	xmm2, DWORD PTR [r11+r8*4+8]
	mulss	xmm5, xmm6
	mulss	xmm0, xmm11

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xorps	xmm11, xmm11
	addss	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR pvec$3$[rsp]
	addss	xmm5, xmm1
	mulss	xmm5, xmm8
	comiss	xmm5, xmm11
	movss	DWORD PTR [r9], xmm5
	jb	$LN3@tri@12
	comiss	xmm5, DWORD PTR __real@3f800000
	ja	$LN3@tri@12

; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm6, xmm7
	mulss	xmm2, xmm12
	mulss	xmm0, xmm13
	mulss	xmm6, xmm10
	mulss	xmm10, xmm4
	subss	xmm6, xmm0
	subss	xmm2, xmm10

; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+68]
	mulss	xmm3, xmm6
	mulss	xmm4, xmm13
	addss	xmm3, xmm0
	mulss	xmm7, xmm12
	subss	xmm4, xmm7
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm3, xmm1
	mulss	xmm3, xmm8

; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;

	comiss	xmm3, xmm11
	movss	DWORD PTR [rbx], xmm3
	jb	SHORT $LN3@tri@12
	addss	xmm3, xmm5
	comiss	xmm3, DWORD PTR __real@3f800000
	ja	SHORT $LN3@tri@12

; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle

	mov	rax, QWORD PTR range$[rsp]
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	mulss	xmm6, xmm14
	addss	xmm2, xmm6
	addss	xmm2, xmm4
	mulss	xmm2, xmm8
	movss	DWORD PTR [rax], xmm2

; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN44@tri@12
$LN3@tri@12:

; 259  : 			if (u < 0.0f || u > 1.0f)    return false;

	xor	al, al
$LN44@tri@12:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+96]
$LN13@tri@12:

; 266  : 	}

	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm10, XMMWORD PTR [r11-64]
	movaps	xmm11, XMMWORD PTR [r11-80]
	movaps	xmm12, XMMWORD PTR [r11-96]
	movaps	xmm13, XMMWORD PTR [r11-112]
	movaps	xmm14, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,0,1,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,1,0,0>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@13
	xor	al, al
	jmp	$LN13@tri@13
$LN11@tri@13:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@13
	comiss	xmm3, xmm7
	ja	$LN9@tri@13

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@13
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@13

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@13
$LN9@tri@13:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@13:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@13:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,1,0,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,1,0,1>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@14
	xor	al, al
	jmp	$LN13@tri@14
$LN11@tri@14:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@14
	comiss	xmm3, xmm7
	ja	$LN9@tri@14

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@14
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@14

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@14
$LN9@tri@14:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@14:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@14:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,1,0,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,1,1,0>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@15
	xor	al, al
	jmp	$LN13@tri@15
$LN11@tri@15:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@15
	comiss	xmm3, xmm7
	ja	$LN9@tri@15

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@15
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@15

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@15
$LN9@tri@15:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@15:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@15:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,1,1,0>::_tri
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+311
	DD	imagerel $LN44+588
	DD	imagerel $chain$0$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z DD imagerel $LN44+588
	DD	imagerel $LN44+647
	DD	imagerel $chain$1$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z DD 020821H
	DD	096808H
	DD	imagerel $LN44
	DD	imagerel $LN44+311
	DD	imagerel $unwind$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z DD 0157101H
	DD	0f871H
	DD	01e86cH
	DD	02d855H
	DD	03c839H
	DD	04b834H
	DD	05a82fH
	DD	069827H
	DD	078822H
	DD	08781dH
	DD	014010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z
_TEXT	SEGMENT
edge2$3$ = 176
this$ = 176
p$ = 184
u$ = 192
v$ = 200
range$ = 208
?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z PROC ; ray_collider<1,1,1,1>::_tri, COMDAT

; 224  : 	{

$LN44:
	mov	rax, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 225  : 		Fvector edge1, edge2, tvec, pvec, qvec;
; 226  : 		float	det,inv_det;
; 227  : 		
; 228  : 		// find vectors for two edges sharing vert0
; 229  : 		Fvector&			p0	= verts[ p[0] ];

	mov	r11, QWORD PTR [rcx+16]

; 230  : 		Fvector&			p1	= verts[ p[1] ];
; 231  : 		Fvector&			p2	= verts[ p[2] ];
; 232  : 		edge1.sub			(p1, p0);
; 233  : 		edge2.sub			(p2, p0);
; 234  : 		// begin calculating determinant - also used to calculate U parameter
; 235  : 		// if determinant is near zero, ray lies in plane of triangle
; 236  : 		pvec.crossproduct	(ray.fwd_dir, edge2);

	movss	xmm1, DWORD PTR [rcx+68]
	movss	xmm5, DWORD PTR [rcx+72]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	mov	rbx, r9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	mov	eax, DWORD PTR [rdx]
	movss	xmm10, DWORD PTR [rcx+64]
	lea	r9, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+4]
	lea	r10, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+32], xmm13
	movaps	xmm9, xmm1
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [r11+r9*4]
	lea	rdx, QWORD PTR [rax+rax*2]
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	movaps	xmm13, xmm10
	movss	xmm12, DWORD PTR [r11+r10*4+4]
	movss	xmm11, DWORD PTR [r11+r10*4]
	movss	xmm8, DWORD PTR [r11+r10*4+8]
	movss	xmm15, DWORD PTR [r11+rdx*4+4]
	movss	xmm2, DWORD PTR [r11+rdx*4+8]
	movss	xmm14, DWORD PTR [r11+rdx*4]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm15, DWORD PTR [r11+r9*4+4]
	subss	xmm12, DWORD PTR [r11+r9*4+4]
	mulss	xmm0, xmm15
	mulss	xmm9, xmm2
	mulss	xmm13, xmm15
	subss	xmm8, DWORD PTR [r11+r9*4+8]
	subss	xmm9, xmm0
	subss	xmm14, xmm3
	movaps	xmm0, xmm10
	mulss	xmm0, xmm2
	mulss	xmm1, xmm14
	mulss	xmm5, xmm14
	subss	xmm5, xmm0
	subss	xmm13, xmm1
	subss	xmm11, xmm3

; 237  : 		det = edge1.dotproduct(pvec);

	movaps	xmm0, xmm9
	movaps	xmm7, xmm5
	mulss	xmm0, xmm11
	movaps	xmm1, xmm13
	mulss	xmm7, xmm12
	mulss	xmm1, xmm8
	addss	xmm7, xmm0
	movss	DWORD PTR edge2$3$[rsp], xmm2
	addss	xmm7, xmm1

; 238  : 		if (bCull)
; 239  : 		{						
; 240  : 			if (det < EPS)  return false;

	comiss	xmm7, DWORD PTR EPS
	jae	SHORT $LN11@tri@16
	xor	al, al
	jmp	$LN13@tri@16
$LN11@tri@16:

; 241  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin

	movss	xmm4, DWORD PTR [rcx+32]
	movss	xmm2, DWORD PTR [rcx+40]
	movaps	XMMWORD PTR [rsp+144], xmm6
	movss	xmm6, DWORD PTR [rcx+36]
	subss	xmm2, DWORD PTR [r11+r9*4+8]
	subss	xmm4, xmm3

; 242  : 			u = tvec.dotproduct(pvec);					// calculate U parameter and test bounds

	movaps	xmm0, xmm4
	movaps	xmm1, xmm2
	mulss	xmm0, xmm9
	mulss	xmm1, xmm13
	subss	xmm6, DWORD PTR [r11+r9*4+4]

; 243  : 			if (u < 0.f || u > det) return false;

	xorps	xmm9, xmm9
	movaps	xmm3, xmm6
	mulss	xmm3, xmm5
	addss	xmm3, xmm0
	addss	xmm3, xmm1
	comiss	xmm3, xmm9
	movss	DWORD PTR [r8], xmm3
	jb	$LN9@tri@16
	comiss	xmm3, xmm7
	ja	$LN9@tri@16

; 244  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter

	movaps	xmm0, xmm2
	movaps	xmm5, xmm6
	mulss	xmm2, xmm11
	mulss	xmm0, xmm12
	mulss	xmm5, xmm8
	mulss	xmm8, xmm4
	subss	xmm5, xmm0
	subss	xmm2, xmm8

; 245  : 			v = ray.fwd_dir.dotproduct(qvec);			// calculate V parameter and test bounds

	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [rcx+68]
	mulss	xmm4, xmm12
	mulss	xmm6, xmm11
	subss	xmm4, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+72]
	mulss	xmm10, xmm5
	addss	xmm1, xmm10
	addss	xmm1, xmm0

; 246  : 			if (v < 0.f || u + v > det) return false;

	comiss	xmm1, xmm9
	movss	DWORD PTR [rbx], xmm1
	jb	SHORT $LN9@tri@16
	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	comiss	xmm0, xmm7
	ja	SHORT $LN9@tri@16

; 247  : 			range = edge2.dotproduct(qvec);				// calculate t, scale parameters, ray intersects triangle
; 248  : 			inv_det = 1.0f / det;
; 249  : 			range	*= inv_det;

	mov	rax, QWORD PTR range$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm4, DWORD PTR edge2$3$[rsp]
	mulss	xmm2, xmm15
	divss	xmm0, xmm7
	mulss	xmm5, xmm14
	addss	xmm2, xmm5
	addss	xmm2, xmm4
	mulss	xmm2, xmm0

; 250  : 			u		*= inv_det;

	mulss	xmm3, xmm0

; 251  : 			v		*= inv_det;

	mulss	xmm1, xmm0
	movss	DWORD PTR [rax], xmm2
	movss	DWORD PTR [r8], xmm3
	movss	DWORD PTR [rbx], xmm1

; 252  : 		}
; 253  : 		else
; 254  : 		{			
; 255  : 			if (det > -EPS && det < EPS) return false;
; 256  : 			inv_det = 1.0f / det;
; 257  : 			tvec.sub(ray.pos, p0);						// calculate distance from vert0 to ray origin
; 258  : 			u = tvec.dotproduct(pvec)*inv_det;			// calculate U parameter and test bounds
; 259  : 			if (u < 0.0f || u > 1.0f)    return false;
; 260  : 			qvec.crossproduct(tvec, edge1);				// prepare to test V parameter
; 261  : 			v = ray.fwd_dir.dotproduct(qvec)*inv_det;	// calculate V parameter and test bounds
; 262  : 			if (v < 0.0f || u + v > 1.0f) return false;
; 263  : 			range = edge2.dotproduct(qvec)*inv_det;		// calculate t, ray intersects triangle
; 264  : 		}
; 265  : 		return true;

	mov	al, 1
	jmp	SHORT $LN43@tri@16
$LN9@tri@16:

; 243  : 			if (u < 0.f || u > det) return false;

	xor	al, al
$LN43@tri@16:
	movaps	xmm6, XMMWORD PTR [rsp+144]
$LN13@tri@16:

; 266  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	lea	r11, QWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rbx
	ret	0
?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z ENDP ; ray_collider<1,1,1,1>::_tri
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,0,0,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,0,0,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,0,0,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,0,0,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,0,1,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,0,1,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,0,1,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,0,1,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,1,0,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,1,0,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,1,0,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,1,0,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,1,1,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,1,1,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<0,1,1,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<0,1,1,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,0,0,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,0,0,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,0,0,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,0,0,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,0,1,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,0,1,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,0,1,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,0,1,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,1,0,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,1,0,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,1,0,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,1,0,1>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,1,1,0>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,1,1,0>::_box_sse
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z DD 051f01H
	DD	02781fH
	DD	03681bH
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z
_TEXT	SEGMENT
box$ = 0
this$ = 80
bCenter$ = 88
bExtents$ = 96
dist$ = 104
?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z PROC ; ray_collider<1,1,1,1>::_box_sse, COMDAT

; 216  : 	{

$LN9:
	mov	rax, rsp
	sub	rsp, 72					; 00000048H

; 217  : 		aabb_t		box;
; 218  : 		box.min.sub (bCenter,bExtents);	box.min.pad = 0;

	movss	xmm2, DWORD PTR [rdx+8]
	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm5, DWORD PTR [r8+4]
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm6, DWORD PTR [rdx]
	movss	xmm7, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [r8+8]

; 219  : 		box.max.add	(bCenter,bExtents); box.max.pad = 0;
; 220  :         return 		isect_sse	(box,ray,dist);

	mov	edx, 1
	movaps	xmm0, xmm6
	xorps	xmm1, xmm1
	subss	xmm0, xmm7
	addss	xmm7, xmm6
	movss	DWORD PTR box$[rsp], xmm0
	movss	DWORD PTR [rax-44], xmm1
	movss	DWORD PTR [rax-60], xmm1
	movaps	xmm0, xmm4
	subss	xmm0, xmm5
	addss	xmm5, xmm4
	movss	DWORD PTR [rax-56], xmm7

; 221  : 	}

	movaps	xmm7, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rax-68], xmm0
	movss	DWORD PTR [rax-52], xmm5
	movaps	xmm0, xmm2
	subss	xmm0, xmm3
	addss	xmm3, xmm2
	movss	DWORD PTR [rax-64], xmm0
	movss	DWORD PTR [rax-48], xmm3
	movaps	xmm2, XMMWORD PTR [rax-56]
	movaps	xmm6, XMMWORD PTR box$[rsp]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	mov	eax, ecx
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm1, xmm6
	movaps	xmm0, xmm5
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	xorps	xmm0, xmm0
	comiss	xmm5, xmm6
	movss	DWORD PTR [r9], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	cmovae	eax, edx
	comiss	xmm5, xmm0
	cmovae	ecx, edx
	and	eax, ecx
	add	rsp, 72					; 00000048H
	ret	0
?_box_sse@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAM@Z ENDP ; ray_collider<1,1,1,1>::_box_sse
_TEXT	ENDS
PUBLIC	__real@bf800000
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z DD imagerel $LN270
	DD	imagerel $LN270+617
	DD	imagerel $unwind$?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
CONST	ENDS
;	COMDAT ?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z
_TEXT	SEGMENT
MaxT$ = 0
min$ = 32
max$ = 40
ray$ = 48
coord$ = 56
?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z PROC ; isect_fpu, COMDAT

; 37   : {

$LN270:
	sub	rsp, 24

; 38   : 	Fvector				MaxT;
; 39   : 	MaxT.x=MaxT.y=MaxT.z=-1.0f;

	movss	xmm2, DWORD PTR __real@bf800000

; 40   : 	BOOL Inside			= TRUE;
; 41   : 
; 42   : 	// Find candidate planes.
; 43   : 	if(ray.pos[0] < min[0]) {

	movss	xmm4, DWORD PTR [r8]
	movss	xmm3, DWORD PTR [rcx]
	xor	r10d, r10d
	mov	eax, 1
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	comiss	xmm4, xmm3
	movss	DWORD PTR MaxT$[rsp+4], xmm1
	movss	DWORD PTR MaxT$[rsp], xmm0
	movss	DWORD PTR MaxT$[rsp+8], xmm2
	jae	SHORT $LN34@isect_fpu@2

; 44   : 		coord[0]	= min[0];
; 45   : 		Inside		= FALSE;

	mov	eax, r10d
	movss	DWORD PTR [r9], xmm3

; 46   : 		if(uf(ray.inv_dir[0]))	MaxT[0] = (min[0] - ray.pos[0]) * ray.inv_dir[0]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [r8+16], eax
	je	SHORT $LN30@isect_fpu@2
	movss	xmm0, DWORD PTR [rcx]

; 47   : 	} else if(ray.pos[0] > max[0]) {

	jmp	SHORT $LN265@isect_fpu@2
$LN34@isect_fpu@2:
	movss	xmm3, DWORD PTR [rdx]
	comiss	xmm4, xmm3
	jbe	SHORT $LN30@isect_fpu@2

; 48   : 		coord[0]	= max[0];
; 49   : 		Inside		= FALSE;

	mov	eax, r10d
	movss	DWORD PTR [r9], xmm3

; 50   : 		if(uf(ray.inv_dir[0]))	MaxT[0] = (max[0] - ray.pos[0]) * ray.inv_dir[0]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [r8+16], eax
	je	SHORT $LN30@isect_fpu@2
	movss	xmm0, DWORD PTR [rdx]
$LN265@isect_fpu@2:
	subss	xmm0, DWORD PTR [r8]
	mulss	xmm0, DWORD PTR [r8+16]
	movss	DWORD PTR MaxT$[rsp], xmm0
$LN30@isect_fpu@2:

; 51   : 	}
; 52   : 	if(ray.pos[1] < min[1]) {

	movss	xmm4, DWORD PTR [r8+4]
	movss	xmm3, DWORD PTR [rcx+4]
	comiss	xmm4, xmm3
	jae	SHORT $LN29@isect_fpu@2

; 53   : 		coord[1]	= min[1];
; 54   : 		Inside		= FALSE;

	mov	eax, r10d
	movss	DWORD PTR [r9+4], xmm3

; 55   : 		if(uf(ray.inv_dir[1]))	MaxT[1] = (min[1] - ray.pos[1]) * ray.inv_dir[1]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [r8+20], eax
	je	SHORT $LN25@isect_fpu@2
	movss	xmm1, DWORD PTR [rcx+4]

; 56   : 	} else if(ray.pos[1] > max[1]) {

	jmp	SHORT $LN266@isect_fpu@2
$LN29@isect_fpu@2:
	movss	xmm3, DWORD PTR [rdx+4]
	comiss	xmm4, xmm3
	jbe	SHORT $LN25@isect_fpu@2

; 57   : 		coord[1]	= max[1];
; 58   : 		Inside		= FALSE;

	mov	eax, r10d
	movss	DWORD PTR [r9+4], xmm3

; 59   : 		if(uf(ray.inv_dir[1]))	MaxT[1] = (max[1] - ray.pos[1]) * ray.inv_dir[1]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [r8+20], eax
	je	SHORT $LN25@isect_fpu@2
	movss	xmm1, DWORD PTR [rdx+4]
$LN266@isect_fpu@2:
	subss	xmm1, DWORD PTR [r8+4]
	mulss	xmm1, DWORD PTR [r8+20]
	movss	DWORD PTR MaxT$[rsp+4], xmm1
$LN25@isect_fpu@2:

; 60   : 	}
; 61   : 	if(ray.pos[2] < min[2]) {

	movss	xmm4, DWORD PTR [r8+8]
	movss	xmm3, DWORD PTR [rcx+8]
	comiss	xmm4, xmm3
	jae	$LN24@isect_fpu@2

; 62   : 		coord[2]	= min[2];

	movss	DWORD PTR [r9+8], xmm3

; 63   : 		Inside		= FALSE;
; 64   : 		if(uf(ray.inv_dir[2]))	MaxT[2] = (min[2] - ray.pos[2]) * ray.inv_dir[2]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [r8+24], r10d
	je	SHORT $LN19@isect_fpu@2
	movss	xmm2, DWORD PTR [rcx+8]
$LN267@isect_fpu@2:
	subss	xmm2, DWORD PTR [r8+8]
	mulss	xmm2, DWORD PTR [r8+24]
	movss	DWORD PTR MaxT$[rsp+8], xmm2
$LN19@isect_fpu@2:

; 75   : 	}
; 76   : 
; 77   : 	// Get largest of the maxT's for final choice of intersection
; 78   : 	u32 WhichPlane = 0;
; 79   : 	if	(MaxT[1] > MaxT[0])				WhichPlane = 1;

	comiss	xmm1, xmm0
	jbe	SHORT $LN18@isect_fpu@2
	mov	r10d, 1
$LN18@isect_fpu@2:

; 80   : 	if	(MaxT[2] > MaxT[WhichPlane])	WhichPlane = 2;

	movsxd	rax, r10d
	comiss	xmm2, DWORD PTR MaxT$[rsp+rax*4]
	jbe	SHORT $LN17@isect_fpu@2
	mov	r10d, 2
$LN17@isect_fpu@2:

; 81   : 
; 82   : 	// Check final candidate actually inside box (if max < 0)
; 83   : 	if(uf(MaxT[WhichPlane])&0x80000000) return false;

	movsxd	rax, r10d
	test	DWORD PTR MaxT$[rsp+rax*4], -2147483648	; 80000000H
	jne	$LN5@isect_fpu@2

; 84   : 
; 85   : 	if  (0==WhichPlane)	{	// 1 & 2

	test	r10d, r10d
	jne	$LN15@isect_fpu@2

; 86   : 		coord[1] = ray.pos[1] + MaxT[0] * ray.fwd_dir[1];

	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [r8+36]
	addss	xmm3, DWORD PTR [r8+4]
	movss	DWORD PTR [r9+4], xmm3

; 87   : 		if((coord[1] < min[1]) || (coord[1] > max[1]))	return false;

	comiss	xmm3, DWORD PTR [rcx+4]
	jb	$LN5@isect_fpu@2
	comiss	xmm3, DWORD PTR [rdx+4]
	ja	$LN5@isect_fpu@2

; 88   : 		coord[2] = ray.pos[2] + MaxT[0] * ray.fwd_dir[2];

	mulss	xmm0, DWORD PTR [r8+40]
	addss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [r9+8], xmm0

; 89   : 		if((coord[2] < min[2]) || (coord[2] > max[2]))	return false;

	comiss	xmm0, DWORD PTR [rcx+8]
	jb	$LN5@isect_fpu@2
	comiss	xmm0, DWORD PTR [rdx+8]
	ja	$LN5@isect_fpu@2

; 90   : 		return true;

	lea	eax, QWORD PTR [r10+1]

; 107  : }

	add	rsp, 24
	ret	0
$LN24@isect_fpu@2:

; 65   : 	} else if(ray.pos[2] > max[2]) {

	movss	xmm3, DWORD PTR [rdx+8]
	comiss	xmm4, xmm3
	jbe	SHORT $LN20@isect_fpu@2

; 66   : 		coord[2]	= max[2];

	movss	DWORD PTR [r9+8], xmm3

; 67   : 		Inside		= FALSE;
; 68   : 		if(uf(ray.inv_dir[2]))	MaxT[2] = (max[2] - ray.pos[2]) * ray.inv_dir[2]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [r8+24], r10d
	je	$LN19@isect_fpu@2
	movss	xmm2, DWORD PTR [rdx+8]

; 69   : 	}
; 70   : 
; 71   : 	// Ray ray.pos inside bounding box
; 72   : 	if(Inside)		{

	jmp	$LN267@isect_fpu@2
$LN20@isect_fpu@2:
	test	eax, eax
	je	$LN19@isect_fpu@2

; 73   : 		coord		= ray.pos;

	mov	rcx, QWORD PTR [r8]
	mov	QWORD PTR [r9], rcx
	mov	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], ecx
$LN269@isect_fpu@2:

; 74   : 		return		true;

	mov	eax, 1

; 107  : }

	add	rsp, 24
	ret	0
$LN15@isect_fpu@2:

; 91   : 	}
; 92   : 	if (1==WhichPlane)	{	// 0 & 2

	cmp	r10d, 1
	jne	SHORT $LN10@isect_fpu@2

; 93   : 		coord[0] = ray.pos[0] + MaxT[1] * ray.fwd_dir[0];

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [r8+32]
	addss	xmm0, DWORD PTR [r8]
	movss	DWORD PTR [r9], xmm0

; 94   : 		if((coord[0] < min[0]) || (coord[0] > max[0]))	return false;

	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN5@isect_fpu@2
	comiss	xmm0, DWORD PTR [rdx]
	ja	SHORT $LN5@isect_fpu@2

; 95   : 		coord[2] = ray.pos[2] + MaxT[1] * ray.fwd_dir[2];

	mulss	xmm1, DWORD PTR [r8+40]
	addss	xmm1, DWORD PTR [r8+8]
	movss	DWORD PTR [r9+8], xmm1

; 96   : 		if((coord[2] < min[2]) || (coord[2] > max[2]))	return false;

	comiss	xmm1, DWORD PTR [rcx+8]
	jb	SHORT $LN5@isect_fpu@2
	comiss	xmm1, DWORD PTR [rdx+8]
	ja	SHORT $LN5@isect_fpu@2

; 97   : 		return true;

	mov	eax, r10d

; 107  : }

	add	rsp, 24
	ret	0
$LN10@isect_fpu@2:

; 98   : 	}
; 99   : 	if (2==WhichPlane)	{	// 0 & 1

	cmp	r10d, 2
	jne	SHORT $LN5@isect_fpu@2

; 100  : 		coord[0] = ray.pos[0] + MaxT[2] * ray.fwd_dir[0];

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [r8+32]
	addss	xmm0, DWORD PTR [r8]
	movss	DWORD PTR [r9], xmm0

; 101  : 		if((coord[0] < min[0]) || (coord[0] > max[0]))	return false;

	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN5@isect_fpu@2
	comiss	xmm0, DWORD PTR [rdx]
	ja	SHORT $LN5@isect_fpu@2

; 102  : 		coord[1] = ray.pos[1] + MaxT[2] * ray.fwd_dir[1];

	mulss	xmm2, DWORD PTR [r8+36]
	addss	xmm2, DWORD PTR [r8+4]
	movss	DWORD PTR [r9+4], xmm2

; 103  : 		if((coord[1] < min[1]) || (coord[1] > max[1]))	return false;

	comiss	xmm2, DWORD PTR [rcx+4]
	jb	SHORT $LN5@isect_fpu@2
	comiss	xmm2, DWORD PTR [rdx+4]
	jbe	$LN269@isect_fpu@2
$LN5@isect_fpu@2:

; 104  : 		return true;
; 105  : 	}
; 106  : 	return false;

	xor	eax, eax

; 107  : }

	add	rsp, 24
	ret	0
?isect_fpu@@YAHAEBU?$_vector3@M@@0AEBUray_t@@AEAU1@@Z ENDP ; isect_fpu
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$123459 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,0,0,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$123459[rsp+4], xmm1
	movss	DWORD PTR MaxT$123459[rsp], xmm0
	movss	DWORD PTR MaxT$123459[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu
$LN40@box_fpu:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu
	movaps	xmm0, xmm3
$LN271@box_fpu:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$123459[rsp], xmm0
$LN36@box_fpu:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu
$LN35@box_fpu:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu
	movaps	xmm1, xmm5
$LN272@box_fpu:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$123459[rsp+4], xmm1
$LN31@box_fpu:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu
	movaps	xmm2, xmm7
$LN273@box_fpu:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$123459[rsp+8], xmm2
$LN25@box_fpu:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu
	mov	r8d, edx
$LN24@box_fpu:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$123459[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu
	mov	r8d, 2
$LN23@box_fpu:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$123459[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu
$LN30@box_fpu:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu
$LN26@box_fpu:
	test	eax, eax
	je	$LN25@box_fpu
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu
$LN21@box_fpu:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu
$LN16@box_fpu:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu
	comiss	xmm2, xmm5
$LN274@box_fpu:
	jbe	SHORT $LN41@box_fpu
$LN11@box_fpu:
	xor	edx, edx
$LN41@box_fpu:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,0,0,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$124240 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,0,0,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$124240[rsp+4], xmm1
	movss	DWORD PTR MaxT$124240[rsp], xmm0
	movss	DWORD PTR MaxT$124240[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@2
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@2
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@2
$LN40@box_fpu@2:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@2
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@2
	movaps	xmm0, xmm3
$LN271@box_fpu@2:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$124240[rsp], xmm0
$LN36@box_fpu@2:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@2
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@2
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@2
$LN35@box_fpu@2:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@2
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@2
	movaps	xmm1, xmm5
$LN272@box_fpu@2:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$124240[rsp+4], xmm1
$LN31@box_fpu@2:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@2
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@2
	movaps	xmm2, xmm7
$LN273@box_fpu@2:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$124240[rsp+8], xmm2
$LN25@box_fpu@2:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@2
	mov	r8d, edx
$LN24@box_fpu@2:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$124240[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@2
	mov	r8d, 2
$LN23@box_fpu@2:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$124240[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@2
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@2
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@2
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@2
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@2
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@2
$LN30@box_fpu@2:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@2
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@2
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@2
$LN26@box_fpu@2:
	test	eax, eax
	je	$LN25@box_fpu@2
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@2
$LN21@box_fpu@2:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@2
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@2
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@2
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@2
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@2
$LN16@box_fpu@2:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@2
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@2
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@2
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@2
	comiss	xmm2, xmm5
$LN274@box_fpu@2:
	jbe	SHORT $LN41@box_fpu@2
$LN11@box_fpu@2:
	xor	edx, edx
$LN41@box_fpu@2:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,0,0,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$124753 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,0,1,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$124753[rsp+4], xmm1
	movss	DWORD PTR MaxT$124753[rsp], xmm0
	movss	DWORD PTR MaxT$124753[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@3
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@3
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@3
$LN40@box_fpu@3:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@3
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@3
	movaps	xmm0, xmm3
$LN271@box_fpu@3:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$124753[rsp], xmm0
$LN36@box_fpu@3:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@3
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@3
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@3
$LN35@box_fpu@3:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@3
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@3
	movaps	xmm1, xmm5
$LN272@box_fpu@3:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$124753[rsp+4], xmm1
$LN31@box_fpu@3:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@3
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@3
	movaps	xmm2, xmm7
$LN273@box_fpu@3:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$124753[rsp+8], xmm2
$LN25@box_fpu@3:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@3
	mov	r8d, edx
$LN24@box_fpu@3:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$124753[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@3
	mov	r8d, 2
$LN23@box_fpu@3:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$124753[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@3
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@3
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@3
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@3
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@3
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@3
$LN30@box_fpu@3:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@3
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@3
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@3
$LN26@box_fpu@3:
	test	eax, eax
	je	$LN25@box_fpu@3
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@3
$LN21@box_fpu@3:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@3
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@3
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@3
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@3
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@3
$LN16@box_fpu@3:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@3
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@3
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@3
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@3
	comiss	xmm2, xmm5
$LN274@box_fpu@3:
	jbe	SHORT $LN41@box_fpu@3
$LN11@box_fpu@3:
	xor	edx, edx
$LN41@box_fpu@3:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,0,1,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$125464 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,0,1,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$125464[rsp+4], xmm1
	movss	DWORD PTR MaxT$125464[rsp], xmm0
	movss	DWORD PTR MaxT$125464[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@4
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@4
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@4
$LN40@box_fpu@4:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@4
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@4
	movaps	xmm0, xmm3
$LN271@box_fpu@4:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$125464[rsp], xmm0
$LN36@box_fpu@4:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@4
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@4
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@4
$LN35@box_fpu@4:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@4
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@4
	movaps	xmm1, xmm5
$LN272@box_fpu@4:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$125464[rsp+4], xmm1
$LN31@box_fpu@4:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@4
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@4
	movaps	xmm2, xmm7
$LN273@box_fpu@4:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$125464[rsp+8], xmm2
$LN25@box_fpu@4:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@4
	mov	r8d, edx
$LN24@box_fpu@4:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$125464[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@4
	mov	r8d, 2
$LN23@box_fpu@4:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$125464[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@4
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@4
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@4
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@4
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@4
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@4
$LN30@box_fpu@4:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@4
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@4
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@4
$LN26@box_fpu@4:
	test	eax, eax
	je	$LN25@box_fpu@4
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@4
$LN21@box_fpu@4:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@4
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@4
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@4
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@4
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@4
$LN16@box_fpu@4:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@4
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@4
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@4
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@4
	comiss	xmm2, xmm5
$LN274@box_fpu@4:
	jbe	SHORT $LN41@box_fpu@4
$LN11@box_fpu@4:
	xor	edx, edx
$LN41@box_fpu@4:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,0,1,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$126110 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,1,0,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$126110[rsp+4], xmm1
	movss	DWORD PTR MaxT$126110[rsp], xmm0
	movss	DWORD PTR MaxT$126110[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@5
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@5
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@5
$LN40@box_fpu@5:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@5
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@5
	movaps	xmm0, xmm3
$LN271@box_fpu@5:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$126110[rsp], xmm0
$LN36@box_fpu@5:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@5
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@5
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@5
$LN35@box_fpu@5:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@5
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@5
	movaps	xmm1, xmm5
$LN272@box_fpu@5:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$126110[rsp+4], xmm1
$LN31@box_fpu@5:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@5
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@5
	movaps	xmm2, xmm7
$LN273@box_fpu@5:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$126110[rsp+8], xmm2
$LN25@box_fpu@5:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@5
	mov	r8d, edx
$LN24@box_fpu@5:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$126110[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@5
	mov	r8d, 2
$LN23@box_fpu@5:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$126110[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@5
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@5
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@5
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@5
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@5
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@5
$LN30@box_fpu@5:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@5
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@5
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@5
$LN26@box_fpu@5:
	test	eax, eax
	je	$LN25@box_fpu@5
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@5
$LN21@box_fpu@5:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@5
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@5
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@5
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@5
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@5
$LN16@box_fpu@5:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@5
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@5
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@5
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@5
	comiss	xmm2, xmm5
$LN274@box_fpu@5:
	jbe	SHORT $LN41@box_fpu@5
$LN11@box_fpu@5:
	xor	edx, edx
$LN41@box_fpu@5:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,1,0,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$126694 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,1,0,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$126694[rsp+4], xmm1
	movss	DWORD PTR MaxT$126694[rsp], xmm0
	movss	DWORD PTR MaxT$126694[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@6
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@6
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@6
$LN40@box_fpu@6:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@6
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@6
	movaps	xmm0, xmm3
$LN271@box_fpu@6:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$126694[rsp], xmm0
$LN36@box_fpu@6:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@6
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@6
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@6
$LN35@box_fpu@6:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@6
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@6
	movaps	xmm1, xmm5
$LN272@box_fpu@6:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$126694[rsp+4], xmm1
$LN31@box_fpu@6:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@6
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@6
	movaps	xmm2, xmm7
$LN273@box_fpu@6:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$126694[rsp+8], xmm2
$LN25@box_fpu@6:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@6
	mov	r8d, edx
$LN24@box_fpu@6:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$126694[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@6
	mov	r8d, 2
$LN23@box_fpu@6:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$126694[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@6
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@6
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@6
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@6
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@6
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@6
$LN30@box_fpu@6:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@6
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@6
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@6
$LN26@box_fpu@6:
	test	eax, eax
	je	$LN25@box_fpu@6
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@6
$LN21@box_fpu@6:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@6
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@6
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@6
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@6
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@6
$LN16@box_fpu@6:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@6
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@6
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@6
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@6
	comiss	xmm2, xmm5
$LN274@box_fpu@6:
	jbe	SHORT $LN41@box_fpu@6
$LN11@box_fpu@6:
	xor	edx, edx
$LN41@box_fpu@6:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,1,0,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$127476 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,1,1,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$127476[rsp+4], xmm1
	movss	DWORD PTR MaxT$127476[rsp], xmm0
	movss	DWORD PTR MaxT$127476[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@7
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@7
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@7
$LN40@box_fpu@7:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@7
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@7
	movaps	xmm0, xmm3
$LN271@box_fpu@7:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$127476[rsp], xmm0
$LN36@box_fpu@7:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@7
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@7
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@7
$LN35@box_fpu@7:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@7
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@7
	movaps	xmm1, xmm5
$LN272@box_fpu@7:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$127476[rsp+4], xmm1
$LN31@box_fpu@7:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@7
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@7
	movaps	xmm2, xmm7
$LN273@box_fpu@7:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$127476[rsp+8], xmm2
$LN25@box_fpu@7:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@7
	mov	r8d, edx
$LN24@box_fpu@7:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$127476[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@7
	mov	r8d, 2
$LN23@box_fpu@7:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$127476[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@7
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@7
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@7
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@7
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@7
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@7
$LN30@box_fpu@7:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@7
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@7
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@7
$LN26@box_fpu@7:
	test	eax, eax
	je	$LN25@box_fpu@7
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@7
$LN21@box_fpu@7:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@7
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@7
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@7
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@7
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@7
$LN16@box_fpu@7:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@7
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@7
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@7
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@7
	comiss	xmm2, xmm5
$LN274@box_fpu@7:
	jbe	SHORT $LN41@box_fpu@7
$LN11@box_fpu@7:
	xor	edx, edx
$LN41@box_fpu@7:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,1,1,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$127988 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<0,1,1,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$127988[rsp+4], xmm1
	movss	DWORD PTR MaxT$127988[rsp], xmm0
	movss	DWORD PTR MaxT$127988[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@8
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@8
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@8
$LN40@box_fpu@8:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@8
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@8
	movaps	xmm0, xmm3
$LN271@box_fpu@8:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$127988[rsp], xmm0
$LN36@box_fpu@8:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@8
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@8
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@8
$LN35@box_fpu@8:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@8
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@8
	movaps	xmm1, xmm5
$LN272@box_fpu@8:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$127988[rsp+4], xmm1
$LN31@box_fpu@8:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@8
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@8
	movaps	xmm2, xmm7
$LN273@box_fpu@8:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$127988[rsp+8], xmm2
$LN25@box_fpu@8:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@8
	mov	r8d, edx
$LN24@box_fpu@8:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$127988[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@8
	mov	r8d, 2
$LN23@box_fpu@8:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$127988[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@8
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@8
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@8
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@8
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@8
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@8
$LN30@box_fpu@8:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@8
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@8
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@8
$LN26@box_fpu@8:
	test	eax, eax
	je	$LN25@box_fpu@8
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@8
$LN21@box_fpu@8:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@8
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@8
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@8
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@8
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@8
$LN16@box_fpu@8:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@8
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@8
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@8
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@8
	comiss	xmm2, xmm5
$LN274@box_fpu@8:
	jbe	SHORT $LN41@box_fpu@8
$LN11@box_fpu@8:
	xor	edx, edx
$LN41@box_fpu@8:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$0A@$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<0,1,1,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$128635 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,0,0,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$128635[rsp+4], xmm1
	movss	DWORD PTR MaxT$128635[rsp], xmm0
	movss	DWORD PTR MaxT$128635[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@9
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@9
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@9
$LN40@box_fpu@9:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@9
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@9
	movaps	xmm0, xmm3
$LN271@box_fpu@9:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$128635[rsp], xmm0
$LN36@box_fpu@9:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@9
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@9
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@9
$LN35@box_fpu@9:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@9
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@9
	movaps	xmm1, xmm5
$LN272@box_fpu@9:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$128635[rsp+4], xmm1
$LN31@box_fpu@9:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@9
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@9
	movaps	xmm2, xmm7
$LN273@box_fpu@9:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$128635[rsp+8], xmm2
$LN25@box_fpu@9:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@9
	mov	r8d, edx
$LN24@box_fpu@9:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$128635[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@9
	mov	r8d, 2
$LN23@box_fpu@9:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$128635[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@9
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@9
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@9
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@9
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@9
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@9
$LN30@box_fpu@9:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@9
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@9
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@9
$LN26@box_fpu@9:
	test	eax, eax
	je	$LN25@box_fpu@9
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@9
$LN21@box_fpu@9:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@9
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@9
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@9
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@9
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@9
$LN16@box_fpu@9:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@9
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@9
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@9
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@9
	comiss	xmm2, xmm5
$LN274@box_fpu@9:
	jbe	SHORT $LN41@box_fpu@9
$LN11@box_fpu@9:
	xor	edx, edx
$LN41@box_fpu@9:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$0A@$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,0,0,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$129432 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,0,0,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$129432[rsp+4], xmm1
	movss	DWORD PTR MaxT$129432[rsp], xmm0
	movss	DWORD PTR MaxT$129432[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@10
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@10
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@10
$LN40@box_fpu@10:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@10
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@10
	movaps	xmm0, xmm3
$LN271@box_fpu@10:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$129432[rsp], xmm0
$LN36@box_fpu@10:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@10
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@10
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@10
$LN35@box_fpu@10:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@10
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@10
	movaps	xmm1, xmm5
$LN272@box_fpu@10:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$129432[rsp+4], xmm1
$LN31@box_fpu@10:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@10
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@10
	movaps	xmm2, xmm7
$LN273@box_fpu@10:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$129432[rsp+8], xmm2
$LN25@box_fpu@10:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@10
	mov	r8d, edx
$LN24@box_fpu@10:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$129432[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@10
	mov	r8d, 2
$LN23@box_fpu@10:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$129432[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@10
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@10
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@10
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@10
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@10
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@10
$LN30@box_fpu@10:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@10
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@10
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@10
$LN26@box_fpu@10:
	test	eax, eax
	je	$LN25@box_fpu@10
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@10
$LN21@box_fpu@10:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@10
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@10
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@10
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@10
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@10
$LN16@box_fpu@10:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@10
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@10
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@10
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@10
	comiss	xmm2, xmm5
$LN274@box_fpu@10:
	jbe	SHORT $LN41@box_fpu@10
$LN11@box_fpu@10:
	xor	edx, edx
$LN41@box_fpu@10:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$0A@$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,0,0,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$129929 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,0,1,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$129929[rsp+4], xmm1
	movss	DWORD PTR MaxT$129929[rsp], xmm0
	movss	DWORD PTR MaxT$129929[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@11
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@11
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@11
$LN40@box_fpu@11:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@11
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@11
	movaps	xmm0, xmm3
$LN271@box_fpu@11:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$129929[rsp], xmm0
$LN36@box_fpu@11:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@11
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@11
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@11
$LN35@box_fpu@11:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@11
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@11
	movaps	xmm1, xmm5
$LN272@box_fpu@11:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$129929[rsp+4], xmm1
$LN31@box_fpu@11:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@11
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@11
	movaps	xmm2, xmm7
$LN273@box_fpu@11:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$129929[rsp+8], xmm2
$LN25@box_fpu@11:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@11
	mov	r8d, edx
$LN24@box_fpu@11:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$129929[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@11
	mov	r8d, 2
$LN23@box_fpu@11:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$129929[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@11
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@11
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@11
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@11
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@11
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@11
$LN30@box_fpu@11:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@11
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@11
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@11
$LN26@box_fpu@11:
	test	eax, eax
	je	$LN25@box_fpu@11
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@11
$LN21@box_fpu@11:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@11
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@11
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@11
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@11
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@11
$LN16@box_fpu@11:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@11
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@11
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@11
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@11
	comiss	xmm2, xmm5
$LN274@box_fpu@11:
	jbe	SHORT $LN41@box_fpu@11
$LN11@box_fpu@11:
	xor	edx, edx
$LN41@box_fpu@11:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$0A@$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,0,1,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$130603 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,0,1,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$130603[rsp+4], xmm1
	movss	DWORD PTR MaxT$130603[rsp], xmm0
	movss	DWORD PTR MaxT$130603[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@12
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@12
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@12
$LN40@box_fpu@12:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@12
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@12
	movaps	xmm0, xmm3
$LN271@box_fpu@12:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$130603[rsp], xmm0
$LN36@box_fpu@12:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@12
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@12
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@12
$LN35@box_fpu@12:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@12
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@12
	movaps	xmm1, xmm5
$LN272@box_fpu@12:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$130603[rsp+4], xmm1
$LN31@box_fpu@12:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@12
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@12
	movaps	xmm2, xmm7
$LN273@box_fpu@12:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$130603[rsp+8], xmm2
$LN25@box_fpu@12:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@12
	mov	r8d, edx
$LN24@box_fpu@12:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$130603[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@12
	mov	r8d, 2
$LN23@box_fpu@12:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$130603[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@12
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@12
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@12
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@12
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@12
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@12
$LN30@box_fpu@12:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@12
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@12
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@12
$LN26@box_fpu@12:
	test	eax, eax
	je	$LN25@box_fpu@12
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@12
$LN21@box_fpu@12:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@12
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@12
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@12
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@12
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@12
$LN16@box_fpu@12:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@12
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@12
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@12
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@12
	comiss	xmm2, xmm5
$LN274@box_fpu@12:
	jbe	SHORT $LN41@box_fpu@12
$LN11@box_fpu@12:
	xor	edx, edx
$LN41@box_fpu@12:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$0A@$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,0,1,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$131323 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,1,0,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$131323[rsp+4], xmm1
	movss	DWORD PTR MaxT$131323[rsp], xmm0
	movss	DWORD PTR MaxT$131323[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@13
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@13
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@13
$LN40@box_fpu@13:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@13
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@13
	movaps	xmm0, xmm3
$LN271@box_fpu@13:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$131323[rsp], xmm0
$LN36@box_fpu@13:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@13
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@13
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@13
$LN35@box_fpu@13:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@13
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@13
	movaps	xmm1, xmm5
$LN272@box_fpu@13:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$131323[rsp+4], xmm1
$LN31@box_fpu@13:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@13
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@13
	movaps	xmm2, xmm7
$LN273@box_fpu@13:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$131323[rsp+8], xmm2
$LN25@box_fpu@13:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@13
	mov	r8d, edx
$LN24@box_fpu@13:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$131323[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@13
	mov	r8d, 2
$LN23@box_fpu@13:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$131323[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@13
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@13
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@13
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@13
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@13
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@13
$LN30@box_fpu@13:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@13
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@13
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@13
$LN26@box_fpu@13:
	test	eax, eax
	je	$LN25@box_fpu@13
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@13
$LN21@box_fpu@13:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@13
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@13
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@13
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@13
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@13
$LN16@box_fpu@13:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@13
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@13
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@13
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@13
	comiss	xmm2, xmm5
$LN274@box_fpu@13:
	jbe	SHORT $LN41@box_fpu@13
$LN11@box_fpu@13:
	xor	edx, edx
$LN41@box_fpu@13:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$00$0A@$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,1,0,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$131870 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,1,0,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$131870[rsp+4], xmm1
	movss	DWORD PTR MaxT$131870[rsp], xmm0
	movss	DWORD PTR MaxT$131870[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@14
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@14
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@14
$LN40@box_fpu@14:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@14
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@14
	movaps	xmm0, xmm3
$LN271@box_fpu@14:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$131870[rsp], xmm0
$LN36@box_fpu@14:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@14
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@14
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@14
$LN35@box_fpu@14:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@14
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@14
	movaps	xmm1, xmm5
$LN272@box_fpu@14:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$131870[rsp+4], xmm1
$LN31@box_fpu@14:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@14
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@14
	movaps	xmm2, xmm7
$LN273@box_fpu@14:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$131870[rsp+8], xmm2
$LN25@box_fpu@14:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@14
	mov	r8d, edx
$LN24@box_fpu@14:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$131870[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@14
	mov	r8d, 2
$LN23@box_fpu@14:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$131870[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@14
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@14
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@14
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@14
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@14
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@14
$LN30@box_fpu@14:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@14
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@14
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@14
$LN26@box_fpu@14:
	test	eax, eax
	je	$LN25@box_fpu@14
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@14
$LN21@box_fpu@14:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@14
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@14
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@14
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@14
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@14
$LN16@box_fpu@14:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@14
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@14
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@14
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@14
	comiss	xmm2, xmm5
$LN274@box_fpu@14:
	jbe	SHORT $LN41@box_fpu@14
$LN11@box_fpu@14:
	xor	edx, edx
$LN41@box_fpu@14:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$00$0A@$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,1,0,1>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$132615 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,1,1,0>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$132615[rsp+4], xmm1
	movss	DWORD PTR MaxT$132615[rsp], xmm0
	movss	DWORD PTR MaxT$132615[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@15
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@15
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@15
$LN40@box_fpu@15:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@15
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@15
	movaps	xmm0, xmm3
$LN271@box_fpu@15:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$132615[rsp], xmm0
$LN36@box_fpu@15:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@15
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@15
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@15
$LN35@box_fpu@15:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@15
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@15
	movaps	xmm1, xmm5
$LN272@box_fpu@15:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$132615[rsp+4], xmm1
$LN31@box_fpu@15:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@15
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@15
	movaps	xmm2, xmm7
$LN273@box_fpu@15:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$132615[rsp+8], xmm2
$LN25@box_fpu@15:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@15
	mov	r8d, edx
$LN24@box_fpu@15:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$132615[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@15
	mov	r8d, 2
$LN23@box_fpu@15:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$132615[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@15
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@15
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@15
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@15
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@15
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@15
$LN30@box_fpu@15:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@15
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@15
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@15
$LN26@box_fpu@15:
	test	eax, eax
	je	$LN25@box_fpu@15
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@15
$LN21@box_fpu@15:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@15
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@15
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@15
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@15
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@15
$LN16@box_fpu@15:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@15
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@15
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@15
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@15
	comiss	xmm2, xmm5
$LN274@box_fpu@15:
	jbe	SHORT $LN41@box_fpu@15
$LN11@box_fpu@15:
	xor	edx, edx
$LN41@box_fpu@15:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$00$00$0A@@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,1,1,0>::_box_fpu
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcore\_vector3d.h
pdata	SEGMENT
$pdata$?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD imagerel $LN275
	DD	imagerel $LN275+632
	DD	imagerel $unwind$?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z DD 094001H
	DD	019840H
	DD	028822H
	DD	03781cH
	DD	046817H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z
_TEXT	SEGMENT
MaxT$133193 = 0
this$ = 96
bCenter$ = 104
bExtents$ = 112
coord$ = 120
?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z PROC ; ray_collider<1,1,1,1>::_box_fpu, COMDAT

; 208  : 	{

$LN275:
	sub	rsp, 88					; 00000058H

; 209  : 		Fbox		BB;
; 210  : 		BB.min.sub	(bCenter,bExtents);

	movss	xmm2, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8

; 211  : 		BB.max.add	(bCenter,bExtents);
; 212  :         return 		isect_fpu	(BB.min,BB.max,ray,coord);

	mov	edx, 1
	mov	eax, edx
	movss	xmm3, DWORD PTR [r8]
	movss	xmm5, DWORD PTR [r8+4]
	movss	xmm4, DWORD PTR [r8+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	movaps	xmm9, xmm2
	movaps	xmm8, xmm1
	movaps	xmm7, xmm0
	movss	xmm6, DWORD PTR [rcx+32]
	subss	xmm9, xmm3
	addss	xmm3, xmm2
	comiss	xmm6, xmm9
	movss	xmm2, DWORD PTR __real@bf800000
	subss	xmm8, xmm5
	subss	xmm7, xmm4
	addss	xmm5, xmm1
	addss	xmm4, xmm0
	movaps	xmm1, xmm2
	movaps	xmm0, xmm2
	movss	DWORD PTR MaxT$133193[rsp+4], xmm1
	movss	DWORD PTR MaxT$133193[rsp], xmm0
	movss	DWORD PTR MaxT$133193[rsp+8], xmm2
	jae	SHORT $LN40@box_fpu@16
	xor	eax, eax
	movss	DWORD PTR [r9], xmm9
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@16
	movaps	xmm0, xmm9
	jmp	SHORT $LN271@box_fpu@16
$LN40@box_fpu@16:
	comiss	xmm6, xmm3
	jbe	SHORT $LN36@box_fpu@16
	xor	eax, eax
	movss	DWORD PTR [r9], xmm3
	cmp	DWORD PTR [rcx+48], eax
	je	SHORT $LN36@box_fpu@16
	movaps	xmm0, xmm3
$LN271@box_fpu@16:
	subss	xmm0, DWORD PTR [rcx+32]
	mulss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR MaxT$133193[rsp], xmm0
$LN36@box_fpu@16:
	movss	xmm6, DWORD PTR [rcx+36]
	comiss	xmm6, xmm8
	jae	SHORT $LN35@box_fpu@16
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm8
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@16
	movaps	xmm1, xmm8
	jmp	SHORT $LN272@box_fpu@16
$LN35@box_fpu@16:
	comiss	xmm6, xmm5
	jbe	SHORT $LN31@box_fpu@16
	xor	eax, eax
	movss	DWORD PTR [r9+4], xmm5
	cmp	DWORD PTR [rcx+52], eax
	je	SHORT $LN31@box_fpu@16
	movaps	xmm1, xmm5
$LN272@box_fpu@16:
	subss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR MaxT$133193[rsp+4], xmm1
$LN31@box_fpu@16:
	movss	xmm6, DWORD PTR [rcx+40]
	comiss	xmm6, xmm7
	jae	$LN30@box_fpu@16
	movss	DWORD PTR [r9+8], xmm7
	cmp	DWORD PTR [rcx+56], 0
	je	SHORT $LN25@box_fpu@16
	movaps	xmm2, xmm7
$LN273@box_fpu@16:
	subss	xmm2, DWORD PTR [rcx+40]
	mulss	xmm2, DWORD PTR [rcx+56]
	movss	DWORD PTR MaxT$133193[rsp+8], xmm2
$LN25@box_fpu@16:
	xor	r8d, r8d
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@box_fpu@16
	mov	r8d, edx
$LN24@box_fpu@16:
	movsxd	rax, r8d
	comiss	xmm2, DWORD PTR MaxT$133193[rsp+rax*4]
	jbe	SHORT $LN23@box_fpu@16
	mov	r8d, 2
$LN23@box_fpu@16:
	movsxd	rax, r8d
	test	DWORD PTR MaxT$133193[rsp+rax*4], -2147483648 ; 80000000H
	jne	$LN11@box_fpu@16
	test	r8d, r8d
	jne	SHORT $LN21@box_fpu@16
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR [rcx+68]
	addss	xmm3, DWORD PTR [rcx+36]
	comiss	xmm3, xmm8
	movss	DWORD PTR [r9+4], xmm3
	jb	$LN11@box_fpu@16
	comiss	xmm3, xmm5
	ja	$LN11@box_fpu@16
	mulss	xmm0, DWORD PTR [rcx+72]
	addss	xmm0, DWORD PTR [rcx+40]
	comiss	xmm0, xmm7
	movss	DWORD PTR [r9+8], xmm0
	jb	$LN11@box_fpu@16
	comiss	xmm0, xmm4
	jmp	$LN274@box_fpu@16
$LN30@box_fpu@16:
	comiss	xmm6, xmm4
	jbe	SHORT $LN26@box_fpu@16
	movss	DWORD PTR [r9+8], xmm4
	cmp	DWORD PTR [rcx+56], 0
	je	$LN25@box_fpu@16
	movaps	xmm2, xmm4
	jmp	$LN273@box_fpu@16
$LN26@box_fpu@16:
	test	eax, eax
	je	$LN25@box_fpu@16
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r9], rax
	mov	eax, DWORD PTR [rcx+40]
	mov	DWORD PTR [r9+8], eax
	jmp	SHORT $LN41@box_fpu@16
$LN21@box_fpu@16:
	cmp	r8d, edx
	jne	SHORT $LN16@box_fpu@16
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@16
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@16
	mulss	xmm1, DWORD PTR [rcx+72]
	addss	xmm1, DWORD PTR [rcx+40]
	comiss	xmm1, xmm7
	movss	DWORD PTR [r9+8], xmm1
	jb	SHORT $LN11@box_fpu@16
	comiss	xmm1, xmm4
	jmp	SHORT $LN274@box_fpu@16
$LN16@box_fpu@16:
	cmp	r8d, 2
	jne	SHORT $LN11@box_fpu@16
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+64]
	addss	xmm0, DWORD PTR [rcx+32]
	comiss	xmm0, xmm9
	movss	DWORD PTR [r9], xmm0
	jb	SHORT $LN11@box_fpu@16
	comiss	xmm0, xmm3
	ja	SHORT $LN11@box_fpu@16
	mulss	xmm2, DWORD PTR [rcx+68]
	addss	xmm2, DWORD PTR [rcx+36]
	comiss	xmm2, xmm8
	movss	DWORD PTR [r9+4], xmm2
	jb	SHORT $LN11@box_fpu@16
	comiss	xmm2, xmm5
$LN274@box_fpu@16:
	jbe	SHORT $LN41@box_fpu@16
$LN11@box_fpu@16:
	xor	edx, edx
$LN41@box_fpu@16:

; 213  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	mov	eax, edx
	movaps	xmm9, XMMWORD PTR [rsp+16]
	add	rsp, 88					; 00000058H
	ret	0
?_box_fpu@?$ray_collider@$00$00$00$00@@QEAAHAEBU?$_vector3@M@@0AEAU2@@Z ENDP ; ray_collider<1,1,1,1>::_box_fpu
_TEXT	ENDS
PUBLIC	__real@34000000
;	COMDAT __real@34000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\limits
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-007
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
CONST	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,0,0,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init
	mov	DWORD PTR [rcx+48], eax
$LN5@init:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init
	mov	DWORD PTR [rcx+52], eax
$LN3@init:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init
	mov	DWORD PTR [rcx+56], eax
$LN1@init:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,0,0,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,0,0,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@2
	mov	DWORD PTR [rcx+48], eax
$LN5@init@2:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@2
	mov	DWORD PTR [rcx+52], eax
$LN3@init@2:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@2
	mov	DWORD PTR [rcx+56], eax
$LN1@init@2:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,0,0,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,0,1,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@3
	mov	DWORD PTR [rcx+48], eax
$LN5@init@3:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@3
	mov	DWORD PTR [rcx+52], eax
$LN3@init@3:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@3
	mov	DWORD PTR [rcx+56], eax
$LN1@init@3:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,0,1,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,0,1,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@4
	mov	DWORD PTR [rcx+48], eax
$LN5@init@4:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@4
	mov	DWORD PTR [rcx+52], eax
$LN3@init@4:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@4
	mov	DWORD PTR [rcx+56], eax
$LN1@init@4:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,0,1,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,1,0,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@5
	mov	DWORD PTR [rcx+48], eax
$LN5@init@5:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@5
	mov	DWORD PTR [rcx+52], eax
$LN3@init@5:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@5
	mov	DWORD PTR [rcx+56], eax
$LN1@init@5:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,1,0,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,1,0,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@6
	mov	DWORD PTR [rcx+48], eax
$LN5@init@6:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@6
	mov	DWORD PTR [rcx+52], eax
$LN3@init@6:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@6
	mov	DWORD PTR [rcx+56], eax
$LN1@init@6:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,1,0,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,1,1,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@7
	mov	DWORD PTR [rcx+48], eax
$LN5@init@7:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@7
	mov	DWORD PTR [rcx+52], eax
$LN3@init@7:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@7
	mov	DWORD PTR [rcx+56], eax
$LN1@init@7:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,1,1,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$0A@$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$0A@$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<0,1,1,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;
; 197  : 		rRange2			= R*R;
; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;

	movss	xmm3, DWORD PTR __real@34000000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR D$[rsp]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	divss	xmm0, DWORD PTR [rdx]
	movss	DWORD PTR [rcx+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+52], xmm0
	divss	xmm1, DWORD PTR [rdx+8]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rcx+56], xmm1
	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+64], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+68], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+72], eax
	xor	eax, eax
	movss	DWORD PTR [rcx+80], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR [rcx+84], xmm0
	movss	xmm1, DWORD PTR [rdx]
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	andps	xmm1, xmm2
	comiss	xmm1, xmm3
	ja	SHORT $LN5@init@8
	mov	DWORD PTR [rcx+48], eax
$LN5@init@8:

; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;

	movss	xmm0, DWORD PTR [rdx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN3@init@8
	mov	DWORD PTR [rcx+52], eax
$LN3@init@8:

; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;

	movss	xmm0, DWORD PTR [rdx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN1@init@8
	mov	DWORD PTR [rcx+56], eax
$LN1@init@8:

; 203  : 		}
; 204  : 	}

	fatret	0
?_init@?$ray_collider@$0A@$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<0,1,1,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,0,0,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,0,0,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,0,0,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,0,0,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,0,1,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,0,1,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,0,1,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$0A@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,0,1,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,1,0,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,1,0,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,1,0,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$00$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,1,0,1>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,1,1,0>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$00$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,1,1,0>::_init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_init@?$ray_collider@$00$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z
_TEXT	SEGMENT
this$ = 8
CL$ = 16
V$ = 24
T$ = 32
C$ = 40
D$ = 48
R$ = 56
?_init@?$ray_collider@$00$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z PROC ; ray_collider<1,1,1,1>::_init, COMDAT

; 190  : 		dest			= CL;
; 191  : 		tris			= T;
; 192  : 		verts			= V;
; 193  : 		ray.pos.set		(C);
; 194  : 		ray.inv_dir.set	(1.f,1.f,1.f).div(D);

	movss	xmm1, DWORD PTR __real@3f800000
	mov	QWORD PTR [rcx], rdx
	mov	rdx, QWORD PTR C$[rsp]
	mov	QWORD PTR [rcx+8], r9
	mov	QWORD PTR [rcx+16], r8
	mov	eax, DWORD PTR [rdx]
	movaps	xmm0, xmm1
	mov	DWORD PTR [rcx+32], eax
	mov	eax, DWORD PTR [rdx+4]
	mov	r10, rcx
	mov	DWORD PTR [rcx+36], eax
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+40], eax
	mov	DWORD PTR [rcx+48], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	DWORD PTR [rcx+56], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR D$[rsp]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+48], xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+52], xmm0
	divss	xmm1, DWORD PTR [rcx+8]

; 195  : 		ray.fwd_dir.set	(D);
; 196  : 		rRange			= R;

	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [r10+56], xmm1
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r10+64], eax
	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [r10+68], eax
	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [r10+72], eax
	movss	DWORD PTR [r10+80], xmm0

; 197  : 		rRange2			= R*R;

	mulss	xmm0, xmm0
	movss	DWORD PTR [r10+84], xmm0

; 198  : 		if (!bUseSSE)	{
; 199  : 			// for FPU - zero out inf
; 200  : 			if (_abs(D.x)>flt_eps){}	else ray.inv_dir.x=0;
; 201  : 			if (_abs(D.y)>flt_eps){}	else ray.inv_dir.y=0;
; 202  : 			if (_abs(D.z)>flt_eps){}	else ray.inv_dir.z=0;
; 203  : 		}
; 204  : 	}

	ret	0
?_init@?$ray_collider@$00$00$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3M@Z ENDP ; ray_collider<1,1,1,1>::_init
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z PROC	; ray_collider<0,0,0,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,0,0>::_tri
	test	al, al
	je	$LN6@prim

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z ENDP	; ray_collider<0,0,0,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z PROC	; ray_collider<0,0,0,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,0,1>::_tri
	test	al, al
	je	$LN2@prim@2

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@2
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@2

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@2

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@2

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@2
$LN4@prim@2:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@2:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@2:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@2:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z ENDP	; ray_collider<0,0,0,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z PROC	; ray_collider<0,0,1,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,1,0>::_tri
	test	al, al
	je	$LN6@prim@3

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@3
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@3

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@3:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@3:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z ENDP	; ray_collider<0,0,1,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z PROC	; ray_collider<0,0,1,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$0A@$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,0,1,1>::_tri
	test	al, al
	je	$LN2@prim@4

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@4
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@4

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@4

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@4

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@4
$LN4@prim@4:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@4:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@4:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@4:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z ENDP	; ray_collider<0,0,1,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z PROC	; ray_collider<0,1,0,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,0,0>::_tri
	test	al, al
	je	$LN6@prim@5

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@5
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@5

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@5:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@5:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z ENDP	; ray_collider<0,1,0,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z PROC	; ray_collider<0,1,0,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$00$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,0,1>::_tri
	test	al, al
	je	$LN2@prim@6

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@6
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@6

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@6

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@6

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@6
$LN4@prim@6:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@6:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@6:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@6:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z ENDP	; ray_collider<0,1,0,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z PROC	; ray_collider<0,1,1,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$00$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,1,0>::_tri
	test	al, al
	je	$LN6@prim@7

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@7
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@7

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@7:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@7:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z ENDP	; ray_collider<0,1,1,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z PROC	; ray_collider<0,1,1,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$0A@$00$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<0,1,1,1>::_tri
	test	al, al
	je	$LN2@prim@8

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@8
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@8

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@8

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@8

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@8
$LN4@prim@8:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@8:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@8:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@8:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z ENDP	; ray_collider<0,1,1,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z PROC	; ray_collider<1,0,0,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$0A@$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,0,0>::_tri
	test	al, al
	je	$LN6@prim@9

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@9
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@9

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@9:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@9:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z ENDP	; ray_collider<1,0,0,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z PROC	; ray_collider<1,0,0,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$0A@$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,0,1>::_tri
	test	al, al
	je	$LN2@prim@10

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@10
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@10

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@10

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@10

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@10
$LN4@prim@10:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@10:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@10:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@10:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z ENDP	; ray_collider<1,0,0,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z PROC	; ray_collider<1,0,1,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$0A@$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,1,0>::_tri
	test	al, al
	je	$LN6@prim@11

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@11
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@11

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@11:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@11:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z ENDP	; ray_collider<1,0,1,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z PROC	; ray_collider<1,0,1,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$0A@$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,0,1,1>::_tri
	test	al, al
	je	$LN2@prim@12

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@12
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@12

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@12

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@12

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@12
$LN4@prim@12:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@12:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@12:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@12:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z ENDP	; ray_collider<1,0,1,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z PROC	; ray_collider<1,1,0,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$00$0A@$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,0,0>::_tri
	test	al, al
	je	$LN6@prim@13

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@13
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@13

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@13:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@13:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z ENDP	; ray_collider<1,1,0,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z PROC	; ray_collider<1,1,0,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$00$0A@$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,0,1>::_tri
	test	al, al
	je	$LN2@prim@14

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@14
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@14

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@14

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@14

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@14
$LN4@prim@14:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@14:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@14:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@14:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z ENDP	; ray_collider<1,1,0,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z DD imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z DD imagerel $LN35+58
	DD	imagerel $LN35+246
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z DD imagerel $LN35+246
	DD	imagerel $LN35+254
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN35
	DD	imagerel $LN35+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
u$ = 96
this$ = 96
r$ = 104
prim$ = 104
v$ = 112
?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z PROC	; ray_collider<1,1,1,0>::_prim, COMDAT

; 269  : 	{

$LN35:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$00$00$0A@@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,1,0>::_tri
	test	al, al
	je	$LN6@prim@15

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@15
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@15

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	
; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();
; 279  : 				if (r<R.range)	{
; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;
; 283  : 					R.v			= v;
; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];
; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];
; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];
; 287  : 					R.dummy		= tris[prim].dummy;
; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {
; 292  : 				RESULT& R	= dest->r_add();
; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;
; 296  : 				R.v			= v;
; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];
; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];
; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];
; 300  : 				R.dummy		= tris[prim].dummy;
; 301  : 				rRange		= r;
; 302  : 				rRange2		= r*r;
; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	r11, rax

; 306  : 			R.id		= prim;

	mov	DWORD PTR [rax+48], esi

; 307  : 			R.range		= r;
; 308  : 			R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 309  : 			R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 313  : 			R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN34@prim@15:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN6@prim@15:

; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z ENDP	; ray_collider<1,1,1,0>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
pdata	SEGMENT
$pdata$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z DD imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z DD imagerel $LN36+58
	DD	imagerel $LN36+441
	DD	imagerel $chain$0$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z DD imagerel $LN36+441
	DD	imagerel $LN36+449
	DD	imagerel $chain$1$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z DD 020521H
	DD	036805H
	DD	imagerel $LN36
	DD	imagerel $LN36+58
	DD	imagerel $unwind$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z DD 040801H
	DD	070047208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z
_TEXT	SEGMENT
v$ = 96
this$ = 96
u$ = 104
prim$ = 104
r$ = 112
?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z PROC	; ray_collider<1,1,1,1>::_prim, COMDAT

; 269  : 	{

$LN36:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 270  : 		float	u,v,r;
; 271  : 		if (!_tri(tris[prim].verts, u, v, r))	return;

	mov	rax, QWORD PTR [rcx+8]
	mov	esi, edx
	lea	r9, QWORD PTR v$[rsp]
	lea	rdi, QWORD PTR [rsi+rsi*2]
	lea	r8, QWORD PTR u$[rsp]
	mov	rbx, rcx
	lea	rdx, QWORD PTR [rax+rdi*8]
	lea	rax, QWORD PTR r$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	?_tri@?$ray_collider@$00$00$00$00@@QEAA_NPEAIAEAM11@Z ; ray_collider<1,1,1,1>::_tri
	test	al, al
	je	$LN2@prim@16

; 272  : 		if (r<=0 || r>rRange)					return;

	movaps	XMMWORD PTR [rsp+48], xmm6
	movss	xmm6, DWORD PTR r$[rsp]
	comiss	xmm6, DWORD PTR __real@00000000
	jbe	$LN34@prim@16
	comiss	xmm6, DWORD PTR [rbx+80]
	ja	$LN34@prim@16

; 273  : 		
; 274  : 		if (bNearest)	
; 275  : 		{
; 276  : 			if (dest->r_count())	

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+24]
	sub	rax, QWORD PTR [rcx+16]
	sar	rax, 6
	test	eax, eax
	je	$LN4@prim@16

; 277  : 			{
; 278  : 				RESULT& R = *dest->r_begin();

	mov	r8, QWORD PTR [rcx+16]

; 279  : 				if (r<R.range)	{

	comiss	xmm6, DWORD PTR [r8+52]
	jae	$LN34@prim@16

; 280  : 					R.id		= prim;
; 281  : 					R.range		= r;
; 282  : 					R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 283  : 					R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	movss	DWORD PTR [r8+52], xmm6
	mov	DWORD PTR [r8+48], esi
	movss	DWORD PTR [r8+56], xmm0
	movss	DWORD PTR [r8+60], xmm1

; 284  : 					R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+8], eax

; 285  : 					R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+20], eax

; 286  : 					R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r8+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r8+32], eax

; 287  : 					R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r8+40], rcx

; 288  : 					rRange		= r;
; 289  : 					rRange2		= r*r;
; 290  : 				}
; 291  : 			} else {

	jmp	$LN35@prim@16
$LN4@prim@16:

; 292  : 				RESULT& R	= dest->r_add();

	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add

; 293  : 				R.id		= prim;
; 294  : 				R.range		= r;
; 295  : 				R.u			= u;

	movss	xmm0, DWORD PTR u$[rsp]

; 296  : 				R.v			= v;

	movss	xmm1, DWORD PTR v$[rsp]
	mov	r11, rax
	mov	DWORD PTR [rax+48], esi
	movss	DWORD PTR [rax+52], xmm6
	movss	DWORD PTR [rax+56], xmm0
	movss	DWORD PTR [rax+60], xmm1

; 297  : 				R.verts	[0]	= verts[tris[prim].verts[0]];

	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, DWORD PTR [rcx+rdi*8]
	lea	r8, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rdx+r8*4]
	mov	QWORD PTR [rax], rcx
	mov	eax, DWORD PTR [rdx+r8*4+8]
	mov	DWORD PTR [r11+8], eax

; 298  : 				R.verts	[1]	= verts[tris[prim].verts[1]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+4]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+12], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+20], eax

; 299  : 				R.verts	[2]	= verts[tris[prim].verts[2]];

	mov	rax, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rax+rdi*8+8]
	lea	rdx, QWORD PTR [rcx+rcx*2]
	mov	rcx, QWORD PTR [rbx+16]
	mov	rax, QWORD PTR [rcx+rdx*4]
	mov	QWORD PTR [r11+24], rax
	mov	eax, DWORD PTR [rcx+rdx*4+8]
	mov	DWORD PTR [r11+32], eax

; 300  : 				R.dummy		= tris[prim].dummy;

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+rdi*8+16]
	mov	QWORD PTR [r11+40], rcx
$LN35@prim@16:

; 301  : 				rRange		= r;

	movss	DWORD PTR [rbx+80], xmm6

; 302  : 				rRange2		= r*r;

	mulss	xmm6, xmm6
	movss	DWORD PTR [rbx+84], xmm6
$LN34@prim@16:
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN2@prim@16:

; 303  : 			}
; 304  : 		} else {
; 305  : 			RESULT& R	= dest->r_add();
; 306  : 			R.id		= prim;
; 307  : 			R.range		= r;
; 308  : 			R.u			= u;
; 309  : 			R.v			= v;
; 310  : 			R.verts	[0]	= verts[tris[prim].verts[0]];
; 311  : 			R.verts	[1]	= verts[tris[prim].verts[1]];
; 312  : 			R.verts	[2]	= verts[tris[prim].verts[2]];
; 313  : 			R.dummy		= tris[prim].dummy;
; 314  : 		}
; 315  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z ENDP	; ray_collider<1,1,1,1>::_prim
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN319
	DD	imagerel $LN319+872
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$143640 = 32
P$97010 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,0,0,0>::_stab, COMDAT

; 317  : 	{

$LN319:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$97010[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$97010[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$97010[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL306@stab:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$143640[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$143640[rsp+8], xmm2
	movss	DWORD PTR MaxT$143640[rsp+4], xmm1
	jae	SHORT $LN61@stab
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab
	movaps	xmm0, xmm14
	jmp	SHORT $LN314@stab
$LN61@stab:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab
	movaps	xmm0, xmm5
$LN314@stab:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$143640[rsp], xmm0
$LN57@stab:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab
	movaps	xmm1, xmm12
	jmp	SHORT $LN315@stab
$LN56@stab:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab
	movaps	xmm1, xmm9
$LN315@stab:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$143640[rsp+4], xmm1
$LN52@stab:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab
	movaps	xmm2, xmm13
$LN316@stab:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$143640[rsp+8], xmm2
$LN46@stab:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab
	mov	eax, 1
	mov	ecx, eax
$LN45@stab:
	comiss	xmm2, DWORD PTR MaxT$143640[rsp+rcx*4]
	jbe	SHORT $LN44@stab
	mov	eax, 2
	mov	ecx, eax
$LN44@stab:
	test	DWORD PTR MaxT$143640[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab
	test	eax, eax
	jne	$LN42@stab
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab
	comiss	xmm7, xmm9
	ja	$LN1@stab
	movaps	xmm6, xmm0
$LN318@stab:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab
	comiss	xmm6, xmm10
	jmp	$LN317@stab
$LN51@stab:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab
	movaps	xmm2, xmm10
	jmp	$LN316@stab
$LN47@stab:
	test	eax, eax
	je	$LN46@stab
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$97010[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$97010[rsp+4]
	movss	xmm8, DWORD PTR P$97010[rsp]
	mov	DWORD PTR P$97010[rsp+8], eax
	movss	xmm6, DWORD PTR P$97010[rsp+8]
	jmp	SHORT $LN312@stab
$LN42@stab:
	cmp	eax, 1
	jne	SHORT $LN37@stab
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab
	comiss	xmm8, xmm5
	ja	$LN1@stab
	movaps	xmm6, xmm1
	jmp	$LN318@stab
$LN37@stab:
	cmp	eax, 2
	jne	$LN1@stab
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab
	comiss	xmm8, xmm5
	ja	$LN1@stab
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	SHORT $LN1@stab
	comiss	xmm7, xmm9
$LN317@stab:
	ja	SHORT $LN1@stab
$LN312@stab:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z ; ray_collider<0,0,0,0>::_prim
	jmp	SHORT $LN4@stab
$LN5@stab:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,0,0>::_stab
$LN4@stab:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN311@stab

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL306@stab
$LN311@stab:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXK@Z ; ray_collider<0,0,0,0>::_prim
$LN1@stab:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,0,0,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN319
	DD	imagerel $LN319+872
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$144739 = 32
P$96979 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,0,0,1>::_stab, COMDAT

; 317  : 	{

$LN319:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96979[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96979[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96979[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL306@stab@2:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$144739[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$144739[rsp+8], xmm2
	movss	DWORD PTR MaxT$144739[rsp+4], xmm1
	jae	SHORT $LN61@stab@2
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@2
	movaps	xmm0, xmm14
	jmp	SHORT $LN314@stab@2
$LN61@stab@2:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@2
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@2
	movaps	xmm0, xmm5
$LN314@stab@2:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$144739[rsp], xmm0
$LN57@stab@2:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@2
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@2
	movaps	xmm1, xmm12
	jmp	SHORT $LN315@stab@2
$LN56@stab@2:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@2
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@2
	movaps	xmm1, xmm9
$LN315@stab@2:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$144739[rsp+4], xmm1
$LN52@stab@2:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@2
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@2
	movaps	xmm2, xmm13
$LN316@stab@2:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$144739[rsp+8], xmm2
$LN46@stab@2:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@2
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@2:
	comiss	xmm2, DWORD PTR MaxT$144739[rsp+rcx*4]
	jbe	SHORT $LN44@stab@2
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@2:
	test	DWORD PTR MaxT$144739[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@2
	test	eax, eax
	jne	$LN42@stab@2
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@2
	comiss	xmm7, xmm9
	ja	$LN1@stab@2
	movaps	xmm6, xmm0
$LN318@stab@2:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@2
	comiss	xmm6, xmm10
	jmp	$LN317@stab@2
$LN51@stab@2:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@2
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@2
	movaps	xmm2, xmm10
	jmp	$LN316@stab@2
$LN47@stab@2:
	test	eax, eax
	je	$LN46@stab@2
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96979[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96979[rsp+4]
	movss	xmm8, DWORD PTR P$96979[rsp]
	mov	DWORD PTR P$96979[rsp+8], eax
	movss	xmm6, DWORD PTR P$96979[rsp+8]
	jmp	SHORT $LN312@stab@2
$LN42@stab@2:
	cmp	eax, 1
	jne	SHORT $LN37@stab@2
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@2
	comiss	xmm8, xmm5
	ja	$LN1@stab@2
	movaps	xmm6, xmm1
	jmp	$LN318@stab@2
$LN37@stab@2:
	cmp	eax, 2
	jne	$LN1@stab@2
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@2
	comiss	xmm8, xmm5
	ja	$LN1@stab@2
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	SHORT $LN1@stab@2
	comiss	xmm7, xmm9
$LN317@stab@2:
	ja	SHORT $LN1@stab@2
$LN312@stab@2:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@2

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@2
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z ; ray_collider<0,0,0,1>::_prim
	jmp	SHORT $LN4@stab@2
$LN5@stab@2:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,0,1>::_stab
$LN4@stab@2:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN311@stab@2

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL306@stab@2
$LN311@stab@2:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXK@Z ; ray_collider<0,0,0,1>::_prim
$LN1@stab@2:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,0,0,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN326
	DD	imagerel $LN326+895
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$145838 = 32
P$96948 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,0,1,0>::_stab, COMDAT

; 317  : 	{

$LN326:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96948[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96948[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96948[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL312@stab@3:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$145838[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$145838[rsp+8], xmm2
	movss	DWORD PTR MaxT$145838[rsp+4], xmm1
	jae	SHORT $LN61@stab@3
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@3
	movaps	xmm0, xmm14
	jmp	SHORT $LN321@stab@3
$LN61@stab@3:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@3
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@3
	movaps	xmm0, xmm5
$LN321@stab@3:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$145838[rsp], xmm0
$LN57@stab@3:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@3
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@3
	movaps	xmm1, xmm12
	jmp	SHORT $LN322@stab@3
$LN56@stab@3:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@3
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@3
	movaps	xmm1, xmm9
$LN322@stab@3:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$145838[rsp+4], xmm1
$LN52@stab@3:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@3
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@3
	movaps	xmm2, xmm13
$LN323@stab@3:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$145838[rsp+8], xmm2
$LN46@stab@3:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@3
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@3:
	comiss	xmm2, DWORD PTR MaxT$145838[rsp+rcx*4]
	jbe	SHORT $LN44@stab@3
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@3:
	test	DWORD PTR MaxT$145838[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@3
	test	eax, eax
	jne	$LN42@stab@3
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@3
	comiss	xmm7, xmm9
	ja	$LN1@stab@3
	movaps	xmm6, xmm0
$LN325@stab@3:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@3
	comiss	xmm6, xmm10
	jmp	$LN324@stab@3
$LN51@stab@3:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@3
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@3
	movaps	xmm2, xmm10
	jmp	$LN323@stab@3
$LN47@stab@3:
	test	eax, eax
	je	$LN46@stab@3
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96948[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96948[rsp+4]
	movss	xmm8, DWORD PTR P$96948[rsp]
	mov	DWORD PTR P$96948[rsp+8], eax
	movss	xmm6, DWORD PTR P$96948[rsp+8]
	jmp	SHORT $LN319@stab@3
$LN42@stab@3:
	cmp	eax, 1
	jne	SHORT $LN37@stab@3
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@3
	comiss	xmm8, xmm5
	ja	$LN1@stab@3
	movaps	xmm6, xmm1
	jmp	$LN325@stab@3
$LN37@stab@3:
	cmp	eax, 2
	jne	$LN1@stab@3
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@3
	comiss	xmm8, xmm5
	ja	$LN1@stab@3
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@3
	comiss	xmm7, xmm9
$LN324@stab@3:
	ja	SHORT $LN1@stab@3
$LN319@stab@3:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@3

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@3
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z ; ray_collider<0,0,1,0>::_prim
	jmp	SHORT $LN4@stab@3
$LN5@stab@3:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,1,0>::_stab
$LN4@stab@3:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	SHORT $LN1@stab@3

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN318@stab@3

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL312@stab@3
$LN318@stab@3:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXK@Z ; ray_collider<0,0,1,0>::_prim
$LN1@stab@3:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,0,1,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN326
	DD	imagerel $LN326+895
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$146967 = 32
P$96917 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,0,1,1>::_stab, COMDAT

; 317  : 	{

$LN326:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96917[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96917[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96917[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL312@stab@4:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$146967[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$146967[rsp+8], xmm2
	movss	DWORD PTR MaxT$146967[rsp+4], xmm1
	jae	SHORT $LN61@stab@4
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@4
	movaps	xmm0, xmm14
	jmp	SHORT $LN321@stab@4
$LN61@stab@4:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@4
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@4
	movaps	xmm0, xmm5
$LN321@stab@4:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$146967[rsp], xmm0
$LN57@stab@4:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@4
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@4
	movaps	xmm1, xmm12
	jmp	SHORT $LN322@stab@4
$LN56@stab@4:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@4
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@4
	movaps	xmm1, xmm9
$LN322@stab@4:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$146967[rsp+4], xmm1
$LN52@stab@4:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@4
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@4
	movaps	xmm2, xmm13
$LN323@stab@4:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$146967[rsp+8], xmm2
$LN46@stab@4:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@4
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@4:
	comiss	xmm2, DWORD PTR MaxT$146967[rsp+rcx*4]
	jbe	SHORT $LN44@stab@4
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@4:
	test	DWORD PTR MaxT$146967[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@4
	test	eax, eax
	jne	$LN42@stab@4
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@4
	comiss	xmm7, xmm9
	ja	$LN1@stab@4
	movaps	xmm6, xmm0
$LN325@stab@4:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@4
	comiss	xmm6, xmm10
	jmp	$LN324@stab@4
$LN51@stab@4:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@4
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@4
	movaps	xmm2, xmm10
	jmp	$LN323@stab@4
$LN47@stab@4:
	test	eax, eax
	je	$LN46@stab@4
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96917[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96917[rsp+4]
	movss	xmm8, DWORD PTR P$96917[rsp]
	mov	DWORD PTR P$96917[rsp+8], eax
	movss	xmm6, DWORD PTR P$96917[rsp+8]
	jmp	SHORT $LN319@stab@4
$LN42@stab@4:
	cmp	eax, 1
	jne	SHORT $LN37@stab@4
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@4
	comiss	xmm8, xmm5
	ja	$LN1@stab@4
	movaps	xmm6, xmm1
	jmp	$LN325@stab@4
$LN37@stab@4:
	cmp	eax, 2
	jne	$LN1@stab@4
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@4
	comiss	xmm8, xmm5
	ja	$LN1@stab@4
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@4
	comiss	xmm7, xmm9
$LN324@stab@4:
	ja	SHORT $LN1@stab@4
$LN319@stab@4:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@4

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@4
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z ; ray_collider<0,0,1,1>::_prim
	jmp	SHORT $LN4@stab@4
$LN5@stab@4:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,1,1>::_stab
$LN4@stab@4:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	SHORT $LN1@stab@4

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN318@stab@4

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL312@stab@4
$LN318@stab@4:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$0A@$00$00@@QEAAXK@Z ; ray_collider<0,0,1,1>::_prim
$LN1@stab@4:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,0,1,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN319
	DD	imagerel $LN319+872
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$148098 = 32
P$96886 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,1,0,0>::_stab, COMDAT

; 317  : 	{

$LN319:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96886[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96886[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96886[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL306@stab@5:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$148098[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$148098[rsp+8], xmm2
	movss	DWORD PTR MaxT$148098[rsp+4], xmm1
	jae	SHORT $LN61@stab@5
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@5
	movaps	xmm0, xmm14
	jmp	SHORT $LN314@stab@5
$LN61@stab@5:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@5
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@5
	movaps	xmm0, xmm5
$LN314@stab@5:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$148098[rsp], xmm0
$LN57@stab@5:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@5
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@5
	movaps	xmm1, xmm12
	jmp	SHORT $LN315@stab@5
$LN56@stab@5:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@5
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@5
	movaps	xmm1, xmm9
$LN315@stab@5:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$148098[rsp+4], xmm1
$LN52@stab@5:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@5
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@5
	movaps	xmm2, xmm13
$LN316@stab@5:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$148098[rsp+8], xmm2
$LN46@stab@5:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@5
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@5:
	comiss	xmm2, DWORD PTR MaxT$148098[rsp+rcx*4]
	jbe	SHORT $LN44@stab@5
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@5:
	test	DWORD PTR MaxT$148098[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@5
	test	eax, eax
	jne	$LN42@stab@5
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@5
	comiss	xmm7, xmm9
	ja	$LN1@stab@5
	movaps	xmm6, xmm0
$LN318@stab@5:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@5
	comiss	xmm6, xmm10
	jmp	$LN317@stab@5
$LN51@stab@5:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@5
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@5
	movaps	xmm2, xmm10
	jmp	$LN316@stab@5
$LN47@stab@5:
	test	eax, eax
	je	$LN46@stab@5
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96886[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96886[rsp+4]
	movss	xmm8, DWORD PTR P$96886[rsp]
	mov	DWORD PTR P$96886[rsp+8], eax
	movss	xmm6, DWORD PTR P$96886[rsp+8]
	jmp	SHORT $LN312@stab@5
$LN42@stab@5:
	cmp	eax, 1
	jne	SHORT $LN37@stab@5
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@5
	comiss	xmm8, xmm5
	ja	$LN1@stab@5
	movaps	xmm6, xmm1
	jmp	$LN318@stab@5
$LN37@stab@5:
	cmp	eax, 2
	jne	$LN1@stab@5
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@5
	comiss	xmm8, xmm5
	ja	$LN1@stab@5
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	SHORT $LN1@stab@5
	comiss	xmm7, xmm9
$LN317@stab@5:
	ja	SHORT $LN1@stab@5
$LN312@stab@5:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@5

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@5
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z ; ray_collider<0,1,0,0>::_prim
	jmp	SHORT $LN4@stab@5
$LN5@stab@5:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,0,0>::_stab
$LN4@stab@5:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN311@stab@5

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL306@stab@5
$LN311@stab@5:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXK@Z ; ray_collider<0,1,0,0>::_prim
$LN1@stab@5:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,1,0,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN319
	DD	imagerel $LN319+872
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$149168 = 32
P$96855 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,1,0,1>::_stab, COMDAT

; 317  : 	{

$LN319:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96855[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96855[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96855[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL306@stab@6:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$149168[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$149168[rsp+8], xmm2
	movss	DWORD PTR MaxT$149168[rsp+4], xmm1
	jae	SHORT $LN61@stab@6
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@6
	movaps	xmm0, xmm14
	jmp	SHORT $LN314@stab@6
$LN61@stab@6:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@6
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@6
	movaps	xmm0, xmm5
$LN314@stab@6:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$149168[rsp], xmm0
$LN57@stab@6:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@6
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@6
	movaps	xmm1, xmm12
	jmp	SHORT $LN315@stab@6
$LN56@stab@6:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@6
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@6
	movaps	xmm1, xmm9
$LN315@stab@6:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$149168[rsp+4], xmm1
$LN52@stab@6:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@6
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@6
	movaps	xmm2, xmm13
$LN316@stab@6:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$149168[rsp+8], xmm2
$LN46@stab@6:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@6
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@6:
	comiss	xmm2, DWORD PTR MaxT$149168[rsp+rcx*4]
	jbe	SHORT $LN44@stab@6
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@6:
	test	DWORD PTR MaxT$149168[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@6
	test	eax, eax
	jne	$LN42@stab@6
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@6
	comiss	xmm7, xmm9
	ja	$LN1@stab@6
	movaps	xmm6, xmm0
$LN318@stab@6:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@6
	comiss	xmm6, xmm10
	jmp	$LN317@stab@6
$LN51@stab@6:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@6
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@6
	movaps	xmm2, xmm10
	jmp	$LN316@stab@6
$LN47@stab@6:
	test	eax, eax
	je	$LN46@stab@6
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96855[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96855[rsp+4]
	movss	xmm8, DWORD PTR P$96855[rsp]
	mov	DWORD PTR P$96855[rsp+8], eax
	movss	xmm6, DWORD PTR P$96855[rsp+8]
	jmp	SHORT $LN312@stab@6
$LN42@stab@6:
	cmp	eax, 1
	jne	SHORT $LN37@stab@6
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@6
	comiss	xmm8, xmm5
	ja	$LN1@stab@6
	movaps	xmm6, xmm1
	jmp	$LN318@stab@6
$LN37@stab@6:
	cmp	eax, 2
	jne	$LN1@stab@6
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@6
	comiss	xmm8, xmm5
	ja	$LN1@stab@6
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	SHORT $LN1@stab@6
	comiss	xmm7, xmm9
$LN317@stab@6:
	ja	SHORT $LN1@stab@6
$LN312@stab@6:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@6

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@6
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z ; ray_collider<0,1,0,1>::_prim
	jmp	SHORT $LN4@stab@6
$LN5@stab@6:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,0,1>::_stab
$LN4@stab@6:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN311@stab@6

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL306@stab@6
$LN311@stab@6:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$0A@$00@@QEAAXK@Z ; ray_collider<0,1,0,1>::_prim
$LN1@stab@6:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,1,0,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN326
	DD	imagerel $LN326+895
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$150237 = 32
P$96824 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,1,1,0>::_stab, COMDAT

; 317  : 	{

$LN326:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96824[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96824[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96824[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL312@stab@7:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$150237[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$150237[rsp+8], xmm2
	movss	DWORD PTR MaxT$150237[rsp+4], xmm1
	jae	SHORT $LN61@stab@7
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@7
	movaps	xmm0, xmm14
	jmp	SHORT $LN321@stab@7
$LN61@stab@7:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@7
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@7
	movaps	xmm0, xmm5
$LN321@stab@7:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$150237[rsp], xmm0
$LN57@stab@7:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@7
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@7
	movaps	xmm1, xmm12
	jmp	SHORT $LN322@stab@7
$LN56@stab@7:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@7
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@7
	movaps	xmm1, xmm9
$LN322@stab@7:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$150237[rsp+4], xmm1
$LN52@stab@7:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@7
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@7
	movaps	xmm2, xmm13
$LN323@stab@7:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$150237[rsp+8], xmm2
$LN46@stab@7:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@7
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@7:
	comiss	xmm2, DWORD PTR MaxT$150237[rsp+rcx*4]
	jbe	SHORT $LN44@stab@7
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@7:
	test	DWORD PTR MaxT$150237[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@7
	test	eax, eax
	jne	$LN42@stab@7
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@7
	comiss	xmm7, xmm9
	ja	$LN1@stab@7
	movaps	xmm6, xmm0
$LN325@stab@7:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@7
	comiss	xmm6, xmm10
	jmp	$LN324@stab@7
$LN51@stab@7:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@7
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@7
	movaps	xmm2, xmm10
	jmp	$LN323@stab@7
$LN47@stab@7:
	test	eax, eax
	je	$LN46@stab@7
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96824[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96824[rsp+4]
	movss	xmm8, DWORD PTR P$96824[rsp]
	mov	DWORD PTR P$96824[rsp+8], eax
	movss	xmm6, DWORD PTR P$96824[rsp+8]
	jmp	SHORT $LN319@stab@7
$LN42@stab@7:
	cmp	eax, 1
	jne	SHORT $LN37@stab@7
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@7
	comiss	xmm8, xmm5
	ja	$LN1@stab@7
	movaps	xmm6, xmm1
	jmp	$LN325@stab@7
$LN37@stab@7:
	cmp	eax, 2
	jne	$LN1@stab@7
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@7
	comiss	xmm8, xmm5
	ja	$LN1@stab@7
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@7
	comiss	xmm7, xmm9
$LN324@stab@7:
	ja	SHORT $LN1@stab@7
$LN319@stab@7:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@7

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@7
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z ; ray_collider<0,1,1,0>::_prim
	jmp	SHORT $LN4@stab@7
$LN5@stab@7:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,1,0>::_stab
$LN4@stab@7:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	SHORT $LN1@stab@7

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN318@stab@7

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL312@stab@7
$LN318@stab@7:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$00$0A@@@QEAAXK@Z ; ray_collider<0,1,1,0>::_prim
$LN1@stab@7:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,1,1,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN326
	DD	imagerel $LN326+895
	DD	imagerel $unwind$?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0195b01H
	DD	04f85bH
	DD	05e855H
	DD	06d84fH
	DD	07c849H
	DD	08b844H
	DD	09a83fH
	DD	0a983aH
	DD	0b882eH
	DD	0c781dH
	DD	0d6813H
	DD	01e340fH
	DD	01c010fH
	DD	07008H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
MaxT$151308 = 32
P$96793 = 48
this$ = 240
node$ = 248
?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<0,1,1,1>::_stab, COMDAT

; 317  : 	{

$LN326:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 224				; 000000e0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR P$96793[rsp+8]
	movaps	XMMWORD PTR [rax-40], xmm7
	movss	xmm7, DWORD PTR P$96793[rsp+4]
	mov	rdi, rdx
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR P$96793[rsp]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@bf800000
	npad	12
$LL312@stab@8:

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;
; 323  : 			if (d>rRange)																	return;
; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;

	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rdi+4]
	movss	xmm0, DWORD PTR [rdi+8]
	mov	eax, 1
	movaps	xmm14, xmm2
	movaps	xmm12, xmm1
	movaps	xmm13, xmm0
	movss	xmm5, DWORD PTR [rdi+12]
	movss	xmm9, DWORD PTR [rdi+16]
	movss	xmm10, DWORD PTR [rdi+20]
	movss	xmm11, DWORD PTR [rbx+32]
	subss	xmm14, xmm5
	subss	xmm12, xmm9
	comiss	xmm11, xmm14
	subss	xmm13, xmm10
	addss	xmm10, xmm0
	movaps	xmm0, xmm15
	addss	xmm5, xmm2
	addss	xmm9, xmm1
	movss	DWORD PTR MaxT$151308[rsp], xmm0
	movaps	xmm2, xmm15
	movaps	xmm1, xmm15
	movss	DWORD PTR MaxT$151308[rsp+8], xmm2
	movss	DWORD PTR MaxT$151308[rsp+4], xmm1
	jae	SHORT $LN61@stab@8
	xor	eax, eax
	movaps	xmm8, xmm14
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@8
	movaps	xmm0, xmm14
	jmp	SHORT $LN321@stab@8
$LN61@stab@8:
	comiss	xmm11, xmm5
	jbe	SHORT $LN57@stab@8
	xor	eax, eax
	movaps	xmm8, xmm5
	cmp	DWORD PTR [rbx+48], eax
	je	SHORT $LN57@stab@8
	movaps	xmm0, xmm5
$LN321@stab@8:
	subss	xmm0, xmm11
	mulss	xmm0, DWORD PTR [rbx+48]
	movss	DWORD PTR MaxT$151308[rsp], xmm0
$LN57@stab@8:
	movss	xmm4, DWORD PTR [rbx+36]
	comiss	xmm4, xmm12
	jae	SHORT $LN56@stab@8
	xor	eax, eax
	movaps	xmm7, xmm12
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@8
	movaps	xmm1, xmm12
	jmp	SHORT $LN322@stab@8
$LN56@stab@8:
	comiss	xmm4, xmm9
	jbe	SHORT $LN52@stab@8
	xor	eax, eax
	movaps	xmm7, xmm9
	cmp	DWORD PTR [rbx+52], eax
	je	SHORT $LN52@stab@8
	movaps	xmm1, xmm9
$LN322@stab@8:
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [rbx+52]
	movss	DWORD PTR MaxT$151308[rsp+4], xmm1
$LN52@stab@8:
	movss	xmm3, DWORD PTR [rbx+40]
	comiss	xmm3, xmm13
	jae	$LN51@stab@8
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm13
	je	SHORT $LN46@stab@8
	movaps	xmm2, xmm13
$LN323@stab@8:
	subss	xmm2, xmm3
	mulss	xmm2, DWORD PTR [rbx+56]
	movss	DWORD PTR MaxT$151308[rsp+8], xmm2
$LN46@stab@8:
	xor	eax, eax
	xor	ecx, ecx
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@stab@8
	mov	eax, 1
	mov	ecx, eax
$LN45@stab@8:
	comiss	xmm2, DWORD PTR MaxT$151308[rsp+rcx*4]
	jbe	SHORT $LN44@stab@8
	mov	eax, 2
	mov	ecx, eax
$LN44@stab@8:
	test	DWORD PTR MaxT$151308[rsp+rcx*4], -2147483648 ; 80000000H
	jne	$LN1@stab@8
	test	eax, eax
	jne	$LN42@stab@8
	movaps	xmm7, xmm0
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@8
	comiss	xmm7, xmm9
	ja	$LN1@stab@8
	movaps	xmm6, xmm0
$LN325@stab@8:
	mulss	xmm6, DWORD PTR [rbx+72]
	addss	xmm6, xmm3
	comiss	xmm6, xmm13
	jb	$LN1@stab@8
	comiss	xmm6, xmm10
	jmp	$LN324@stab@8
$LN51@stab@8:
	comiss	xmm3, xmm10
	jbe	SHORT $LN47@stab@8
	cmp	DWORD PTR [rbx+56], 0
	movaps	xmm6, xmm10
	je	$LN46@stab@8
	movaps	xmm2, xmm10
	jmp	$LN323@stab@8
$LN47@stab@8:
	test	eax, eax
	je	$LN46@stab@8
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR P$96793[rsp], rax
	mov	eax, DWORD PTR [rbx+40]
	movss	xmm7, DWORD PTR P$96793[rsp+4]
	movss	xmm8, DWORD PTR P$96793[rsp]
	mov	DWORD PTR P$96793[rsp+8], eax
	movss	xmm6, DWORD PTR P$96793[rsp+8]
	jmp	SHORT $LN319@stab@8
$LN42@stab@8:
	cmp	eax, 1
	jne	SHORT $LN37@stab@8
	movaps	xmm8, xmm1
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@8
	comiss	xmm8, xmm5
	ja	$LN1@stab@8
	movaps	xmm6, xmm1
	jmp	$LN325@stab@8
$LN37@stab@8:
	cmp	eax, 2
	jne	$LN1@stab@8
	movaps	xmm8, xmm2
	mulss	xmm8, DWORD PTR [rbx+64]
	addss	xmm8, xmm11
	comiss	xmm8, xmm14
	jb	$LN1@stab@8
	comiss	xmm8, xmm5
	ja	$LN1@stab@8
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR [rbx+68]
	addss	xmm7, xmm4
	comiss	xmm7, xmm12
	jb	$LN1@stab@8
	comiss	xmm7, xmm9
$LN324@stab@8:
	ja	SHORT $LN1@stab@8
$LN319@stab@8:

; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;

	movaps	xmm1, xmm7
	movaps	xmm2, xmm8
	movaps	xmm0, xmm6
	subss	xmm2, xmm11
	subss	xmm1, xmm4
	subss	xmm0, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	comiss	xmm2, DWORD PTR [rbx+84]
	ja	SHORT $LN1@stab@8

; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	test	dl, 1
	je	SHORT $LN5@stab@8
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z ; ray_collider<0,1,1,1>::_prim
	jmp	SHORT $LN4@stab@8
$LN5@stab@8:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,1,1>::_stab
$LN4@stab@8:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	SHORT $LN1@stab@8

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rdi+32], 1
	jne	SHORT $LN318@stab@8

; 340  : 		else					_stab	(node->GetNeg());

	mov	rdi, QWORD PTR [rdi+32]
	jmp	$LL312@stab@8
$LN318@stab@8:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rbx
	shr	rdx, 1
	call	?_prim@?$ray_collider@$0A@$00$00$00@@QEAAXK@Z ; ray_collider<0,1,1,1>::_prim
$LN1@stab@8:

; 341  : 	}

	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+16]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	mov	rsp, r11
	pop	rdi
	ret	0
?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<0,1,1,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN313
	DD	imagerel $LN313+652
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$151620 = 32
d$96756 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,0,0,0>::_stab, COMDAT

; 317  : 	{

$LN313:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$151620[rbp-112], xmm0
	movss	DWORD PTR box$151620[rbp-96], xmm6
	movss	DWORD PTR box$151620[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$151620[rbp-84], xmm7
	movss	DWORD PTR box$151620[rbp-108], xmm0
	movss	DWORD PTR box$151620[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$151620[rbp-104], xmm0
	movss	DWORD PTR box$151620[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$151620[rbp-96]
	movaps	xmm6, XMMWORD PTR box$151620[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96756[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@9
	npad	9
$LL306@stab@9:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96756[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@9

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@9
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z ; ray_collider<1,0,0,0>::_prim
	jmp	SHORT $LN4@stab@9
$LN5@stab@9:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,0,0>::_stab
$LN4@stab@9:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN311@stab@9

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$151620[rbp-100], xmm7
	movss	DWORD PTR box$151620[rbp-84], xmm7
	mov	ecx, 0
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$151620[rbp-112], xmm0
	movss	DWORD PTR box$151620[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$151620[rbp-108], xmm0
	movss	DWORD PTR box$151620[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$151620[rbp-104], xmm0
	movss	DWORD PTR box$151620[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$151620[rbp-96]
	movaps	xmm6, XMMWORD PTR box$151620[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96756[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL306@stab@9

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@9
$LN311@stab@9:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXK@Z ; ray_collider<1,0,0,0>::_prim
$LN1@stab@9:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,0,0,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN313
	DD	imagerel $LN313+652
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$152710 = 32
d$96725 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,0,0,1>::_stab, COMDAT

; 317  : 	{

$LN313:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$152710[rbp-112], xmm0
	movss	DWORD PTR box$152710[rbp-96], xmm6
	movss	DWORD PTR box$152710[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$152710[rbp-84], xmm7
	movss	DWORD PTR box$152710[rbp-108], xmm0
	movss	DWORD PTR box$152710[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$152710[rbp-104], xmm0
	movss	DWORD PTR box$152710[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$152710[rbp-96]
	movaps	xmm6, XMMWORD PTR box$152710[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96725[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@10
	npad	9
$LL306@stab@10:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96725[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@10

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@10
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z ; ray_collider<1,0,0,1>::_prim
	jmp	SHORT $LN4@stab@10
$LN5@stab@10:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,0,1>::_stab
$LN4@stab@10:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN311@stab@10

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$152710[rbp-100], xmm7
	movss	DWORD PTR box$152710[rbp-84], xmm7
	mov	ecx, 0
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$152710[rbp-112], xmm0
	movss	DWORD PTR box$152710[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$152710[rbp-108], xmm0
	movss	DWORD PTR box$152710[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$152710[rbp-104], xmm0
	movss	DWORD PTR box$152710[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$152710[rbp-96]
	movaps	xmm6, XMMWORD PTR box$152710[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96725[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL306@stab@10

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@10
$LN311@stab@10:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$0A@$00@@QEAAXK@Z ; ray_collider<1,0,0,1>::_prim
$LN1@stab@10:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,0,0,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN320
	DD	imagerel $LN320+670
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$153782 = 32
d$96694 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,0,1,0>::_stab, COMDAT

; 317  : 	{

$LN320:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$153782[rbp-112], xmm0
	movss	DWORD PTR box$153782[rbp-96], xmm6
	movss	DWORD PTR box$153782[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$153782[rbp-84], xmm7
	movss	DWORD PTR box$153782[rbp-108], xmm0
	movss	DWORD PTR box$153782[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$153782[rbp-104], xmm0
	movss	DWORD PTR box$153782[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$153782[rbp-96]
	movaps	xmm6, XMMWORD PTR box$153782[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96694[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@11
	npad	9
$LL312@stab@11:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96694[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@11

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@11
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z ; ray_collider<1,0,1,0>::_prim
	jmp	SHORT $LN4@stab@11
$LN5@stab@11:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,1,0>::_stab
$LN4@stab@11:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	$LN1@stab@11

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN318@stab@11

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$153782[rbp-100], xmm7
	movss	DWORD PTR box$153782[rbp-84], xmm7
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$153782[rbp-112], xmm0
	movss	DWORD PTR box$153782[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$153782[rbp-108], xmm0
	movss	DWORD PTR box$153782[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$153782[rbp-104], xmm0
	movss	DWORD PTR box$153782[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$153782[rbp-96]
	movaps	xmm6, XMMWORD PTR box$153782[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96694[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL312@stab@11

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@11
$LN318@stab@11:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$00$0A@@@QEAAXK@Z ; ray_collider<1,0,1,0>::_prim
$LN1@stab@11:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,0,1,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN320
	DD	imagerel $LN320+670
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$154872 = 32
d$96663 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,0,1,1>::_stab, COMDAT

; 317  : 	{

$LN320:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$154872[rbp-112], xmm0
	movss	DWORD PTR box$154872[rbp-96], xmm6
	movss	DWORD PTR box$154872[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$154872[rbp-84], xmm7
	movss	DWORD PTR box$154872[rbp-108], xmm0
	movss	DWORD PTR box$154872[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$154872[rbp-104], xmm0
	movss	DWORD PTR box$154872[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$154872[rbp-96]
	movaps	xmm6, XMMWORD PTR box$154872[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96663[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@12
	npad	9
$LL312@stab@12:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96663[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@12

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@12
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z ; ray_collider<1,0,1,1>::_prim
	jmp	SHORT $LN4@stab@12
$LN5@stab@12:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,1,1>::_stab
$LN4@stab@12:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	$LN1@stab@12

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN318@stab@12

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$154872[rbp-100], xmm7
	movss	DWORD PTR box$154872[rbp-84], xmm7
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$154872[rbp-112], xmm0
	movss	DWORD PTR box$154872[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$154872[rbp-108], xmm0
	movss	DWORD PTR box$154872[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$154872[rbp-104], xmm0
	movss	DWORD PTR box$154872[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$154872[rbp-96]
	movaps	xmm6, XMMWORD PTR box$154872[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96663[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL312@stab@12

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@12
$LN318@stab@12:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$0A@$00$00@@QEAAXK@Z ; ray_collider<1,0,1,1>::_prim
$LN1@stab@12:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,0,1,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN313
	DD	imagerel $LN313+652
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$155911 = 32
d$96632 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,1,0,0>::_stab, COMDAT

; 317  : 	{

$LN313:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$155911[rbp-112], xmm0
	movss	DWORD PTR box$155911[rbp-96], xmm6
	movss	DWORD PTR box$155911[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$155911[rbp-84], xmm7
	movss	DWORD PTR box$155911[rbp-108], xmm0
	movss	DWORD PTR box$155911[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$155911[rbp-104], xmm0
	movss	DWORD PTR box$155911[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$155911[rbp-96]
	movaps	xmm6, XMMWORD PTR box$155911[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96632[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@13
	npad	9
$LL306@stab@13:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96632[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@13

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@13
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z ; ray_collider<1,1,0,0>::_prim
	jmp	SHORT $LN4@stab@13
$LN5@stab@13:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,0,0>::_stab
$LN4@stab@13:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN311@stab@13

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$155911[rbp-100], xmm7
	movss	DWORD PTR box$155911[rbp-84], xmm7
	mov	ecx, 0
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$155911[rbp-112], xmm0
	movss	DWORD PTR box$155911[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$155911[rbp-108], xmm0
	movss	DWORD PTR box$155911[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$155911[rbp-104], xmm0
	movss	DWORD PTR box$155911[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$155911[rbp-96]
	movaps	xmm6, XMMWORD PTR box$155911[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96632[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL306@stab@13

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@13
$LN311@stab@13:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$0A@$0A@@@QEAAXK@Z ; ray_collider<1,1,0,0>::_prim
$LN1@stab@13:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,1,0,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN313
	DD	imagerel $LN313+652
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$156983 = 32
d$96601 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,1,0,1>::_stab, COMDAT

; 317  : 	{

$LN313:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$156983[rbp-112], xmm0
	movss	DWORD PTR box$156983[rbp-96], xmm6
	movss	DWORD PTR box$156983[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$156983[rbp-84], xmm7
	movss	DWORD PTR box$156983[rbp-108], xmm0
	movss	DWORD PTR box$156983[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$156983[rbp-104], xmm0
	movss	DWORD PTR box$156983[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$156983[rbp-96]
	movaps	xmm6, XMMWORD PTR box$156983[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96601[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@14
	npad	9
$LL306@stab@14:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96601[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@14

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@14
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z ; ray_collider<1,1,0,1>::_prim
	jmp	SHORT $LN4@stab@14
$LN5@stab@14:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,0,1>::_stab
$LN4@stab@14:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN311@stab@14

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$156983[rbp-100], xmm7
	movss	DWORD PTR box$156983[rbp-84], xmm7
	mov	ecx, 0
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$156983[rbp-112], xmm0
	movss	DWORD PTR box$156983[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$156983[rbp-108], xmm0
	movss	DWORD PTR box$156983[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$156983[rbp-104], xmm0
	movss	DWORD PTR box$156983[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$156983[rbp-96]
	movaps	xmm6, XMMWORD PTR box$156983[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96601[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL306@stab@14

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@14
$LN311@stab@14:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;
; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$0A@$00@@QEAAXK@Z ; ray_collider<1,1,0,1>::_prim
$LN1@stab@14:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,1,0,1>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN320
	DD	imagerel $LN320+670
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$158055 = 32
d$96570 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,1,1,0>::_stab, COMDAT

; 317  : 	{

$LN320:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$158055[rbp-112], xmm0
	movss	DWORD PTR box$158055[rbp-96], xmm6
	movss	DWORD PTR box$158055[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$158055[rbp-84], xmm7
	movss	DWORD PTR box$158055[rbp-108], xmm0
	movss	DWORD PTR box$158055[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$158055[rbp-104], xmm0
	movss	DWORD PTR box$158055[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$158055[rbp-96]
	movaps	xmm6, XMMWORD PTR box$158055[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96570[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@15
	npad	9
$LL312@stab@15:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96570[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@15

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@15
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z ; ray_collider<1,1,1,0>::_prim
	jmp	SHORT $LN4@stab@15
$LN5@stab@15:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,1,0>::_stab
$LN4@stab@15:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	$LN1@stab@15

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN318@stab@15

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$158055[rbp-100], xmm7
	movss	DWORD PTR box$158055[rbp-84], xmm7
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$158055[rbp-112], xmm0
	movss	DWORD PTR box$158055[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$158055[rbp-108], xmm0
	movss	DWORD PTR box$158055[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$158055[rbp-104], xmm0
	movss	DWORD PTR box$158055[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$158055[rbp-96]
	movaps	xmm6, XMMWORD PTR box$158055[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96570[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL312@stab@15

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@15
$LN318@stab@15:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$00$0A@@@QEAAXK@Z ; ray_collider<1,1,1,0>::_prim
$LN1@stab@15:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,1,1,0>::_stab
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\opc_optimizedtree.h
pdata	SEGMENT
$pdata$?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN320
	DD	imagerel $LN320+670
	DD	imagerel $unwind$?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 0e4801H
	DD	048848H
	DD	05782fH
	DD	06682aH
	DD	0137417H
	DD	0126417H
	DD	0113417H
	DD	05010d217H
; Function compile flags: /Ogtpy
; File c:\users\nummer\documents\github\olr-3.0\src\xray\xrcdb\xrcdb_ray.cpp
xdata	ENDS
;	COMDAT ?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
box$159145 = 32
d$96539 = 128
this$ = 128
node$ = 136
?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; ray_collider<1,1,1,1>::_stab, COMDAT

; 317  : 	{

$LN320:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm1, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	mov	rdi, rcx
	mov	esi, 1
	mov	eax, 0
	mov	rbx, rdx
	movaps	xmm0, xmm5
	movaps	XMMWORD PTR [rsp+64], xmm8
	movss	xmm6, DWORD PTR [rdx+12]
	movss	xmm3, DWORD PTR [rdx+4]
	movss	xmm4, DWORD PTR [rdx+16]
	xorps	xmm8, xmm8
	xorps	xmm7, xmm7
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$159145[rbp-112], xmm0
	movss	DWORD PTR box$159145[rbp-96], xmm6
	movss	DWORD PTR box$159145[rbp-100], xmm7
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$159145[rbp-84], xmm7
	movss	DWORD PTR box$159145[rbp-108], xmm0
	movss	DWORD PTR box$159145[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$159145[rbp-104], xmm0
	movss	DWORD PTR box$159145[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$159145[rbp-96]
	movaps	xmm6, XMMWORD PTR box$159145[rbp-112]
	subps	xmm6, XMMWORD PTR [rcx+32]
	subps	xmm2, XMMWORD PTR [rcx+32]
	mulps	xmm6, XMMWORD PTR [rcx+48]
	mulps	xmm2, XMMWORD PTR [rcx+48]
	mov	ecx, 0
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96539[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	je	$LN1@stab@16
	npad	9
$LL312@stab@16:

; 323  : 			if (d>rRange)																	return;

	movss	xmm0, DWORD PTR d$96539[rbp-112]
	comiss	xmm0, DWORD PTR [rdi+80]
	ja	$LN1@stab@16

; 324  : 		} else {
; 325  : 			// use FPU
; 326  : 			Fvector		P;
; 327  : 			if (!_box_fpu((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,P))	return;
; 328  : 			if (P.distance_to_sqr(ray.pos)>rRange2)											return;
; 329  : 		}
; 330  : 		
; 331  : 		// 1st chield
; 332  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
	test	dl, sil
	je	SHORT $LN5@stab@16
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z ; ray_collider<1,1,1,1>::_prim
	jmp	SHORT $LN4@stab@16
$LN5@stab@16:

; 333  : 		else					_stab	(node->GetPos());

	call	?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,1,1>::_stab
$LN4@stab@16:

; 334  : 		
; 335  : 		// Early exit for "only first"
; 336  : 		if (bFirst && dest->r_count())														return;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 6
	test	ecx, ecx
	jne	$LN1@stab@16

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	test	BYTE PTR [rbx+32], sil
	jne	$LN318@stab@16

; 340  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	movss	DWORD PTR box$159145[rbp-100], xmm7
	movss	DWORD PTR box$159145[rbp-84], xmm7
	mov	eax, 0
	movss	xmm5, DWORD PTR [rbx]
	movss	xmm6, DWORD PTR [rbx+12]
	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [rbx+20]
	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm4, DWORD PTR [rbx+16]
	subss	xmm0, xmm6
	addss	xmm6, xmm5
	movss	DWORD PTR box$159145[rbp-112], xmm0
	movss	DWORD PTR box$159145[rbp-96], xmm6
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	addss	xmm4, xmm3
	movss	DWORD PTR box$159145[rbp-108], xmm0
	movss	DWORD PTR box$159145[rbp-92], xmm4
	movaps	xmm0, xmm1
	subss	xmm0, xmm2
	addss	xmm2, xmm1
	movss	DWORD PTR box$159145[rbp-104], xmm0
	movss	DWORD PTR box$159145[rbp-88], xmm2
	movaps	xmm2, XMMWORD PTR box$159145[rbp-96]
	movaps	xmm6, XMMWORD PTR box$159145[rbp-112]
	subps	xmm6, XMMWORD PTR [rdi+32]
	subps	xmm2, XMMWORD PTR [rdi+32]
	mulps	xmm6, XMMWORD PTR [rdi+48]
	mulps	xmm2, XMMWORD PTR [rdi+48]
	movaps	xmm5, xmm6
	maxps	xmm6, XMMWORD PTR ps_cst_minus_inf
	movaps	xmm0, xmm2
	minps	xmm0, XMMWORD PTR ps_cst_plus_inf
	minps	xmm5, XMMWORD PTR ps_cst_plus_inf
	maxps	xmm2, XMMWORD PTR ps_cst_minus_inf
	maxps	xmm5, xmm0
	minps	xmm6, xmm2
	movaps	xmm0, xmm5
	movaps	xmm1, xmm6
	shufps	xmm0, xmm5, 57				; 00000039H
	shufps	xmm1, xmm6, 57				; 00000039H
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	movhlps	xmm0, xmm5
	movhlps	xmm1, xmm6
	minss	xmm5, xmm0
	maxss	xmm6, xmm1
	comiss	xmm5, xmm8
	movss	DWORD PTR d$96539[rbp-112], xmm6
	cmovae	ecx, esi
	comiss	xmm5, xmm6
	cmovae	eax, esi
	test	ecx, eax
	jne	$LL312@stab@16

; 318  : 		// Actual ray/aabb test
; 319  : 		if (bUseSSE)			{
; 320  : 			// use SSE
; 321  : 			float		d;
; 322  : 			if (!_box_sse((Fvector&)node->mAABB.mCenter,(Fvector&)node->mAABB.mExtents,d))	return;

	jmp	SHORT $LN1@stab@16
$LN318@stab@16:

; 337  : 		
; 338  : 		// 2nd chield
; 339  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rdx, QWORD PTR [rbx+32]
	mov	rcx, rdi
	shr	rdx, 1
	call	?_prim@?$ray_collider@$00$00$00$00@@QEAAXK@Z ; ray_collider<1,1,1,1>::_prim
$LN1@stab@16:

; 341  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	movaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; ray_collider<1,1,1,1>::_stab
_TEXT	ENDS
PUBLIC	?ray_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1M@Z ; CDB::COLLIDER::ray_query
pdata	SEGMENT
$pdata$?ray_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1M@Z DD imagerel $LN602
	DD	imagerel $LN602+1117
	DD	imagerel $unwind$?ray_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1M@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ray_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1M@Z DD 0a1e01H
	DD	016741eH
	DD	015641eH
	DD	014341eH
	DD	0d014f21eH
	DD	05010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
_TEXT	SEGMENT
RC$96331 = 32
RC$96288 = 32
RC$96244 = 32
RC$96201 = 32
RC$96156 = 32
RC$96113 = 32
RC$96069 = 32
RC$96026 = 32
RC$95937 = 32
RC$95850 = 32
RC$95762 = 32
RC$95675 = 32
this$ = 160
m_def$ = 168
r_start$ = 176
r_dir$ = 184
r_range$ = 192
?ray_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1M@Z PROC ; CDB::COLLIDER::ray_query

; 345  : {

$LN602:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	push	r12
	push	r13
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H

; 346  : 	m_def->syncronize		();

	cmp	DWORD PTR [rdx+16], 0
	mov	rbx, r9
	mov	r12, r8
	mov	rsi, rdx
	mov	r13, rcx
	je	SHORT $LN33@ray_query
	mov	rcx, rdx
	call	QWORD PTR __imp_?Enter@xrCriticalSection@@QEAAXXZ
	mov	rcx, rsi
	call	QWORD PTR __imp_?Leave@xrCriticalSection@@QEAAXXZ
$LN33@ray_query:

; 347  : 
; 348  : 	// Get nodes
; 349  : 	const AABBNoLeafTree* T = (const AABBNoLeafTree*)m_def->tree->GetTree();
; 350  : 	const AABBNoLeafNode* N = T->GetNodes();

	mov	rax, QWORD PTR [rsi+8]

; 351  : 	r_clear					();

	lea	rcx, QWORD PTR [r13+16]
	mov	r8, QWORD PTR [rax+8]
	mov	rdi, QWORD PTR [r8+16]
	call	?clear_not_free@?$xr_vector@URESULT@CDB@@V?$xalloc@URESULT@CDB@@@@@@QEAAXXZ ; xr_vector<CDB::RESULT,xalloc<CDB::RESULT> >::clear_not_free

; 359  : 					ray_collider<true,true,true,true>		RC;
; 360  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	movss	xmm0, DWORD PTR [r12]
	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r11, QWORD PTR __imp_?ID@CPU@@3U_processor_info@@A
	mov	eax, DWORD PTR [r13]
	mov	QWORD PTR RC$95675[rbp-128], r13
	movss	xmm1, DWORD PTR [r12+4]
	movss	xmm2, DWORD PTR [rbx+4]
	movss	DWORD PTR RC$95675[rbp-96], xmm0
	test	BYTE PTR [r11+108], 4
	movss	xmm0, DWORD PTR [r12+8]
	movss	DWORD PTR RC$95675[rbp-92], xmm1
	movss	DWORD PTR RC$95675[rbp-64], xmm4
	movss	DWORD PTR RC$95675[rbp-88], xmm0
	movss	DWORD PTR RC$95675[rbp-60], xmm2
	movaps	xmm0, xmm3
	divss	xmm0, xmm4
	movss	DWORD PTR RC$95675[rbp-80], xmm0
	je	$LN30@ray_query
	movss	xmm0, DWORD PTR [rbx+8]
	movaps	xmm1, xmm3

; 361  : 					RC._stab(N);

	mov	rdx, rdi
	movss	DWORD PTR RC$95675[rbp-56], xmm0
	lea	rcx, QWORD PTR RC$95675[rbp-128]
	divss	xmm1, xmm2
	divss	xmm3, xmm0
	movss	xmm0, DWORD PTR r_range$[rbp-128]
	movss	DWORD PTR RC$95675[rbp-76], xmm1
	movss	DWORD PTR RC$95675[rbp-48], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR RC$95675[rbp-72], xmm3
	movss	DWORD PTR RC$95675[rbp-44], xmm0
	test	al, 1
	je	SHORT $LN29@ray_query

; 352  : 	
; 353  : 	if (CPU::ID.feature&_CPU_FEATURE_SSE)	{
; 354  : 		// SSE
; 355  : 		// Binary dispatcher
; 356  : 		if (ray_mode&OPT_CULL)		{
; 357  : 			if (ray_mode&OPT_ONLYFIRST)		{

	test	al, 2
	je	SHORT $LN28@ray_query

; 358  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 359  : 					ray_collider<true,true,true,true>		RC;
; 360  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$95675[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$95675[rbp-112], rax
	je	SHORT $LN27@ray_query

; 361  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,1,1>::_stab

; 362  : 				} else {

	jmp	$LN1@ray_query
$LN27@ray_query:

; 363  : 					ray_collider<true,true,true,false>		RC;
; 364  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);
; 365  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,1,0>::_stab

; 366  : 				}
; 367  : 			} else {

	jmp	$LN1@ray_query
$LN28@ray_query:

; 368  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 369  : 					ray_collider<true,true,false,true>		RC;
; 370  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$95762[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$95762[rbp-112], rax
	je	SHORT $LN24@ray_query

; 371  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,0,1>::_stab

; 372  : 				} else {

	jmp	$LN1@ray_query
$LN24@ray_query:

; 373  : 					ray_collider<true,true,false,false>		RC;
; 374  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);
; 375  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,1,0,0>::_stab

; 376  : 				}
; 377  : 			}
; 378  : 		} else {

	jmp	$LN1@ray_query
$LN29@ray_query:

; 379  : 			if (ray_mode&OPT_ONLYFIRST)		{

	test	al, 2
	je	SHORT $LN21@ray_query

; 380  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 381  : 					ray_collider<true,false,true,true>		RC;
; 382  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$95850[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$95850[rbp-112], rax
	je	SHORT $LN20@ray_query

; 383  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,1,1>::_stab

; 384  : 				} else {

	jmp	$LN1@ray_query
$LN20@ray_query:

; 385  : 					ray_collider<true,false,true,false>		RC;
; 386  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);
; 387  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,1,0>::_stab

; 388  : 				}
; 389  : 			} else {

	jmp	$LN1@ray_query
$LN21@ray_query:

; 390  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 391  : 					ray_collider<true,false,false,true>		RC;
; 392  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$95937[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$95937[rbp-112], rax
	je	SHORT $LN17@ray_query

; 393  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,0,1>::_stab

; 394  : 				} else {

	jmp	$LN1@ray_query
$LN17@ray_query:

; 395  : 					ray_collider<true,false,false,false>	RC;
; 396  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);
; 397  : 					RC._stab(N);

	call	?_stab@?$ray_collider@$00$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<1,0,0,0>::_stab

; 398  : 				}
; 399  : 			}
; 400  : 		}
; 401  : 	} else {

	jmp	$LN1@ray_query
$LN30@ray_query:

; 407  : 					ray_collider<false,true,true,true>		RC;
; 408  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	movss	xmm1, DWORD PTR [rbx+8]
	movaps	xmm0, xmm3
	movss	DWORD PTR RC$96026[rbp-56], xmm1
	divss	xmm0, xmm2
	movss	xmm2, DWORD PTR __mask@@AbsFloat@
	divss	xmm3, xmm1
	andps	xmm4, xmm2
	xorps	xmm1, xmm1
	movss	DWORD PTR RC$96026[rbp-76], xmm0
	movss	xmm0, DWORD PTR r_range$[rbp-128]
	movss	DWORD PTR RC$96026[rbp-48], xmm0
	mulss	xmm0, xmm0
	movss	DWORD PTR RC$96026[rbp-72], xmm3
	movss	xmm3, DWORD PTR __real@34000000
	movss	DWORD PTR RC$96026[rbp-44], xmm0
	test	al, 1
	je	$LN14@ray_query

; 402  : 		// FPU
; 403  : 		// Binary dispatcher
; 404  : 		if (ray_mode&OPT_CULL)		{
; 405  : 			if (ray_mode&OPT_ONLYFIRST)		{

	test	al, 2
	je	$LN13@ray_query

; 406  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 407  : 					ray_collider<false,true,true,true>		RC;
; 408  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$96026[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$96026[rbp-112], rax
	je	SHORT $LN12@ray_query
	comiss	xmm4, xmm3
	ja	SHORT $LN326@ray_query
	movss	DWORD PTR RC$96026[rbp-80], xmm1
$LN326@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN324@ray_query
	movss	DWORD PTR RC$96026[rbp-76], xmm1
$LN324@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN322@ray_query
	movss	DWORD PTR RC$96026[rbp-72], xmm1
$LN322@ray_query:

; 409  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96026[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$00$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,1,1>::_stab

; 410  : 				} else {

	jmp	$LN1@ray_query
$LN12@ray_query:

; 411  : 					ray_collider<false,true,true,false>		RC;
; 412  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	comiss	xmm4, xmm3
	ja	SHORT $LN361@ray_query
	movss	DWORD PTR RC$96069[rbp-80], xmm1
$LN361@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN359@ray_query
	movss	DWORD PTR RC$96069[rbp-76], xmm1
$LN359@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN357@ray_query
	movss	DWORD PTR RC$96069[rbp-72], xmm1
$LN357@ray_query:

; 413  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96069[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$00$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,1,0>::_stab

; 414  : 				}
; 415  : 			} else {

	jmp	$LN1@ray_query
$LN13@ray_query:

; 416  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 417  : 					ray_collider<false,true,false,true>		RC;
; 418  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$96113[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$96113[rbp-112], rax
	je	SHORT $LN9@ray_query
	comiss	xmm4, xmm3
	ja	SHORT $LN396@ray_query
	movss	DWORD PTR RC$96113[rbp-80], xmm1
$LN396@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN394@ray_query
	movss	DWORD PTR RC$96113[rbp-76], xmm1
$LN394@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN392@ray_query
	movss	DWORD PTR RC$96113[rbp-72], xmm1
$LN392@ray_query:

; 419  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96113[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$00$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,0,1>::_stab

; 420  : 				} else {

	jmp	$LN1@ray_query
$LN9@ray_query:

; 421  : 					ray_collider<false,true,false,false>	RC;
; 422  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	comiss	xmm4, xmm3
	ja	SHORT $LN431@ray_query
	movss	DWORD PTR RC$96156[rbp-80], xmm1
$LN431@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN429@ray_query
	movss	DWORD PTR RC$96156[rbp-76], xmm1
$LN429@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN427@ray_query
	movss	DWORD PTR RC$96156[rbp-72], xmm1
$LN427@ray_query:

; 423  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96156[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$00$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,1,0,0>::_stab

; 424  : 				}
; 425  : 			}
; 426  : 		} else {

	jmp	$LN1@ray_query
$LN14@ray_query:

; 427  : 			if (ray_mode&OPT_ONLYFIRST)		{

	test	al, 2
	je	$LN6@ray_query

; 428  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 429  : 					ray_collider<false,false,true,true>		RC;
; 430  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$96201[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$96201[rbp-112], rax
	je	SHORT $LN5@ray_query
	comiss	xmm4, xmm3
	ja	SHORT $LN466@ray_query
	movss	DWORD PTR RC$96201[rbp-80], xmm1
$LN466@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN464@ray_query
	movss	DWORD PTR RC$96201[rbp-76], xmm1
$LN464@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN462@ray_query
	movss	DWORD PTR RC$96201[rbp-72], xmm1
$LN462@ray_query:

; 431  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96201[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$0A@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,1,1>::_stab

; 432  : 				} else {

	jmp	$LN1@ray_query
$LN5@ray_query:

; 433  : 					ray_collider<false,false,true,false>	RC;
; 434  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	comiss	xmm4, xmm3
	ja	SHORT $LN501@ray_query
	movss	DWORD PTR RC$96244[rbp-80], xmm1
$LN501@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN499@ray_query
	movss	DWORD PTR RC$96244[rbp-76], xmm1
$LN499@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN497@ray_query
	movss	DWORD PTR RC$96244[rbp-72], xmm1
$LN497@ray_query:

; 435  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96244[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$0A@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,1,0>::_stab

; 436  : 				}
; 437  : 			} else {

	jmp	$LN1@ray_query
$LN6@ray_query:

; 438  : 				if (ray_mode&OPT_ONLYNEAREST)		{

	test	al, 4

; 439  : 					ray_collider<false,false,false,true>	RC;
; 440  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR RC$96288[rbp-120], rax
	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR RC$96288[rbp-112], rax
	je	SHORT $LN2@ray_query
	comiss	xmm4, xmm3
	ja	SHORT $LN536@ray_query
	movss	DWORD PTR RC$96288[rbp-80], xmm1
$LN536@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN534@ray_query
	movss	DWORD PTR RC$96288[rbp-76], xmm1
$LN534@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN532@ray_query
	movss	DWORD PTR RC$96288[rbp-72], xmm1
$LN532@ray_query:

; 441  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96288[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$0A@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,0,1>::_stab

; 442  : 				} else {

	jmp	SHORT $LN1@ray_query
$LN2@ray_query:

; 443  : 					ray_collider<false,false,false,false>	RC;
; 444  : 					RC._init(this,m_def->verts,m_def->tris,r_start,r_dir,r_range);

	comiss	xmm4, xmm3
	ja	SHORT $LN571@ray_query
	movss	DWORD PTR RC$96331[rbp-80], xmm1
$LN571@ray_query:
	movss	xmm0, DWORD PTR [rbx+4]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN569@ray_query
	movss	DWORD PTR RC$96331[rbp-76], xmm1
$LN569@ray_query:
	movss	xmm0, DWORD PTR [rbx+8]
	andps	xmm0, xmm2
	comiss	xmm0, xmm3
	ja	SHORT $LN567@ray_query
	movss	DWORD PTR RC$96331[rbp-72], xmm1
$LN567@ray_query:

; 445  : 					RC._stab(N);

	lea	rcx, QWORD PTR RC$96331[rbp-128]
	mov	rdx, rdi
	call	?_stab@?$ray_collider@$0A@$0A@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; ray_collider<0,0,0,0>::_stab
$LN1@ray_query:

; 446  : 				}
; 447  : 			}
; 448  : 		}
; 449  : 	}
; 450  : }

	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+40]
	mov	rdi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?ray_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1M@Z ENDP ; CDB::COLLIDER::ray_query
EXTRN	logf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eflt_plus_inf@@YAXXZ DD imagerel ??__Eflt_plus_inf@@YAXXZ
	DD	imagerel ??__Eflt_plus_inf@@YAXXZ+32
	DD	imagerel $unwind$??__Eflt_plus_inf@@YAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eflt_plus_inf@@YAXXZ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??__Eflt_plus_inf@@YAXXZ
text$yc	SEGMENT
??__Eflt_plus_inf@@YAXXZ PROC				; `dynamic initializer for 'flt_plus_inf'', COMDAT

; 122  : static const float flt_plus_inf = -logf(0);	// let's keep C and C++ compilers happy.

	sub	rsp, 40					; 00000028H
	xorps	xmm0, xmm0
	call	logf
	xorps	xmm0, DWORD PTR __mask@@NegFloat@
	movss	DWORD PTR flt_plus_inf, xmm0
	add	rsp, 40					; 00000028H
	ret	0
??__Eflt_plus_inf@@YAXXZ ENDP				; `dynamic initializer for 'flt_plus_inf''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__Eps_cst_plus_inf@@YAXXZ
text$yc	SEGMENT
??__Eps_cst_plus_inf@@YAXXZ PROC			; `dynamic initializer for 'ps_cst_plus_inf'', COMDAT

; 124  : 	ps_cst_plus_inf	[4]	=	{  flt_plus_inf,  flt_plus_inf,  flt_plus_inf,  flt_plus_inf },

	movss	xmm0, DWORD PTR flt_plus_inf
	movss	DWORD PTR ps_cst_plus_inf, xmm0
	movss	DWORD PTR ps_cst_plus_inf+4, xmm0
	movss	DWORD PTR ps_cst_plus_inf+8, xmm0
	movss	DWORD PTR ps_cst_plus_inf+12, xmm0
	ret	0
??__Eps_cst_plus_inf@@YAXXZ ENDP			; `dynamic initializer for 'ps_cst_plus_inf''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__Eps_cst_minus_inf@@YAXXZ
text$yc	SEGMENT
??__Eps_cst_minus_inf@@YAXXZ PROC			; `dynamic initializer for 'ps_cst_minus_inf'', COMDAT

; 125  : 	ps_cst_minus_inf[4]	=	{ -flt_plus_inf, -flt_plus_inf, -flt_plus_inf, -flt_plus_inf };

	movss	xmm0, DWORD PTR flt_plus_inf
	xorps	xmm0, DWORD PTR __mask@@NegFloat@
	movss	DWORD PTR ps_cst_minus_inf, xmm0
	movss	DWORD PTR ps_cst_minus_inf+4, xmm0
	movss	DWORD PTR ps_cst_minus_inf+8, xmm0
	movss	DWORD PTR ps_cst_minus_inf+12, xmm0
	ret	0
??__Eps_cst_minus_inf@@YAXXZ ENDP			; `dynamic initializer for 'ps_cst_minus_inf''
ps_cst_minus_inf DD 04H DUP (?)
ps_cst_plus_inf DD 04H DUP (?)
flt_plus_inf DD	01H DUP (?)
CRT$XCU	SEGMENT
flt_plus_inf$initializer$ DQ FLAT:??__Eflt_plus_inf@@YAXXZ
ps_cst_plus_inf$initializer$ DQ FLAT:??__Eps_cst_plus_inf@@YAXXZ
ps_cst_minus_inf$initializer$ DQ FLAT:??__Eps_cst_minus_inf@@YAXXZ
CRT$XCU	ENDS
END
